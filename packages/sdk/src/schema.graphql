schema {
  query: Query
  mutation: Mutation
}

input AirbyteConfigurationInput {
  """
  Linear export API key.
  """
  apiKey: String!
}

"""
An API key. Grants access to the user's resources.
"""
type ApiKey implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The label of the API key.
  """
  label: String!
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
}

type ApiKeyConnection {
  edges: [ApiKeyEdge!]!
  nodes: [ApiKey!]!
  pageInfo: PageInfo!
}

input ApiKeyCreateInput {
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String
  """
  The API key value.
  """
  key: String!
  """
  The label for the API key.
  """
  label: String!
}

type ApiKeyEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: ApiKey!
}

type ApiKeyPayload {
  """
  The API key that was created.
  """
  apiKey: ApiKey!
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

"""
Public information of the OAuth application.
"""
type Application {
  """
  OAuth application's client ID.
  """
  clientId: String!
  """
  Information about the application.
  """
  description: String
  """
  Name of the developer.
  """
  developer: String!
  """
  Url of the developer (homepage or docs).
  """
  developerUrl: String!
  """
  OAuth application's ID.
  """
  id: String!
  """
  Image of the application.
  """
  imageUrl: String
  """
  Application name.
  """
  name: String!
}

type ArchivePayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

"""
Contains requested archived model objects.
"""
type ArchiveResponse {
  """
  A JSON serialized collection of model objects loaded from the archive
  """
  archive: String!
  """
  The version of the remote database. Incremented by 1 for each migration run on the database.
  """
  databaseVersion: Float!
  """
  Whether the dependencies for the model objects are included in the archive.
  """
  includesDependencies: Boolean!
  """
  The total number of entities in the archive.
  """
  totalCount: Float!
}

"""
Issue attachment (e.g. support ticket, pull request).
"""
type Attachment implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The creator of the attachment.
  """
  creator: User
  """
  Indicates if attachments for the same source application should be grouped in the Linear UI.
  """
  groupBySource: Boolean!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The issue this attachment belongs to.
  """
  issue: Issue!
  """
  Custom metadata related to the attachment.
  """
  metadata: JSONObject!
  """
  Information about the source which created the attachment.
  """
  source: JSONObject
  """
  An accessor helper to source.type, defines the source type of the attachment.
  """
  sourceType: String
  """
  Content for the subtitle line in the Linear attachment widget.
  """
  subtitle: String
  """
  Content for the title line in the Linear attachment widget.
  """
  title: String!
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
  """
  Location of the attachment which is also used as an identifier.
  """
  url: String!
}

"""
Attachment collection filtering options.
"""
input AttachmentCollectionFilter {
  """
  Compound filters, all of which need to be matched by the attachment.
  """
  and: [AttachmentCollectionFilter!]
  """
  Comparator for the created at date.
  """
  createdAt: DateComparator
  """
  Filters that the attachments creator must satisfy.
  """
  creator: NullableUserFilter
  """
  Filters that needs to be matched by all attachments.
  """
  every: AttachmentFilter
  """
  Comparator for the identifier.
  """
  id: IDComparator
  """
  Comparator for the collection length.
  """
  length: NumberComparator
  """
  Compound filters, one of which need to be matched by the attachment.
  """
  or: [AttachmentCollectionFilter!]
  """
  Filters that needs to be matched by some attachments.
  """
  some: AttachmentFilter
  """
  Comparator for the source type.
  """
  sourceType: SourceTypeComparator
  """
  Comparator for the subtitle.
  """
  subtitle: NullableStringComparator
  """
  Comparator for the title.
  """
  title: StringComparator
  """
  Comparator for the updated at date.
  """
  updatedAt: DateComparator
  """
  Comparator for the url.
  """
  url: StringComparator
}

type AttachmentConnection {
  edges: [AttachmentEdge!]!
  nodes: [Attachment!]!
  pageInfo: PageInfo!
}

input AttachmentCreateInput {
  """
  Create a linked comment with markdown body.
  """
  commentBody: String
  """
  Create a linked comment with Prosemirror body. Please use `commentBody` instead
  """
  commentBodyData: JSONObject
  """
  Create attachment as a user with the provided name. This option is only available to OAuth applications creating attachments in `actor=application` mode.
  """
  createAsUser: String
  """
  Indicates if attachments for the same source application should be grouped in the Linear UI.
  """
  groupBySource: Boolean
  """
  An icon url to display with the attachment. Should be of jpg or png format. Maximum of 1MB in size. Dimensions should be 20x20px for optimal display quality.
  """
  iconUrl: String
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String
  """
  The issue to associate the attachment with.
  """
  issueId: String!
  """
  Attachment metadata object with string and number values.
  """
  metadata: JSONObject
  """
  The attachment subtitle.
  """
  subtitle: String
  """
  The attachment title.
  """
  title: String!
  """
  Attachment location which is also used as an unique identifier for the attachment. If another attachment is created with the same `url` value, existing record is updated instead.
  """
  url: String!
}

type AttachmentEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: Attachment!
}

"""
Attachment filtering options.
"""
input AttachmentFilter {
  """
  Compound filters, all of which need to be matched by the attachment.
  """
  and: [AttachmentFilter!]
  """
  Comparator for the created at date.
  """
  createdAt: DateComparator
  """
  Filters that the attachments creator must satisfy.
  """
  creator: NullableUserFilter
  """
  Comparator for the identifier.
  """
  id: IDComparator
  """
  Compound filters, one of which need to be matched by the attachment.
  """
  or: [AttachmentFilter!]
  """
  Comparator for the source type.
  """
  sourceType: SourceTypeComparator
  """
  Comparator for the subtitle.
  """
  subtitle: NullableStringComparator
  """
  Comparator for the title.
  """
  title: StringComparator
  """
  Comparator for the updated at date.
  """
  updatedAt: DateComparator
  """
  Comparator for the url.
  """
  url: StringComparator
}

type AttachmentPayload {
  """
  The issue attachment that was created.
  """
  attachment: Attachment!
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

input AttachmentUpdateInput {
  """
  An icon url to display with the attachment. Should be of jpg or png format. Maximum of 1MB in size. Dimensions should be 20x20px for optimal display quality.
  """
  iconUrl: String
  """
  Attachment metadata object with string and number values.
  """
  metadata: JSONObject
  """
  The attachment subtitle.
  """
  subtitle: String
  """
  The attachment title.
  """
  title: String!
}

"""
Workspace audit log entry object.
"""
type AuditEntry implements Node {
  """
  The user that caused the audit entry to be created.
  """
  actor: User
  """
  The ID of the user that caused the audit entry to be created.
  """
  actorId: String
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  Country code of request resulting to audit entry.
  """
  countryCode: String
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  IP from actor when entry was recorded.
  """
  ip: String
  """
  Additional metadata related to the audit entry.
  """
  metadata: JSONObject
  """
  The organization the audit log belongs to.
  """
  organization: Organization
  """
  Additional information related to the request which performed the action.
  """
  requestInformation: JSONObject
  type: String!
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
}

type AuditEntryConnection {
  edges: [AuditEntryEdge!]!
  nodes: [AuditEntry!]!
  pageInfo: PageInfo!
}

type AuditEntryEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: AuditEntry!
}

"""
Audit entry filtering options.
"""
input AuditEntryFilter {
  """
  Filters that the audit entry actor must satisfy.
  """
  actor: NullableUserFilter
  """
  Comparator for the country code.
  """
  countryCode: StringComparator
  """
  Comparator for the created at date.
  """
  createdAt: DateComparator
  """
  Comparator for the identifier.
  """
  id: IDComparator
  """
  Comparator for the IP address.
  """
  ip: StringComparator
  """
  Comparator for the type.
  """
  type: StringComparator
  """
  Comparator for the updated at date.
  """
  updatedAt: DateComparator
}

type AuditEntryType {
  """
  Description of the audit entry type.
  """
  description: String!
  """
  The audit entry type.
  """
  type: String!
}

"""
[INTERNAL] An OAuth userId/createdDate tuple
"""
type AuthMembership {
  """
  The date of the authorization
  """
  createdAt: DateTime!
  """
  The authorizing userId
  """
  userId: String!
}

type AuthResolverResponse {
  """
  Should the signup flow allow access for the domain.
  """
  allowDomainAccess: Boolean
  """
  Organizations this account has access to, but is not yet a member.
  """
  availableOrganizations: [Organization!]
  """
  Email for the authenticated account.
  """
  email: String
  """
  User account ID.
  """
  id: String!
  """
  ID of the organization last accessed by the user.
  """
  lastUsedOrganizationId: String
  """
  JWT token for authentication of the account.
  """
  token: String
  """
  Users belonging to this account.
  """
  users: [User!]!
}

"""
[INTERNAL] Public information of the OAuth application, plus the authorized scopes for a given user.
"""
type AuthorizedApplication {
  """
  OAuth application's ID.
  """
  appId: String!
  """
  OAuth application's client ID.
  """
  clientId: String!
  """
  Image of the application.
  """
  imageUrl: String
  """
  Application name.
  """
  name: String!
  """
  Scopes that are authorized for this application for a given user.
  """
  scope: [String!]!
  """
  Whether or not webhooks are enabled for the application.
  """
  webhooksEnabled: Boolean!
}

"""
Comparator for booleans.
"""
input BooleanComparator {
  """
  Equals constraint.
  """
  eq: Boolean
  """
  Not equals constraint.
  """
  neq: Boolean
}

"""
A comment associated with an issue.
"""
type Comment implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The comment content in markdown format.
  """
  body: String!
  """
  The comment content as a Prosemirror document.
  """
  bodyData: String!
  """
  The children of the comment.
  """
  children(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned comments.
    """
    filter: CommentFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): CommentConnection!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The time user edited the comment.
  """
  editedAt: DateTime
  """
  [ALPHA] The external user who wrote the comment.
  """
  externalUser: ExternalUser
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The issue that the comment is associated with.
  """
  issue: Issue!
  """
  The parent comment under which the current comment is nested.
  """
  parent: Comment
  """
  Emoji reaction summary, grouped by emoji type
  """
  reactionData: JSONObject!
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
  """
  Comment's URL.
  """
  url: String!
  """
  The user who wrote the comment.
  """
  user: User
}

"""
Comment filtering options.
"""
input CommentCollectionFilter {
  """
  Compound filters, all of which need to be matched by the comment.
  """
  and: [CommentCollectionFilter!]
  """
  Comparator for the comments body.
  """
  body: StringComparator
  """
  Comparator for the created at date.
  """
  createdAt: DateComparator
  """
  Filters that needs to be matched by all comments.
  """
  every: CommentFilter
  """
  Comparator for the identifier.
  """
  id: IDComparator
  """
  Filters that the comments issue must satisfy.
  """
  issue: IssueFilter
  """
  Comparator for the collection length.
  """
  length: NumberComparator
  """
  Compound filters, one of which need to be matched by the comment.
  """
  or: [CommentCollectionFilter!]
  """
  Filters that needs to be matched by some comments.
  """
  some: CommentFilter
  """
  Comparator for the updated at date.
  """
  updatedAt: DateComparator
  """
  Filters that the comments creator must satisfy.
  """
  user: UserFilter
}

type CommentConnection {
  edges: [CommentEdge!]!
  nodes: [Comment!]!
  pageInfo: PageInfo!
}

input CommentCreateInput {
  """
  The comment content in markdown format.
  """
  body: String
  """
  The comment content as a Prosemirror document.
  """
  bodyData: JSON
  """
  Create comment as a user with the provided name. This option is only available to OAuth applications creating comments in `actor=application` mode.
  """
  createAsUser: String
  """
  The date when the comment was created (e.g. if importing from another system). Must be a date in the past. If none is provided, the backend will generate the time as now.
  """
  createdAt: DateTime
  """
  Provide an external user avatar URL. Can only be used in conjunction with the `createAsUser` options. This option is only available to OAuth applications creating comments in `actor=application` mode.
  """
  displayIconUrl: String
  """
  Flag to prevent auto subscription to the issue the comment is created on.
  """
  doNotSubscribeToIssue: Boolean
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String
  """
  The issue to associate the comment with.
  """
  issueId: String!
  """
  The parent comment under which to nest a current comment.
  """
  parentId: String
}

type CommentEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: Comment!
}

"""
Comment filtering options.
"""
input CommentFilter {
  """
  Compound filters, all of which need to be matched by the comment.
  """
  and: [CommentFilter!]
  """
  Comparator for the comments body.
  """
  body: StringComparator
  """
  Comparator for the created at date.
  """
  createdAt: DateComparator
  """
  Comparator for the identifier.
  """
  id: IDComparator
  """
  Filters that the comments issue must satisfy.
  """
  issue: IssueFilter
  """
  Compound filters, one of which need to be matched by the comment.
  """
  or: [CommentFilter!]
  """
  Comparator for the updated at date.
  """
  updatedAt: DateComparator
  """
  Filters that the comments creator must satisfy.
  """
  user: UserFilter
}

type CommentPayload {
  """
  The comment that was created or updated.
  """
  comment: Comment!
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

input CommentUpdateInput {
  """
  The comment content.
  """
  body: String
  """
  The comment content as a Prosemirror document.
  """
  bodyData: JSON
}

"""
A company related to issue's origin.
"""
type Company implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  Custom company properties.
  """
  companyProperties: JSONObject!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The user who added the company.
  """
  creator: User!
  """
  Company ID in an external system.
  """
  externalId: String!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  Company logo URL.
  """
  logoUrl: String
  """
  Company name.
  """
  name: String!
  """
  The organization of the customer.
  """
  organization: Organization!
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
  """
  Company website URL.
  """
  websiteUrl: String
}

type CompanyConnection {
  edges: [CompanyEdge!]!
  nodes: [Company!]!
  pageInfo: PageInfo!
}

type CompanyEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: Company!
}

input ContactCreateInput {
  """
  User's browser information.
  """
  browser: String
  """
  User's Linear client information.
  """
  clientVersion: String
  """
  User's device information.
  """
  device: String
  """
  How disappointed the user would be if they could no longer use Linear.
  """
  disappointmentRating: Int
  """
  The message the user sent.
  """
  message: String!
  """
  User's operating system.
  """
  operatingSystem: String
  """
  The type of support contact.
  """
  type: String!
}

type ContactPayload {
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

"""
[INTERNAL] Input for sending a message to the Linear Sales team
"""
input ContactSalesCreateInput {
  """
  Work email of the person requesting information.
  """
  email: String!
  """
  The message the user sent.
  """
  message: String
  """
  Name of the person requesting information.
  """
  name: String!
}

"""
[Internal] Comparator for content.
"""
input ContentComparator {
  """
  [Internal] Contains constraint.
  """
  contains: String
  """
  [Internal] Not-contains constraint.
  """
  notContains: String
}

type CreateCsvExportReportPayload {
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

type CreateOrJoinOrganizationResponse {
  organization: Organization!
  user: User!
}

input CreateOrganizationInput {
  """
  Whether the organization should allow email domain access.
  """
  domainAccess: Boolean
  """
  The name of the organization.
  """
  name: String!
  """
  The timezone of the organization, passed in by client.
  """
  timezone: String
  """
  The URL key of the organization.
  """
  urlKey: String!
  """
  JSON serialized UTM parameters associated with the creation of the workspace.
  """
  utm: String
}

"""
A custom view that has been saved by a user.
"""
type CustomView implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The color of the icon of the custom view.
  """
  color: String
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The user who created the custom view.
  """
  creator: User!
  """
  The description of the custom view.
  """
  description: String
  """
  The filter applied to issues in the custom view.
  """
  filterData: JSONObject!
  """
  The filters applied to issues in the custom view.
  """
  filters: JSONObject! @deprecated(reason: "Will be replaced by `filterData` in a future update")
  """
  The icon of the custom view.
  """
  icon: String
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The name of the custom view.
  """
  name: String!
  """
  The organization of the custom view.
  """
  organization: Organization!
  """
  [Deprecated] The user who owns the custom view.
  """
  owner: User!
  """
  [ALPHA] The filter applied to projects in the custom view.
  """
  projectFilterData: JSONObject
  """
  Whether the custom view is shared with everyone in the organization.
  """
  shared: Boolean!
  """
  The team associated with the custom view.
  """
  team: Team
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
}

type CustomViewConnection {
  edges: [CustomViewEdge!]!
  nodes: [CustomView!]!
  pageInfo: PageInfo!
}

input CustomViewCreateInput {
  """
  The color of the icon of the custom view.
  """
  color: String
  """
  The description of the custom view.
  """
  description: String
  """
  The filter applied to issues in the custom view.
  """
  filterData: JSONObject
  """
  The filters applied to issues in the custom view.
  """
  filters: JSONObject
  """
  The icon of the custom view.
  """
  icon: String
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String
  """
  The name of the custom view.
  """
  name: String!
  """
  [ALPHA] The project filter applied to issues in the custom view.
  """
  projectFilterData: JSONObject
  """
  Whether the custom view is shared with everyone in the organization.
  """
  shared: Boolean
  """
  The id of the team associated with the custom view.
  """
  teamId: String
}

type CustomViewEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: CustomView!
}

type CustomViewPayload {
  """
  The custom view that was created or updated.
  """
  customView: CustomView!
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

type CustomViewSuggestionPayload {
  """
  The suggested view description.
  """
  description: String
  """
  The suggested view icon.
  """
  icon: String
  """
  The suggested view name.
  """
  name: String
}

input CustomViewUpdateInput {
  """
  The color of the icon of the custom view.
  """
  color: String
  """
  The description of the custom view.
  """
  description: String
  """
  The filter applied to issues in the custom view.
  """
  filterData: JSONObject
  """
  The filters applied to issues in the custom view.
  """
  filters: JSONObject
  """
  The icon of the custom view.
  """
  icon: String
  """
  The name of the custom view.
  """
  name: String
  """
  [ALPHA] The project filter applied to issues in the custom view.
  """
  projectFilterData: JSONObject
  """
  Whether the custom view is shared with everyone in the organization.
  """
  shared: Boolean
  """
  The id of the team associated with the custom view.
  """
  teamId: String
}

"""
A set of issues to be resolved in a specified amount of time.
"""
type Cycle implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the cycle was automatically archived by the auto pruning process.
  """
  autoArchivedAt: DateTime
  """
  The completion time of the cycle. If null, the cycle hasn't been completed.
  """
  completedAt: DateTime
  """
  The number of completed issues in the cycle after each day.
  """
  completedIssueCountHistory: [Float!]!
  """
  The number of completed estimation points after each day.
  """
  completedScopeHistory: [Float!]!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The cycle's description.
  """
  description: String
  """
  The end time of the cycle.
  """
  endsAt: DateTime!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The number of in progress estimation points after each day.
  """
  inProgressScopeHistory: [Float!]!
  """
  The total number of issues in the cycle after each day.
  """
  issueCountHistory: [Float!]!
  """
  Issues associated with the cycle.
  """
  issues(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned issues.
    """
    filter: IssueFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueConnection!
  """
  The custom name of the cycle.
  """
  name: String
  """
  The number of the cycle.
  """
  number: Float!
  """
  The overall progress of the cycle. This is the (completed estimate points + 0.25 * in progress estimate points) / total estimate points.
  """
  progress: Float!
  """
  The total number of estimation points after each day.
  """
  scopeHistory: [Float!]!
  """
  The start time of the cycle.
  """
  startsAt: DateTime!
  """
  The team that the cycle is associated with.
  """
  team: Team!
  """
  Issues that weren't completed when the cycle was closed.
  """
  uncompletedIssuesUponClose(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned issues.
    """
    filter: IssueFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueConnection!
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
}

type CycleConnection {
  edges: [CycleEdge!]!
  nodes: [Cycle!]!
  pageInfo: PageInfo!
}

input CycleCreateInput {
  """
  The completion time of the cycle. If null, the cycle hasn't been completed.
  """
  completedAt: DateTime
  """
  The description of the cycle.
  """
  description: String
  """
  The end date of the cycle.
  """
  endsAt: DateTime!
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String
  """
  The custom name of the cycle.
  """
  name: String
  """
  The start date of the cycle.
  """
  startsAt: DateTime!
  """
  The team to associate the cycle with.
  """
  teamId: String!
}

type CycleEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: Cycle!
}

"""
Cycle filtering options.
"""
input CycleFilter {
  """
  Compound filters, all of which need to be matched by the cycle.
  """
  and: [CycleFilter!]
  """
  Comparator for the cycle completed at date.
  """
  completedAt: DateComparator
  """
  Comparator for the created at date.
  """
  createdAt: DateComparator
  """
  Comparator for the cycle ends at date.
  """
  endsAt: DateComparator
  """
  Comparator for the identifier.
  """
  id: IDComparator
  """
  Comparator for the filtering active cycle.
  """
  isActive: BooleanComparator
  """
  Comparator for the filtering future cycles.
  """
  isFuture: BooleanComparator
  """
  Comparator for the filtering next cycle.
  """
  isNext: BooleanComparator
  """
  Comparator for the filtering past cycles.
  """
  isPast: BooleanComparator
  """
  Comparator for the filtering previous cycle.
  """
  isPrevious: BooleanComparator
  """
  Filters that the cycles issues must satisfy.
  """
  issues: IssueCollectionFilter
  """
  Comparator for the cycle name.
  """
  name: StringComparator
  """
  Comparator for the cycle number.
  """
  number: NumberComparator
  """
  Compound filters, one of which need to be matched by the cycle.
  """
  or: [CycleFilter!]
  """
  Comparator for the cycle start date.
  """
  startsAt: DateComparator
  """
  Filters that the cycles team must satisfy.
  """
  team: TeamFilter
  """
  Comparator for the updated at date.
  """
  updatedAt: DateComparator
}

type CyclePayload {
  """
  The Cycle that was created or updated.
  """
  cycle: Cycle
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

input CycleUpdateInput {
  """
  The end date of the cycle.
  """
  completedAt: DateTime
  """
  The description of the cycle.
  """
  description: String
  """
  The end date of the cycle.
  """
  endsAt: DateTime
  """
  The custom name of the cycle.
  """
  name: String
  """
  The start date of the cycle.
  """
  startsAt: DateTime
}

"""
Comparator for dates.
"""
input DateComparator {
  """
  Equals constraint.
  """
  eq: DateTime
  """
  Greater-than constraint. Matches any values that are greater than the given value.
  """
  gt: DateTime
  """
  Greater-than-or-equal constraint. Matches any values that are greater than or equal to the given value.
  """
  gte: DateTime
  """
  In-array constraint.
  """
  in: [DateTime!]
  """
  Less-than constraint. Matches any values that are less than the given value.
  """
  lt: DateTime
  """
  Less-than-or-equal constraint. Matches any values that are less than or equal to the given value.
  """
  lte: DateTime
  """
  Not-equals constraint.
  """
  neq: DateTime
  """
  Not-in-array constraint.
  """
  nin: [DateTime!]
}

"""
Represents a date and time in ISO 8601 format. Accepts shortcuts like `2021` to represent midnight Fri Jan 01 2021. Also accepts ISO 8601 durations strings which are added to the current date to create the represented date (e.g '-P2W1D' represents the date that was two weeks and 1 day ago)
"""
scalar DateTime

"""
The day of the week.
"""
enum Day {
  Friday
  Monday
  Saturday
  Sunday
  Thursday
  Tuesday
  Wednesday
}

input DeleteOrganizationInput {
  """
  The deletion code to confirm operation.
  """
  deletionCode: String!
}

"""
A document for a project.
"""
type Document implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The color of the icon.
  """
  color: String
  """
  The document content in markdown format.
  """
  content: String
  """
  The document content as JSON.
  """
  contentData: JSONObject
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The user who created the document.
  """
  creator: User!
  """
  The icon of the document.
  """
  icon: String
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The project that the document is associated with.
  """
  project: Project!
  """
  The document's unique URL slug.
  """
  slugId: String!
  """
  The document title.
  """
  title: String!
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
  """
  The user who last updated the document.
  """
  updatedBy: User!
}

type DocumentConnection {
  edges: [DocumentEdge!]!
  nodes: [Document!]!
  pageInfo: PageInfo!
}

"""
A document content for a project.
"""
type DocumentContent implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The document content in markdown format.
  """
  content: String
  """
  The document content as JSON.
  """
  contentData: JSONObject
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The issue that the document is associated with.
  """
  issue: Issue
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
}

input DocumentCreateInput {
  """
  The color of the icon.
  """
  color: String
  """
  The document content as markdown.
  """
  content: String
  """
  The document content as a Prosemirror document.
  """
  contentData: JSONObject
  """
  The icon of the document.
  """
  icon: String
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String
  """
  Related project for the document.
  """
  projectId: String!
  """
  The title of the document.
  """
  title: String!
}

type DocumentEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: Document!
}

type DocumentPayload {
  """
  The document that was created or updated.
  """
  document: Document!
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

type DocumentSearchPayload {
  """
  Archived entities matching the search term along with all their dependencies.
  """
  archivePayload: ArchiveResponse!
  edges: [DocumentSearchResultEdge!]!
  nodes: [DocumentSearchResult!]!
  pageInfo: PageInfo!
  """
  Total number of results for query without filters applied.
  """
  totalCount: Float!
}

type DocumentSearchResult implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The color of the icon.
  """
  color: String
  """
  The document content in markdown format.
  """
  content: String
  """
  The document content as JSON.
  """
  contentData: JSONObject
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The user who created the document.
  """
  creator: User!
  """
  The icon of the document.
  """
  icon: String
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  Metadata related to search result
  """
  metadata: JSONObject!
  """
  The project that the document is associated with.
  """
  project: Project!
  """
  The document's unique URL slug.
  """
  slugId: String!
  """
  The document title.
  """
  title: String!
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
  """
  The user who last updated the document.
  """
  updatedBy: User!
}

type DocumentSearchResultConnection {
  edges: [DocumentSearchResultEdge!]!
  nodes: [DocumentSearchResult!]!
  pageInfo: PageInfo!
}

type DocumentSearchResultEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: DocumentSearchResult!
}

input DocumentUpdateInput {
  """
  The color of the icon.
  """
  color: String
  """
  The document content as markdown.
  """
  content: String
  """
  The document content as a Prosemirror document.
  """
  contentData: JSONObject
  """
  The icon of the document.
  """
  icon: String
  """
  Related project for the document.
  """
  projectId: String
  """
  The title of the document.
  """
  title: String
}

input EmailSubscribeInput {
  """
  [INTERNAL] Email to subscribe.
  """
  email: String!
}

type EmailSubscribePayload {
  """
  [INTERNAL] Whether the operation was successful.
  """
  success: Boolean!
}

input EmailUnsubscribeInput {
  """
  The user's email validation token.
  """
  token: String!
  """
  Email type to unsubscribed from.
  """
  type: String!
  """
  The identifier of the user.
  """
  userId: String!
}

type EmailUnsubscribePayload {
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

input EmailUserAccountAuthChallengeInput {
  """
  Auth code for the client initiating the sequence.
  """
  clientAuthCode: String
  """
  The email for which to generate the magic login code.
  """
  email: String!
  """
  Whether the login was requested from the desktop app.
  """
  isDesktop: Boolean
  """
  Signup code.
  """
  signupCode: String
}

type EmailUserAccountAuthChallengeResponse {
  """
  Supported challenge for this user account. Can be either verificationCode or password.
  """
  authType: String!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

"""
A custom emoji.
"""
type Emoji implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The user who created the emoji.
  """
  creator: User!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The emoji's name.
  """
  name: String!
  """
  The organization that the emoji belongs to.
  """
  organization: Organization!
  """
  The source of the emoji.
  """
  source: String!
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
  """
  The emoji image URL.
  """
  url: String!
}

type EmojiConnection {
  edges: [EmojiEdge!]!
  nodes: [Emoji!]!
  pageInfo: PageInfo!
}

input EmojiCreateInput {
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String
  """
  The name of the custom emoji.
  """
  name: String!
  """
  The URL for the emoji.
  """
  url: String!
}

type EmojiEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: Emoji!
}

type EmojiPayload {
  """
  The emoji that was created.
  """
  emoji: Emoji!
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

"""
A basic entity.
"""
interface Entity implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
}

"""
Comparator for estimates.
"""
input EstimateComparator {
  """
  Compound filters, one of which need to be matched by the estimate.
  """
  and: [NullableNumberComparator!]
  """
  Equals constraint.
  """
  eq: Float
  """
  Greater-than constraint. Matches any values that are greater than the given value.
  """
  gt: Float
  """
  Greater-than-or-equal constraint. Matches any values that are greater than or equal to the given value.
  """
  gte: Float
  """
  In-array constraint.
  """
  in: [Float!]
  """
  Less-than constraint. Matches any values that are less than the given value.
  """
  lt: Float
  """
  Less-than-or-equal constraint. Matches any values that are less than or equal to the given value.
  """
  lte: Float
  """
  Not-equals constraint.
  """
  neq: Float
  """
  Not-in-array constraint.
  """
  nin: [Float!]
  """
  Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values.
  """
  null: Boolean
  """
  Compound filters, all of which need to be matched by the estimate.
  """
  or: [NullableNumberComparator!]
}

input EventCreateInput {
  """
  The category of the event to create.
  """
  category: String!
  """
  Additional data of the event, encoded as JSON.
  """
  data: JSON
  """
  The subject of the event.
  """
  subject: String!
  """
  The target identifier of the event.
  """
  targetId: String
  """
  The value of the event.
  """
  value: Float
}

type EventPayload {
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

"""
[ALPHA] An external authenticated (e.g., through Slack) user which doesn't have a Linear account, but can create and update entities in Linear from the external system that authenticated them.
"""
type ExternalUser implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  An URL to the external user's avatar image.
  """
  avatarUrl: String
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The external user's display name. Unique within each organization. Can match the display name of an actual user.
  """
  displayName: String!
  """
  The external user's email address.
  """
  email: String
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The last time the external user was seen interacting with Linear.
  """
  lastSeen: DateTime
  """
  The external user's full name.
  """
  name: String!
  """
  Organization the external user belongs to.
  """
  organization: Organization!
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
}

type ExternalUserConnection {
  edges: [ExternalUserEdge!]!
  nodes: [ExternalUser!]!
  pageInfo: PageInfo!
}

type ExternalUserEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: ExternalUser!
}

"""
User favorites presented in the sidebar.
"""
type Favorite implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  Children of the favorite. Only applies to favorites of type folder.
  """
  children(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): FavoriteConnection!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The favorited custom view.
  """
  customView: CustomView
  """
  The favorited cycle.
  """
  cycle: Cycle
  """
  The favorited document.
  """
  document: Document
  """
  The name of the folder. Only applies to favorites of type folder.
  """
  folderName: String
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The favorited issue.
  """
  issue: Issue
  """
  The favorited label.
  """
  label: IssueLabel
  """
  The parent folder of the favorite.
  """
  parent: Favorite
  """
  The team of the favorited predefined view.
  """
  predefinedViewTeam: Team
  """
  The type of favorited predefined view.
  """
  predefinedViewType: String
  """
  The favorited project.
  """
  project: Project
  """
  The favorited team of the project.
  """
  projectTeam: Team
  """
  The favorited roadmap.
  """
  roadmap: Roadmap
  """
  The order of the item in the favorites list.
  """
  sortOrder: Float!
  """
  The type of the favorite.
  """
  type: String!
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
  """
  The owner of the favorite.
  """
  user: User!
}

type FavoriteConnection {
  edges: [FavoriteEdge!]!
  nodes: [Favorite!]!
  pageInfo: PageInfo!
}

input FavoriteCreateInput {
  """
  The identifier of the custom view to favorite.
  """
  customViewId: String
  """
  The identifier of the cycle to favorite.
  """
  cycleId: String
  """
  The identifier of the document to favorite.
  """
  documentId: String
  """
  The name of the favorite folder.
  """
  folderName: String
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  The identifier of the issue to favorite.
  """
  issueId: String
  """
  The identifier of the label to favorite.
  """
  labelId: String
  """
  The parent folder of the favorite.
  """
  parentId: String
  """
  The identifier of team for the predefined view to favorite.
  """
  predefinedViewTeamId: String
  """
  The type of the predefined view to favorite.
  """
  predefinedViewType: String
  """
  The identifier of the project to favorite.
  """
  projectId: String
  """
  The identifier of the project team to favorite.
  """
  projectTeamId: String
  """
  The identifier of the roadmap to favorite.
  """
  roadmapId: String
  """
  The position of the item in the favorites list.
  """
  sortOrder: Float
}

type FavoriteEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: Favorite!
}

type FavoritePayload {
  """
  The object that was added as a favorite.
  """
  favorite: Favorite!
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

input FavoriteUpdateInput {
  """
  The name of the favorite folder.
  """
  folderName: String
  """
  The identifier (in UUID v4 format) of the folder to move the favorite under.
  """
  parentId: String
  """
  The position of the item in the favorites list.
  """
  sortOrder: Float
}

"""
Object representing Figma preview information.
"""
type FigmaEmbed {
  """
  Date when the file was updated at the time of embedding.
  """
  lastModified: DateTime!
  """
  Figma file name.
  """
  name: String!
  """
  Node name.
  """
  nodeName: String
  """
  Figma screenshot URL.
  """
  url: String
}

type FigmaEmbedPayload {
  """
  Figma embed information.
  """
  figmaEmbed: FigmaEmbed
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

type FrontAttachmentPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

"""
Front specific settings.
"""
type FrontSettings {
  """
  Whether a ticket should be automatically reopened when its linked Linear issue is cancelled.
  """
  automateTicketReopeningOnCancellation: Boolean
  """
  Whether a ticket should be automatically reopened when a comment is posted on its linked Linear issue
  """
  automateTicketReopeningOnComment: Boolean
  """
  Whether a ticket should be automatically reopened when its linked Linear issue is completed.
  """
  automateTicketReopeningOnCompletion: Boolean
  """
  Whether an internal message should be added when someone comments on an issue.
  """
  sendNoteOnComment: Boolean
  """
  Whether an internal message should be added when a Linear issue changes status (for status types except completed or canceled).
  """
  sendNoteOnStatusChange: Boolean
}

input FrontSettingsInput {
  """
  Whether a ticket should be automatically reopened when its linked Linear issue is cancelled.
  """
  automateTicketReopeningOnCancellation: Boolean
  """
  Whether a ticket should be automatically reopened when a comment is posted on its linked Linear issue
  """
  automateTicketReopeningOnComment: Boolean
  """
  Whether a ticket should be automatically reopened when its linked Linear issue is completed.
  """
  automateTicketReopeningOnCompletion: Boolean
  """
  Whether an internal message should be added when someone comments on an issue.
  """
  sendNoteOnComment: Boolean
  """
  Whether an internal message should be added when a Linear issue changes status (for status types except completed or canceled).
  """
  sendNoteOnStatusChange: Boolean
}

type GitHubCommitIntegrationPayload {
  """
  The integration that was created or updated.
  """
  integration: Integration
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
  """
  The webhook secret to provide to GitHub.
  """
  webhookSecret: String!
}

"""
Metadata and settings for a GitHub integration.
"""
type GitHubSettings {
  """
  The avatar URL for the GitHub organization
  """
  orgAvatarUrl: String!
  """
  The GitHub organization's name
  """
  orgLogin: String!
}

input GitHubSettingsInput {
  """
  The avatar URL for the GitHub organization
  """
  orgAvatarUrl: String!
  """
  The GitHub organization's name
  """
  orgLogin: String!
}

"""
GitHub OAuth token, plus information about the organizations the user is a member of.
"""
type GithubOAuthTokenPayload {
  """
  A list of the GitHub organizations the user is a member of with attached repositories.
  """
  organizations: [GithubOrg!]
  """
  The OAuth token if the operation to fetch it was successful.
  """
  token: String
}

"""
Relevant information for the GitHub organization.
"""
type GithubOrg {
  """
  GitHub organization id.
  """
  id: String!
  """
  Whether or not this org is the user's personal repositories.
  """
  isPersonal: Boolean
  """
  The login for the GitHub organization.
  """
  login: String!
  """
  The name of the GitHub organization.
  """
  name: String!
  """
  Repositories that the organization owns.
  """
  repositories: [GithubRepo!]!
}

"""
Relevant information for the GitHub repository.
"""
type GithubRepo {
  """
  The id of the GitHub repository.
  """
  id: String!
  """
  The name of the GitHub repository.
  """
  name: String!
}

"""
Google Sheets specific settings.
"""
type GoogleSheetsSettings {
  sheetId: Float!
  spreadsheetId: String!
  spreadsheetUrl: String!
  updatedIssuesAt: DateTime!
}

input GoogleSheetsSettingsInput {
  sheetId: Float!
  spreadsheetId: String!
  spreadsheetUrl: String!
  updatedIssuesAt: DateTime!
}

input GoogleUserAccountAuthInput {
  """
  Code returned from Google's OAuth flow.
  """
  code: String!
  """
  The URI to redirect the user to.
  """
  redirectUri: String
  """
  Signup code.
  """
  signupCode: String
  """
  The identifiers of the teams to auto-join.
  """
  teamIdsToJoin: [String!]
  """
  The timezone of the user's browser.
  """
  timezone: String!
}

"""
Comparator for identifiers.
"""
input IDComparator {
  """
  Equals constraint.
  """
  eq: ID
  """
  In-array constraint.
  """
  in: [ID!]
  """
  Not-equals constraint.
  """
  neq: ID
  """
  Not-in-array constraint.
  """
  nin: [ID!]
}

type ImageUploadFromUrlPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
  """
  The URL containing the image.
  """
  url: String
}

"""
An integration with an external service.
"""
type Integration implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The user that added the integration.
  """
  creator: User!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The organization that the integration is associated with.
  """
  organization: Organization!
  """
  The integration's type.
  """
  service: String!
  """
  The team that the integration is associated with.
  """
  team: Team
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
}

type IntegrationConnection {
  edges: [IntegrationEdge!]!
  nodes: [Integration!]!
  pageInfo: PageInfo!
}

type IntegrationEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: Integration!
}

type IntegrationPayload {
  """
  The integration that was created or updated.
  """
  integration: Integration
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

input IntegrationRequestInput {
  """
  Email associated with the request.
  """
  email: String
  """
  Name of the requested integration.
  """
  name: String!
}

type IntegrationRequestPayload {
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

"""
The integration resource's settings
"""
type IntegrationSettings {
  front: FrontSettings
  gitHub: GitHubSettings
  googleSheets: GoogleSheetsSettings
  intercom: IntercomSettings
  jira: JiraSettings
  notion: NotionSettings
  sentry: SentrySettings
  slackOrgProjectUpdatesPost: SlackPostSettings
  slackPost: SlackPostSettings
  slackProjectPost: SlackPostSettings
  zendesk: ZendeskSettings
}

input IntegrationSettingsInput {
  front: FrontSettingsInput
  gitHub: GitHubSettingsInput
  googleSheets: GoogleSheetsSettingsInput
  intercom: IntercomSettingsInput
  jira: JiraSettingsInput
  notion: NotionSettingsInput
  sentry: SentrySettingsInput
  slackOrgProjectUpdatesPost: SlackPostSettingsInput
  slackPost: SlackPostSettingsInput
  slackProjectPost: SlackPostSettingsInput
  zendesk: ZendeskSettingsInput
}

"""
Join table between templates and integrations
"""
type IntegrationTemplate implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The integration that the template is associated with.
  """
  integration: Integration!
  """
  The template that the integration is associated with.
  """
  template: Template!
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
}

type IntegrationTemplateConnection {
  edges: [IntegrationTemplateEdge!]!
  nodes: [IntegrationTemplate!]!
  pageInfo: PageInfo!
}

input IntegrationTemplateCreateInput {
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String
  """
  The identifier of the integration.
  """
  integrationId: String!
  """
  The identifier of the template.
  """
  templateId: String!
}

type IntegrationTemplateEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: IntegrationTemplate!
}

type IntegrationTemplatePayload {
  """
  The IntegrationTemplate that was created or updated.
  """
  integrationTemplate: IntegrationTemplate!
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

"""
The configuration of all integrations for a project or a team.
"""
type IntegrationsSettings implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  Project which those settings apply to.
  """
  project: Project
  """
  Whether to send a Slack message when a new issue is added to triage.
  """
  slackIssueAddedToTriage: Boolean
  """
  Whether to send a Slack message when a new issue is created for the project or the team.
  """
  slackIssueCreated: Boolean
  """
  Whether to send a Slack message when a comment is created on any of the project or team's issues.
  """
  slackIssueNewComment: Boolean
  """
  Whether to send a Slack message when an SLA is breached
  """
  slackIssueSlaBreached: Boolean
  """
  Whether to send a Slack message when an SLA is at high risk
  """
  slackIssueSlaHighRisk: Boolean
  """
  Whether to send a Slack message when any of the project or team's issues has a change in status.
  """
  slackIssueStatusChangedAll: Boolean
  """
  Whether to send a Slack message when any of the project or team's issues change to completed or cancelled.
  """
  slackIssueStatusChangedDone: Boolean
  """
  Whether to send a Slack message when a project update is created.
  """
  slackProjectUpdateCreated: Boolean
  """
  Whether to send a new project update to team Slack channels.
  """
  slackProjectUpdateCreatedToTeam: Boolean
  """
  Whether to send a new project update to workspace Slack channel.
  """
  slackProjectUpdateCreatedToWorkspace: Boolean
  """
  Team which those settings apply to.
  """
  team: Team
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
}

type IntegrationsSettingsConnection {
  edges: [IntegrationsSettingsEdge!]!
  nodes: [IntegrationsSettings!]!
  pageInfo: PageInfo!
}

input IntegrationsSettingsCreateInput {
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String
  """
  The identifier of the project to create settings for.
  """
  projectId: String
  """
  Whether to send a Slack message when a new issue is added to triage.
  """
  slackIssueAddedToTriage: Boolean
  """
  Whether to send a Slack message when a new issue is created for the project or the team.
  """
  slackIssueCreated: Boolean
  """
  Whether to send a Slack message when a comment is created on any of the project or team's issues.
  """
  slackIssueNewComment: Boolean
  """
  Whether to receive notification when an SLA has breached on Slack.
  """
  slackIssueSlaBreached: Boolean
  """
  Whether to send a Slack message when an SLA is at high risk
  """
  slackIssueSlaHighRisk: Boolean
  """
  Whether to send a Slack message when any of the project or team's issues has a change in status.
  """
  slackIssueStatusChangedAll: Boolean
  """
  Whether to send a Slack message when any of the project or team's issues change to completed or cancelled.
  """
  slackIssueStatusChangedDone: Boolean
  """
  Whether to send a Slack message when a project update is created.
  """
  slackProjectUpdateCreated: Boolean
  """
  Whether to send a Slack message when a project update is created to team channels.
  """
  slackProjectUpdateCreatedToTeam: Boolean
  """
  Whether to send a Slack message when a project update is created to workspace channel.
  """
  slackProjectUpdateCreatedToWorkspace: Boolean
  """
  The identifier of the team to create settings for.
  """
  teamId: String
}

type IntegrationsSettingsEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: IntegrationsSettings!
}

type IntegrationsSettingsPayload {
  """
  The settings that were created or updated.
  """
  integrationsSettings: IntegrationsSettings!
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

input IntegrationsSettingsUpdateInput {
  """
  Whether to send a Slack message when a new issue is added to triage.
  """
  slackIssueAddedToTriage: Boolean
  """
  Whether to send a Slack message when a new issue is created for the project or the team.
  """
  slackIssueCreated: Boolean
  """
  Whether to send a Slack message when a comment is created on any of the project or team's issues.
  """
  slackIssueNewComment: Boolean
  """
  Whether to receive notification when an SLA has breached on Slack.
  """
  slackIssueSlaBreached: Boolean
  """
  Whether to send a Slack message when an SLA is at high risk
  """
  slackIssueSlaHighRisk: Boolean
  """
  Whether to send a Slack message when any of the project or team's issues has a change in status.
  """
  slackIssueStatusChangedAll: Boolean
  """
  Whether to send a Slack message when any of the project or team's issues change to completed or cancelled.
  """
  slackIssueStatusChangedDone: Boolean
  """
  Whether to send a Slack message when a project update is created.
  """
  slackProjectUpdateCreated: Boolean
  """
  Whether to send a Slack message when a project update is created to team channels.
  """
  slackProjectUpdateCreatedToTeam: Boolean
  """
  Whether to send a Slack message when a project update is created to workspace channel.
  """
  slackProjectUpdateCreatedToWorkspace: Boolean
}

"""
Intercom specific settings.
"""
type IntercomSettings {
  """
  Whether a ticket should be automatically reopened when its linked Linear issue is cancelled.
  """
  automateTicketReopeningOnCancellation: Boolean
  """
  Whether a ticket should be automatically reopened when a comment is posted on its linked Linear issue
  """
  automateTicketReopeningOnComment: Boolean
  """
  Whether a ticket should be automatically reopened when its linked Linear issue is completed.
  """
  automateTicketReopeningOnCompletion: Boolean
  """
  Whether an internal message should be added when someone comments on an issue.
  """
  sendNoteOnComment: Boolean
  """
  Whether an internal message should be added when a Linear issue changes status (for status types except completed or canceled).
  """
  sendNoteOnStatusChange: Boolean
}

input IntercomSettingsInput {
  """
  Whether a ticket should be automatically reopened when its linked Linear issue is cancelled.
  """
  automateTicketReopeningOnCancellation: Boolean
  """
  Whether a ticket should be automatically reopened when a comment is posted on its linked Linear issue
  """
  automateTicketReopeningOnComment: Boolean
  """
  Whether a ticket should be automatically reopened when its linked Linear issue is completed.
  """
  automateTicketReopeningOnCompletion: Boolean
  """
  Whether an internal message should be added when someone comments on an issue.
  """
  sendNoteOnComment: Boolean
  """
  Whether an internal message should be added when a Linear issue changes status (for status types except completed or canceled).
  """
  sendNoteOnStatusChange: Boolean
}

"""
An issue.
"""
type Issue implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The user to whom the issue is assigned to.
  """
  assignee: User
  """
  Attachments associated with the issue.
  """
  attachments(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned attachments.
    """
    filter: AttachmentFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): AttachmentConnection!
  """
  The time at which the issue was automatically archived by the auto pruning process.
  """
  autoArchivedAt: DateTime
  """
  The time at which the issue was automatically closed by the auto pruning process.
  """
  autoClosedAt: DateTime
  """
  The order of the item in its column on the board.
  """
  boardOrder: Float! @deprecated(reason: "Will be removed in near future, please use `sortOrder` instead")
  """
  Suggested branch name for the issue.
  """
  branchName: String!
  """
  The time at which the issue was moved into canceled state.
  """
  canceledAt: DateTime
  """
  Children of the issue.
  """
  children(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned issues.
    """
    filter: IssueFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueConnection!
  """
  Comments associated with the issue.
  """
  comments(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned comments.
    """
    filter: CommentFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): CommentConnection!
  """
  The time at which the issue was moved into completed state.
  """
  completedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The user who created the issue.
  """
  creator: User
  """
  Returns the number of Attachment resources which are created by customer support ticketing systems (e.g. Zendesk).
  """
  customerTicketCount: Int!
  """
  The cycle that the issue is associated with.
  """
  cycle: Cycle
  """
  The issue's description in markdown format.
  """
  description: String
  """
  [Internal] The issue's description as a Prosemirror document.
  """
  descriptionData: JSON
  """
  The date at which the issue is due.
  """
  dueDate: TimelessDate
  """
  The estimate of the complexity of the issue..
  """
  estimate: Float
  """
  [ALPHA] The external user who created the issue.
  """
  externalUserCreator: ExternalUser
  """
  The users favorite associated with this issue.
  """
  favorite: Favorite
  """
  History entries associated with the issue.
  """
  history(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueHistoryConnection!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  Issue's human readable identifier (e.g. ENG-123).
  """
  identifier: String!
  """
  Inverse relations associated with this issue.
  """
  inverseRelations(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueRelationConnection!
  """
  Labels associated with this issue.
  """
  labels(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned issue labels.
    """
    filter: IssueLabelFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueLabelConnection!
  """
  The issue's unique number.
  """
  number: Float!
  """
  The parent of the issue.
  """
  parent: Issue
  """
  Previous identifiers of the issue if it has been moved between teams.
  """
  previousIdentifiers: [String!]!
  """
  The priority of the issue. 0 = No priority, 1 = Urgent, 2 = High, 3 = Normal, 4 = Low.
  """
  priority: Float!
  """
  Label for the priority.
  """
  priorityLabel: String!
  """
  The project that the issue is associated with.
  """
  project: Project
  """
  The projectMilestone that the issue is associated with.
  """
  projectMilestone: ProjectMilestone
  """
  Relations associated with this issue.
  """
  relations(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueRelationConnection!
  """
  [Internal] The time at which the issue's SLA will breach.
  """
  slaBreachesAt: DateTime
  """
  [Internal] The time at which the issue's SLA began.
  """
  slaStartedAt: DateTime
  """
  The user who snoozed the issue.
  """
  snoozedBy: User
  """
  The time until an issue will be snoozed in Triage view.
  """
  snoozedUntilAt: DateTime
  """
  The order of the item in relation to other items in the organization.
  """
  sortOrder: Float!
  """
  The time at which the issue was moved into started state.
  """
  startedAt: DateTime
  """
  The time at which the issue entered triage.
  """
  startedTriageAt: DateTime
  """
  The workflow state that the issue is associated with.
  """
  state: WorkflowState!
  """
  The order of the item in the sub-issue list. Only set if the issue has a parent.
  """
  subIssueSortOrder: Float
  """
  Users who are subscribed to the issue.
  """
  subscribers(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned subscribers.
    """
    filter: UserFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    Should query return disabled/suspended users (default: false).
    """
    includeDisabled: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): UserConnection!
  """
  The team that the issue is associated with.
  """
  team: Team!
  """
  The issue's title.
  """
  title: String!
  """
  A flag that indicates whether the issue is in the trash bin.
  """
  trashed: Boolean
  """
  The time at which the issue left triage.
  """
  triagedAt: DateTime
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
  """
  Issue URL.
  """
  url: String!
}

type IssueBatchPayload {
  """
  The issues that were updated.
  """
  issues: [Issue!]!
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

"""
Issue filtering options.
"""
input IssueCollectionFilter {
  """
  Compound filters, all of which need to be matched by the issue.
  """
  and: [IssueCollectionFilter!]
  """
  Filters that the issues assignee must satisfy.
  """
  assignee: NullableUserFilter
  """
  Filters that the issues attachments must satisfy.
  """
  attachments: AttachmentCollectionFilter
  """
  Comparator for the issues auto archived at date.
  """
  autoArchivedAt: NullableDateComparator
  """
  Comparator for the issues auto closed at date.
  """
  autoClosedAt: NullableDateComparator
  """
  Comparator for the issues canceled at date.
  """
  canceledAt: NullableDateComparator
  """
  Filters that the child issues must satisfy.
  """
  children: IssueCollectionFilter
  """
  Filters that the issues comments must satisfy.
  """
  comments: CommentCollectionFilter
  """
  Comparator for the issues completed at date.
  """
  completedAt: NullableDateComparator
  """
  Comparator for the created at date.
  """
  createdAt: DateComparator
  """
  Filters that the issues creator must satisfy.
  """
  creator: NullableUserFilter
  """
  Filters that the issues cycle must satisfy.
  """
  cycle: NullableCycleFilter
  """
  Comparator for the issues description.
  """
  description: NullableStringComparator
  """
  Comparator for the issues due date.
  """
  dueDate: NullableTimelessDateComparator
  """
  Comparator for the issues estimate.
  """
  estimate: EstimateComparator
  """
  Filters that needs to be matched by all issues.
  """
  every: IssueFilter
  """
  Comparator for filtering issues which are blocked.
  """
  hasBlockedByRelations: RelationExistsComparator
  """
  Comparator for filtering issues which are blocking.
  """
  hasBlockingRelations: RelationExistsComparator
  """
  Comparator for filtering issues which are duplicates.
  """
  hasDuplicateRelations: RelationExistsComparator
  """
  Comparator for filtering issues with relations.
  """
  hasRelatedRelations: RelationExistsComparator
  """
  Comparator for the identifier.
  """
  id: IDComparator
  """
  Filters that issue labels must satisfy.
  """
  labels: IssueLabelCollectionFilter
  """
  Comparator for the collection length.
  """
  length: NumberComparator
  """
  Comparator for the issues number.
  """
  number: NumberComparator
  """
  Compound filters, one of which need to be matched by the issue.
  """
  or: [IssueCollectionFilter!]
  """
  Filters that the issue parent must satisfy.
  """
  parent: NullableIssueFilter
  """
  Comparator for the issues priority.
  """
  priority: NullableNumberComparator
  """
  Filters that the issues project must satisfy.
  """
  project: NullableProjectFilter
  """
  Filters that the issues project milestone must satisfy.
  """
  projectMilestone: NullableProjectMilestoneFilter
  """
  [Internal] Comparator for the issues content.
  """
  searchableContent: ContentComparator
  """
  Comparator for the issues sla status.
  """
  slaStatus: SlaStatusComparator
  """
  Filters that the issues snoozer must satisfy.
  """
  snoozedBy: NullableUserFilter
  """
  Comparator for the issues snoozed until date.
  """
  snoozedUntilAt: NullableDateComparator
  """
  Filters that needs to be matched by some issues.
  """
  some: IssueFilter
  """
  Comparator for the issues started at date.
  """
  startedAt: NullableDateComparator
  """
  Filters that the issues state must satisfy.
  """
  state: WorkflowStateFilter
  """
  Filters that issue subscribers must satisfy.
  """
  subscribers: UserCollectionFilter
  """
  Filters that the issues team must satisfy.
  """
  team: TeamFilter
  """
  Comparator for the issues title.
  """
  title: StringComparator
  """
  Comparator for the issues triaged at date.
  """
  triagedAt: NullableDateComparator
  """
  Comparator for the updated at date.
  """
  updatedAt: DateComparator
}

type IssueConnection {
  edges: [IssueEdge!]!
  nodes: [Issue!]!
  pageInfo: PageInfo!
}

input IssueCreateInput {
  """
  The identifier of the user to assign the issue to.
  """
  assigneeId: String
  """
  The position of the issue in its column on the board view.
  """
  boardOrder: Float
  """
  Create issue as a user with the provided name. This option is only available to OAuth applications creating issues in `actor=application` mode.
  """
  createAsUser: String
  """
  The date when the issue was created (e.g. if importing from another system). Must be a date in the past. If none is provided, the backend will generate the time as now.
  """
  createdAt: DateTime
  """
  The cycle associated with the issue.
  """
  cycleId: String
  """
  The issue description in markdown format.
  """
  description: String
  """
  The issue description as a Prosemirror document.
  """
  descriptionData: JSON
  """
  Provide an external user avatar URL. Can only be used in conjunction with the `createAsUser` options. This option is only available to OAuth applications creating comments in `actor=application` mode.
  """
  displayIconUrl: String
  """
  The date at which the issue is due.
  """
  dueDate: TimelessDate
  """
  The estimated complexity of the issue.
  """
  estimate: Int
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String
  """
  The identifiers of the issue labels associated with this ticket.
  """
  labelIds: [String!]
  """
  The identifier of the parent issue.
  """
  parentId: String
  """
  The priority of the issue. 0 = No priority, 1 = Urgent, 2 = High, 3 = Normal, 4 = Low.
  """
  priority: Int
  """
  The project associated with the issue.
  """
  projectId: String
  """
  The project milestone associated with the issue.
  """
  projectMilestoneId: String
  """
  The comment the issue is referencing.
  """
  referenceCommentId: String
  """
  [Internal] The timestamp at which an issue will be considered in breach of SLA.
  """
  slaBreachesAt: DateTime
  """
  The position of the issue related to other issues.
  """
  sortOrder: Float
  """
  The team state of the issue.
  """
  stateId: String
  """
  The position of the issue in parent's sub-issue list.
  """
  subIssueSortOrder: Float
  """
  The identifiers of the users subscribing to this ticket.
  """
  subscriberIds: [String!]
  """
  The identifier or key of the team associated with the issue.
  """
  teamId: String!
  """
  The title of the issue.
  """
  title: String!
}

"""
[Internal] A draft issue.
"""
type IssueDraft implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The user assigned to the draft.
  """
  assigneeId: String
  """
  Serialized array of JSONs representing attachments.
  """
  attachments: JSONObject!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The user who created the draft.
  """
  creator: User!
  """
  The cycle associated with the draft.
  """
  cycleId: String
  """
  The draft's description in markdown format.
  """
  description: String
  """
  [Internal] The draft's description as a Prosemirror document.
  """
  descriptionData: JSON
  """
  The date at which the issue would be due.
  """
  dueDate: TimelessDate
  """
  The estimate of the complexity of the draft.
  """
  estimate: Float
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The parent draft of the draft.
  """
  parent: IssueDraft
  """
  The parent issue of the draft.
  """
  parentIssue: Issue
  """
  The priority of the draft.
  """
  priority: Float!
  """
  Label for the priority.
  """
  priorityLabel: String!
  """
  The project associated with the draft.
  """
  projectId: String
  """
  The project milestone associated with the draft.
  """
  projectMilestoneId: String
  """
  The workflow state associated with the draft.
  """
  stateId: String!
  """
  The order of items in the sub-draft list. Only set if the draft has `parent` set.
  """
  subIssueSortOrder: Float
  """
  The team associated with the draft.
  """
  teamId: String!
  """
  The draft's title.
  """
  title: String!
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
}

type IssueEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: Issue!
}

"""
Issue filtering options.
"""
input IssueFilter {
  """
  Compound filters, all of which need to be matched by the issue.
  """
  and: [IssueFilter!]
  """
  Filters that the issues assignee must satisfy.
  """
  assignee: NullableUserFilter
  """
  Filters that the issues attachments must satisfy.
  """
  attachments: AttachmentCollectionFilter
  """
  Comparator for the issues auto archived at date.
  """
  autoArchivedAt: NullableDateComparator
  """
  Comparator for the issues auto closed at date.
  """
  autoClosedAt: NullableDateComparator
  """
  Comparator for the issues canceled at date.
  """
  canceledAt: NullableDateComparator
  """
  Filters that the child issues must satisfy.
  """
  children: IssueCollectionFilter
  """
  Filters that the issues comments must satisfy.
  """
  comments: CommentCollectionFilter
  """
  Comparator for the issues completed at date.
  """
  completedAt: NullableDateComparator
  """
  Comparator for the created at date.
  """
  createdAt: DateComparator
  """
  Filters that the issues creator must satisfy.
  """
  creator: NullableUserFilter
  """
  Filters that the issues cycle must satisfy.
  """
  cycle: NullableCycleFilter
  """
  Comparator for the issues description.
  """
  description: NullableStringComparator
  """
  Comparator for the issues due date.
  """
  dueDate: NullableTimelessDateComparator
  """
  Comparator for the issues estimate.
  """
  estimate: EstimateComparator
  """
  Comparator for filtering issues which are blocked.
  """
  hasBlockedByRelations: RelationExistsComparator
  """
  Comparator for filtering issues which are blocking.
  """
  hasBlockingRelations: RelationExistsComparator
  """
  Comparator for filtering issues which are duplicates.
  """
  hasDuplicateRelations: RelationExistsComparator
  """
  Comparator for filtering issues with relations.
  """
  hasRelatedRelations: RelationExistsComparator
  """
  Comparator for the identifier.
  """
  id: IDComparator
  """
  Filters that issue labels must satisfy.
  """
  labels: IssueLabelCollectionFilter
  """
  Comparator for the issues number.
  """
  number: NumberComparator
  """
  Compound filters, one of which need to be matched by the issue.
  """
  or: [IssueFilter!]
  """
  Filters that the issue parent must satisfy.
  """
  parent: NullableIssueFilter
  """
  Comparator for the issues priority.
  """
  priority: NullableNumberComparator
  """
  Filters that the issues project must satisfy.
  """
  project: NullableProjectFilter
  """
  Filters that the issues project milestone must satisfy.
  """
  projectMilestone: NullableProjectMilestoneFilter
  """
  [Internal] Comparator for the issues content.
  """
  searchableContent: ContentComparator
  """
  Comparator for the issues sla status.
  """
  slaStatus: SlaStatusComparator
  """
  Filters that the issues snoozer must satisfy.
  """
  snoozedBy: NullableUserFilter
  """
  Comparator for the issues snoozed until date.
  """
  snoozedUntilAt: NullableDateComparator
  """
  Comparator for the issues started at date.
  """
  startedAt: NullableDateComparator
  """
  Filters that the issues state must satisfy.
  """
  state: WorkflowStateFilter
  """
  Filters that issue subscribers must satisfy.
  """
  subscribers: UserCollectionFilter
  """
  Filters that the issues team must satisfy.
  """
  team: TeamFilter
  """
  Comparator for the issues title.
  """
  title: StringComparator
  """
  Comparator for the issues triaged at date.
  """
  triagedAt: NullableDateComparator
  """
  Comparator for the updated at date.
  """
  updatedAt: DateComparator
}

type IssueFilterSuggestionPayload {
  """
  The json filter that is suggested.
  """
  filter: JSONObject
}

"""
A record of changes to an issue.
"""
type IssueHistory implements Node {
  """
  The user who made these changes. If null, possibly means that the change made by an integration.
  """
  actor: User
  """
  The id of user who made these changes. If null, possibly means that the change made by an integration.
  """
  actorId: String
  """
  ID's of labels that were added.
  """
  addedLabelIds: [String!]
  """
  Whether the issue is archived at the time of this history entry.
  """
  archived: Boolean
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The linked attachment.
  """
  attachment: Attachment
  """
  The id of linked attachment.
  """
  attachmentId: String
  """
  Whether the issue was auto-archived.
  """
  autoArchived: Boolean
  """
  Whether the issue was auto-closed.
  """
  autoClosed: Boolean
  """
  [Internal] Serialized JSON representing changes for certain non-relational properties.
  """
  changes: JSONObject
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The user from whom the issue was re-assigned from.
  """
  fromAssignee: User
  """
  The id of user from whom the issue was re-assigned from.
  """
  fromAssigneeId: String
  """
  The previous cycle of the issue.
  """
  fromCycle: Cycle
  """
  The id of previous cycle of the issue.
  """
  fromCycleId: String
  """
  What the due date was changed from
  """
  fromDueDate: TimelessDate
  """
  What the estimate was changed from.
  """
  fromEstimate: Float
  """
  The previous parent of the issue.
  """
  fromParent: Issue
  """
  The id of previous parent of the issue.
  """
  fromParentId: String
  """
  What the priority was changed from.
  """
  fromPriority: Float
  """
  The previous project of the issue.
  """
  fromProject: Project
  """
  The id of previous project of the issue.
  """
  fromProjectId: String
  """
  The previous workflow state of the issue.
  """
  fromState: WorkflowState
  """
  The id of previous workflow state of the issue.
  """
  fromStateId: String
  """
  The team from which the issue was moved from.
  """
  fromTeam: Team
  """
  The id of team from which the issue was moved from.
  """
  fromTeamId: String
  """
  What the title was changed from.
  """
  fromTitle: String
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The issue that was changed.
  """
  issue: Issue!
  """
  The import record.
  """
  issueImport: IssueImport
  """
  Changed issue relationships.
  """
  relationChanges: [IssueRelationHistoryPayload!]
  """
  ID's of labels that were removed.
  """
  removedLabelIds: [String!]
  """
  The user to whom the issue was assigned to.
  """
  toAssignee: User
  """
  The id of user to whom the issue was assigned to.
  """
  toAssigneeId: String
  """
  The new project created from the issue.
  """
  toConvertedProject: Project
  """
  The id of new project created from the issue.
  """
  toConvertedProjectId: String
  """
  The new cycle of the issue.
  """
  toCycle: Cycle
  """
  The id of new cycle of the issue.
  """
  toCycleId: String
  """
  What the due date was changed to
  """
  toDueDate: TimelessDate
  """
  What the estimate was changed to.
  """
  toEstimate: Float
  """
  The new parent of the issue.
  """
  toParent: Issue
  """
  The id of new parent of the issue.
  """
  toParentId: String
  """
  What the priority was changed to.
  """
  toPriority: Float
  """
  The new project of the issue.
  """
  toProject: Project
  """
  The id of new project of the issue.
  """
  toProjectId: String
  """
  The new workflow state of the issue.
  """
  toState: WorkflowState
  """
  The id of new workflow state of the issue.
  """
  toStateId: String
  """
  The team to which the issue was moved to.
  """
  toTeam: Team
  """
  The id of team to which the issue was moved to.
  """
  toTeamId: String
  """
  What the title was changed to.
  """
  toTitle: String
  """
  Whether the issue was trashed or un-trashed.
  """
  trashed: Boolean
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
  """
  Whether the issue's description was updated.
  """
  updatedDescription: Boolean
}

type IssueHistoryConnection {
  edges: [IssueHistoryEdge!]!
  nodes: [IssueHistory!]!
  pageInfo: PageInfo!
}

type IssueHistoryEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: IssueHistory!
}

"""
An import job for data from an external service
"""
type IssueImport implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The id for the user that started the job.
  """
  creatorId: String!
  """
  File URL for the uploaded CSV for the import, if there is one.
  """
  csvFileUrl: String
  """
  User readable error message, if one has occurred during the import.
  """
  error: String
  """
  Error code and metadata, if one has occurred during the import
  """
  errorMetadata: JSONObject
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The data mapping configuration for the import job.
  """
  mapping: JSONObject
  """
  Current step progress in % (0-100).
  """
  progress: Float
  """
  The service from which data will be imported.
  """
  service: String!
  """
  The status for the import job.
  """
  status: String!
  """
  New team's name in cases when teamId not set
  """
  teamName: String
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
}

type IssueImportCheckPayload {
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

type IssueImportDeletePayload {
  """
  The import job that was deleted.
  """
  issueImport: IssueImport
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

"""
Issue import mapping input
"""
input IssueImportMappingInput {
  """
  The mapping configuration for epics
  """
  epics: JSONObject
  """
  The mapping configuration for users
  """
  users: JSONObject
  """
  The mapping configuration for workflow states
  """
  workflowStates: JSONObject
}

type IssueImportPayload {
  """
  The import job that was created or updated.
  """
  issueImport: IssueImport
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

input IssueImportUpdateInput {
  """
  The mapping configuration for the import.
  """
  mapping: JSONObject!
}

"""
Labels that can be associated with issues.
"""
type IssueLabel implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  Children of the label.
  """
  children(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned issue labels.
    """
    filter: IssueLabelFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueLabelConnection!
  """
  The label's color as a HEX string.
  """
  color: String!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The user who created the label.
  """
  creator: User
  """
  The label's description.
  """
  description: String
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  Issues associated with the label.
  """
  issues(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned issues.
    """
    filter: IssueFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueConnection!
  """
  The label's name.
  """
  name: String!
  organization: Organization! @deprecated(reason: "Workspace labels are identified by their team being null.")
  """
  The parent label.
  """
  parent: IssueLabel
  """
  The team that the label is associated with. If null, the label is associated with the global workspace.
  """
  team: Team
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
}

"""
Issue label filtering options.
"""
input IssueLabelCollectionFilter {
  """
  Compound filters, all of which need to be matched by the label.
  """
  and: [IssueLabelCollectionFilter!]
  """
  Comparator for the created at date.
  """
  createdAt: DateComparator
  """
  Filters that the issue labels creator must satisfy.
  """
  creator: NullableUserFilter
  """
  Filters that needs to be matched by all issue labels.
  """
  every: IssueLabelFilter
  """
  Comparator for the identifier.
  """
  id: IDComparator
  """
  Comparator for the collection length.
  """
  length: NumberComparator
  """
  Comparator for the name.
  """
  name: StringComparator
  """
  Compound filters, one of which need to be matched by the label.
  """
  or: [IssueLabelCollectionFilter!]
  """
  Filters that the issue label's parent label must satisfy.
  """
  parent: IssueLabelFilter
  """
  Filters that needs to be matched by some issue labels.
  """
  some: IssueLabelFilter
  """
  Filters that the issue labels team must satisfy.
  """
  team: TeamFilter
  """
  Comparator for the updated at date.
  """
  updatedAt: DateComparator
}

type IssueLabelConnection {
  edges: [IssueLabelEdge!]!
  nodes: [IssueLabel!]!
  pageInfo: PageInfo!
}

input IssueLabelCreateInput {
  """
  The color of the label.
  """
  color: String
  """
  The description of the label.
  """
  description: String
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String
  """
  The name of the label.
  """
  name: String!
  """
  The identifier of the parent label.
  """
  parentId: String
  """
  The team associated with the label. If not given, the label will be associated with the entire workspace.
  """
  teamId: String
}

type IssueLabelEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: IssueLabel!
}

"""
Issue label filtering options.
"""
input IssueLabelFilter {
  """
  Compound filters, all of which need to be matched by the label.
  """
  and: [IssueLabelFilter!]
  """
  Comparator for the created at date.
  """
  createdAt: DateComparator
  """
  Filters that the issue labels creator must satisfy.
  """
  creator: NullableUserFilter
  """
  Comparator for the identifier.
  """
  id: IDComparator
  """
  Comparator for the name.
  """
  name: StringComparator
  """
  Compound filters, one of which need to be matched by the label.
  """
  or: [IssueLabelFilter!]
  """
  Filters that the issue label's parent label must satisfy.
  """
  parent: IssueLabelFilter
  """
  Filters that the issue labels team must satisfy.
  """
  team: TeamFilter
  """
  Comparator for the updated at date.
  """
  updatedAt: DateComparator
}

type IssueLabelPayload {
  """
  The label that was created or updated.
  """
  issueLabel: IssueLabel!
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

input IssueLabelUpdateInput {
  """
  The color of the label.
  """
  color: String
  """
  The description of the label.
  """
  description: String
  """
  The name of the label.
  """
  name: String
  """
  The identifier of the parent label.
  """
  parentId: String
}

"""
An issue related notification
"""
type IssueNotification implements Entity & Node & Notification {
  """
  The user that caused the notification.
  """
  actor: User
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The comment related to the notification.
  """
  comment: Comment
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The time at when an email reminder for this notification was sent to the user. Null, if no email
      reminder has been sent.
  """
  emailedAt: DateTime
  """
  The external user that caused the notification.
  """
  externalUserActor: ExternalUser
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The issue related to the notification.
  """
  issue: Issue!
  """
  Name of the reaction emoji related to the notification.
  """
  reactionEmoji: String
  """
  The time at when the user marked the notification as read. Null, if the the user hasn't read the notification
  """
  readAt: DateTime
  """
  The time until a notification will be snoozed. After that it will appear in the inbox again.
  """
  snoozedUntilAt: DateTime
  """
  The team related to the notification.
  """
  team: Team!
  """
  Notification type
  """
  type: String!
  """
  The time at which a notification was unsnoozed..
  """
  unsnoozedAt: DateTime
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
  """
  The user that received the notification.
  """
  user: User!
}

type IssuePayload {
  """
  The issue that was created or updated.
  """
  issue: Issue
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

type IssuePriorityValue {
  """
  Priority's label.
  """
  label: String!
  """
  Priority's number value.
  """
  priority: Int!
}

"""
A relation between two issues.
"""
type IssueRelation implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The issue whose relationship is being described.
  """
  issue: Issue!
  """
  The related issue.
  """
  relatedIssue: Issue!
  """
  The relationship of the issue with the related issue.
  """
  type: String!
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
}

type IssueRelationConnection {
  edges: [IssueRelationEdge!]!
  nodes: [IssueRelation!]!
  pageInfo: PageInfo!
}

input IssueRelationCreateInput {
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String
  """
  The identifier of the issue that is related to another issue.
  """
  issueId: String!
  """
  The identifier of the related issue.
  """
  relatedIssueId: String!
  """
  The type of relation of the issue to the related issue.
  """
  type: IssueRelationType!
}

type IssueRelationEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: IssueRelation!
}

"""
Issue relation history's payload
"""
type IssueRelationHistoryPayload {
  """
  The identifier of the related issue.
  """
  identifier: String!
  """
  The type of the change.
  """
  type: String!
}

type IssueRelationPayload {
  """
  The issue relation that was created or updated.
  """
  issueRelation: IssueRelation!
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

"""
The type of the issue relation.
"""
enum IssueRelationType {
  blocks
  duplicate
  related
}

input IssueRelationUpdateInput {
  """
  The identifier of the issue that is related to another issue.
  """
  issueId: String
  """
  The identifier of the related issue.
  """
  relatedIssueId: String
  """
  The type of relation of the issue to the related issue.
  """
  type: String
}

type IssueSearchPayload {
  """
  Archived entities matching the search term along with all their dependencies.
  """
  archivePayload: ArchiveResponse!
  edges: [IssueSearchResultEdge!]!
  nodes: [IssueSearchResult!]!
  pageInfo: PageInfo!
  """
  Total number of results for query without filters applied.
  """
  totalCount: Float!
}

type IssueSearchResult implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The user to whom the issue is assigned to.
  """
  assignee: User
  """
  Attachments associated with the issue.
  """
  attachments(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned attachments.
    """
    filter: AttachmentFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): AttachmentConnection!
  """
  The time at which the issue was automatically archived by the auto pruning process.
  """
  autoArchivedAt: DateTime
  """
  The time at which the issue was automatically closed by the auto pruning process.
  """
  autoClosedAt: DateTime
  """
  The order of the item in its column on the board.
  """
  boardOrder: Float! @deprecated(reason: "Will be removed in near future, please use `sortOrder` instead")
  """
  Suggested branch name for the issue.
  """
  branchName: String!
  """
  The time at which the issue was moved into canceled state.
  """
  canceledAt: DateTime
  """
  Children of the issue.
  """
  children(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned issues.
    """
    filter: IssueFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueConnection!
  """
  Comments associated with the issue.
  """
  comments(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned comments.
    """
    filter: CommentFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): CommentConnection!
  """
  The time at which the issue was moved into completed state.
  """
  completedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The user who created the issue.
  """
  creator: User
  """
  Returns the number of Attachment resources which are created by customer support ticketing systems (e.g. Zendesk).
  """
  customerTicketCount: Int!
  """
  The cycle that the issue is associated with.
  """
  cycle: Cycle
  """
  The issue's description in markdown format.
  """
  description: String
  """
  [Internal] The issue's description as a Prosemirror document.
  """
  descriptionData: JSON
  """
  The date at which the issue is due.
  """
  dueDate: TimelessDate
  """
  The estimate of the complexity of the issue..
  """
  estimate: Float
  """
  [ALPHA] The external user who created the issue.
  """
  externalUserCreator: ExternalUser
  """
  The users favorite associated with this issue.
  """
  favorite: Favorite
  """
  History entries associated with the issue.
  """
  history(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueHistoryConnection!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  Issue's human readable identifier (e.g. ENG-123).
  """
  identifier: String!
  """
  Inverse relations associated with this issue.
  """
  inverseRelations(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueRelationConnection!
  """
  Labels associated with this issue.
  """
  labels(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned issue labels.
    """
    filter: IssueLabelFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueLabelConnection!
  """
  Metadata related to search result
  """
  metadata: JSONObject!
  """
  The issue's unique number.
  """
  number: Float!
  """
  The parent of the issue.
  """
  parent: Issue
  """
  Previous identifiers of the issue if it has been moved between teams.
  """
  previousIdentifiers: [String!]!
  """
  The priority of the issue. 0 = No priority, 1 = Urgent, 2 = High, 3 = Normal, 4 = Low.
  """
  priority: Float!
  """
  Label for the priority.
  """
  priorityLabel: String!
  """
  The project that the issue is associated with.
  """
  project: Project
  """
  The projectMilestone that the issue is associated with.
  """
  projectMilestone: ProjectMilestone
  """
  Relations associated with this issue.
  """
  relations(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueRelationConnection!
  """
  [Internal] The time at which the issue's SLA will breach.
  """
  slaBreachesAt: DateTime
  """
  [Internal] The time at which the issue's SLA began.
  """
  slaStartedAt: DateTime
  """
  The user who snoozed the issue.
  """
  snoozedBy: User
  """
  The time until an issue will be snoozed in Triage view.
  """
  snoozedUntilAt: DateTime
  """
  The order of the item in relation to other items in the organization.
  """
  sortOrder: Float!
  """
  The time at which the issue was moved into started state.
  """
  startedAt: DateTime
  """
  The time at which the issue entered triage.
  """
  startedTriageAt: DateTime
  """
  The workflow state that the issue is associated with.
  """
  state: WorkflowState!
  """
  The order of the item in the sub-issue list. Only set if the issue has a parent.
  """
  subIssueSortOrder: Float
  """
  Users who are subscribed to the issue.
  """
  subscribers(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned subscribers.
    """
    filter: UserFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    Should query return disabled/suspended users (default: false).
    """
    includeDisabled: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): UserConnection!
  """
  The team that the issue is associated with.
  """
  team: Team!
  """
  The issue's title.
  """
  title: String!
  """
  A flag that indicates whether the issue is in the trash bin.
  """
  trashed: Boolean
  """
  The time at which the issue left triage.
  """
  triagedAt: DateTime
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
  """
  Issue URL.
  """
  url: String!
}

type IssueSearchResultConnection {
  edges: [IssueSearchResultEdge!]!
  nodes: [IssueSearchResult!]!
  pageInfo: PageInfo!
}

type IssueSearchResultEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: IssueSearchResult!
}

input IssueUpdateInput {
  """
  The identifier of the user to assign the issue to.
  """
  assigneeId: String
  """
  The position of the issue in its column on the board view.
  """
  boardOrder: Float
  """
  The identifiers of the companies associated with this ticket.
  """
  companyIds: [String!]
  """
  The cycle associated with the issue.
  """
  cycleId: String
  """
  The issue description in markdown format.
  """
  description: String
  """
  The issue description as a Prosemirror document.
  """
  descriptionData: JSON
  """
  The date at which the issue is due.
  """
  dueDate: TimelessDate
  """
  The estimated complexity of the issue.
  """
  estimate: Int
  """
  The identifiers of the issue labels associated with this ticket.
  """
  labelIds: [String!]
  """
  The identifier of the parent issue.
  """
  parentId: String
  """
  The priority of the issue. 0 = No priority, 1 = Urgent, 2 = High, 3 = Normal, 4 = Low.
  """
  priority: Int
  """
  The project associated with the issue.
  """
  projectId: String
  """
  The project milestone associated with the issue.
  """
  projectMilestoneId: String
  """
  [Internal] The timestamp at which an issue will be considered in breach of SLA.
  """
  slaBreachesAt: DateTime
  """
  The identifier of the user who snoozed the issue.
  """
  snoozedById: String
  """
  The time until an issue will be snoozed in Triage view.
  """
  snoozedUntilAt: DateTime
  """
  The position of the issue related to other issues.
  """
  sortOrder: Float
  """
  The team state of the issue.
  """
  stateId: String
  """
  The position of the issue in parent's sub-issue list.
  """
  subIssueSortOrder: Float
  """
  The identifiers of the users subscribing to this ticket.
  """
  subscriberIds: [String!]
  """
  The identifier or key of the team associated with the issue.
  """
  teamId: String
  """
  The issue title.
  """
  title: String
  """
  Wether the issue has been trashed.
  """
  trashed: Boolean
}

"""
The `JSON` scalar type represents arbitrary values as *stringified* JSON
"""
scalar JSON

"""
The `JSONObject` scalar type represents arbitrary values as *embedded* JSON
"""
scalar JSONObject

input JiraConfigurationInput {
  """
  The Jira personal access token.
  """
  accessToken: String!
  """
  The Jira user's email address.
  """
  email: String!
  """
  The Jira installation hostname.
  """
  hostname: String!
  """
  The Jira project keys to scope the integration to.
  """
  project: String
}

"""
Tuple for mapping Jira projects to Linear teams.
"""
type JiraLinearMapping {
  """
  The Jira id for this project.
  """
  jiraProjectId: String!
  """
  The Linear team id to map to the given project.
  """
  linearTeamId: String!
}

input JiraLinearMappingInput {
  """
  The Jira id for this project.
  """
  jiraProjectId: String!
  """
  The Linear team id to map to the given project.
  """
  linearTeamId: String!
}

"""
Metadata about a Jira project.
"""
type JiraProjectData {
  """
  The Jira id for this project.
  """
  id: String!
  """
  The Jira key for this project, such as ENG.
  """
  key: String!
  """
  The Jira name for this project, such as Engineering.
  """
  name: String!
}

input JiraProjectDataInput {
  """
  The Jira id for this project.
  """
  id: String!
  """
  The Jira key for this project, such as ENG.
  """
  key: String!
  """
  The Jira name for this project, such as Engineering.
  """
  name: String!
}

"""
Jira specific settings.
"""
type JiraSettings {
  """
  The mapping of Jira project id => Linear team id.
  """
  projectMapping: [JiraLinearMapping!]
  """
  The Jira projects for the organization.
  """
  projects: [JiraProjectData!]!
}

input JiraSettingsInput {
  """
  The mapping of Jira project id => Linear team id.
  """
  projectMapping: [JiraLinearMappingInput!]
  """
  The Jira projects for the organization.
  """
  projects: [JiraProjectDataInput!]!
}

input JoinOrganizationInput {
  """
  The identifier of the organization.
  """
  organizationId: String!
}

type LogoutResponse {
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

type Mutation {
  """
  Creates an integration api key for Airbyte to connect with Linear
  """
  airbyteIntegrationConnect(
    """
    Airbyte integration settings.
    """
    input: AirbyteConfigurationInput!
  ): IntegrationPayload!
  """
  Creates a new API key.
  """
  apiKeyCreate(
    """
    The api key object to create.
    """
    input: ApiKeyCreateInput!
  ): ApiKeyPayload!
  """
  Deletes an API key.
  """
  apiKeyDelete(
    """
    The identifier of the API key to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  [DEPRECATED] Archives an issue attachment.
  """
  attachmentArchive(
    """
    The identifier of the attachment to archive.
    """
    id: String!
  ): ArchivePayload! @deprecated(reason: "This mutation is deprecated, please use `attachmentDelete` instead")
  """
  Creates a new attachment, or updates existing if the same `url` and `issueId` is used.
  """
  attachmentCreate(
    """
    The attachment object to create.
    """
    input: AttachmentCreateInput!
  ): AttachmentPayload!
  """
  Deletes an issue attachment.
  """
  attachmentDelete(
    """
    The identifier of the attachment to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Link an existing Discord message to an issue.
  """
  attachmentLinkDiscord(
    """
    The Discord channel ID for the message to link.
    """
    channelId: String!
    """
    The issue for which to link the Discord message.
    """
    issueId: String!
    """
    The Discord message ID for the message to link.
    """
    messageId: String!
    """
    The Discord message URL for the message to link.
    """
    url: String!
  ): AttachmentPayload!
  """
  Link an existing Front conversation to an issue.
  """
  attachmentLinkFront(
    """
    The Front conversation ID to link.
    """
    conversationId: String!
    """
    The issue for which to link the Front conversation.
    """
    issueId: String!
  ): FrontAttachmentPayload!
  """
  Link an existing Intercom conversation to an issue.
  """
  attachmentLinkIntercom(
    """
    The Intercom conversation ID to link.
    """
    conversationId: String!
    """
    The issue for which to link the Intercom conversation.
    """
    issueId: String!
  ): AttachmentPayload!
  """
  Link an existing Jira issue to an issue.
  """
  attachmentLinkJiraIssue(
    """
    The issue for which to link the Jira issue.
    """
    issueId: String!
    """
    The Jira issue key or ID to link.
    """
    jiraIssueId: String!
  ): AttachmentPayload!
  """
  Link any url to an issue.
  """
  attachmentLinkURL(
    """
    The id for the attachment.
    """
    id: String
    """
    The issue for which to link the url.
    """
    issueId: String!
    """
    The title to use for the attachment.
    """
    title: String
    """
    The url to link.
    """
    url: String!
  ): AttachmentPayload!
  """
  Link an existing Zendesk ticket to an issue.
  """
  attachmentLinkZendesk(
    """
    The issue for which to link the Zendesk ticket.
    """
    issueId: String!
    """
    The Zendesk ticket ID to link.
    """
    ticketId: String!
  ): AttachmentPayload!
  """
  Updates an existing issue attachment.
  """
  attachmentUpdate(
    """
    The identifier of the attachment to update.
    """
    id: String!
    """
    A partial attachment object to update the attachment with.
    """
    input: AttachmentUpdateInput!
  ): AttachmentPayload!
  """
  Creates a new comment.
  """
  commentCreate(
    """
    The comment object to create.
    """
    input: CommentCreateInput!
  ): CommentPayload!
  """
  Deletes a comment.
  """
  commentDelete(
    """
    The identifier of the comment to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Updates a comment.
  """
  commentUpdate(
    """
    The identifier of the comment to update.
    """
    id: String!
    """
    A partial comment object to update the comment with.
    """
    input: CommentUpdateInput!
  ): CommentPayload!
  """
  Saves user message.
  """
  contactCreate(
    """
    The contact entry to create.
    """
    input: ContactCreateInput!
  ): ContactPayload!
  """
  [INTERNAL] Saves sales pricing inquiry to Front.
  """
  contactSalesCreate(
    """
    The contact entry to create.
    """
    input: ContactSalesCreateInput!
  ): ContactPayload!
  """
  Create CSV export report for the organization.
  """
  createCsvExportReport(includePrivateTeamIds: [String!]): CreateCsvExportReportPayload!
  """
  Creates an organization from onboarding.
  """
  createOrganizationFromOnboarding(
    """
    Organization details for the new organization.
    """
    input: CreateOrganizationInput!
    """
    Onboarding survey.
    """
    survey: OnboardingCustomerSurvey
  ): CreateOrJoinOrganizationResponse!
  """
  Creates a new custom view.
  """
  customViewCreate(
    """
    The properties of the custom view to create.
    """
    input: CustomViewCreateInput!
  ): CustomViewPayload!
  """
  Deletes a custom view.
  """
  customViewDelete(
    """
    The identifier of the custom view to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Updates a custom view.
  """
  customViewUpdate(
    """
    The identifier of the custom view to update.
    """
    id: String!
    """
    The properties of the custom view to update.
    """
    input: CustomViewUpdateInput!
  ): CustomViewPayload!
  """
  Archives a cycle.
  """
  cycleArchive(
    """
    The identifier of the cycle to archive.
    """
    id: String!
  ): ArchivePayload!
  """
  Creates a new cycle.
  """
  cycleCreate(
    """
    The cycle object to create.
    """
    input: CycleCreateInput!
  ): CyclePayload!
  """
  Updates a cycle.
  """
  cycleUpdate(
    """
    The identifier of the cycle to update.
    """
    id: String!
    """
    A partial cycle object to update the cycle with.
    """
    input: CycleUpdateInput!
  ): CyclePayload!
  """
  Creates a new document.
  """
  documentCreate(
    """
    The document to create.
    """
    input: DocumentCreateInput!
  ): DocumentPayload!
  """
  Deletes a document.
  """
  documentDelete(
    """
    The identifier of the document to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Updates a document.
  """
  documentUpdate(
    """
    The identifier of the document to update. Also the identifier from the URL is accepted.
    """
    id: String!
    """
    A partial document object to update the document with.
    """
    input: DocumentUpdateInput!
  ): DocumentPayload!
  """
  [INTERNAL] Subscribes the email to the newsletter.
  """
  emailSubscribe(
    """
    Subscription details.
    """
    input: EmailSubscribeInput!
  ): EmailSubscribePayload!
  """
  Authenticates a user account via email and authentication token.
  """
  emailTokenUserAccountAuth(
    """
    The data used for token authentication.
    """
    input: TokenUserAccountAuthInput!
  ): AuthResolverResponse!
  """
  Unsubscribes the user from one type of emails.
  """
  emailUnsubscribe(
    """
    Unsubscription details.
    """
    input: EmailUnsubscribeInput!
  ): EmailUnsubscribePayload!
  """
  Finds or creates a new user account by email and sends an email with token.
  """
  emailUserAccountAuthChallenge(
    """
    The data used for email authentication.
    """
    input: EmailUserAccountAuthChallengeInput!
  ): EmailUserAccountAuthChallengeResponse!
  """
  Creates a custom emoji.
  """
  emojiCreate(
    """
    The emoji object to create.
    """
    input: EmojiCreateInput!
  ): EmojiPayload!
  """
  Deletes an emoji.
  """
  emojiDelete(
    """
    The identifier of the emoji to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  [Deprecated] Creates a new event.
  """
  eventCreate(
    """
    The event to create.
    """
    input: EventCreateInput!
  ): EventPayload!
  """
  Creates a new favorite (project, cycle etc).
  """
  favoriteCreate(
    """
    The favorite object to create.
    """
    input: FavoriteCreateInput!
  ): FavoritePayload!
  """
  Deletes a favorite reference.
  """
  favoriteDelete(
    """
    The identifier of the favorite reference to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Updates a favorite.
  """
  favoriteUpdate(
    """
    The identifier of the favorite to update.
    """
    id: String!
    """
    A partial favorite object to update the favorite with.
    """
    input: FavoriteUpdateInput!
  ): FavoritePayload!
  """
  XHR request payload to upload an images, video and other attachments directly to Linear's cloud storage.
  """
  fileUpload(
    """
    MIME type of the uploaded file.
    """
    contentType: String!
    """
    Filename of the uploaded file.
    """
    filename: String!
    """
    Should the file be made publicly accessible (default: false).
    """
    makePublic: Boolean
    """
    Optional metadata.
    """
    metaData: JSON
    """
    File size of the uploaded file.
    """
    size: Int!
  ): UploadPayload!
  """
  Authenticate user account through Google OAuth. This is the 2nd step of OAuth flow.
  """
  googleUserAccountAuth(
    """
    The data used for Google authentication.
    """
    input: GoogleUserAccountAuthInput!
  ): AuthResolverResponse!
  """
  Upload an image from an URL to Linear.
  """
  imageUploadFromUrl(
    """
    URL of the file to be uploaded to Linear.
    """
    url: String!
  ): ImageUploadFromUrlPayload!
  """
  XHR request payload to upload a file for import, directly to Linear's cloud storage.
  """
  importFileUpload(
    """
    MIME type of the uploaded file.
    """
    contentType: String!
    """
    Filename of the uploaded file.
    """
    filename: String!
    """
    Optional metadata.
    """
    metaData: JSON
    """
    File size of the uploaded file.
    """
    size: Int!
  ): UploadPayload!
  """
  Deletes an integration.
  """
  integrationDelete(
    """
    The identifier of the integration to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Integrates the organization with Discord.
  """
  integrationDiscord(
    """
    The Discord OAuth code.
    """
    code: String!
    """
    The Discord OAuth redirect URI.
    """
    redirectUri: String!
  ): IntegrationPayload!
  """
  Integrates the organization with Figma.
  """
  integrationFigma(
    """
    The Figma OAuth code.
    """
    code: String!
    """
    The Figma OAuth redirect URI.
    """
    redirectUri: String!
  ): IntegrationPayload!
  """
  Integrates the organization with Front.
  """
  integrationFront(
    """
    The Front OAuth code.
    """
    code: String!
    """
    The Front OAuth redirect URI.
    """
    redirectUri: String!
  ): IntegrationPayload!
  """
  Generates a webhook for the GitHub commit integration.
  """
  integrationGithubCommitCreate: GitHubCommitIntegrationPayload!
  """
  Connects the organization with the GitHub App.
  """
  integrationGithubConnect(
    """
    The GitHub data to connect with.
    """
    installationId: String!
  ): IntegrationPayload!
  """
  Connects the organization with a GitLab Access Token.
  """
  integrationGitlabConnect(
    """
    The GitLab Access Token to connect with.
    """
    accessToken: String!
    """
    The URL of the GitLab installation
    """
    gitlabUrl: String!
  ): IntegrationPayload!
  """
  Integrates the organization with Google Sheets.
  """
  integrationGoogleSheets(
    """
    The Google OAuth code.
    """
    code: String!
  ): IntegrationPayload!
  """
  Integrates the organization with Intercom.
  """
  integrationIntercom(
    """
    The Intercom OAuth code.
    """
    code: String!
    """
    The Intercom domain URL to use for the integration. Defaults to app.intercom.com if not provided.
    """
    domainUrl: String
    """
    The Intercom OAuth redirect URI.
    """
    redirectUri: String!
  ): IntegrationPayload!
  """
  Disconnects the organization from Intercom.
  """
  integrationIntercomDelete: IntegrationPayload!
  """
  [DEPRECATED] Updates settings on the Intercom integration.
  """
  integrationIntercomSettingsUpdate(
    """
    A partial Intercom integration settings object to update the integration settings with.
    """
    input: IntercomSettingsInput!
  ): IntegrationPayload!
    @deprecated(reason: "This mutation is deprecated, please use `integrationSettingsUpdate` instead")
  """
  Enables Loom integration for the organization.
  """
  integrationLoom: IntegrationPayload! @deprecated(reason: "Not available.")
  """
  Requests a currently unavailable integration.
  """
  integrationRequest(
    """
    Integration request details.
    """
    input: IntegrationRequestInput!
  ): IntegrationRequestPayload!
  """
  Integrates the organization with Sentry.
  """
  integrationSentryConnect(
    """
    The Sentry grant code that's exchanged for OAuth tokens.
    """
    code: String!
    """
    The Sentry installationId to connect with.
    """
    installationId: String!
    """
    The slug of the Sentry organization being connected.
    """
    organizationSlug: String!
  ): IntegrationPayload!
  """
  [INTERNAL] Updates the integration.
  """
  integrationSettingsUpdate(
    """
    The identifier of the integration to update.
    """
    id: String!
    """
    An integration settings object.
    """
    input: IntegrationSettingsInput!
  ): IntegrationPayload!
  """
  Integrates the organization with Slack.
  """
  integrationSlack(
    """
    The Slack OAuth code.
    """
    code: String!
    """
    The Slack OAuth redirect URI.
    """
    redirectUri: String!
    """
    [DEPRECATED] Whether or not v2 of Slack OAuth should be used. No longer used.
    """
    shouldUseV2Auth: Boolean
  ): IntegrationPayload!
  """
  Imports custom emojis from your Slack workspace.
  """
  integrationSlackImportEmojis(
    """
    The Slack OAuth code.
    """
    code: String!
    """
    The Slack OAuth redirect URI.
    """
    redirectUri: String!
  ): IntegrationPayload!
  """
  Integrates the organization with Slack for issue intake.
  """
  integrationSlackIntake(
    """
    The Slack OAuth code.
    """
    code: String!
    """
    The Slack OAuth redirect URI.
    """
    redirectUri: String!
  ): IntegrationPayload!
  """
  Slack integration for organization level project update notifications.
  """
  integrationSlackOrgProjectUpdatesPost(
    """
    The Slack OAuth code.
    """
    code: String!
    """
    The Slack OAuth redirect URI.
    """
    redirectUri: String!
  ): IntegrationPayload!
  """
  Integrates your personal notifications with Slack.
  """
  integrationSlackPersonal(
    """
    The Slack OAuth code.
    """
    code: String!
    """
    The Slack OAuth redirect URI.
    """
    redirectUri: String!
  ): IntegrationPayload!
  """
  Slack webhook integration.
  """
  integrationSlackPost(
    """
    The Slack OAuth code.
    """
    code: String!
    """
    The Slack OAuth redirect URI.
    """
    redirectUri: String!
    """
    [DEPRECATED] Whether or not v2 of Slack OAuth should be used. No longer used.
    """
    shouldUseV2Auth: Boolean
    """
    Integration's associated team.
    """
    teamId: String!
  ): IntegrationPayload!
  """
  Slack integration for project notifications.
  """
  integrationSlackProjectPost(
    """
    The Slack OAuth code.
    """
    code: String!
    """
    Integration's associated project.
    """
    projectId: String!
    """
    The Slack OAuth redirect URI.
    """
    redirectUri: String!
    """
    The service to enable once connected, either 'notifications' or 'updates'.
    """
    service: String!
  ): IntegrationPayload!
  """
  Creates a new integrationTemplate join.
  """
  integrationTemplateCreate(
    """
    The properties of the integrationTemplate to create.
    """
    input: IntegrationTemplateCreateInput!
  ): IntegrationTemplatePayload!
  """
  Deletes a integrationTemplate.
  """
  integrationTemplateDelete(
    """
    The identifier of the integrationTemplate to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Updates the organization's Slack integration.
  """
  integrationUpdateSlack(
    """
    The Slack OAuth code.
    """
    code: String!
    """
    The Slack OAuth redirect URI.
    """
    redirectUri: String!
  ): IntegrationPayload!
  """
  Integrates the organization with Zendesk.
  """
  integrationZendesk(
    """
    The Zendesk OAuth code.
    """
    code: String!
    """
    The Zendesk OAuth redirect URI.
    """
    redirectUri: String!
    """
    The Zendesk OAuth scopes.
    """
    scope: String!
    """
    The Zendesk installation subdomain.
    """
    subdomain: String!
  ): IntegrationPayload!
  """
  Creates new settings for one or more integrations.
  """
  integrationsSettingsCreate(
    """
    The settings to create.
    """
    input: IntegrationsSettingsCreateInput!
  ): IntegrationsSettingsPayload!
  """
  Updates settings related to integrations for a project or a team.
  """
  integrationsSettingsUpdate(
    """
    The identifier of the settings to update.
    """
    id: String!
    """
    A settings object to update the settings with.
    """
    input: IntegrationsSettingsUpdateInput!
  ): IntegrationsSettingsPayload!
  """
  Archives an issue.
  """
  issueArchive(
    """
    The identifier of the issue to archive.
    """
    id: String!
    """
    Whether to trash the issue
    """
    trash: Boolean
  ): ArchivePayload!
  """
  Updates multiple issues at once.
  """
  issueBatchUpdate(
    """
    The id's of the issues to update. Can't be more than 50 at a time.
    """
    ids: [UUID!]!
    """
    A partial issue object to update the issues with.
    """
    input: IssueUpdateInput!
  ): IssueBatchPayload!
  """
  Creates a new issue.
  """
  issueCreate(
    """
    The issue object to create.
    """
    input: IssueCreateInput!
  ): IssuePayload!
  """
  Deletes (trashes) an issue.
  """
  issueDelete(
    """
    The identifier of the issue to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  [INTERNAL] Updates an issue description from the Front app to handle Front attachments correctly.
  """
  issueDescriptionUpdateFromFront(
    """
    Description to update the issue with.
    """
    description: String!
    """
    The identifier of the issue to update.
    """
    id: String!
  ): IssuePayload!
  """
  Kicks off an Asana import job.
  """
  issueImportCreateAsana(
    """
    Asana team name to choose which issues we should import.
    """
    asanaTeamName: String!
    """
    Asana token to fetch information from the Asana API.
    """
    asanaToken: String!
    """
    ID of issue import. If not provided it will be generated.
    """
    id: String
    """
    Whether or not we should collect the data for closed issues.
    """
    includeClosedIssues: Boolean
    """
    Whether to instantly process the import with the default configuration mapping.
    """
    instantProcess: Boolean
    """
    ID of the organization into which to import data.
    """
    organizationId: String
    """
    ID of the team into which to import data.
    """
    teamId: String
    """
    Name of new team. When teamId is not set.
    """
    teamName: String
  ): IssueImportPayload!
  """
  Kicks off a Jira import job from a CSV.
  """
  issueImportCreateCSVJira(
    """
    URL for the CSV.
    """
    csvUrl: String!
    """
    Jira user account email.
    """
    jiraEmail: String
    """
    Jira installation or cloud hostname.
    """
    jiraHostname: String
    """
    Jira personal access token to access Jira REST API.
    """
    jiraToken: String
    """
    ID of the organization into which to import data.
    """
    organizationId: String
    """
    ID of the team into which to import data. Empty to create new team.
    """
    teamId: String
    """
    Name of new team. When teamId is not set.
    """
    teamName: String
  ): IssueImportPayload!
  """
  Kicks off a Shortcut (formerly Clubhouse) import job.
  """
  issueImportCreateClubhouse(
    """
    Shortcut (formerly Clubhouse) group name to choose which issues we should import.
    """
    clubhouseGroupName: String!
    """
    Shortcut (formerly Clubhouse) token to fetch information from the Clubhouse API.
    """
    clubhouseToken: String!
    """
    ID of issue import. If not provided it will be generated.
    """
    id: String
    """
    Whether or not we should collect the data for closed issues.
    """
    includeClosedIssues: Boolean
    """
    Whether to instantly process the import with the default configuration mapping.
    """
    instantProcess: Boolean
    """
    ID of the organization into which to import data.
    """
    organizationId: String
    """
    ID of the team into which to import data.
    """
    teamId: String
    """
    Name of new team. When teamId is not set.
    """
    teamName: String
  ): IssueImportPayload!
  """
  Kicks off a GitHub import job.
  """
  issueImportCreateGithub(
    """
    GitHub repository name from which we will import data.
    """
    githubRepoName: String!
    """
    GitHub owner (user or org) for the repository from which we will import data.
    """
    githubRepoOwner: String!
    """
    Whether or not we should import GitHub organization level projects.
    """
    githubShouldImportOrgProjects: Boolean
    """
    GitHub token to fetch information from the GitHub API.
    """
    githubToken: String!
    """
    ID of issue import. If not provided it will be generated.
    """
    id: String
    """
    Whether or not we should collect the data for closed issues.
    """
    includeClosedIssues: Boolean
    """
    Whether to instantly process the import with the default configuration mapping.
    """
    instantProcess: Boolean
    """
    ID of the organization into which to import data.
    """
    organizationId: String
    """
    ID of the team into which to import data.
    """
    teamId: String
    """
    Name of new team. When teamId is not set.
    """
    teamName: String
  ): IssueImportPayload!
  """
  Kicks off a Jira import job.
  """
  issueImportCreateJira(
    """
    ID of issue import. If not provided it will be generated.
    """
    id: String
    """
    Whether or not we should collect the data for closed issues.
    """
    includeClosedIssues: Boolean
    """
    Whether to instantly process the import with the default configuration mapping.
    """
    instantProcess: Boolean
    """
    Jira user account email.
    """
    jiraEmail: String!
    """
    Jira installation or cloud hostname.
    """
    jiraHostname: String!
    """
    Jira project key from which we will import data.
    """
    jiraProject: String!
    """
    Jira personal access token to access Jira REST API.
    """
    jiraToken: String!
    """
    ID of the organization into which to import data.
    """
    organizationId: String
    """
    ID of the team into which to import data. Empty to create new team.
    """
    teamId: String
    """
    Name of new team. When teamId is not set.
    """
    teamName: String
  ): IssueImportPayload!
  """
  Deletes an import job.
  """
  issueImportDelete(
    """
    ID of the issue import to delete.
    """
    issueImportId: String!
  ): IssueImportDeletePayload!
  """
  Kicks off import processing.
  """
  issueImportProcess(
    """
    ID of the issue import which we're going to process.
    """
    issueImportId: String!
    """
    The mapping configuration to use for processing the import.
    """
    mapping: JSONObject!
  ): IssueImportPayload!
  """
  Updates the mapping for the issue import.
  """
  issueImportUpdate(
    """
    The identifier of the issue import.
    """
    id: String!
    """
    The properties of the issue import to update.
    """
    input: IssueImportUpdateInput!
  ): IssueImportPayload!
  """
  Deletes an issue label.
  """
  issueLabelArchive(
    """
    The identifier of the label to archive.
    """
    id: String!
  ): ArchivePayload! @deprecated(reason: "Labels are deleted instead of archived now!")
  """
  Creates a new label.
  """
  issueLabelCreate(
    """
    The issue label to create.
    """
    input: IssueLabelCreateInput!
    """
    Whether to replace all team-specific labels with the same name with this newly created workspace label.
    """
    replaceTeamLabels: Boolean
  ): IssueLabelPayload!
  """
  Deletes an issue label.
  """
  issueLabelDelete(
    """
    The identifier of the label to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Updates an label.
  """
  issueLabelUpdate(
    """
    The identifier of the label to update.
    """
    id: String!
    """
    A partial label object to update.
    """
    input: IssueLabelUpdateInput!
  ): IssueLabelPayload!
  """
  Creates a new issue relation.
  """
  issueRelationCreate(
    """
    The issue relation to create.
    """
    input: IssueRelationCreateInput!
  ): IssueRelationPayload!
  """
  Deletes an issue relation.
  """
  issueRelationDelete(
    """
    The identifier of the issue relation to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Updates an issue relation.
  """
  issueRelationUpdate(
    """
    The identifier of the issue relation to update.
    """
    id: String!
    """
    The properties of the issue relation to update.
    """
    input: IssueRelationUpdateInput!
  ): IssueRelationPayload!
  """
  Adds an issue reminder. Will cause a notification to be sent when the issue reminder time is reached.
  """
  issueReminder(
    """
    The identifier of the issue to add a reminder for.
    """
    id: String!
    """
    The time when a reminder notification will be sent.
    """
    reminderAt: DateTime!
  ): IssuePayload!
  """
  Unarchives an issue.
  """
  issueUnarchive(
    """
    The identifier of the issue to archive.
    """
    id: String!
  ): ArchivePayload!
  """
  Updates an issue.
  """
  issueUpdate(
    """
    The identifier of the issue to update.
    """
    id: String!
    """
    A partial issue object to update the issue with.
    """
    input: IssueUpdateInput!
  ): IssuePayload!
  """
  [INTERNAL] Connects the organization with a Jira Personal Access Token.
  """
  jiraIntegrationConnect(
    """
    Jira integration settings.
    """
    input: JiraConfigurationInput!
  ): IntegrationPayload!
  """
  Join an organization from onboarding.
  """
  joinOrganizationFromOnboarding(
    """
    Organization details for the organization to join.
    """
    input: JoinOrganizationInput!
  ): CreateOrJoinOrganizationResponse!
  """
  Leave an organization.
  """
  leaveOrganization(
    """
    ID of the organization to leave.
    """
    organizationId: String!
  ): CreateOrJoinOrganizationResponse!
  """
  Logout of all clients.
  """
  logout: LogoutResponse!
  """
  Archives a notification.
  """
  notificationArchive(
    """
    The id of the notification to archive.
    """
    id: String!
  ): ArchivePayload!
  """
  Creates a new notification subscription for a team or a project.
  """
  notificationSubscriptionCreate(
    """
    The subscription object to create.
    """
    input: NotificationSubscriptionCreateInput!
  ): NotificationSubscriptionPayload!
  """
  Deletes a notification subscription reference.
  """
  notificationSubscriptionDelete(
    """
    The identifier of the notification subscription reference to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Updates a notification subscription.
  """
  notificationSubscriptionUpdate(
    """
    The identifier of the notification subscription to update.
    """
    id: String!
    """
    A partial notification subscription object to update the notification subscription with.
    """
    input: NotificationSubscriptionUpdateInput!
  ): NotificationSubscriptionPayload!
  """
  Unarchives a notification.
  """
  notificationUnarchive(
    """
    The id of the notification to archive.
    """
    id: String!
  ): ArchivePayload!
  """
  Updates a notification.
  """
  notificationUpdate(
    """
    The identifier of the notification to update.
    """
    id: String!
    """
    A partial notification object to update the notification with.
    """
    input: NotificationUpdateInput!
  ): NotificationPayload!
  """
  Cancels the deletion of an organization. Administrator privileges required.
  """
  organizationCancelDelete: OrganizationCancelDeletePayload!
  """
  Delete's an organization. Administrator privileges required.
  """
  organizationDelete(
    """
    Information required to delete an organization.
    """
    input: DeleteOrganizationInput!
  ): OrganizationDeletePayload!
  """
  Get an organization's delete confirmation token. Administrator privileges required.
  """
  organizationDeleteChallenge: OrganizationDeletePayload!
  """
  [INTERNAL] Verifies a domain claim.
  """
  organizationDomainClaim(
    """
    The ID of the organization domain to claim.
    """
    id: String!
  ): OrganizationDomainSimplePayload!
  """
  [INTERNAL] Adds a domain to be allowed for an organization.
  """
  organizationDomainCreate(
    """
    The organization domain entry to create.
    """
    input: OrganizationDomainCreateInput!
    """
    Whether to trigger an email verification flow during domain creation.
    """
    triggerEmailVerification: Boolean
  ): OrganizationDomainPayload!
  """
  Deletes a domain.
  """
  organizationDomainDelete(
    """
    The identifier of the domain to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  [INTERNAL] Verifies a domain to be added to an organization.
  """
  organizationDomainVerify(
    """
    The organization domain to verify.
    """
    input: OrganizationDomainVerificationInput!
  ): OrganizationDomainPayload!
  """
  Creates a new organization invite.
  """
  organizationInviteCreate(
    """
    The organization invite object to create.
    """
    input: OrganizationInviteCreateInput!
  ): OrganizationInvitePayload!
  """
  Deletes an organization invite.
  """
  organizationInviteDelete(
    """
    The identifier of the organization invite to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Updates an organization invite.
  """
  organizationInviteUpdate(
    """
    The identifier of the organization invite to update.
    """
    id: String!
    """
    The updates to make to the organization invite object.
    """
    input: OrganizationInviteUpdateInput!
  ): OrganizationInvitePayload!
  """
  Starts a plus trial for the organization. Administrator privileges required.
  """
  organizationStartPlusTrial: OrganizationStartPlusTrialPayload!
  """
  Updates the user's organization.
  """
  organizationUpdate(
    """
    A partial organization object to update the organization with.
    """
    input: UpdateOrganizationInput!
  ): OrganizationPayload!
  """
  Archives a project.
  """
  projectArchive(
    """
    The identifier of the project to archive. Also the identifier from the URL is accepted.
    """
    id: String!
  ): ArchivePayload! @deprecated(reason: "Deprecated in favor of projectDelete.")
  """
  Creates a new project.
  """
  projectCreate(
    """
    The issue object to create.
    """
    input: ProjectCreateInput!
  ): ProjectPayload!
  """
  Deletes a project. All issues will be disassociated from the deleted project.
  """
  projectDelete(
    """
    The identifier of the project to delete. Also the identifier from the URL is accepted.
    """
    id: String!
  ): ArchivePayload!
  """
  Creates a new project link.
  """
  projectLinkCreate(
    """
    The project link object to create.
    """
    input: ProjectLinkCreateInput!
  ): ProjectLinkPayload!
  """
  Deletes a project link.
  """
  projectLinkDelete(
    """
    The identifier of the project link to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Updates a project link.
  """
  projectLinkUpdate(
    """
    The identifier of the project link to update.
    """
    id: String!
    """
    The project link object to update.
    """
    input: ProjectLinkUpdateInput!
  ): ProjectLinkPayload!
  """
  Creates a new project milestone.
  """
  projectMilestoneCreate(
    """
    The project milestone to create.
    """
    input: ProjectMilestoneCreateInput!
  ): ProjectMilestonePayload!
  """
  Deletes a project milestone.
  """
  projectMilestoneDelete(
    """
    The identifier of the project milestone to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Updates a project milestone.
  """
  projectMilestoneUpdate(
    """
    The identifier of the project milestone to update. Also the identifier from the URL is accepted.
    """
    id: String!
    """
    A partial object to update the project milestone with.
    """
    input: ProjectMilestoneUpdateInput!
  ): ProjectMilestonePayload!
  """
  Unarchives a project.
  """
  projectUnarchive(
    """
    The identifier of the project to restore. Also the identifier from the URL is accepted.
    """
    id: String!
  ): ArchivePayload!
  """
  Updates a project.
  """
  projectUpdate(
    """
    The identifier of the project to update. Also the identifier from the URL is accepted.
    """
    id: String!
    """
    A partial project object to update the project with.
    """
    input: ProjectUpdateInput!
  ): ProjectPayload!
  """
  Creates a new project update.
  """
  projectUpdateCreate(
    """
    Data for the project update to create.
    """
    input: ProjectUpdateCreateInput!
  ): ProjectUpdatePayload!
  """
  Deletes a project update.
  """
  projectUpdateDelete(
    """
    The identifier of the project update to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Creates a new interaction on a project update.
  """
  projectUpdateInteractionCreate(
    """
    Data for the project update interaction to create.
    """
    input: ProjectUpdateInteractionCreateInput!
  ): ProjectUpdateInteractionPayload!
  """
  Mark a project update as read.
  """
  projectUpdateMarkAsRead(
    """
    The identifier of the project update.
    """
    id: String!
  ): ProjectUpdateWithInteractionPayload!
  """
  Updates a project update.
  """
  projectUpdateUpdate(
    """
    The identifier of the project update to update.
    """
    id: String!
    """
    A data to update the project update with.
    """
    input: ProjectUpdateUpdateInput!
  ): ProjectUpdatePayload!
  """
  Creates a push subscription.
  """
  pushSubscriptionCreate(
    """
    The push subscription to create.
    """
    input: PushSubscriptionCreateInput!
  ): PushSubscriptionPayload!
  """
  Deletes a push subscription.
  """
  pushSubscriptionDelete(
    """
    The identifier of the push subscription to delete.
    """
    id: String!
  ): PushSubscriptionPayload!
  """
  Creates a new reaction.
  """
  reactionCreate(
    """
    The reaction object to create.
    """
    input: ReactionCreateInput!
  ): ReactionPayload!
  """
  Deletes a reaction.
  """
  reactionDelete(
    """
    The identifier of the reaction to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Manually update Google Sheets data.
  """
  refreshGoogleSheetsData(
    """
    The identifier of the Google Sheets integration to update.
    """
    id: String!
  ): IntegrationPayload!
  """
  Re-send an organization invite.
  """
  resendOrganizationInvite(
    """
    The identifier of the organization invite to be re-send.
    """
    id: String!
  ): ArchivePayload!
  """
  Archives a roadmap.
  """
  roadmapArchive(
    """
    The identifier of the roadmap to archive.
    """
    id: String!
  ): ArchivePayload!
  """
  Creates a new roadmap.
  """
  roadmapCreate(
    """
    The properties of the roadmap to create.
    """
    input: RoadmapCreateInput!
  ): RoadmapPayload!
  """
  Deletes a roadmap.
  """
  roadmapDelete(
    """
    The identifier of the roadmap to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Creates a new roadmapToProject join.
  """
  roadmapToProjectCreate(
    """
    The properties of the roadmapToProject to create.
    """
    input: RoadmapToProjectCreateInput!
  ): RoadmapToProjectPayload!
  """
  Deletes a roadmapToProject.
  """
  roadmapToProjectDelete(
    """
    The identifier of the roadmapToProject to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Updates a roadmapToProject.
  """
  roadmapToProjectUpdate(
    """
    The identifier of the roadmapToProject to update.
    """
    id: String!
    """
    The properties of the roadmapToProject to update.
    """
    input: RoadmapToProjectUpdateInput!
  ): RoadmapToProjectPayload!
  """
  Unarchives a roadmap.
  """
  roadmapUnarchive(
    """
    The identifier of the roadmap to unarchive.
    """
    id: String!
  ): ArchivePayload!
  """
  Updates a roadmap.
  """
  roadmapUpdate(
    """
    The identifier of the roadmap to update.
    """
    id: String!
    """
    The properties of the roadmap to update.
    """
    input: RoadmapUpdateInput!
  ): RoadmapPayload!
  """
  Authenticates a user account via email and authentication token for SAML.
  """
  samlTokenUserAccountAuth(
    """
    The data used for token authentication.
    """
    input: TokenUserAccountAuthInput!
  ): AuthResolverResponse!
  """
  Creates a new team. The user who creates the team will automatically be added as a member to the newly created team.
  """
  teamCreate(
    """
    The team id to copy settings from.
    """
    copySettingsFromTeamId: String
    """
    The team object to create.
    """
    input: TeamCreateInput!
  ): TeamPayload!
  """
  Deletes team's cycles data
  """
  teamCyclesDelete(
    """
    The identifier of the team, which cycles will be deleted.
    """
    id: String!
  ): TeamPayload!
  """
  Deletes a team.
  """
  teamDelete(
    """
    The identifier of the team to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Deletes a previously used team key.
  """
  teamKeyDelete(
    """
    The identifier of the team key to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Creates a new team membership.
  """
  teamMembershipCreate(
    """
    The team membership object to create.
    """
    input: TeamMembershipCreateInput!
  ): TeamMembershipPayload!
  """
  Deletes a team membership.
  """
  teamMembershipDelete(
    """
    The identifier of the team membership to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Updates a team membership.
  """
  teamMembershipUpdate(
    """
    The identifier of the team membership to update.
    """
    id: String!
    """
    A partial team membership object to update the team membership with.
    """
    input: TeamMembershipUpdateInput!
  ): TeamMembershipPayload!
  """
  Updates a team.
  """
  teamUpdate(
    """
    The identifier of the team to update.
    """
    id: String!
    """
    A partial team object to update the team with.
    """
    input: TeamUpdateInput!
  ): TeamPayload!
  """
  Creates a new template.
  """
  templateCreate(
    """
    The template object to create.
    """
    input: TemplateCreateInput!
  ): TemplatePayload!
  """
  Deletes a template.
  """
  templateDelete(
    """
    The identifier of the template to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Updates an existing template.
  """
  templateUpdate(
    """
    The identifier of the template.
    """
    id: String!
    """
    The properties of the template to update.
    """
    input: TemplateUpdateInput!
  ): TemplatePayload!
  """
  Makes user a regular user. Can only be called by an admin.
  """
  userDemoteAdmin(
    """
    The identifier of the user to make a regular user.
    """
    id: String!
  ): UserAdminPayload!
  """
  Makes user a guest. Can only be called by an admin.
  """
  userDemoteMember(
    """
    The identifier of the user to make a guest.
    """
    id: String!
  ): UserAdminPayload!
  """
  Connects the Discord user to this Linear account via OAuth2.
  """
  userDiscordConnect(
    """
    The Discord OAuth code.
    """
    code: String!
    """
    The Discord OAuth redirect URI.
    """
    redirectUri: String!
  ): UserPayload!
  """
  Disconnects the external user from this Linear account.
  """
  userExternalUserDisconnect(
    """
    The external service to disconnect
    """
    service: String!
  ): UserPayload!
  """
  Updates a user's settings flag.
  """
  userFlagUpdate(
    """
    Settings flag to increment.
    """
    flag: UserFlagType!
    """
    Flag operation to perform
    """
    operation: UserFlagUpdateOperation!
  ): UserSettingsFlagPayload!
  """
  Connects the GitHub user to this Linear account via OAuth2.
  """
  userGitHubConnect(
    """
    The GitHub OAuth code.
    """
    code: String!
  ): UserPayload!
  """
  Connects the Google Calendar to the user to this Linear account via OAuth2.
  """
  userGoogleCalendarConnect(
    """
    [Internal] The Google OAuth code.
    """
    code: String!
  ): UserPayload!
  """
  Connects the Jira user to this Linear account via OAuth2.
  """
  userJiraConnect(
    """
    The Jira OAuth code.
    """
    code: String!
  ): UserPayload!
  """
  Makes user an admin. Can only be called by an admin.
  """
  userPromoteAdmin(
    """
    The identifier of the user to make an admin.
    """
    id: String!
  ): UserAdminPayload!
  """
  Makes user a regular user. Can only be called by an admin.
  """
  userPromoteMember(
    """
    The identifier of the user to make a regular user.
    """
    id: String!
  ): UserAdminPayload!
  """
  [Deprecated] Updates a user's settings flag.
  """
  userSettingsFlagIncrement(
    """
    Flag to increment.
    """
    flag: String!
  ): UserSettingsFlagPayload!
  """
  Resets user's setting flags.
  """
  userSettingsFlagsReset(
    """
    The flags to reset. If not provided all flags will be reset.
    """
    flags: [UserFlagType!]
  ): UserSettingsFlagsResetPayload!
  """
  Updates the user's settings.
  """
  userSettingsUpdate(
    """
    The identifier of the userSettings to update.
    """
    id: String!
    """
    A partial notification object to update the settings with.
    """
    input: UserSettingsUpdateInput!
  ): UserSettingsPayload!
  """
  Suspends a user. Can only be called by an admin.
  """
  userSuspend(
    """
    The identifier of the user to suspend.
    """
    id: String!
  ): UserAdminPayload!
  """
  Un-suspends a user. Can only be called by an admin.
  """
  userUnsuspend(
    """
    The identifier of the user to unsuspend.
    """
    id: String!
  ): UserAdminPayload!
  """
  Updates a user. Only available to organization admins and the user themselves.
  """
  userUpdate(
    """
    The identifier of the user to update. Use `me` to reference currently authenticated user.
    """
    id: String!
    """
    A partial user object to update the user with.
    """
    input: UpdateUserInput!
  ): UserPayload!
  """
  Creates a new ViewPreferences object.
  """
  viewPreferencesCreate(
    """
    The ViewPreferences object to create.
    """
    input: ViewPreferencesCreateInput!
  ): ViewPreferencesPayload!
  """
  Deletes a ViewPreferences.
  """
  viewPreferencesDelete(
    """
    The identifier of the ViewPreferences to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Updates an existing ViewPreferences object.
  """
  viewPreferencesUpdate(
    """
    The identifier of the ViewPreferences object.
    """
    id: String!
    """
    The properties of the view preferences.
    """
    input: ViewPreferencesUpdateInput!
  ): ViewPreferencesPayload!
  """
  Creates a new webhook.
  """
  webhookCreate(
    """
    The webhook object to create.
    """
    input: WebhookCreateInput!
  ): WebhookPayload!
  """
  Deletes a Webhook.
  """
  webhookDelete(
    """
    The identifier of the Webhook to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Updates an existing Webhook.
  """
  webhookUpdate(
    """
    The identifier of the Webhook.
    """
    id: String!
    """
    The properties of the Webhook.
    """
    input: WebhookUpdateInput!
  ): WebhookPayload!
  """
  Archives a state. Only states with issues that have all been archived can be archived.
  """
  workflowStateArchive(
    """
    The identifier of the state to archive.
    """
    id: String!
  ): ArchivePayload!
  """
  Creates a new state, adding it to the workflow of a team.
  """
  workflowStateCreate(
    """
    The state to create.
    """
    input: WorkflowStateCreateInput!
  ): WorkflowStatePayload!
  """
  Updates a state.
  """
  workflowStateUpdate(
    """
    The identifier of the state to update.
    """
    id: String!
    """
    A partial state object to update.
    """
    input: WorkflowStateUpdateInput!
  ): WorkflowStatePayload!
}

interface Node {
  """
  The unique identifier of the entity.
  """
  id: ID!
}

"""
A notification sent to a user.
"""
interface Notification implements Entity & Node {
  """
  The user that caused the notification.
  """
  actor: User
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The time at when an email reminder for this notification was sent to the user. Null, if no email
      reminder has been sent.
  """
  emailedAt: DateTime
  """
  The external user that caused the notification.
  """
  externalUserActor: ExternalUser
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The time at when the user marked the notification as read. Null, if the the user hasn't read the notification
  """
  readAt: DateTime
  """
  The time until a notification will be snoozed. After that it will appear in the inbox again.
  """
  snoozedUntilAt: DateTime
  """
  Notification type
  """
  type: String!
  """
  The time at which a notification was unsnoozed..
  """
  unsnoozedAt: DateTime
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
  """
  The user that received the notification.
  """
  user: User!
}

type NotificationConnection {
  edges: [NotificationEdge!]!
  nodes: [Notification!]!
  pageInfo: PageInfo!
}

type NotificationEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: Notification!
}

type NotificationPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The notification that was created or updated.
  """
  notification: Notification!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

"""
Notification subscriptions for models.
"""
interface NotificationSubscription implements Entity & Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  Subscribed project.
  """
  project: Project
  """
  Subscribed team.
  """
  team: Team
  """
  The type of the subscription.
  """
  type: String!
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
  """
  The user associated with notification subscriptions.
  """
  user: User!
}

type NotificationSubscriptionConnection {
  edges: [NotificationSubscriptionEdge!]!
  nodes: [NotificationSubscription!]!
  pageInfo: PageInfo!
}

input NotificationSubscriptionCreateInput {
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String
  """
  The identifier of the project to subscribe to.
  """
  projectId: String
  """
  The type of the project subscription.
  """
  projectNotificationSubscriptionType: ProjectNotificationSubscriptionType
  """
  The identifier of the team to subscribe to.
  """
  teamId: String
  """
  The types of notifications of the team subscription.
  """
  teamNotificationSubscriptionTypes: [String!]
}

type NotificationSubscriptionEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: NotificationSubscription!
}

type NotificationSubscriptionPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The notification subscription that was created or updated.
  """
  notificationSubscription: NotificationSubscription!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

input NotificationSubscriptionUpdateInput {
  """
  The type of the project subscription.
  """
  projectNotificationSubscriptionType: ProjectNotificationSubscriptionType
  """
  The types of notifications of the team subscription.
  """
  teamNotificationSubscriptionTypes: [String!]
}

input NotificationUpdateInput {
  """
  The id of the project update related to the notification.
  """
  projectUpdateId: String
  """
  The time when notification was marked as read.
  """
  readAt: DateTime
  """
  The time until a notification will be snoozed. After that it will appear in the inbox again.
  """
  snoozedUntilAt: DateTime
}

"""
Notion specific settings.
"""
type NotionSettings {
  """
  The ID of the Notion workspace being connected.
  """
  workspaceId: String!
  """
  The name of the Notion workspace being connected.
  """
  workspaceName: String!
}

input NotionSettingsInput {
  """
  The ID of the Notion workspace being connected.
  """
  workspaceId: String!
  """
  The name of the Notion workspace being connected.
  """
  workspaceName: String!
}

"""
Cycle filtering options.
"""
input NullableCycleFilter {
  """
  Compound filters, one of which need to be matched by the cycle.
  """
  and: [NullableCycleFilter!]
  """
  Comparator for the cycle completed at date.
  """
  completedAt: DateComparator
  """
  Comparator for the created at date.
  """
  createdAt: DateComparator
  """
  Comparator for the cycle ends at date.
  """
  endsAt: DateComparator
  """
  Comparator for the identifier.
  """
  id: IDComparator
  """
  Comparator for the filtering active cycle.
  """
  isActive: BooleanComparator
  """
  Comparator for the filtering future cycles.
  """
  isFuture: BooleanComparator
  """
  Comparator for the filtering next cycle.
  """
  isNext: BooleanComparator
  """
  Comparator for the filtering past cycles.
  """
  isPast: BooleanComparator
  """
  Comparator for the filtering previous cycle.
  """
  isPrevious: BooleanComparator
  """
  Filters that the cycles issues must satisfy.
  """
  issues: IssueCollectionFilter
  """
  Comparator for the cycle name.
  """
  name: StringComparator
  """
  Filter based on the existence of the relation.
  """
  null: Boolean
  """
  Comparator for the cycle number.
  """
  number: NumberComparator
  """
  Compound filters, one of which need to be matched by the cycle.
  """
  or: [NullableCycleFilter!]
  """
  Comparator for the cycle start date.
  """
  startsAt: DateComparator
  """
  Filters that the cycles team must satisfy.
  """
  team: TeamFilter
  """
  Comparator for the updated at date.
  """
  updatedAt: DateComparator
}

"""
Comparator for optional dates.
"""
input NullableDateComparator {
  """
  Equals constraint.
  """
  eq: DateTime
  """
  Greater-than constraint. Matches any values that are greater than the given value.
  """
  gt: DateTime
  """
  Greater-than-or-equal constraint. Matches any values that are greater than or equal to the given value.
  """
  gte: DateTime
  """
  In-array constraint.
  """
  in: [DateTime!]
  """
  Less-than constraint. Matches any values that are less than the given value.
  """
  lt: DateTime
  """
  Less-than-or-equal constraint. Matches any values that are less than or equal to the given value.
  """
  lte: DateTime
  """
  Not-equals constraint.
  """
  neq: DateTime
  """
  Not-in-array constraint.
  """
  nin: [DateTime!]
  """
  Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values.
  """
  null: Boolean
}

"""
Issue filtering options.
"""
input NullableIssueFilter {
  """
  Compound filters, all of which need to be matched by the issue.
  """
  and: [NullableIssueFilter!]
  """
  Filters that the issues assignee must satisfy.
  """
  assignee: NullableUserFilter
  """
  Filters that the issues attachments must satisfy.
  """
  attachments: AttachmentCollectionFilter
  """
  Comparator for the issues auto archived at date.
  """
  autoArchivedAt: NullableDateComparator
  """
  Comparator for the issues auto closed at date.
  """
  autoClosedAt: NullableDateComparator
  """
  Comparator for the issues canceled at date.
  """
  canceledAt: NullableDateComparator
  """
  Filters that the child issues must satisfy.
  """
  children: IssueCollectionFilter
  """
  Filters that the issues comments must satisfy.
  """
  comments: CommentCollectionFilter
  """
  Comparator for the issues completed at date.
  """
  completedAt: NullableDateComparator
  """
  Comparator for the created at date.
  """
  createdAt: DateComparator
  """
  Filters that the issues creator must satisfy.
  """
  creator: NullableUserFilter
  """
  Filters that the issues cycle must satisfy.
  """
  cycle: NullableCycleFilter
  """
  Comparator for the issues description.
  """
  description: NullableStringComparator
  """
  Comparator for the issues due date.
  """
  dueDate: NullableTimelessDateComparator
  """
  Comparator for the issues estimate.
  """
  estimate: EstimateComparator
  """
  Comparator for filtering issues which are blocked.
  """
  hasBlockedByRelations: RelationExistsComparator
  """
  Comparator for filtering issues which are blocking.
  """
  hasBlockingRelations: RelationExistsComparator
  """
  Comparator for filtering issues which are duplicates.
  """
  hasDuplicateRelations: RelationExistsComparator
  """
  Comparator for filtering issues with relations.
  """
  hasRelatedRelations: RelationExistsComparator
  """
  Comparator for the identifier.
  """
  id: IDComparator
  """
  Filters that issue labels must satisfy.
  """
  labels: IssueLabelCollectionFilter
  """
  Filter based on the existence of the relation.
  """
  null: Boolean
  """
  Comparator for the issues number.
  """
  number: NumberComparator
  """
  Compound filters, one of which need to be matched by the issue.
  """
  or: [NullableIssueFilter!]
  """
  Filters that the issue parent must satisfy.
  """
  parent: NullableIssueFilter
  """
  Comparator for the issues priority.
  """
  priority: NullableNumberComparator
  """
  Filters that the issues project must satisfy.
  """
  project: NullableProjectFilter
  """
  Filters that the issues project milestone must satisfy.
  """
  projectMilestone: NullableProjectMilestoneFilter
  """
  [Internal] Comparator for the issues content.
  """
  searchableContent: ContentComparator
  """
  Comparator for the issues sla status.
  """
  slaStatus: SlaStatusComparator
  """
  Filters that the issues snoozer must satisfy.
  """
  snoozedBy: NullableUserFilter
  """
  Comparator for the issues snoozed until date.
  """
  snoozedUntilAt: NullableDateComparator
  """
  Comparator for the issues started at date.
  """
  startedAt: NullableDateComparator
  """
  Filters that the issues state must satisfy.
  """
  state: WorkflowStateFilter
  """
  Filters that issue subscribers must satisfy.
  """
  subscribers: UserCollectionFilter
  """
  Filters that the issues team must satisfy.
  """
  team: TeamFilter
  """
  Comparator for the issues title.
  """
  title: StringComparator
  """
  Comparator for the issues triaged at date.
  """
  triagedAt: NullableDateComparator
  """
  Comparator for the updated at date.
  """
  updatedAt: DateComparator
}

"""
Comparator for optional numbers.
"""
input NullableNumberComparator {
  """
  Equals constraint.
  """
  eq: Float
  """
  Greater-than constraint. Matches any values that are greater than the given value.
  """
  gt: Float
  """
  Greater-than-or-equal constraint. Matches any values that are greater than or equal to the given value.
  """
  gte: Float
  """
  In-array constraint.
  """
  in: [Float!]
  """
  Less-than constraint. Matches any values that are less than the given value.
  """
  lt: Float
  """
  Less-than-or-equal constraint. Matches any values that are less than or equal to the given value.
  """
  lte: Float
  """
  Not-equals constraint.
  """
  neq: Float
  """
  Not-in-array constraint.
  """
  nin: [Float!]
  """
  Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values.
  """
  null: Boolean
}

"""
Project filtering options.
"""
input NullableProjectFilter {
  """
  Compound filters, all of which need to be matched by the project.
  """
  and: [NullableProjectFilter!]
  """
  Comparator for the project completion date.
  """
  completedAt: NullableDateComparator
  """
  Filters that the project's completed milestones must satisfy.
  """
  completedProjectMilestones: ProjectMilestoneCollectionFilter
  """
  Comparator for the created at date.
  """
  createdAt: DateComparator
  """
  Filters that the projects creator must satisfy.
  """
  creator: UserFilter
  """
  Comparator for the project health.
  """
  health: StringComparator
  """
  Comparator for the identifier.
  """
  id: IDComparator
  """
  Filters that the projects issues must satisfy.
  """
  issues: IssueCollectionFilter
  """
  Filters that the projects lead must satisfy.
  """
  lead: NullableUserFilter
  """
  Filters that the projects members must satisfy.
  """
  members: UserFilter
  """
  Comparator for the project name.
  """
  name: StringComparator
  """
  Filters that the project's next milestone must satisfy.
  """
  nextProjectMilestone: ProjectMilestoneFilter
  """
  Filter based on the existence of the relation.
  """
  null: Boolean
  """
  Compound filters, one of which need to be matched by the project.
  """
  or: [NullableProjectFilter!]
  """
  Filters that the project's milestones must satisfy.
  """
  projectMilestones: ProjectMilestoneCollectionFilter
  """
  Filters that the projects roadmaps must satisfy.
  """
  roadmaps: RoadmapCollectionFilter
  """
  [Internal] Comparator for the projects content.
  """
  searchableContent: ContentComparator
  """
  Comparator for the project slug ID.
  """
  slugId: StringComparator
  """
  Comparator for the project start date.
  """
  startDate: NullableDateComparator
  """
  Comparator for the project state.
  """
  state: StringComparator
  """
  Comparator for the project target date.
  """
  targetDate: NullableDateComparator
  """
  Comparator for the updated at date.
  """
  updatedAt: DateComparator
}

"""
Project milestone filtering options.
"""
input NullableProjectMilestoneFilter {
  """
  Compound filters, all of which need to be matched by the project milestone.
  """
  and: [NullableProjectMilestoneFilter!]
  """
  Comparator for the created at date.
  """
  createdAt: DateComparator
  """
  Comparator for the identifier.
  """
  id: IDComparator
  """
  Comparator for the project milestone name.
  """
  name: StringComparator
  """
  Filter based on the existence of the relation.
  """
  null: Boolean
  """
  Compound filters, one of which need to be matched by the project milestone.
  """
  or: [NullableProjectMilestoneFilter!]
  """
  Comparator for the project milestone target date.
  """
  targetDate: NullableDateComparator
  """
  Comparator for the updated at date.
  """
  updatedAt: DateComparator
}

"""
Comparator for optional strings.
"""
input NullableStringComparator {
  """
  Contains constraint. Matches any values that contain the given string.
  """
  contains: String
  """
  Contains case insensitive constraint. Matches any values that contain the given string case insensitive.
  """
  containsIgnoreCase: String
  """
  Ends with constraint. Matches any values that end with the given string.
  """
  endsWith: String
  """
  Equals constraint.
  """
  eq: String
  """
  Equals case insensitive. Matches any values that matches the given string case insensitive.
  """
  eqIgnoreCase: String
  """
  In-array constraint.
  """
  in: [String!]
  """
  Not-equals constraint.
  """
  neq: String
  """
  Not-equals case insensitive. Matches any values that don't match the given string case insensitive.
  """
  neqIgnoreCase: String
  """
  Not-in-array constraint.
  """
  nin: [String!]
  """
  Doesn't contain constraint. Matches any values that don't contain the given string.
  """
  notContains: String
  """
  Doesn't contain case insensitive constraint. Matches any values that don't contain the given string case insensitive.
  """
  notContainsIgnoreCase: String
  """
  Doesn't end with constraint. Matches any values that don't end with the given string.
  """
  notEndsWith: String
  """
  Doesn't start with constraint. Matches any values that don't start with the given string.
  """
  notStartsWith: String
  """
  Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values.
  """
  null: Boolean
  """
  Starts with constraint. Matches any values that start with the given string.
  """
  startsWith: String
  """
  Starts with case insensitive constraint. Matches any values that start with the given string.
  """
  startsWithIgnoreCase: String
}

input NullableTimelessDateComparator {
  """
  Equals constraint.
  """
  eq: TimelessDate
  """
  Greater-than constraint. Matches any values that are greater than the given value.
  """
  gt: TimelessDate
  """
  Greater-than-or-equal constraint. Matches any values that are greater than or equal to the given value.
  """
  gte: TimelessDate
  """
  In-array constraint.
  """
  in: [TimelessDate!]
  """
  Less-than constraint. Matches any values that are less than the given value.
  """
  lt: TimelessDate
  """
  Less-than-or-equal constraint. Matches any values that are less than or equal to the given value.
  """
  lte: TimelessDate
  """
  Not-equals constraint.
  """
  neq: TimelessDate
  """
  Not-in-array constraint.
  """
  nin: [TimelessDate!]
  """
  Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values.
  """
  null: Boolean
}

"""
User filtering options.
"""
input NullableUserFilter {
  """
  Comparator for the user's activity status.
  """
  active: BooleanComparator
  """
  Comparator for the user's admin status.
  """
  admin: BooleanComparator
  """
  Compound filters, all of which need to be matched by the user.
  """
  and: [NullableUserFilter!]
  """
  Filters that the users assigned issues must satisfy.
  """
  assignedIssues: IssueCollectionFilter
  """
  Comparator for the created at date.
  """
  createdAt: DateComparator
  """
  Comparator for the user's display name.
  """
  displayName: StringComparator
  """
  Comparator for the user's email.
  """
  email: StringComparator
  """
  Comparator for the identifier.
  """
  id: IDComparator
  """
  Filter based on the currently authenticated user. Set to true to filter for the authenticated user, false for any other user.
  """
  isMe: BooleanComparator
  """
  Comparator for the user's name.
  """
  name: StringComparator
  """
  Filter based on the existence of the relation.
  """
  null: Boolean
  """
  Compound filters, one of which need to be matched by the user.
  """
  or: [NullableUserFilter!]
  """
  Comparator for the updated at date.
  """
  updatedAt: DateComparator
}

"""
Comparator for numbers.
"""
input NumberComparator {
  """
  Equals constraint.
  """
  eq: Float
  """
  Greater-than constraint. Matches any values that are greater than the given value.
  """
  gt: Float
  """
  Greater-than-or-equal constraint. Matches any values that are greater than or equal to the given value.
  """
  gte: Float
  """
  In-array constraint.
  """
  in: [Float!]
  """
  Less-than constraint. Matches any values that are less than the given value.
  """
  lt: Float
  """
  Less-than-or-equal constraint. Matches any values that are less than or equal to the given value.
  """
  lte: Float
  """
  Not-equals constraint.
  """
  neq: Float
  """
  Not-in-array constraint.
  """
  nin: [Float!]
}

"""
The different requests statuses possible for an OAuth client approval request
"""
enum OAuthClientApprovalStatus {
  approved
  denied
  requested
}

"""
OAuth2 client application
"""
type OauthClient implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  OAuth application's client ID.
  """
  clientId: String!
  """
  OAuth application's client secret.
  """
  clientSecret: String!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The user who created the OAuthClient.
  """
  creator: User!
  """
  Information about the application.
  """
  description: String
  """
  Name of the developer.
  """
  developer: String!
  """
  Url of the developer.
  """
  developerUrl: String!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  Image of the application.
  """
  imageUrl: String
  """
  OAuth application's client name.
  """
  name: String!
  """
  The organization that the OAuthClient is associated with.
  """
  organization: Organization!
  """
  Whether the OAuth application is publicly visible, or only visible to the creating workspace.
  """
  publicEnabled: Boolean!
  """
  List of allowed redirect URIs for the application.
  """
  redirectUris: [String!]!
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
  """
  The resource types to request when creating new webhooks.
  """
  webhookResourceTypes: [String!]!
  """
  Webhook secret token for verifying the origin on the recipient side.
  """
  webhookSecret: String
  """
  Webhook URL
  """
  webhookUrl: String
}

"""
Request to install OAuth clients on organizations and the response to the request.
"""
type OauthClientApproval implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The reason the request for the OAuth client approval was denied.
  """
  denyReason: String
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The uuid of the OAuth client being requested for installation.
  """
  oauthClientId: String!
  """
  The reason the person wants to install this OAuth client.
  """
  requestReason: String
  """
  The person who requested installing the OAuth client.
  """
  requesterId: String!
  """
  The person who responded to the request to install the OAuth client.
  """
  responderId: String
  """
  The scopes the app has requested.
  """
  scopes: [String!]!
  """
  The status for the OAuth client approval request.
  """
  status: OAuthClientApprovalStatus!
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
}

"""
An oauth client approval related notification
"""
type OauthClientApprovalNotification implements Entity & Node & Notification {
  """
  The user that caused the notification.
  """
  actor: User
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The time at when an email reminder for this notification was sent to the user. Null, if no email
      reminder has been sent.
  """
  emailedAt: DateTime
  """
  The external user that caused the notification.
  """
  externalUserActor: ExternalUser
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The OAuth client approval request related to the notification.
  """
  oauthClientApproval: OauthClientApproval!
  """
  The time at when the user marked the notification as read. Null, if the the user hasn't read the notification
  """
  readAt: DateTime
  """
  The time until a notification will be snoozed. After that it will appear in the inbox again.
  """
  snoozedUntilAt: DateTime
  """
  Notification type
  """
  type: String!
  """
  The time at which a notification was unsnoozed..
  """
  unsnoozedAt: DateTime
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
  """
  The user that received the notification.
  """
  user: User!
}

type OauthClientConnection {
  edges: [OauthClientEdge!]!
  nodes: [OauthClient!]!
  pageInfo: PageInfo!
}

type OauthClientEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: OauthClient!
}

input OnboardingCustomerSurvey {
  companyRole: String
  companySize: String
}

"""
An organization. Organizations are root-level objects that contain user accounts and teams.
"""
type Organization implements Node {
  """
  Allowed authentication providers, empty array means all are allowed
  """
  allowedAuthServices: [String!]!
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  Number of issues in the organization.
  """
  createdIssueCount: Int!
  """
  The time at which deletion of the organization was requested.
  """
  deletionRequestedAt: DateTime
  """
  How git branches are formatted. If null, default formatting will be used.
  """
  gitBranchFormat: String
  """
  Whether the Git integration linkback messages should be sent to private repositories.
  """
  gitLinkbackMessagesEnabled: Boolean!
  """
  Whether the Git integration linkback messages should be sent to public repositories.
  """
  gitPublicLinkbackMessagesEnabled: Boolean!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  Integrations associated with the organization.
  """
  integrations(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IntegrationConnection!
  """
  Labels associated with the organization.
  """
  labels(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned issue labels.
    """
    filter: IssueLabelFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueLabelConnection!
  """
  The organization's logo URL.
  """
  logoUrl: String
  """
  The organization's name.
  """
  name: String!
  """
  Rolling 30-day total upload volume for the organization, in megabytes.
  """
  periodUploadVolume: Float!
  """
  Previously used URL keys for the organization (last 3 are kept and redirected).
  """
  previousUrlKeys: [String!]!
  """
  The day at which to prompt for project updates.
  """
  projectUpdateRemindersDay: Day!
  """
  The hour at which to prompt for project updates.
  """
  projectUpdateRemindersHour: Float!
  """
  The frequency at which to prompt for project updates.
  """
  projectUpdatesReminderFrequency: ProjectUpdateReminderFrequency!
  """
  The feature release channel the organization belongs to.
  """
  releaseChannel: ReleaseChannel!
  """
  Whether the organization is using a roadmap.
  """
  roadmapEnabled: Boolean!
  """
  Whether SAML authentication is enabled for organization.
  """
  samlEnabled: Boolean!
  """
  Whether SCIM provisioning is enabled for organization.
  """
  scimEnabled: Boolean!
  """
  The organization's subscription to a paid plan.
  """
  subscription: PaidSubscription
  """
  Teams associated with the organization.
  """
  teams(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned teams.
    """
    filter: TeamFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): TeamConnection!
  """
  Templates associated with the organization.
  """
  templates(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): TemplateConnection!
  """
  The time at which the trial of the plus plan will end.
  """
  trialEndsAt: DateTime
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
  """
  The organization's unique URL key.
  """
  urlKey: String!
  """
  Number of active users in the organization.
  """
  userCount: Int!
  """
  Users associated with the organization.
  """
  users(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    Should query return disabled/suspended users (default: false).
    """
    includeDisabled: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): UserConnection!
}

type OrganizationAcceptedOrExpiredInviteDetailsPayload {
  """
  The status of the invite
  """
  status: OrganizationInviteStatus!
}

type OrganizationCancelDeletePayload {
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

type OrganizationDeletePayload {
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

"""
Defines the use of a domain by an organization.
"""
type OrganizationDomain implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  What type of auth is the domain used for
  """
  authType: OrganizationDomainAuthType!
  """
  Whether the domains was claimed by the organization through DNS verification.
  """
  claimed: Boolean
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The user who added the domain.
  """
  creator: User
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  Domain name
  """
  name: String!
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
  """
  E-mail used to verify this domain
  """
  verificationEmail: String
  """
  Is this domain verified
  """
  verified: Boolean!
}

"""
What type of auth is the domain used for.
"""
enum OrganizationDomainAuthType {
  general
  saml
}

"""
[INTERNAL] Domain claim request response.
"""
type OrganizationDomainClaimPayload {
  """
  String to put into DNS for verification.
  """
  verificationString: String!
}

input OrganizationDomainCreateInput {
  """
  The authentication type this domain is for.
  """
  authType: String = "general"
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String
  """
  The domain name to add.
  """
  name: String!
  """
  The email address to which to send the verification code.
  """
  verificationEmail: String
}

"""
[INTERNAL] Organization domain operation response.
"""
type OrganizationDomainPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The organization domain that was created or updated.
  """
  organizationDomain: OrganizationDomain!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

"""
[INTERNAL] Organization domain operation response.
"""
type OrganizationDomainSimplePayload {
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

input OrganizationDomainVerificationInput {
  """
  The identifier in UUID v4 format of the domain being verified.
  """
  organizationDomainId: String!
  """
  The verification code sent via email.
  """
  verificationCode: String!
}

type OrganizationExistsPayload {
  """
  Whether the organization exists.
  """
  exists: Boolean!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

"""
An invitation to the organization that has been sent via email.
"""
type OrganizationInvite implements Node {
  """
  The time at which the invite was accepted. Null, if the invite hasn't been accepted
  """
  acceptedAt: DateTime
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The invitees email address.
  """
  email: String!
  """
  The time at which the invite will be expiring. Null, if the invite shouldn't expire
  """
  expiresAt: DateTime
  """
  The invite was sent to external address.
  """
  external: Boolean!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The user who has accepted the invite. Null, if the invite hasn't been accepted.
  """
  invitee: User
  """
  The user who created the invitation.
  """
  inviter: User!
  """
  The organization that the invite is associated with.
  """
  organization: Organization!
  """
  The user role that the invitee will receive upon accepting the invite.
  """
  role: UserRoleType!
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
}

type OrganizationInviteConnection {
  edges: [OrganizationInviteEdge!]!
  nodes: [OrganizationInvite!]!
  pageInfo: PageInfo!
}

input OrganizationInviteCreateInput {
  """
  The email of the invitee.
  """
  email: String!
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String
  """
  The message to send to the invitee.
  """
  message: String
  """
  What user role the invite should grant.
  """
  role: UserRoleType = user
  """
  The teams that the user has been invited to.
  """
  teamIds: [String!]
}

union OrganizationInviteDetailsPayload =
    OrganizationAcceptedOrExpiredInviteDetailsPayload
  | OrganizationInviteFullDetailsPayload

type OrganizationInviteEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: OrganizationInvite!
}

type OrganizationInviteFullDetailsPayload {
  """
  Whether the invite has already been accepted.
  """
  accepted: Boolean!
  """
  When the invite was created.
  """
  createdAt: DateTime!
  """
  The email of the invitee
  """
  email: String!
  """
  Whether the invite has expired.
  """
  expired: Boolean!
  """
  The name of the inviter
  """
  inviter: String!
  """
  ID of the workspace the invite is for.
  """
  organizationId: String!
  """
  URL of the workspace logo the invite is for.
  """
  organizationLogoUrl: String
  """
  Name of the workspace the invite is for.
  """
  organizationName: String!
  """
  What user role the invite should grant.
  """
  role: UserRoleType!
  """
  The status of the invite
  """
  status: OrganizationInviteStatus!
}

type OrganizationInvitePayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The organization invite that was created or updated.
  """
  organizationInvite: OrganizationInvite!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

"""
The different statuses possible for an organization invite.
"""
enum OrganizationInviteStatus {
  accepted
  expired
  pending
}

input OrganizationInviteUpdateInput {
  """
  The teams that the user has been invited to.
  """
  teamIds: [String!]!
}

type OrganizationPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The organization that was created or updated.
  """
  organization: Organization
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

type OrganizationStartPlusTrialPayload {
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

type PageInfo {
  """
  Cursor representing the last result in the paginated results.
  """
  endCursor: String
  """
  Indicates if there are more results when paginating forward.
  """
  hasNextPage: Boolean!
  """
  Indicates if there are more results when paginating backward.
  """
  hasPreviousPage: Boolean!
  """
  Cursor representing the first result in the paginated results.
  """
  startCursor: String
}

"""
By which field should the pagination order by
"""
enum PaginationOrderBy {
  createdAt
  updatedAt
}

"""
The paid subscription of an organization.
"""
type PaidSubscription implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The date the subscription was canceled, if any.
  """
  canceledAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The creator of the subscription.
  """
  creator: User
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The date the subscription will be billed next.
  """
  nextBillingAt: DateTime
  """
  The organization that the subscription is associated with.
  """
  organization: Organization!
  """
  The subscription type of a pending change. Null if no change pending.
  """
  pendingChangeType: String
  """
  The number of seats in the subscription.
  """
  seats: Float!
  """
  The maximum number of seats that will be billed in the subscription.
  """
  seatsMaximum: Float
  """
  The minimum number of seats that will be billed in the subscription.
  """
  seatsMinimum: Float
  """
  The subscription type.
  """
  type: String!
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
}

"""
A project.
"""
type Project implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the project was automatically archived by the auto pruning process.
  """
  autoArchivedAt: DateTime
  """
  The time at which the project was moved into canceled state.
  """
  canceledAt: DateTime
  """
  The project's color.
  """
  color: String!
  """
  The time at which the project was moved into completed state.
  """
  completedAt: DateTime
  """
  The number of completed issues in the project after each week.
  """
  completedIssueCountHistory: [Float!]!
  """
  The number of completed estimation points after each week.
  """
  completedScopeHistory: [Float!]!
  """
  The project was created based on this issue.
  """
  convertedFromIssue: Issue
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The user who created the project.
  """
  creator: User!
  """
  The project's description.
  """
  description: String!
  """
  Documents associated with the project.
  """
  documents(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): DocumentConnection!
  """
  The icon of the project.
  """
  icon: String
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The number of in progress estimation points after each week.
  """
  inProgressScopeHistory: [Float!]!
  """
  Settings for all integrations associated with that project.
  """
  integrationsSettings: IntegrationsSettings
  """
  The total number of issues in the project after each week.
  """
  issueCountHistory: [Float!]!
  """
  Issues associated with the project.
  """
  issues(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned issues.
    """
    filter: IssueFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueConnection!
  """
  The project lead.
  """
  lead: User
  """
  Links associated with the project.
  """
  links(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): ProjectLinkConnection!
  """
  Users that are members of the project.
  """
  members(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned users.
    """
    filter: UserFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    Should query return disabled/suspended users (default: false).
    """
    includeDisabled: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): UserConnection!
  """
  The project's name.
  """
  name: String!
  """
  The overall progress of the project. This is the (completed estimate points + 0.25 * in progress estimate points) / total estimate points.
  """
  progress: Float!
  """
  Milestones associated with the project.
  """
  projectMilestones(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): ProjectMilestoneConnection!
  """
  The time until which project update reminders are paused.
  """
  projectUpdateRemindersPausedUntilAt: DateTime
  """
  Project updates associated with the project.
  """
  projectUpdates(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): ProjectUpdateConnection!
  """
  The overall scope (total estimate points) of the project.
  """
  scope: Float!
  """
  The total number of estimation points after each week.
  """
  scopeHistory: [Float!]!
  """
  Whether to send new issue comment notifications to Slack.
  """
  slackIssueComments: Boolean!
  """
  Whether to send new issue status updates to Slack.
  """
  slackIssueStatuses: Boolean!
  """
  Whether to send new issue notifications to Slack.
  """
  slackNewIssue: Boolean!
  """
  The project's unique URL slug.
  """
  slugId: String!
  """
  The sort order for the project within the organization.
  """
  sortOrder: Float!
  """
  [Internal] The estimated start date of the project.
  """
  startDate: TimelessDate
  """
  The time at which the project was moved into started state.
  """
  startedAt: DateTime
  """
  The type of the state.
  """
  state: String!
  """
  The estimated completion date of the project.
  """
  targetDate: TimelessDate
  """
  Teams associated with this project.
  """
  teams(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned teams.
    """
    filter: TeamFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): TeamConnection!
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
  """
  Project URL.
  """
  url: String!
}

"""
Project filtering options.
"""
input ProjectCollectionFilter {
  """
  Compound filters, all of which need to be matched by the project.
  """
  and: [ProjectCollectionFilter!]
  """
  Comparator for the project completion date.
  """
  completedAt: NullableDateComparator
  """
  Filters that the project's completed milestones must satisfy.
  """
  completedProjectMilestones: ProjectMilestoneCollectionFilter
  """
  Comparator for the created at date.
  """
  createdAt: DateComparator
  """
  Filters that the projects creator must satisfy.
  """
  creator: UserFilter
  """
  Filters that needs to be matched by all projects.
  """
  every: ProjectFilter
  """
  Comparator for the project health.
  """
  health: StringComparator
  """
  Comparator for the identifier.
  """
  id: IDComparator
  """
  Filters that the projects issues must satisfy.
  """
  issues: IssueCollectionFilter
  """
  Filters that the projects lead must satisfy.
  """
  lead: NullableUserFilter
  """
  Comparator for the collection length.
  """
  length: NumberComparator
  """
  Filters that the projects members must satisfy.
  """
  members: UserFilter
  """
  Comparator for the project name.
  """
  name: StringComparator
  """
  Filters that the project's next milestone must satisfy.
  """
  nextProjectMilestone: ProjectMilestoneFilter
  """
  Compound filters, one of which need to be matched by the project.
  """
  or: [ProjectCollectionFilter!]
  """
  Filters that the project's milestones must satisfy.
  """
  projectMilestones: ProjectMilestoneCollectionFilter
  """
  Filters that the projects roadmaps must satisfy.
  """
  roadmaps: RoadmapCollectionFilter
  """
  [Internal] Comparator for the projects content.
  """
  searchableContent: ContentComparator
  """
  Comparator for the project slug ID.
  """
  slugId: StringComparator
  """
  Filters that needs to be matched by some projects.
  """
  some: ProjectFilter
  """
  Comparator for the project start date.
  """
  startDate: NullableDateComparator
  """
  Comparator for the project state.
  """
  state: StringComparator
  """
  Comparator for the project target date.
  """
  targetDate: NullableDateComparator
  """
  Comparator for the updated at date.
  """
  updatedAt: DateComparator
}

type ProjectConnection {
  edges: [ProjectEdge!]!
  nodes: [Project!]!
  pageInfo: PageInfo!
}

input ProjectCreateInput {
  """
  The color of the project.
  """
  color: String
  """
  The ID of the issue from which that project is created.
  """
  convertedFromIssueId: String
  """
  The description for the project.
  """
  description: String
  """
  The icon of the project.
  """
  icon: String
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String
  """
  The identifier of the project lead.
  """
  leadId: String
  """
  The identifiers of the members of this project.
  """
  memberIds: [String!]
  """
  The name of the project.
  """
  name: String!
  """
  The sort order for the project within shared views.
  """
  sortOrder: Float
  """
  The planned start date of the project.
  """
  startDate: TimelessDate
  """
  The state of the project.
  """
  state: String
  """
  The planned target date of the project.
  """
  targetDate: TimelessDate
  """
  The identifiers of the teams this project is associated with.
  """
  teamIds: [String!]!
}

type ProjectEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: Project!
}

"""
Project filtering options.
"""
input ProjectFilter {
  """
  Compound filters, all of which need to be matched by the project.
  """
  and: [ProjectFilter!]
  """
  Comparator for the project completion date.
  """
  completedAt: NullableDateComparator
  """
  Filters that the project's completed milestones must satisfy.
  """
  completedProjectMilestones: ProjectMilestoneCollectionFilter
  """
  Comparator for the created at date.
  """
  createdAt: DateComparator
  """
  Filters that the projects creator must satisfy.
  """
  creator: UserFilter
  """
  Comparator for the project health.
  """
  health: StringComparator
  """
  Comparator for the identifier.
  """
  id: IDComparator
  """
  Filters that the projects issues must satisfy.
  """
  issues: IssueCollectionFilter
  """
  Filters that the projects lead must satisfy.
  """
  lead: NullableUserFilter
  """
  Filters that the projects members must satisfy.
  """
  members: UserFilter
  """
  Comparator for the project name.
  """
  name: StringComparator
  """
  Filters that the project's next milestone must satisfy.
  """
  nextProjectMilestone: ProjectMilestoneFilter
  """
  Compound filters, one of which need to be matched by the project.
  """
  or: [ProjectFilter!]
  """
  Filters that the project's milestones must satisfy.
  """
  projectMilestones: ProjectMilestoneCollectionFilter
  """
  Filters that the projects roadmaps must satisfy.
  """
  roadmaps: RoadmapCollectionFilter
  """
  [Internal] Comparator for the projects content.
  """
  searchableContent: ContentComparator
  """
  Comparator for the project slug ID.
  """
  slugId: StringComparator
  """
  Comparator for the project start date.
  """
  startDate: NullableDateComparator
  """
  Comparator for the project state.
  """
  state: StringComparator
  """
  Comparator for the project target date.
  """
  targetDate: NullableDateComparator
  """
  Comparator for the updated at date.
  """
  updatedAt: DateComparator
}

type ProjectFilterSuggestionPayload {
  """
  The json filter that is suggested.
  """
  filter: JSONObject
}

"""
An external link for a project.
"""
type ProjectLink implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The user who created the link.
  """
  creator: User!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The link's label.
  """
  label: String!
  """
  The project that the link is associated with.
  """
  project: Project!
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
  """
  The link's URL.
  """
  url: String!
}

type ProjectLinkConnection {
  edges: [ProjectLinkEdge!]!
  nodes: [ProjectLink!]!
  pageInfo: PageInfo!
}

input ProjectLinkCreateInput {
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String
  """
  The label for the link.
  """
  label: String!
  """
  Related project for the link.
  """
  projectId: String!
  """
  The URL of the link.
  """
  url: String!
}

type ProjectLinkEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: ProjectLink!
}

type ProjectLinkPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The project that was created or updated.
  """
  projectLink: ProjectLink!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

input ProjectLinkUpdateInput {
  """
  The label for the link.
  """
  label: String
  """
  The URL of the link.
  """
  url: String
}

"""
A milestone for a project.
"""
type ProjectMilestone implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The description of the project milestone.
  """
  description: String
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The name of the project milestone.
  """
  name: String!
  """
  The project of the milestone.
  """
  project: Project!
  """
  The order of the milestone in relation to other milestones within a project.
  """
  sortOrder: Float!
  """
  The planned completion date of the milestone.
  """
  targetDate: TimelessDate
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
}

"""
Milestone collection filtering options.
"""
input ProjectMilestoneCollectionFilter {
  """
  Compound filters, all of which need to be matched by the milestone.
  """
  and: [ProjectMilestoneCollectionFilter!]
  """
  Comparator for the created at date.
  """
  createdAt: DateComparator
  """
  Filters that needs to be matched by all milestones.
  """
  every: ProjectMilestoneFilter
  """
  Comparator for the identifier.
  """
  id: IDComparator
  """
  Comparator for the collection length.
  """
  length: NumberComparator
  """
  Comparator for the project milestone name.
  """
  name: StringComparator
  """
  Compound filters, one of which need to be matched by the milestone.
  """
  or: [ProjectMilestoneCollectionFilter!]
  """
  Filters that needs to be matched by some milestones.
  """
  some: ProjectMilestoneFilter
  """
  Comparator for the project milestone target date.
  """
  targetDate: NullableDateComparator
  """
  Comparator for the updated at date.
  """
  updatedAt: DateComparator
}

type ProjectMilestoneConnection {
  edges: [ProjectMilestoneEdge!]!
  nodes: [ProjectMilestone!]!
  pageInfo: PageInfo!
}

input ProjectMilestoneCreateInput {
  """
  The description of the project milestone.
  """
  description: String
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String
  """
  The name of the project milestone.
  """
  name: String!
  """
  Related project for the project milestone.
  """
  projectId: String!
  """
  The sort order for the project milestone within a project.
  """
  sortOrder: Float
  """
  The planned target date of the project milestone.
  """
  targetDate: TimelessDate
}

type ProjectMilestoneEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: ProjectMilestone!
}

"""
Project milestone filtering options.
"""
input ProjectMilestoneFilter {
  """
  Compound filters, all of which need to be matched by the project milestone.
  """
  and: [ProjectMilestoneFilter!]
  """
  Comparator for the created at date.
  """
  createdAt: DateComparator
  """
  Comparator for the identifier.
  """
  id: IDComparator
  """
  Comparator for the project milestone name.
  """
  name: StringComparator
  """
  Compound filters, one of which need to be matched by the project milestone.
  """
  or: [ProjectMilestoneFilter!]
  """
  Comparator for the project milestone target date.
  """
  targetDate: NullableDateComparator
  """
  Comparator for the updated at date.
  """
  updatedAt: DateComparator
}

type ProjectMilestonePayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The project milestone that was created or updated.
  """
  projectMilestone: ProjectMilestone!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

input ProjectMilestoneUpdateInput {
  """
  The description of the project milestone.
  """
  description: String
  """
  The name of the project milestone.
  """
  name: String
  """
  Related project for the project milestone.
  """
  projectId: String
  """
  The sort order for the project milestone within a project.
  """
  sortOrder: Float
  """
  The planned target date of the project milestone.
  """
  targetDate: TimelessDate
}

"""
A project related notification
"""
type ProjectNotification implements Entity & Node & Notification {
  """
  The user that caused the notification.
  """
  actor: User
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The time at when an email reminder for this notification was sent to the user. Null, if no email
      reminder has been sent.
  """
  emailedAt: DateTime
  """
  The external user that caused the notification.
  """
  externalUserActor: ExternalUser
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The project related to the notification.
  """
  project: Project!
  """
  The project update related to the notification.
  """
  projectUpdate: ProjectUpdate
  """
  The time at when the user marked the notification as read. Null, if the the user hasn't read the notification
  """
  readAt: DateTime
  """
  The time until a notification will be snoozed. After that it will appear in the inbox again.
  """
  snoozedUntilAt: DateTime
  """
  Notification type
  """
  type: String!
  """
  The time at which a notification was unsnoozed..
  """
  unsnoozedAt: DateTime
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
  """
  The user that received the notification.
  """
  user: User!
}

"""
A project notification subscription.
"""
type ProjectNotificationSubscription implements Entity & Node & NotificationSubscription {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The project subscribed to.
  """
  project: Project!
  """
  The type of the project subscription.
  """
  projectNotificationSubscriptionType: ProjectNotificationSubscriptionType!
  """
  Subscribed team.
  """
  team: Team
  """
  The type of the subscription.
  """
  type: String!
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
  """
  The user associated with notification subscriptions.
  """
  user: User!
}

"""
The type of a project notification subscription.
"""
enum ProjectNotificationSubscriptionType {
  all
  custom
  importantOnly
}

type ProjectPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The project that was created or updated.
  """
  project: Project
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

type ProjectSearchPayload {
  """
  Archived entities matching the search term along with all their dependencies.
  """
  archivePayload: ArchiveResponse!
  edges: [ProjectSearchResultEdge!]!
  nodes: [ProjectSearchResult!]!
  pageInfo: PageInfo!
  """
  Total number of results for query without filters applied.
  """
  totalCount: Float!
}

type ProjectSearchResult implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the project was automatically archived by the auto pruning process.
  """
  autoArchivedAt: DateTime
  """
  The time at which the project was moved into canceled state.
  """
  canceledAt: DateTime
  """
  The project's color.
  """
  color: String!
  """
  The time at which the project was moved into completed state.
  """
  completedAt: DateTime
  """
  The number of completed issues in the project after each week.
  """
  completedIssueCountHistory: [Float!]!
  """
  The number of completed estimation points after each week.
  """
  completedScopeHistory: [Float!]!
  """
  The project was created based on this issue.
  """
  convertedFromIssue: Issue
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The user who created the project.
  """
  creator: User!
  """
  The project's description.
  """
  description: String!
  """
  Documents associated with the project.
  """
  documents(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): DocumentConnection!
  """
  The icon of the project.
  """
  icon: String
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The number of in progress estimation points after each week.
  """
  inProgressScopeHistory: [Float!]!
  """
  Settings for all integrations associated with that project.
  """
  integrationsSettings: IntegrationsSettings
  """
  The total number of issues in the project after each week.
  """
  issueCountHistory: [Float!]!
  """
  Issues associated with the project.
  """
  issues(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned issues.
    """
    filter: IssueFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueConnection!
  """
  The project lead.
  """
  lead: User
  """
  Links associated with the project.
  """
  links(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): ProjectLinkConnection!
  """
  Users that are members of the project.
  """
  members(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned users.
    """
    filter: UserFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    Should query return disabled/suspended users (default: false).
    """
    includeDisabled: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): UserConnection!
  """
  Metadata related to search result
  """
  metadata: JSONObject!
  """
  The project's name.
  """
  name: String!
  """
  The overall progress of the project. This is the (completed estimate points + 0.25 * in progress estimate points) / total estimate points.
  """
  progress: Float!
  """
  Milestones associated with the project.
  """
  projectMilestones(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): ProjectMilestoneConnection!
  """
  The time until which project update reminders are paused.
  """
  projectUpdateRemindersPausedUntilAt: DateTime
  """
  Project updates associated with the project.
  """
  projectUpdates(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): ProjectUpdateConnection!
  """
  The overall scope (total estimate points) of the project.
  """
  scope: Float!
  """
  The total number of estimation points after each week.
  """
  scopeHistory: [Float!]!
  """
  Whether to send new issue comment notifications to Slack.
  """
  slackIssueComments: Boolean!
  """
  Whether to send new issue status updates to Slack.
  """
  slackIssueStatuses: Boolean!
  """
  Whether to send new issue notifications to Slack.
  """
  slackNewIssue: Boolean!
  """
  The project's unique URL slug.
  """
  slugId: String!
  """
  The sort order for the project within the organization.
  """
  sortOrder: Float!
  """
  [Internal] The estimated start date of the project.
  """
  startDate: TimelessDate
  """
  The time at which the project was moved into started state.
  """
  startedAt: DateTime
  """
  The type of the state.
  """
  state: String!
  """
  The estimated completion date of the project.
  """
  targetDate: TimelessDate
  """
  Teams associated with this project.
  """
  teams(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned teams.
    """
    filter: TeamFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): TeamConnection!
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
  """
  Project URL.
  """
  url: String!
}

type ProjectSearchResultConnection {
  edges: [ProjectSearchResultEdge!]!
  nodes: [ProjectSearchResult!]!
  pageInfo: PageInfo!
}

type ProjectSearchResultEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: ProjectSearchResult!
}

"""
A update associated with an project.
"""
type ProjectUpdate implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The update content in markdown format.
  """
  body: String!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The time the project update was edited.
  """
  editedAt: DateTime
  """
  The health of the project at the time of the update.
  """
  health: ProjectUpdateHealthType!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  [Internal] Serialized JSON representing current state of the project properties when posting the project update.
  """
  infoSnapshot: JSONObject
  """
  The project that the update is associated with.
  """
  project: Project!
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
  """
  The URL to the project update.
  """
  url: String!
  """
  The user who wrote the update.
  """
  user: User!
}

type ProjectUpdateConnection {
  edges: [ProjectUpdateEdge!]!
  nodes: [ProjectUpdate!]!
  pageInfo: PageInfo!
}

input ProjectUpdateCreateInput {
  """
  The content of the project update in markdown format.
  """
  body: String
  """
  The content of the project update as a Prosemirror document.
  """
  bodyData: JSON
  """
  The health of the project at the time of the update.
  """
  health: ProjectUpdateHealthType
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  The project to associate the project update with.
  """
  projectId: String!
}

type ProjectUpdateEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: ProjectUpdate!
}

"""
The health type of a project when the update is created.
"""
enum ProjectUpdateHealthType {
  atRisk
  offTrack
  onTrack
}

input ProjectUpdateInput {
  """
  The date when the project was canceled.
  """
  canceledAt: DateTime
  """
  The color of the project.
  """
  color: String
  """
  The date when the project was completed.
  """
  completedAt: DateTime
  """
  The ID of the issue from which that project is created.
  """
  convertedFromIssueId: String
  """
  The description for the project.
  """
  description: String
  """
  The icon of the project.
  """
  icon: String
  """
  The identifier of the project lead.
  """
  leadId: String
  """
  The identifiers of the members of this project.
  """
  memberIds: [String!]
  """
  The name of the project.
  """
  name: String
  """
  The time until which project update reminders are paused.
  """
  projectUpdateRemindersPausedUntilAt: DateTime
  """
  Whether to send new issue comment notifications to Slack.
  """
  slackIssueComments: Boolean
  """
  Whether to send issue status update notifications to Slack.
  """
  slackIssueStatuses: Boolean
  """
  Whether to send new issue notifications to Slack.
  """
  slackNewIssue: Boolean
  """
  The sort order for the project in shared views.
  """
  sortOrder: Float
  """
  The planned start date of the project.
  """
  startDate: TimelessDate
  """
  The state of the project.
  """
  state: String
  """
  The planned target date of the project.
  """
  targetDate: TimelessDate
  """
  The identifiers of the teams this project is associated with.
  """
  teamIds: [String!]
}

"""
Holds information about when a user has interacted with a project update.
"""
type ProjectUpdateInteraction implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The project update that has been interacted with.
  """
  projectUpdate: ProjectUpdate!
  """
  The time at which the user read the project update.
  """
  readAt: DateTime!
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
  """
  The user that has interacted with the project update.
  """
  user: User!
}

type ProjectUpdateInteractionConnection {
  edges: [ProjectUpdateInteractionEdge!]!
  nodes: [ProjectUpdateInteraction!]!
  pageInfo: PageInfo!
}

input ProjectUpdateInteractionCreateInput {
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  The id of the project update that has been interacted with.
  """
  projectUpdateId: String!
  """
  The time at which the user read the project update.
  """
  readAt: DateTime!
}

type ProjectUpdateInteractionEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: ProjectUpdateInteraction!
}

type ProjectUpdateInteractionPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The project update interaction that was created or updated.
  """
  projectUpdateInteraction: ProjectUpdateInteraction!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

type ProjectUpdatePayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The project update that was created or updated.
  """
  projectUpdate: ProjectUpdate!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

"""
The frequency at which to send project update reminders.
"""
enum ProjectUpdateReminderFrequency {
  never
  twoWeeks
  week
}

input ProjectUpdateUpdateInput {
  """
  The content of the project update in markdown format.
  """
  body: String
  """
  The content of the project update as a Prosemirror document.
  """
  bodyData: JSON
  """
  The health of the project at the time of the update.
  """
  health: ProjectUpdateHealthType
}

type ProjectUpdateWithInteractionPayload {
  """
  The project update that was created or updated.
  """
  interaction: ProjectUpdateInteraction!
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The project update that was created or updated.
  """
  projectUpdate: ProjectUpdate!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

"""
A user's web browser push notification subscription.
"""
type PushSubscription implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
}

type PushSubscriptionConnection {
  edges: [PushSubscriptionEdge!]!
  nodes: [PushSubscription!]!
  pageInfo: PageInfo!
}

input PushSubscriptionCreateInput {
  """
  The data of the subscription in stringified JSON format.
  """
  data: String!
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String
  """
  Whether this is a subscription payload for Google Cloud Messaging or Apple Push Notification service
  """
  type: PushSubscriptionType = web
  """
  The user identifier of the subscription.
  """
  userId: String!
}

type PushSubscriptionEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: PushSubscription!
}

type PushSubscriptionPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

type PushSubscriptionTestPayload {
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

"""
The different push subscription types
"""
enum PushSubscriptionType {
  apple
  web
}

type Query {
  """
  One specific project milestone.
  """
  ProjectMilestone(id: String!): ProjectMilestone!
  """
  All milestones for the project.
  """
  ProjectMilestones(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned project milestones.
    """
    filter: ProjectMilestoneFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): ProjectMilestoneConnection!
  """
  All teams you the user can administrate. Administrable teams are teams whose settings the user can change, but to whose issues the user doesn't necessarily have access to.
  """
  administrableTeams(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned teams.
    """
    filter: TeamFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): TeamConnection!
  """
  All API keys for the user.
  """
  apiKeys(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): ApiKeyConnection!
  """
  Get basic information for an application.
  """
  applicationInfo(
    """
    The client ID of the application.
    """
    clientId: String!
  ): Application!
  """
  [INTERNAL] Get basic information for a list of applications
  """
  applicationInfoByIds(
    """
    The IDs of the applications.
    """
    ids: [String!]!
  ): [Application!]!
  """
  Get information for an application and whether a user has approved it for the given scopes.
  """
  applicationWithAuthorization(
    """
    Actor mode used for the authorization.
    """
    actor: String = "user"
    """
    The client ID of the application.
    """
    clientId: String!
    """
    Redirect URI for the application.
    """
    redirectUri: String
    """
    Scopes being requested by the application
    """
    scope: [String!]!
  ): UserAuthorizedApplication!
  """
  One specific issue attachment.
  [Deprecated] 'url' can no longer be used as the 'id' parameter. Use 'attachmentsForUrl' instead
  """
  attachment(id: String!): Attachment!
  """
  Query an issue by its associated attachment, and its id.
  """
  attachmentIssue(
    """
    `id` of the attachment for which you'll want to get the issue for. [Deprecated] `url` as the `id` parameter.
    """
    id: String!
  ): Issue!
    @deprecated(
      reason: "Will be removed in near future, please use `attachmentsForURL` to get attachments and their issues instead."
    )
  """
  All issue attachments.

  To get attachments for a given URL, use `attachmentsForURL` query.
  """
  attachments(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned attachments.
    """
    filter: AttachmentFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): AttachmentConnection!
  """
  Returns issue attachments for a given `url`.
  """
  attachmentsForURL(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
    """
    The attachment URL.
    """
    url: String!
  ): AttachmentConnection!
  """
  All audit log entries.
  """
  auditEntries(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned audit entries.
    """
    filter: AuditEntryFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): AuditEntryConnection!
  """
  List of audit entry types.
  """
  auditEntryTypes: [AuditEntryType!]!
  """
  [INTERNAL] Get all authorized applications for a user
  """
  authorizedApplications: [AuthorizedApplication!]!
  """
  Fetch users belonging to this user account.
  """
  availableUsers: AuthResolverResponse!
  """
  A specific comment.
  """
  comment(
    """
    The identifier of the comment to retrieve.
    """
    id: String!
  ): Comment!
  """
  All comments.
  """
  comments(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned comments.
    """
    filter: CommentFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): CommentConnection!
  """
  One specific custom view.
  """
  customView(id: String!): CustomView!
  """
  [INTERNAL] Suggests metadata for a view based on it's filters.
  """
  customViewDetailsSuggestion(filter: JSONObject!, modelName: String): CustomViewSuggestionPayload!
  """
  Custom views for the user.
  """
  customViews(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): CustomViewConnection!
  """
  One specific cycle.
  """
  cycle(id: String!): Cycle!
  """
  All cycles.
  """
  cycles(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned users.
    """
    filter: CycleFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): CycleConnection!
  """
  One specific document.
  """
  document(id: String!): Document!
  """
  All documents for the project.
  """
  documents(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): DocumentConnection!
  """
  A specific emoji.
  """
  emoji(
    """
    The identifier of the emoji to retrieve.
    """
    id: String!
  ): Emoji!
  """
  All custom emojis.
  """
  emojis(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): EmojiConnection!
  """
  One specific external user.
  """
  externalUser(
    """
    The identifier of the external user to retrieve.
    """
    id: String!
  ): ExternalUser!
  """
  All external users for the organization.
  """
  externalUsers(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): ExternalUserConnection!
  """
  One specific favorite.
  """
  favorite(id: String!): Favorite!
  """
  The user's favorites.
  """
  favorites(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): FavoriteConnection!
  """
  Fetch Figma screenshot and other information with file and node identifiers.
  """
  figmaEmbedInfo(
    """
    Figma file identifier.
    """
    fileId: String!
    """
    Figma node identifier.
    """
    nodeId: String
  ): FigmaEmbedPayload!
  """
  One specific integration.
  """
  integration(id: String!): Integration!
  """
  One specific integrationTemplate.
  """
  integrationTemplate(id: String!): IntegrationTemplate!
  """
  Template and integration connections.
  """
  integrationTemplates(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IntegrationTemplateConnection!
  """
  All integrations.
  """
  integrations(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IntegrationConnection!
  """
  One specific set of settings.
  """
  integrationsSettings(id: String!): IntegrationsSettings!
  """
  One specific issue.
  """
  issue(id: String!): Issue!
  """
  Find issues that are related to a given Figma file key.
  """
  issueFigmaFileKeySearch(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The Figma file key.
    """
    fileKey: String!
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueConnection!
  """
  Suggests filters for an issue view based on a text prompt.
  """
  issueFilterSuggestion(prompt: String!): IssueFilterSuggestionPayload!
  """
  Checks a CSV file validity against a specific import service.
  """
  issueImportCheckCSV(
    """
    CSV storage url
    """
    csvUrl: String!
    """
    The service the CSV containing data from
    """
    service: String!
  ): IssueImportCheckPayload!
  """
  Fetches the GitHub token, completing the OAuth flow.
  """
  issueImportFinishGithubOAuth(
    """
    OAuth code.
    """
    code: String!
  ): GithubOAuthTokenPayload!
  """
  One specific label.
  """
  issueLabel(id: String!): IssueLabel!
  """
  All issue labels.
  """
  issueLabels(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned issue labels.
    """
    filter: IssueLabelFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueLabelConnection!
  """
  Issue priority values and corresponding labels.
  """
  issuePriorityValues: [IssuePriorityValue!]!
  """
  One specific issue relation.
  """
  issueRelation(id: String!): IssueRelation!
  """
  All issue relationships.
  """
  issueRelations(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueRelationConnection!
  """
  [ALPHA] Search issues. This query is experimental and is subject to change without notice.
  """
  issueSearch(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned issues.
    """
    filter: IssueFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
    """
    [Deprecated] Search string to look for.
    """
    query: String
  ): IssueConnection!
  """
  Find issue based on the VCS branch name.
  """
  issueVcsBranchSearch(
    """
    The VCS branch name to search for.
    """
    branchName: String!
  ): Issue
  """
  All issues.
  """
  issues(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned issues.
    """
    filter: IssueFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueConnection!
  """
  One specific notification.
  """
  notification(id: String!): Notification!
  """
  One specific notification subscription.
  """
  notificationSubscription(id: String!): NotificationSubscription!
  """
  The user's notification subscriptions.
  """
  notificationSubscriptions(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): NotificationSubscriptionConnection!
  """
  All notifications.
  """
  notifications(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): NotificationConnection!
  """
  The user's organization.
  """
  organization: Organization!
  """
  [INTERNAL] Checks whether the domain can be claimed.
  """
  organizationDomainClaimRequest(
    """
    The ID of the organization domain to claim.
    """
    id: String!
  ): OrganizationDomainClaimPayload!
  """
  Does the organization exist.
  """
  organizationExists(urlKey: String!): OrganizationExistsPayload!
  """
  One specific organization invite.
  """
  organizationInvite(id: String!): OrganizationInvite!
  """
  One specific organization invite.
  """
  organizationInviteDetails(id: String!): OrganizationInviteDetailsPayload!
  """
  All invites for the organization.
  """
  organizationInvites(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): OrganizationInviteConnection!
  """
  One specific project.
  """
  project(id: String!): Project!
  """
  Suggests filters for a project view based on a text prompt.
  """
  projectFilterSuggestion(prompt: String!): ProjectFilterSuggestionPayload!
  """
  One specific project link.
  """
  projectLink(id: String!): ProjectLink!
  """
  All links for the project.
  """
  projectLinks(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): ProjectLinkConnection!
  """
  A specific project update.
  """
  projectUpdate(
    """
    The identifier of the project update to retrieve.
    """
    id: String!
  ): ProjectUpdate!
  """
  A specific interaction on a project update.
  """
  projectUpdateInteraction(
    """
    The identifier of the project update interaction to retrieve.
    """
    id: String!
  ): ProjectUpdateInteraction!
  """
  All interactions on project updates.
  """
  projectUpdateInteractions(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): ProjectUpdateInteractionConnection!
  """
  All project updates.
  """
  projectUpdates(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): ProjectUpdateConnection!
  """
  All projects.
  """
  projects(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned projects.
    """
    filter: ProjectFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): ProjectConnection!
  """
  Sends a test push message.
  """
  pushSubscriptionTest: PushSubscriptionTestPayload!
  """
  The status of the rate limiter.
  """
  rateLimitStatus: RateLimitPayload!
  """
  One specific roadmap.
  """
  roadmap(id: String!): Roadmap!
  """
  One specific roadmapToProject.
  """
  roadmapToProject(id: String!): RoadmapToProject!
  """
  Custom views for the user.
  """
  roadmapToProjects(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): RoadmapToProjectConnection!
  """
  All roadmaps in the workspace.
  """
  roadmaps(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): RoadmapConnection!
  """
  Search documents.
  """
  searchDocuments(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
    """
    Search string to look for.
    """
    term: String!
  ): DocumentSearchPayload!
  """
  Search issues.
  """
  searchIssues(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned issues.
    """
    filter: IssueFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
    """
    Search string to look for.
    """
    term: String!
  ): IssueSearchPayload!
  """
  Search projects.
  """
  searchProjects(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
    """
    Search string to look for.
    """
    term: String!
  ): ProjectSearchPayload!
  """
  Fetch SSO login URL for the email provided.
  """
  ssoUrlFromEmail(
    """
    Email to query the SSO login URL by.
    """
    email: String!
    """
    Whether the client is the desktop app.
    """
    isDesktop: Boolean
  ): SsoUrlFromEmailResponse!
  """
  One specific team.
  """
  team(id: String!): Team!
  """
  One specific team membership.
  """
  teamMembership(id: String!): TeamMembership!
  """
  All team memberships.
  """
  teamMemberships(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): TeamMembershipConnection!
  """
  All teams whose issues can be accessed by the user. This might be different from `administrableTeams`, which also includes teams whose settings can be changed by the user.
  """
  teams(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned teams.
    """
    filter: TeamFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): TeamConnection!
  """
  A specific template.
  """
  template(
    """
    The identifier of the template to retrieve.
    """
    id: String!
  ): Template!
  """
  All templates from all users.
  """
  templates: [Template!]!
  """
  One specific user.
  """
  user(
    """
    The identifier of the user to retrieve. To retrieve the authenticated user, use `viewer` query.
    """
    id: String!
  ): User!
  """
  Finds a user account by email.
  """
  userAccountExists(
    """
    The email to find the user account by.
    """
    email: String!
  ): UserAccountExistsPayload
  """
  The user's settings.
  """
  userSettings: UserSettings!
  """
  All users for the organization.
  """
  users(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned users.
    """
    filter: UserFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    Should query return disabled/suspended users (default: false).
    """
    includeDisabled: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): UserConnection!
  """
  The currently authenticated user.
  """
  viewer: User!
  """
  A specific webhook.
  """
  webhook(
    """
    The identifier of the webhook to retrieve.
    """
    id: String!
  ): Webhook!
  """
  All webhooks.
  """
  webhooks(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): WebhookConnection!
  """
  One specific state.
  """
  workflowState(id: String!): WorkflowState!
  """
  All issue workflow states.
  """
  workflowStates(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned workflow states.
    """
    filter: WorkflowStateFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): WorkflowStateConnection!
  """
  [INTERNAL] Get all authorized applications (with limited fields) for a workspace
  """
  workspaceAuthorizedApplications: [WorkspaceAuthorizedApplication!]!
}

type RateLimitPayload {
  """
  The identifier we rate limit on.
  """
  identifier: String
  """
  The kind of rate limit selected for this request.
  """
  kind: String!
  """
  The state of the rate limit.
  """
  limits: [RateLimitResultPayload!]!
}

type RateLimitResultPayload {
  """
  The total allowed quantity for this type of limit.
  """
  allowedAmount: Float!
  """
  The period in which the rate limit is fully replenished in ms.
  """
  period: Float!
  """
  The remaining quantity for this type of limit after this request.
  """
  remainingAmount: Float!
  """
  The requested quantity for this type of limit.
  """
  requestedAmount: Float!
  """
  The timestamp after the rate limit is fully replenished as a UNIX timestamp.
  """
  reset: Float!
  """
  What is being rate limited.
  """
  type: String!
}

"""
A reaction associated with a comment or a project update.
"""
type Reaction implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  Name of the reaction's emoji.
  """
  emoji: String!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
  """
  The user who reacted.
  """
  user: User
}

type ReactionConnection {
  edges: [ReactionEdge!]!
  nodes: [Reaction!]!
  pageInfo: PageInfo!
}

input ReactionCreateInput {
  """
  The comment to associate the reaction with.
  """
  commentId: String
  """
  The emoji the user reacted with.
  """
  emoji: String
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one
  """
  id: String
  """
  The project update to associate the reaction with.
  """
  projectUpdateId: String
}

type ReactionEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: Reaction!
}

type ReactionPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  reaction: Reaction!
  success: Boolean!
}

"""
Comparator for relation existence.
"""
input RelationExistsComparator {
  """
  Equals constraint.
  """
  eq: Boolean
  """
  Not equals constraint.
  """
  neq: Boolean
}

"""
Features release channel
"""
enum ReleaseChannel {
  beta
  internal
  preRelease
  public
}

"""
A roadmap for projects.
"""
type Roadmap implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The roadmap's color.
  """
  color: String
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The user who created the roadmap.
  """
  creator: User!
  """
  The description of the roadmap.
  """
  description: String
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The name of the roadmap.
  """
  name: String!
  """
  The organization of the roadmap.
  """
  organization: Organization!
  """
  The user who owns the roadmap.
  """
  owner: User!
  """
  Projects associated with the roadmap.
  """
  projects(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned projects.
    """
    filter: ProjectFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): ProjectConnection!
  """
  The roadmap's unique URL slug.
  """
  slugId: String!
  """
  The sort order of the roadmap within the organization.
  """
  sortOrder: Float!
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
}

"""
Roadmap collection filtering options.
"""
input RoadmapCollectionFilter {
  """
  Compound filters, all of which need to be matched by the roadmap.
  """
  and: [RoadmapCollectionFilter!]
  """
  Comparator for the created at date.
  """
  createdAt: DateComparator
  """
  Filters that the roadmap creator must satisfy.
  """
  creator: UserFilter
  """
  Filters that needs to be matched by all roadmaps.
  """
  every: RoadmapFilter
  """
  Comparator for the identifier.
  """
  id: IDComparator
  """
  Comparator for the collection length.
  """
  length: NumberComparator
  """
  Comparator for the roadmap name.
  """
  name: StringComparator
  """
  Compound filters, one of which need to be matched by the roadmap.
  """
  or: [RoadmapCollectionFilter!]
  """
  Comparator for the roadmap slug ID.
  """
  slugId: StringComparator
  """
  Filters that needs to be matched by some roadmaps.
  """
  some: RoadmapFilter
  """
  Comparator for the updated at date.
  """
  updatedAt: DateComparator
}

type RoadmapConnection {
  edges: [RoadmapEdge!]!
  nodes: [Roadmap!]!
  pageInfo: PageInfo!
}

input RoadmapCreateInput {
  """
  The roadmap's color.
  """
  color: String
  """
  The description of the roadmap.
  """
  description: String
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String
  """
  The name of the roadmap.
  """
  name: String!
  """
  The owner of the roadmap
  """
  ownerId: String
  """
  The sort order of the roadmap within the organization.
  """
  sortOrder: Float
}

type RoadmapEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: Roadmap!
}

"""
Roadmap filtering options.
"""
input RoadmapFilter {
  """
  Compound filters, all of which need to be matched by the roadmap.
  """
  and: [RoadmapFilter!]
  """
  Comparator for the created at date.
  """
  createdAt: DateComparator
  """
  Filters that the roadmap creator must satisfy.
  """
  creator: UserFilter
  """
  Comparator for the identifier.
  """
  id: IDComparator
  """
  Comparator for the roadmap name.
  """
  name: StringComparator
  """
  Compound filters, one of which need to be matched by the roadmap.
  """
  or: [RoadmapFilter!]
  """
  Comparator for the roadmap slug ID.
  """
  slugId: StringComparator
  """
  Comparator for the updated at date.
  """
  updatedAt: DateComparator
}

type RoadmapPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The roadmap that was created or updated.
  """
  roadmap: Roadmap!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

"""
Join table between projects and roadmaps
"""
type RoadmapToProject implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The project that the roadmap is associated with.
  """
  project: Project!
  """
  The roadmap that the project is associated with.
  """
  roadmap: Roadmap!
  """
  The sort order of the project within the roadmap.
  """
  sortOrder: String!
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
}

type RoadmapToProjectConnection {
  edges: [RoadmapToProjectEdge!]!
  nodes: [RoadmapToProject!]!
  pageInfo: PageInfo!
}

input RoadmapToProjectCreateInput {
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String
  """
  The identifier of the project.
  """
  projectId: String!
  """
  The identifier of the roadmap.
  """
  roadmapId: String!
  """
  The sort order for the project within its organization.
  """
  sortOrder: Float
}

type RoadmapToProjectEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: RoadmapToProject!
}

type RoadmapToProjectPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The roadmapToProject that was created or updated.
  """
  roadmapToProject: RoadmapToProject!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

input RoadmapToProjectUpdateInput {
  """
  The sort order for the project within its organization.
  """
  sortOrder: Float
}

input RoadmapUpdateInput {
  """
  The roadmap's color.
  """
  color: String
  """
  The description of the roadmap.
  """
  description: String
  """
  The name of the roadmap.
  """
  name: String
  """
  The owner of the roadmap
  """
  ownerId: String
  """
  The sort order of the roadmap within the organization.
  """
  sortOrder: Float
}

type SamlConfiguration {
  """
  The issuer's custom entity ID.
  """
  issuerEntityId: String
  """
  Binding method for authentication call. Can be either `post` (default) or `redirect`.
  """
  ssoBinding: String
  """
  Sign in endpoint URL for the identity provider.
  """
  ssoEndpoint: String
  """
  The algorithm of the Signing Certificate. Can be one of `sha1`, `sha256` (default), or `sha512`.
  """
  ssoSignAlgo: String
  """
  X.509 Signing Certificate in string form.
  """
  ssoSigningCert: String
}

input SamlConfigurationInput {
  """
  The issuer's custom entity ID.
  """
  issuerEntityId: String
  """
  Binding method for authentication call. Can be either `post` (default) or `redirect`.
  """
  ssoBinding: String
  """
  Sign in endpoint URL for the identity provider.
  """
  ssoEndpoint: String
  """
  The algorithm of the Signing Certificate. Can be one of `sha1`, `sha256` (default), or `sha512`.
  """
  ssoSignAlgo: String
  """
  X.509 Signing Certificate in string form.
  """
  ssoSigningCert: String
}

"""
The organization's SAML configuration
"""
type SamlConfigurationPayload {
  """
  The issuer's custom entity ID.
  """
  issuerEntityId: String
  """
  Binding method for authentication call. Can be either `post` (default) or `redirect`.
  """
  ssoBinding: String
  """
  Sign in endpoint URL for the identity provider.
  """
  ssoEndpoint: String
  """
  The algorithm of the Signing Certificate. Can be one of `sha1`, `sha256` (default), or `sha512`.
  """
  ssoSignAlgo: String
}

"""
Sentry specific settings.
"""
type SentrySettings {
  """
  The slug of the Sentry organization being connected.
  """
  organizationSlug: String!
}

input SentrySettingsInput {
  """
  The slug of the Sentry organization being connected.
  """
  organizationSlug: String!
}

enum SlaStatus {
  Breached
  Completed
  Failed
  HighRisk
  LowRisk
  MediumRisk
}

"""
Comparator for sla status.
"""
input SlaStatusComparator {
  """
  Equals constraint.
  """
  eq: SlaStatus
  """
  In-array constraint.
  """
  in: [SlaStatus!]
  """
  Not-equals constraint.
  """
  neq: SlaStatus
  """
  Not-in-array constraint.
  """
  nin: [SlaStatus!]
  """
  Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values.
  """
  null: Boolean
}

"""
Slack notification specific settings.
"""
type SlackPostSettings {
  channel: String!
  channelId: String!
  configurationUrl: String!
}

input SlackPostSettingsInput {
  channel: String!
  channelId: String!
  configurationUrl: String!
}

"""
Comparator for `sourceType` field.
"""
input SourceTypeComparator {
  """
  Contains constraint. Matches any values that contain the given string.
  """
  contains: String
  """
  Contains case insensitive constraint. Matches any values that contain the given string case insensitive.
  """
  containsIgnoreCase: String
  """
  Ends with constraint. Matches any values that end with the given string.
  """
  endsWith: String
  """
  Equals constraint.
  """
  eq: String
  """
  Equals case insensitive. Matches any values that matches the given string case insensitive.
  """
  eqIgnoreCase: String
  """
  In-array constraint.
  """
  in: [String!]
  """
  Not-equals constraint.
  """
  neq: String
  """
  Not-equals case insensitive. Matches any values that don't match the given string case insensitive.
  """
  neqIgnoreCase: String
  """
  Not-in-array constraint.
  """
  nin: [String!]
  """
  Doesn't contain constraint. Matches any values that don't contain the given string.
  """
  notContains: String
  """
  Doesn't contain case insensitive constraint. Matches any values that don't contain the given string case insensitive.
  """
  notContainsIgnoreCase: String
  """
  Doesn't end with constraint. Matches any values that don't end with the given string.
  """
  notEndsWith: String
  """
  Doesn't start with constraint. Matches any values that don't start with the given string.
  """
  notStartsWith: String
  """
  Starts with constraint. Matches any values that start with the given string.
  """
  startsWith: String
  """
  Starts with case insensitive constraint. Matches any values that start with the given string.
  """
  startsWithIgnoreCase: String
}

type SsoUrlFromEmailResponse {
  """
  SAML SSO sign-in URL.
  """
  samlSsoUrl: String!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

"""
Comparator for strings.
"""
input StringComparator {
  """
  Contains constraint. Matches any values that contain the given string.
  """
  contains: String
  """
  Contains case insensitive constraint. Matches any values that contain the given string case insensitive.
  """
  containsIgnoreCase: String
  """
  Ends with constraint. Matches any values that end with the given string.
  """
  endsWith: String
  """
  Equals constraint.
  """
  eq: String
  """
  Equals case insensitive. Matches any values that matches the given string case insensitive.
  """
  eqIgnoreCase: String
  """
  In-array constraint.
  """
  in: [String!]
  """
  Not-equals constraint.
  """
  neq: String
  """
  Not-equals case insensitive. Matches any values that don't match the given string case insensitive.
  """
  neqIgnoreCase: String
  """
  Not-in-array constraint.
  """
  nin: [String!]
  """
  Doesn't contain constraint. Matches any values that don't contain the given string.
  """
  notContains: String
  """
  Doesn't contain case insensitive constraint. Matches any values that don't contain the given string case insensitive.
  """
  notContainsIgnoreCase: String
  """
  Doesn't end with constraint. Matches any values that don't end with the given string.
  """
  notEndsWith: String
  """
  Doesn't start with constraint. Matches any values that don't start with the given string.
  """
  notStartsWith: String
  """
  Starts with constraint. Matches any values that start with the given string.
  """
  startsWith: String
  """
  Starts with case insensitive constraint. Matches any values that start with the given string.
  """
  startsWithIgnoreCase: String
}

"""
Contains either the full serialized state of the application or delta packets that the requester can
  apply to the local data set in order to be up-to-date.
"""
type SyncResponse {
  """
  The version of the remote database. Incremented by 1 for each migration run on the database.
  """
  databaseVersion: Float!
  """
  JSON serialized delta changes that the client can apply to its local state
      in order to catch up with the state of the world.
  """
  delta: String
  """
  The last sync id covered by the response.
  """
  lastSyncId: Float!
  """
  The full state of the organization as a serialized JSON object.
      Mutually exclusive with the delta property
  """
  state: String
  """
  The sync groups that the user is subscribed to.
  """
  subscribedSyncGroups: [String!]!
}

type SynchronizedPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
}

"""
An organizational unit that contains issues.
"""
type Team implements Node {
  """
  Team's currently active cycle.
  """
  activeCycle: Cycle
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  Period after which automatically closed and completed issues are automatically archived in months.
  """
  autoArchivePeriod: Float!
  """
  Period after which issues are automatically closed in months. Null/undefined means disabled.
  """
  autoClosePeriod: Float
  """
  The canceled workflow state which auto closed issues will be set to. Defaults to the first canceled state.
  """
  autoCloseStateId: String
  """
  The team's color.
  """
  color: String
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  Calendar feed URL (iCal) for cycles.
  """
  cycleCalenderUrl: String!
  """
  The cooldown time after each cycle in weeks.
  """
  cycleCooldownTime: Float!
  """
  The duration of a cycle in weeks.
  """
  cycleDuration: Float!
  """
  Auto assign completed issues to current cycle.
  """
  cycleIssueAutoAssignCompleted: Boolean!
  """
  Auto assign started issues to current cycle.
  """
  cycleIssueAutoAssignStarted: Boolean!
  """
  Only allow issues issues with cycles in Active Issues.
  """
  cycleLockToActive: Boolean!
  """
  The day of the week that a new cycle starts.
  """
  cycleStartDay: Float!
  """
  Cycles associated with the team.
  """
  cycles(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned cycles.
    """
    filter: CycleFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): CycleConnection!
  """
  Whether the team uses cycles.
  """
  cyclesEnabled: Boolean!
  """
  What to use as an default estimate for unestimated issues.
  """
  defaultIssueEstimate: Float!
  """
  The default workflow state into which issues are set when they are opened by team members.
  """
  defaultIssueState: WorkflowState
  """
  The default template to use for new issues created by members of the team.
  """
  defaultTemplateForMembers: Template
  """
  The id of the default template to use for new issues created by members of the team.
  """
  defaultTemplateForMembersId: String @deprecated(reason: "Use defaultTemplateForMembers instead")
  """
  The default template to use for new issues created by non-members of the team.
  """
  defaultTemplateForNonMembers: Template
  """
  The id of the default template to use for new issues created by non-members of the team.
  """
  defaultTemplateForNonMembersId: String @deprecated(reason: "Use defaultTemplateForNonMembers instead")
  """
  The team's description.
  """
  description: String
  """
  The workflow state into which issues are moved when a PR has been opened as draft.
  """
  draftWorkflowState: WorkflowState
  """
  Whether to group recent issue history entries.
  """
  groupIssueHistory: Boolean!
  """
  The icon of the team.
  """
  icon: String
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  Settings for all integrations associated with that team.
  """
  integrationsSettings: IntegrationsSettings
  """
  Unique hash for the team to be used in invite URLs.
  """
  inviteHash: String!
  """
  Whether to allow zeros in issues estimates.
  """
  issueEstimationAllowZero: Boolean!
  """
  Whether to add additional points to the estimate scale.
  """
  issueEstimationExtended: Boolean!
  """
  The issue estimation type to use. Must be one of "notUsed", "exponential", "fibonacci", "linear", "tShirt".
  """
  issueEstimationType: String!
  """
  Whether issues without priority should be sorted first.
  """
  issueOrderingNoPriorityFirst: Boolean!
  """
  Whether to move issues to bottom of the column when changing state.
  """
  issueSortOrderDefaultToBottom: Boolean!
  """
  Issues associated with the team.
  """
  issues(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned issues.
    """
    filter: IssueFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueConnection!
  """
  The team's unique key. The key is used in URLs.
  """
  key: String!
  """
  Labels associated with the team.
  """
  labels(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned issue labels.
    """
    filter: IssueLabelFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueLabelConnection!
  """
  The workflow state into which issues are moved when they are marked as a duplicate of another issue. Defaults to the first canceled state.
  """
  markedAsDuplicateWorkflowState: WorkflowState
  """
  Users who are members of this team.
  """
  members(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned users.
    """
    filter: UserFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    Should query return disabled/suspended users (default: false).
    """
    includeDisabled: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): UserConnection!
  """
  Memberships associated with the team. For easier access of the same data, use `members` query.
  """
  memberships(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): TeamMembershipConnection!
  """
  The workflow state into which issues are moved when a PR has been merged.
  """
  mergeWorkflowState: WorkflowState
  """
  The team's name.
  """
  name: String!
  """
  The organization that the team is associated with.
  """
  organization: Organization!
  """
  Whether the team is private or not.
  """
  private: Boolean!
  """
  Projects associated with the team.
  """
  projects(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned projects.
    """
    filter: ProjectFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): ProjectConnection!
  """
  Whether an issue needs to have a priority set before leaving triage
  """
  requirePriorityToLeaveTriage: Boolean!
  """
  The workflow state into which issues are moved when a review has been requested for the PR.
  """
  reviewWorkflowState: WorkflowState
  """
  Whether to send new issue comment notifications to Slack.
  """
  slackIssueComments: Boolean!
  """
  Whether to send new issue status updates to Slack.
  """
  slackIssueStatuses: Boolean!
  """
  Whether to send new issue notifications to Slack.
  """
  slackNewIssue: Boolean!
  """
  The workflow state into which issues are moved when a PR has been opened.
  """
  startWorkflowState: WorkflowState
  """
  The states that define the workflow associated with the team.
  """
  states(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned workflow states.
    """
    filter: WorkflowStateFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): WorkflowStateConnection!
  """
  Templates associated with the team.
  """
  templates(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): TemplateConnection!
  """
  The timezone of the team. Defaults to "America/Los_Angeles"
  """
  timezone: String!
  """
  Whether triage mode is enabled for the team or not.
  """
  triageEnabled: Boolean!
  """
  The workflow state into which issues are set when they are opened by non-team members or integrations if triage is enabled.
  """
  triageIssueState: WorkflowState
  """
  How many upcoming cycles to create.
  """
  upcomingCycleCount: Float!
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
  """
  Webhooks associated with the team.
  """
  webhooks(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): WebhookConnection!
}

type TeamConnection {
  edges: [TeamEdge!]!
  nodes: [Team!]!
  pageInfo: PageInfo!
}

input TeamCreateInput {
  """
  Period after which closed and completed issues are automatically archived, in months. 0 means disabled.
  """
  autoArchivePeriod: Float
  """
  Period after which issues are automatically closed, in months.
  """
  autoClosePeriod: Float
  """
  The canceled workflow state which auto closed issues will be set to.
  """
  autoCloseStateId: String
  """
  The color of the team.
  """
  color: String
  """
  The cooldown time after each cycle in weeks.
  """
  cycleCooldownTime: Int
  """
  The duration of each cycle in weeks.
  """
  cycleDuration: Int
  """
  Auto assign completed issues to current active cycle setting.
  """
  cycleIssueAutoAssignCompleted: Boolean
  """
  Auto assign started issues to current active cycle setting.
  """
  cycleIssueAutoAssignStarted: Boolean
  """
  Only allow issues issues with cycles in Active Issues.
  """
  cycleLockToActive: Boolean
  """
  The day of the week that a new cycle starts.
  """
  cycleStartDay: Float
  """
  Whether the team uses cycles.
  """
  cyclesEnabled: Boolean
  """
  What to use as an default estimate for unestimated issues.
  """
  defaultIssueEstimate: Float
  """
  The identifier of the default template for members of this team.
  """
  defaultTemplateForMembersId: String
  """
  The identifier of the default template for non-members of this team.
  """
  defaultTemplateForNonMembersId: String
  """
  The description of the team.
  """
  description: String
  """
  Whether to group recent issue history entries.
  """
  groupIssueHistory: Boolean
  """
  The icon of the team.
  """
  icon: String
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String
  """
  Whether to allow zeros in issues estimates.
  """
  issueEstimationAllowZero: Boolean
  """
  Whether to add additional points to the estimate scale.
  """
  issueEstimationExtended: Boolean
  """
  The issue estimation type to use. Must be one of "notUsed", "exponential", "fibonacci", "linear", "tShirt".
  """
  issueEstimationType: String
  """
  Whether issues without priority should be sorted first.
  """
  issueOrderingNoPriorityFirst: Boolean
  """
  Whether to move issues to bottom of the column when changing state.
  """
  issueSortOrderDefaultToBottom: Boolean
  """
  The key of the team. If not given, the key will be generated based on the name of the team.
  """
  key: String
  """
  The workflow state into which issues are moved when they are marked as a duplicate of another issue.
  """
  markedAsDuplicateWorkflowStateId: String
  """
  The name of the team.
  """
  name: String!
  """
  The organization associated with the team.
  """
  organizationId: String
  """
  Internal. Whether the team is private or not.
  """
  private: Boolean
  """
  Whether an issue needs to have a priority set before leaving triage.
  """
  requirePriorityToLeaveTriage: Boolean
  """
  The timezone of the team.
  """
  timezone: String
  """
  Whether triage mode is enabled for the team.
  """
  triageEnabled: Boolean
  """
  How many upcoming cycles to create.
  """
  upcomingCycleCount: Float
}

type TeamEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: Team!
}

"""
Team filtering options.
"""
input TeamFilter {
  """
  Compound filters, all of which need to be matched by the team.
  """
  and: [TeamFilter!]
  """
  Comparator for the created at date.
  """
  createdAt: DateComparator
  """
  Comparator for the team description.
  """
  description: NullableStringComparator
  """
  Comparator for the identifier.
  """
  id: IDComparator
  """
  Filters that the teams issues must satisfy.
  """
  issues: IssueCollectionFilter
  """
  Comparator for the team key.
  """
  key: StringComparator
  """
  Comparator for the team name.
  """
  name: StringComparator
  """
  Compound filters, one of which need to be matched by the team.
  """
  or: [TeamFilter!]
  """
  Comparator for the updated at date.
  """
  updatedAt: DateComparator
}

"""
Defines the membership of a user to a team.
"""
type TeamMembership implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  Whether the user is the owner of the team
  """
  owner: Boolean
  """
  The order of the item in the users team list.
  """
  sortOrder: Float!
  """
  The team that the membership is associated with.
  """
  team: Team!
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
  """
  The user that the membership is associated with.
  """
  user: User!
}

type TeamMembershipConnection {
  edges: [TeamMembershipEdge!]!
  nodes: [TeamMembership!]!
  pageInfo: PageInfo!
}

input TeamMembershipCreateInput {
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String
  """
  Internal. Whether the user is the owner of the team.
  """
  owner: Boolean
  """
  The position of the item in the users list.
  """
  sortOrder: Float
  """
  The identifier of the team associated with the membership.
  """
  teamId: String!
  """
  The identifier of the user associated with the membership.
  """
  userId: String!
}

type TeamMembershipEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: TeamMembership!
}

type TeamMembershipPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
  """
  The team membership that was created or updated.
  """
  teamMembership: TeamMembership
}

input TeamMembershipUpdateInput {
  """
  Internal. Whether the user is the owner of the team.
  """
  owner: Boolean
  """
  The position of the item in the users list.
  """
  sortOrder: Float
}

"""
A team notification subscription.
"""
type TeamNotificationSubscription implements Entity & Node & NotificationSubscription {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  Subscribed project.
  """
  project: Project
  """
  The team subscribed to.
  """
  team: Team!
  """
  The type of the subscription.
  """
  type: String!
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
  """
  The user associated with notification subscriptions.
  """
  user: User!
}

type TeamPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
  """
  The team that was created or updated.
  """
  team: Team
}

input TeamUpdateInput {
  """
  Period after which closed and completed issues are automatically archived, in months.
  """
  autoArchivePeriod: Float
  """
  Period after which issues are automatically closed, in months.
  """
  autoClosePeriod: Float
  """
  The canceled workflow state which auto closed issues will be set to.
  """
  autoCloseStateId: String
  """
  The color of the team.
  """
  color: String
  """
  The cooldown time after each cycle in weeks.
  """
  cycleCooldownTime: Int
  """
  The duration of each cycle in weeks.
  """
  cycleDuration: Int
  """
  Whether the first cycle should start in the current or the next week.
  """
  cycleEnabledStartWeek: String
  """
  Auto assign completed issues to current active cycle setting.
  """
  cycleIssueAutoAssignCompleted: Boolean
  """
  Auto assign started issues to current active cycle setting.
  """
  cycleIssueAutoAssignStarted: Boolean
  """
  Only allow issues with cycles in Active Issues.
  """
  cycleLockToActive: Boolean
  """
  The day of the week that a new cycle starts.
  """
  cycleStartDay: Float
  """
  Whether the team uses cycles.
  """
  cyclesEnabled: Boolean
  """
  What to use as an default estimate for unestimated issues.
  """
  defaultIssueEstimate: Float
  """
  Default status for newly created issues.
  """
  defaultIssueStateId: String
  """
  The identifier of the default template for members of this team.
  """
  defaultTemplateForMembersId: String
  """
  The identifier of the default template for non-members of this team.
  """
  defaultTemplateForNonMembersId: String
  """
  The description of the team.
  """
  description: String
  """
  The workflow state into which issues are moved when a draft PR has been opened.
  """
  draftWorkflowStateId: String
  """
  Whether to group recent issue history entries.
  """
  groupIssueHistory: Boolean
  """
  The icon of the team.
  """
  icon: String
  """
  Whether to allow zeros in issues estimates.
  """
  issueEstimationAllowZero: Boolean
  """
  Whether to add additional points to the estimate scale.
  """
  issueEstimationExtended: Boolean
  """
  The issue estimation type to use. Must be one of "notUsed", "exponential", "fibonacci", "linear", "tShirt".
  """
  issueEstimationType: String
  """
  Whether issues without priority should be sorted first.
  """
  issueOrderingNoPriorityFirst: Boolean
  """
  Whether to move issues to bottom of the column when changing state.
  """
  issueSortOrderDefaultToBottom: Boolean
  """
  The key of the team.
  """
  key: String
  """
  The workflow state into which issues are moved when they are marked as a duplicate of another issue.
  """
  markedAsDuplicateWorkflowStateId: String
  """
  The workflow state into which issues are moved when a PR has been merged.
  """
  mergeWorkflowStateId: String
  """
  The name of the team.
  """
  name: String
  """
  Whether the team is private or not.
  """
  private: Boolean
  """
  Whether an issue needs to have a priority set before leaving triage.
  """
  requirePriorityToLeaveTriage: Boolean
  """
  The workflow state into which issues are moved when a review has been requested for the PR.
  """
  reviewWorkflowStateId: String
  """
  Whether to send new issue comment notifications to Slack.
  """
  slackIssueComments: Boolean
  """
  Whether to send issue status update notifications to Slack.
  """
  slackIssueStatuses: Boolean
  """
  Whether to send new issue notifications to Slack.
  """
  slackNewIssue: Boolean
  """
  The workflow state into which issues are moved when a PR has been opened.
  """
  startWorkflowStateId: String
  """
  The timezone of the team.
  """
  timezone: String
  """
  Whether triage mode is enabled for the team.
  """
  triageEnabled: Boolean
  """
  How many upcoming cycles to create.
  """
  upcomingCycleCount: Float
}

"""
A template object used for creating entities faster.
"""
type Template implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The user who created the template.
  """
  creator: User
  """
  Template description.
  """
  description: String
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The user who last updated the template.
  """
  lastUpdatedBy: User
  """
  The name of the template.
  """
  name: String!
  """
  The organization that the template is associated with. If null, the template is associated with a particular team.
  """
  organization: Organization
  """
  The team that the template is associated with. If null, the template is global to the workspace.
  """
  team: Team
  """
  Template data.
  """
  templateData: JSON!
  """
  The entity type this template is for.
  """
  type: String!
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
}

type TemplateConnection {
  edges: [TemplateEdge!]!
  nodes: [Template!]!
  pageInfo: PageInfo!
}

input TemplateCreateInput {
  """
  The template description.
  """
  description: String
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String
  """
  The template name.
  """
  name: String!
  """
  The identifier or key of the team associated with the template. If not given, the template will be shared across all teams.
  """
  teamId: String
  """
  The template data as JSON encoded attributes of the type of entity, such as an issue.
  """
  templateData: JSON!
  """
  The template type, e.g. 'issue'.
  """
  type: String!
}

type TemplateEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: Template!
}

type TemplatePayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
  """
  The template that was created or updated.
  """
  template: Template!
}

input TemplateUpdateInput {
  """
  The template description.
  """
  description: String
  """
  The template name.
  """
  name: String
  """
  The identifier or key of the team associated with the template. If set to null, the template will be shared across all teams.
  """
  teamId: String
  """
  The template data as JSON encoded attributes of the type of entity, such as an issue.
  """
  templateData: JSON
}

"""
Represents a date in ISO 8601 format. Accepts shortcuts like `2021` to represent midnight Fri Jan 01 2021. Also accepts ISO 8601 durations strings which are added to the current date to create the represented date (e.g '-P2W1D' represents the date that was two weeks and 1 day ago)
"""
scalar TimelessDate

"""
Comparator for timeless dates.
"""
input TimelessDateComparator {
  """
  Equals constraint.
  """
  eq: TimelessDate
  """
  Greater-than constraint. Matches any values that are greater than the given value.
  """
  gt: TimelessDate
  """
  Greater-than-or-equal constraint. Matches any values that are greater than or equal to the given value.
  """
  gte: TimelessDate
  """
  In-array constraint.
  """
  in: [TimelessDate!]
  """
  Less-than constraint. Matches any values that are less than the given value.
  """
  lt: TimelessDate
  """
  Less-than-or-equal constraint. Matches any values that are less than or equal to the given value.
  """
  lte: TimelessDate
  """
  Not-equals constraint.
  """
  neq: TimelessDate
  """
  Not-in-array constraint.
  """
  nin: [TimelessDate!]
}

input TokenUserAccountAuthInput {
  """
  The email which to login via the magic login code.
  """
  email: String!
  """
  The identifiers of the teams to auto-join.
  """
  teamIdsToJoin: [String!]
  """
  The timezone of the user's browser.
  """
  timezone: String!
  """
  The magic login code.
  """
  token: String!
}

"""
A universally unique identifier as specified by RFC 4122.
"""
scalar UUID

input UpdateOrganizationInput {
  """
  List of services that are allowed to be used for login.
  """
  allowedAuthServices: [String!]
  """
  How git branches are formatted. If null, default formatting will be used.
  """
  gitBranchFormat: String
  """
  Whether the Git integration linkback messages should be sent for private repositories.
  """
  gitLinkbackMessagesEnabled: Boolean
  """
  Whether the Git integration linkback messages should be sent for public repositories.
  """
  gitPublicLinkbackMessagesEnabled: Boolean
  """
  Linear Preview feature flags
  """
  linearPreviewFlags: JSONObject
  """
  The logo of the organization.
  """
  logoUrl: String
  """
  The name of the organization.
  """
  name: String
  """
  Whether the organization has opted for having to approve all OAuth applications for install.
  """
  oauthAppReview: Boolean
  """
  The day at which project updates are sent.
  """
  projectUpdateRemindersDay: Day
  """
  The hour at which project updates are sent.
  """
  projectUpdateRemindersHour: Float
  """
  The frequency at which project updates are sent.
  """
  projectUpdatesReminderFrequency: ProjectUpdateReminderFrequency
  """
  Whether the organization has opted for reduced customer support attachment information.
  """
  reducedPersonalInformation: Boolean
  """
  Whether the organization is using roadmap.
  """
  roadmapEnabled: Boolean
  """
  Internal. Whether SLAs have been enabled for the organization.
  """
  slaEnabled: Boolean
  """
  The URL key of the organization.
  """
  urlKey: String
}

input UpdateUserInput {
  """
  Whether the user account is active.
  """
  active: Boolean
  """
  Whether the user account has admin privileges.
  """
  admin: Boolean
  """
  The avatar image URL of the user.
  """
  avatarUrl: String
  """
  The user description or a short bio.
  """
  description: String
  """
  Reason for deactivation.
  """
  disableReason: String
  """
  The display name of the user.
  """
  displayName: String
  """
  The name of the user.
  """
  name: String
  """
  The emoji part of the user status.
  """
  statusEmoji: String
  """
  The label part of the user status.
  """
  statusLabel: String
  """
  When the user status should be cleared.
  """
  statusUntilAt: DateTime
  """
  The local timezone of the user.
  """
  timezone: String
}

"""
Object representing Google Cloud upload policy, plus additional data.
"""
type UploadFile {
  """
  The asset URL for the uploaded file. (assigned automatically)
  """
  assetUrl: String!
  """
  The content type.
  """
  contentType: String!
  """
  The filename.
  """
  filename: String!
  headers: [UploadFileHeader!]!
  metaData: JSONObject
  """
  The size of the uploaded file.
  """
  size: Int!
  """
  The signed URL the for the uploaded file. (assigned automatically)
  """
  uploadUrl: String!
}

type UploadFileHeader {
  """
  Upload file header key.
  """
  key: String!
  """
  Upload file header value.
  """
  value: String!
}

type UploadPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
  """
  Object describing the file to be uploaded.
  """
  uploadFile: UploadFile
}

"""
A user that has access to the the resources of an organization.
"""
type User implements Node {
  """
  Whether the user account is active or disabled (suspended).
  """
  active: Boolean!
  """
  Whether the user is an organization administrator.
  """
  admin: Boolean!
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  Issues assigned to the user.
  """
  assignedIssues(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned issues.
    """
    filter: IssueFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueConnection!
  """
  An URL to the user's avatar image.
  """
  avatarUrl: String
  """
  [DEPRECATED] Hash for the user to be used in calendar URLs.
  """
  calendarHash: String
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  Number of issues created.
  """
  createdIssueCount: Int!
  """
  Issues created by the user.
  """
  createdIssues(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned issues.
    """
    filter: IssueFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueConnection!
  """
  A short description of the user, either its title or bio.
  """
  description: String
  """
  Reason why is the account disabled.
  """
  disableReason: String
  """
  The user's display (nick) name. Unique within each organization.
  """
  displayName: String!
  """
  The user's email address.
  """
  email: String!
  """
  Whether the user is a guest in the workspace and limited to accessing a subset of teams.
  """
  guest: Boolean!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  Unique hash for the user to be used in invite URLs.
  """
  inviteHash: String!
  """
  Whether the user is the currently authenticated user.
  """
  isMe: Boolean!
  """
  The last time the user was seen online. If null, the user is currently online.
  """
  lastSeen: DateTime
  """
  The user's full name.
  """
  name: String!
  """
  Organization the user belongs to.
  """
  organization: Organization!
  """
  The emoji to represent the user current status.
  """
  statusEmoji: String
  """
  The label of the user current status.
  """
  statusLabel: String
  """
  A date at which the user current status should be cleared.
  """
  statusUntilAt: DateTime
  """
  Memberships associated with the user. For easier access of the same data, use `teams` query.
  """
  teamMemberships(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): TeamMembershipConnection!
  """
  Teams the user is part of.
  """
  teams(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned teams.
    """
    filter: TeamFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): TeamConnection!
  """
  The local timezone of the user.
  """
  timezone: String
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
  """
  User's profile URL.
  """
  url: String!
}

"""
A user account.
"""
type UserAccount {
  """
  The time at which the model was archived.
  """
  archivedAt: DateTime
  """
  The time at which the model was created.
  """
  createdAt: DateTime!
  """
  The user's email address.
  """
  email: String!
  """
  The models identifier.
  """
  id: ID!
  """
  The user's name.
  """
  name: String
  """
  The authentication service used to create the account.
  """
  service: String!
  """
  The time at which the model was updated.
  """
  updatedAt: DateTime!
  """
  Users belonging to the account.
  """
  users: [User!]!
}

"""
[INTERNAL] An email change verification challenge.
"""
type UserAccountEmailChange {
  """
  The time at which the model was archived.
  """
  archivedAt: DateTime
  """
  The timestamp this verification challenge was canceled at.
  """
  canceledAt: DateTime
  """
  The timestamp the verification codes expire at.
  """
  expiresAt: DateTime!
  """
  The model's identifier.
  """
  id: ID!
  """
  The new email the user account wants to change to.
  """
  newEmail: String!
  """
  The timestamp the new email was verified at.
  """
  newEmailVerifiedAt: DateTime
  """
  The user account's current email.
  """
  oldEmail: String!
  """
  The timestamp the old email was verified at.
  """
  oldEmailVerifiedAt: DateTime
  """
  The time at which the model was updated.
  """
  updatedAt: DateTime!
}

"""
[INTERNAL] Result of looking up a user account by email.
"""
type UserAccountExistsPayload {
  """
  [INTERNAL] Whether the operation was successful.
  """
  success: Boolean!
}

type UserAdminPayload {
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

"""
Public information of the OAuth application, plus whether the application has been authorized for the given scopes.
"""
type UserAuthorizedApplication {
  """
  Error associated with the application needing to be requested for approval in the workspace
  """
  approvalErrorCode: String
  """
  OAuth application's client ID.
  """
  clientId: String!
  """
  Whether the application was created by Linear.
  """
  createdByLinear: Boolean!
  """
  Information about the application.
  """
  description: String
  """
  Name of the developer.
  """
  developer: String!
  """
  Url of the developer (homepage or docs).
  """
  developerUrl: String!
  """
  OAuth application's ID.
  """
  id: String!
  """
  Image of the application.
  """
  imageUrl: String
  """
  Whether the user has authorized the application for the given scopes.
  """
  isAuthorized: Boolean!
  """
  Application name.
  """
  name: String!
  """
  Whether or not webhooks are enabled for the application.
  """
  webhooksEnabled: Boolean!
}

"""
User filtering options.
"""
input UserCollectionFilter {
  """
  Comparator for the user's activity status.
  """
  active: BooleanComparator
  """
  Comparator for the user's admin status.
  """
  admin: BooleanComparator
  """
  Compound filters, all of which need to be matched by the user.
  """
  and: [UserCollectionFilter!]
  """
  Filters that the users assigned issues must satisfy.
  """
  assignedIssues: IssueCollectionFilter
  """
  Comparator for the created at date.
  """
  createdAt: DateComparator
  """
  Comparator for the user's display name.
  """
  displayName: StringComparator
  """
  Comparator for the user's email.
  """
  email: StringComparator
  """
  Filters that needs to be matched by all users.
  """
  every: UserFilter
  """
  Comparator for the identifier.
  """
  id: IDComparator
  """
  Filter based on the currently authenticated user. Set to true to filter for the authenticated user, false for any other user.
  """
  isMe: BooleanComparator
  """
  Comparator for the collection length.
  """
  length: NumberComparator
  """
  Comparator for the user's name.
  """
  name: StringComparator
  """
  Compound filters, one of which need to be matched by the user.
  """
  or: [UserCollectionFilter!]
  """
  Filters that needs to be matched by some users.
  """
  some: UserFilter
  """
  Comparator for the updated at date.
  """
  updatedAt: DateComparator
}

type UserConnection {
  edges: [UserEdge!]!
  nodes: [User!]!
  pageInfo: PageInfo!
}

type UserEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: User!
}

"""
User filtering options.
"""
input UserFilter {
  """
  Comparator for the user's activity status.
  """
  active: BooleanComparator
  """
  Comparator for the user's admin status.
  """
  admin: BooleanComparator
  """
  Compound filters, all of which need to be matched by the user.
  """
  and: [UserFilter!]
  """
  Filters that the users assigned issues must satisfy.
  """
  assignedIssues: IssueCollectionFilter
  """
  Comparator for the created at date.
  """
  createdAt: DateComparator
  """
  Comparator for the user's display name.
  """
  displayName: StringComparator
  """
  Comparator for the user's email.
  """
  email: StringComparator
  """
  Comparator for the identifier.
  """
  id: IDComparator
  """
  Filter based on the currently authenticated user. Set to true to filter for the authenticated user, false for any other user.
  """
  isMe: BooleanComparator
  """
  Comparator for the user's name.
  """
  name: StringComparator
  """
  Compound filters, one of which need to be matched by the user.
  """
  or: [UserFilter!]
  """
  Comparator for the updated at date.
  """
  updatedAt: DateComparator
}

"""
The types of flags that the user can have.
"""
enum UserFlagType {
  all
  analyticsWelcomeDismissed
  canPlaySnake
  canPlayTetris
  completedOnboarding
  cycleWelcomeDismissed
  desktopDownloadToastDismissed
  desktopInstalled
  desktopTabsOnboardingDismissed
  dueDateShortcutMigration
  emptyActiveIssuesDismissed
  emptyBacklogDismissed
  emptyCustomViewsDismissed
  emptyMyIssuesDismissed
  figmaPromptDismissed
  importBannerDismissed
  insightsHelpDismissed
  insightsWelcomeDismissed
  issueLabelSuggestionUsed
  issueMovePromptCompleted
  joinTeamIntroductionDismissed
  listSelectionTip
  migrateThemePreference
  milestoneOnboardingIsSeenAndDismissed
  projectBacklogWelcomeDismissed
  projectUpdatesWelcomeDismissed
  projectWelcomeDismissed
  rewindBannerDismissed
  slackCommentReactionTipShown
  teamsPageIntroductionDismissed
  threadedCommentsNudgeIsSeen
  triageWelcomeDismissed
}

"""
Operations that can be applied to UserFlagType
"""
enum UserFlagUpdateOperation {
  clear
  decr
  incr
  lock
}

type UserPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
  """
  The user that was created or updated.
  """
  user: User
}

"""
The different permission roles available to users on an organization
"""
enum UserRoleType {
  admin
  guest
  user
}

"""
The settings of a user as a JSON object.
"""
type UserSettings implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  Hash for the user to be used in calendar URLs.
  """
  calendarHash: String
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The notification channel settings the user has selected.
  """
  notificationPreferences: JSONObject!
  """
  Whether to show full user names instead of display names.
  """
  showFullUserNames: Boolean!
  """
  The email types the user has unsubscribed from.
  """
  unsubscribedFrom: [String!]!
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
  """
  The user associated with these settings.
  """
  user: User!
}

type UserSettingsFlagPayload {
  """
  The flag key which was updated.
  """
  flag: String!
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
  """
  The flag value after update.
  """
  value: Int!
}

type UserSettingsFlagsResetPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

type UserSettingsPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
  """
  The user's settings.
  """
  userSettings: UserSettings!
}

input UserSettingsUpdateInput {
  """
  The user's notification preferences.
  """
  notificationPreferences: JSONObject
  """
  The user's settings.
  """
  settings: JSONObject
  """
  The types of emails the user has unsubscribed from.
  """
  unsubscribedFrom: [String!]
}

"""
View preferences.
"""
type ViewPreferences implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The view preference type.
  """
  type: String!
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
  """
  The view type.
  """
  viewType: String!
}

input ViewPreferencesCreateInput {
  """
  The custom view these view preferences are associated with.
  """
  customViewId: String
  """
  The cycle these view preferences are associated with.
  """
  cycleId: String
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String
  """
  The default parameters for the insight on that view.
  """
  insights: JSONObject
  """
  The label these view preferences are associated with.
  """
  labelId: String
  """
  View preferences object.
  """
  preferences: JSONObject!
  """
  The project these view preferences are associated with.
  """
  projectId: String
  """
  The roadmap these view preferences are associated with.
  """
  roadmapId: String
  """
  The team these view preferences are associated with.
  """
  teamId: String
  """
  The type of view preferences (either user or organization level preferences).
  """
  type: ViewPreferencesType!
  """
  The user profile these view preferences are associated with.
  """
  userId: String
  """
  The view type of the view preferences are associated with.
  """
  viewType: ViewType!
}

type ViewPreferencesPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
  """
  The view preferences entity being mutated.
  """
  viewPreferences: ViewPreferences!
}

"""
The type of view preferences (either user or organization level preferences).
"""
enum ViewPreferencesType {
  organization
  user
}

input ViewPreferencesUpdateInput {
  """
  The default parameters for the insight on that view.
  """
  insights: JSONObject
  """
  View preferences.
  """
  preferences: JSONObject
}

"""
The client view this custom view is targeting.
"""
enum ViewType {
  activeIssues
  allIssues
  archive
  backlog
  board
  completedCycle
  customRoadmap
  customView
  cycle
  inbox
  label
  myIssues
  myIssuesActivity
  myIssuesCreatedByMe
  myIssuesSubscribedTo
  project
  projects
  projectsAll
  projectsBacklog
  projectsClosed
  quickView
  roadmap
  roadmapAll
  roadmapBacklog
  roadmapClosed
  roadmaps
  search
  teams
  triage
  userProfile
  userProfileCreatedByUser
}

"""
A webhook used to send HTTP notifications over data updates
"""
type Webhook implements Node {
  """
  Whether the Webhook is enabled for all public teams, including teams created after the webhook was created.
  """
  allPublicTeams: Boolean!
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The user who created the webhook.
  """
  creator: User
  """
  Whether the Webhook is enabled.
  """
  enabled: Boolean!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  Webhook label
  """
  label: String
  """
  The resource types this webhook is subscribed to.
  """
  resourceTypes: [String!]!
  """
  Secret token for verifying the origin on the recipient side.
  """
  secret: String
  """
  The team that the webhook is associated with. If null, the webhook is associated with all public teams of the organization.
  """
  team: Team
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
  """
  Webhook URL
  """
  url: String
}

type WebhookConnection {
  edges: [WebhookEdge!]!
  nodes: [Webhook!]!
  pageInfo: PageInfo!
}

input WebhookCreateInput {
  """
  Whether this webhook is enabled for all public teams.
  """
  allPublicTeams: Boolean
  """
  Whether this webhook is enabled.
  """
  enabled: Boolean = true
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String
  """
  Label for the webhook.
  """
  label: String
  """
  List of resources the webhook should subscribe to.
  """
  resourceTypes: [String!]!
  """
  A secret token used to sign the webhook payload.
  """
  secret: String
  """
  The identifier or key of the team associated with the Webhook.
  """
  teamId: String
  """
  The URL that will be called on data changes.
  """
  url: String!
}

type WebhookEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: Webhook!
}

type WebhookPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
  """
  The webhook entity being mutated.
  """
  webhook: Webhook!
}

input WebhookUpdateInput {
  """
  Whether this webhook is enabled.
  """
  enabled: Boolean
  """
  Label for the webhook.
  """
  label: String
  """
  List of resources the webhook should subscribe to.
  """
  resourceTypes: [String!]
  """
  A secret token used to sign the webhook payload.
  """
  secret: String
  """
  The URL that will be called on data changes.
  """
  url: String
}

"""
A condition to match for the workflow to be triggered.
"""
input WorkflowCondition {
  """
  Trigger the workflow when an issue matches the filter. Can only be used when the trigger type is `Issue`.
  """
  issueFilter: IssueFilter
  """
  Triggers the workflow when a project matches the filter. Can only be used when the trigger type is `Project`.
  """
  projectFilter: ProjectFilter
}

type WorkflowCronJobDefinition implements Node {
  """
  An array of activities that will be executed as part of the workflow cron job.
  """
  activities: JSONObject!
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The user who created the workflow cron job.
  """
  creator: User!
  """
  The description of the workflow cron job.
  """
  description: String
  enabled: Boolean!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The name of the workflow cron job.
  """
  name: String!
  """
  Cron schedule which is used to execute the workflow cron job.
  """
  schedule: JSONObject!
  """
  The sort order of the workflow cron job definition within its siblings.
  """
  sortOrder: String!
  """
  The team associated with the workflow cron job.
  """
  team: Team!
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
}

type WorkflowCronJobDefinitionConnection {
  edges: [WorkflowCronJobDefinitionEdge!]!
  nodes: [WorkflowCronJobDefinition!]!
  pageInfo: PageInfo!
}

type WorkflowCronJobDefinitionEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: WorkflowCronJobDefinition!
}

type WorkflowDefinition implements Node {
  """
  An array of activities that will be executed as part of the workflow.
  """
  activities: JSONObject!
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The conditions that need to be match for the workflow to be triggered.
  """
  conditions: JSONObject!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The user who created the workflow.
  """
  creator: User!
  """
  The description of the workflow.
  """
  description: String
  enabled: Boolean!
  """
  The name of the group that the workflow belongs to.
  """
  groupName: String
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The name of the workflow.
  """
  name: String!
  """
  The sort order of the workflow definition within its siblings.
  """
  sortOrder: String!
  """
  The team associated with the workflow. If not set, the workflow is associated with the entire organization.
  """
  team: Team
  """
  The type of the event that triggers off the workflow.
  """
  trigger: WorkflowTrigger!
  """
  The object type (e.g. Issue) that triggers this workflow.
  """
  triggerType: WorkflowTriggerType!
  """
  The type of the workflow.
  """
  type: WorkflowType!
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
}

type WorkflowDefinitionConnection {
  edges: [WorkflowDefinitionEdge!]!
  nodes: [WorkflowDefinition!]!
  pageInfo: PageInfo!
}

type WorkflowDefinitionEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: WorkflowDefinition!
}

"""
A state in a team workflow.
"""
type WorkflowState implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The state's UI color as a HEX string.
  """
  color: String!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  Description of the state.
  """
  description: String
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  Issues belonging in this state.
  """
  issues(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    Filter returned issues.
    """
    filter: IssueFilter
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueConnection!
  """
  The state's name.
  """
  name: String!
  """
  The position of the state in the team flow.
  """
  position: Float!
  """
  The team to which this state belongs to.
  """
  team: Team!
  """
  The type of the state.
  """
  type: String!
  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!
}

type WorkflowStateConnection {
  edges: [WorkflowStateEdge!]!
  nodes: [WorkflowState!]!
  pageInfo: PageInfo!
}

input WorkflowStateCreateInput {
  """
  The color of the state.
  """
  color: String!
  """
  The description of the state.
  """
  description: String
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String
  """
  The name of the state.
  """
  name: String!
  """
  The position of the state.
  """
  position: Float
  """
  The team associated with the state.
  """
  teamId: String!
  """
  The workflow type.
  """
  type: String!
}

type WorkflowStateEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: WorkflowState!
}

"""
Workflow state filtering options.
"""
input WorkflowStateFilter {
  """
  Compound filters, all of which need to be matched by the workflow state.
  """
  and: [WorkflowStateFilter!]
  """
  Comparator for the created at date.
  """
  createdAt: DateComparator
  """
  Comparator for the workflow state description.
  """
  description: StringComparator
  """
  Comparator for the identifier.
  """
  id: IDComparator
  """
  Filters that the workflow states issues must satisfy.
  """
  issues: IssueCollectionFilter
  """
  Comparator for the workflow state name.
  """
  name: StringComparator
  """
  Compound filters, one of which need to be matched by the workflow state.
  """
  or: [WorkflowStateFilter!]
  """
  Comparator for the workflow state position.
  """
  position: NumberComparator
  """
  Filters that the workflow states team must satisfy.
  """
  team: TeamFilter
  """
  Comparator for the workflow state type.
  """
  type: StringComparator
  """
  Comparator for the updated at date.
  """
  updatedAt: DateComparator
}

type WorkflowStatePayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
  """
  The state that was created or updated.
  """
  workflowState: WorkflowState!
}

input WorkflowStateUpdateInput {
  """
  The color of the state.
  """
  color: String
  """
  The description of the state.
  """
  description: String
  """
  The name of the state.
  """
  name: String
  """
  The position of the state.
  """
  position: Float
}

enum WorkflowTrigger {
  entityCreated
  entityCreatedOrUpdated
  entityRemoved
  entityUnarchived
  entityUpdated
}

enum WorkflowTriggerType {
  issue
  project
}

enum WorkflowType {
  custom
  sla
}

"""
[INTERNAL] Public information of the OAuth application, plus the userIds and scopes for those users.
"""
type WorkspaceAuthorizedApplication {
  """
  OAuth application's ID.
  """
  appId: String!
  """
  OAuth application's client ID.
  """
  clientId: String!
  """
  Image of the application.
  """
  imageUrl: String
  """
  UserIds and membership dates of everyone who has authorized the application with the set of scopes
  """
  memberships: [AuthMembership!]!
  """
  Application name.
  """
  name: String!
  """
  Scopes that are authorized for this application for a given user.
  """
  scope: [String!]!
  """
  Total number of members that authorized the application
  """
  totalMembers: Float!
  """
  Whether or not webhooks are enabled for the application.
  """
  webhooksEnabled: Boolean!
}

"""
Zendesk specific settings.
"""
type ZendeskSettings {
  """
  Whether a ticket should be automatically reopened when its linked Linear issue is cancelled.
  """
  automateTicketReopeningOnCancellation: Boolean
  """
  Whether a ticket should be automatically reopened when a comment is posted on its linked Linear issue
  """
  automateTicketReopeningOnComment: Boolean
  """
  Whether a ticket should be automatically reopened when its linked Linear issue is completed.
  """
  automateTicketReopeningOnCompletion: Boolean
  """
  The ID of the Linear bot user.
  """
  botUserId: String
  """
  Whether an internal message should be added when someone comments on an issue.
  """
  sendNoteOnComment: Boolean
  """
  Whether an internal message should be added when a Linear issue changes status (for status types except completed or canceled).
  """
  sendNoteOnStatusChange: Boolean
  """
  The subdomain of the Zendesk organization being connected.
  """
  subdomain: String!
  """
  The URL of the connected Zendesk organization.
  """
  url: String!
}

input ZendeskSettingsInput {
  """
  Whether a ticket should be automatically reopened when its linked Linear issue is cancelled.
  """
  automateTicketReopeningOnCancellation: Boolean
  """
  Whether a ticket should be automatically reopened when a comment is posted on its linked Linear issue
  """
  automateTicketReopeningOnComment: Boolean
  """
  Whether a ticket should be automatically reopened when its linked Linear issue is completed.
  """
  automateTicketReopeningOnCompletion: Boolean
  """
  The ID of the Linear bot user.
  """
  botUserId: String
  """
  Whether an internal message should be added when someone comments on an issue.
  """
  sendNoteOnComment: Boolean
  """
  Whether an internal message should be added when a Linear issue changes status (for status types except completed or canceled).
  """
  sendNoteOnStatusChange: Boolean
  """
  The subdomain of the Zendesk organization being connected.
  """
  subdomain: String!
  """
  The URL of the connected Zendesk organization.
  """
  url: String!
}
