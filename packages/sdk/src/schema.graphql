schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

"""
An API key. Grants access to the user's resources.
"""
type ApiKey implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The label of the API key.
  """
  label: String!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
}

type ApiKeyConnection {
  edges: [ApiKeyEdge!]!
  nodes: [ApiKey!]!
  pageInfo: PageInfo!
}

input ApiKeyCreateInput {
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  The API key value.
  """
  key: String!
  """
  The label for the API key.
  """
  label: String!
}

type ApiKeyEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: ApiKey!
}

type ApiKeyPayload {
  """
  The API key that was created.
  """
  apiKey: ApiKey!
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

"""
Public information of the OAuth application.
"""
type Application {
  """
  OAuth application's client ID.
  """
  clientId: String!
  """
  Information about the application.
  """
  description: String
  """
  Name of the developer.
  """
  developer: String!
  """
  Url of the developer (homepage or docs).
  """
  developerUrl: String!
  """
  Image of the application.
  """
  imageUrl: String
  """
  Application name.
  """
  name: String!
}

type ArchivePayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

"""
Contains requested archived model objects.
"""
type ArchiveResponse {
  """
  A JSON serialized collection of model objects loaded from the archive
  """
  archive: String!
  """
  The version of the remote database. Incremented by 1 for each migration run on the database.
  """
  databaseVersion: Float!
  """
  The total number of entities in the archive.
  """
  totalCount: Float!
}

"""
[Alpha] Issue attachment (e.g. support ticket, pull request).
"""
type Attachment implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  Indicates if attachments for the same source application should be grouped in the Linear UI.
  """
  groupBySource: Boolean!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The issue this attachment belongs to.
  """
  issue: Issue!
  """
  Custom metadata related to the attachment.
  """
  metadata: JSONObject!
  """
  Information about the source which created the attachment.
  """
  source: JSONObject
  """
  Content for the subtitle line in the Linear attachment widget.
  """
  subtitle: String
  """
  Content for the title line in the Linear attachment widget.
  """
  title: String!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  Location of the attachment which is also used as an identifier.
  """
  url: String!
}

type AttachmentConnection {
  edges: [AttachmentEdge!]!
  nodes: [Attachment!]!
  pageInfo: PageInfo!
}

input AttachmentCreateInput {
  """
  Indicates if attachments for the same source application should be grouped in the Linear UI.
  """
  groupBySource: Boolean
  """
  An icon url to display with the attachment. Should be of jpg or png format. Maximum of 1MB in size. Dimensions should be 20x20px for optimal display quality.
  """
  iconUrl: String
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  The issue to associate the attachment with.
  """
  issueId: String!
  """
  Attachment metadata object with string and number values.
  """
  metadata: JSONObject
  """
  The attachment subtitle.
  """
  subtitle: String
  """
  The attachment title.
  """
  title: String!
  """
  Attachment location which is also used as an unique identifier for the attachment. If another attachment is created with the same `url` value, existing record is updated instead.
  """
  url: String!
}

type AttachmentEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: Attachment!
}

type AttachmentPayload {
  """
  The issue attachment that was created.
  """
  attachment: Attachment!
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

input AttachmentUpdateInput {
  """
  An icon url to display with the attachment. Should be of jpg or png format. Maximum of 1MB in size. Dimensions should be 20x20px for optimal display quality.
  """
  iconUrl: String
  """
  Attachment metadata object with string and number values.
  """
  metadata: JSONObject
  """
  The attachment subtitle.
  """
  subtitle: String
  """
  The attachment title.
  """
  title: String!
}

type AuthResolverResponse {
  """
  Should the signup flow allow access for the domain.
  """
  allowDomainAccess: Boolean
  """
  Organizations this account has access to, but is not yet a member.
  """
  availableOrganizations: [Organization!]
  """
  Email for the authenticated account.
  """
  email: String
  """
  User account ID.
  """
  id: String!
  """
  ID of the organization last accessed by the user.
  """
  lastUsedOrganizationId: String
  """
  JWT token for authentication of the account.
  """
  token: String
  """
  Users belonging to this account.
  """
  users: [User!]!
}

"""
Public information of the OAuth application, plus the authorized scopes for a given user.
"""
type AuthorizedApplication {
  """
  OAuth application's ID.
  """
  appId: String!
  """
  OAuth application's client ID.
  """
  clientId: String!
  """
  Information about the application.
  """
  description: String
  """
  Name of the developer.
  """
  developer: String!
  """
  Url of the developer (homepage or docs).
  """
  developerUrl: String!
  """
  Image of the application.
  """
  imageUrl: String
  """
  Application name.
  """
  name: String!
  """
  Scopes that are authorized for this application for a given user.
  """
  scope: [String!]!
}

type BillingDetailsPayload {
  """
  The customer's email address the invoices are sent to.
  """
  email: String
  """
  List of invoices, if any.
  """
  invoices: [Invoice!]!
  """
  The payment method.
  """
  paymentMethod: Card
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

type BillingEmailPayload {
  """
  The customer's email address the invoices are sent to.
  """
  email: String
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

input BillingEmailUpdateInput {
  """
  The email address to which to send invoices.
  """
  email: String!
}

type Card {
  """
  The brand of the card, e.g. Visa.
  """
  brand: String!
  """
  The last four digits used to identify the card.
  """
  last4: String!
}

input CollaborationDocumentUpdateInput {
  """
  Client identifier.
  """
  clientId: String!
  """
  Document identifier.
  """
  issueId: String!
  """
  New document steps from the client.
  """
  steps: [JSON!]!
  """
  Client's document version number.
  """
  version: Int!
}

type CollaborationDocumentUpdatePayload {
  """
  Document steps the client has not seen yet and need to rebase it's local steps on.
  """
  steps: StepsResponse
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

"""
A comment associated with an issue.
"""
type Comment implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The comment content in markdown format.
  """
  body: String!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The time user edited the comment.
  """
  editedAt: DateTime
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The issue that the comment is associated with.
  """
  issue: Issue!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  Comment's URL.
  """
  url: String!
  """
  The user who wrote the comment.
  """
  user: User!
}

type CommentConnection {
  edges: [CommentEdge!]!
  nodes: [Comment!]!
  pageInfo: PageInfo!
}

input CommentCreateInput {
  """
  The comment content in markdown format.
  """
  body: String
  """
  The comment content as a Prosemirror document.
  """
  bodyData: JSON
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  The issue to associate the comment with.
  """
  issueId: String!
}

type CommentEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: Comment!
}

type CommentPayload {
  """
  The comment that was created or updated.
  """
  comment: Comment!
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

input CommentUpdateInput {
  """
  The comment content.
  """
  body: String
  """
  The comment content as a Prosemirror document.
  """
  bodyData: JSON
}

"""
GitHub's commit data
"""
type CommitPayload {
  added: [String!]!
  id: String!
  message: String!
  modified: [String!]!
  removed: [String!]!
  timestamp: String!
  url: String!
}

input ContactCreateInput {
  """
  User's browser information.
  """
  browser: String
  """
  User's device information.
  """
  device: String
  """
  How disappointed the user would be if they could no longer use Linear.
  """
  disappointmentRating: Int
  """
  The message the user sent.
  """
  message: String!
  """
  User's operating system.
  """
  operatingSystem: String
  """
  The type of support contact.
  """
  type: String!
}

type ContactPayload {
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

type CreateCsvExportReportPayload {
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

type CreateOrJoinOrganizationResponse {
  organization: Organization!
  user: User!
}

input CreateOrganizationInput {
  """
  Whether the organization should allow email domain access.
  """
  domainAccess: Boolean
  """
  The name of the organization.
  """
  name: String!
  """
  The timezone of the organization, passed in by client.
  """
  timezone: String
  """
  The URL key of the organization.
  """
  urlKey: String!
  """
  JSON serialized UTM parameters associated with the creation of the workspace.
  """
  utm: String
}

"""
A custom view that has been saved by a user.
"""
type CustomView implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The color of the icon of the custom view.
  """
  color: String
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The user who created the custom view.
  """
  creator: User!
  """
  The description of the custom view.
  """
  description: String
  """
  The filters applied to issues in the custom view.
  """
  filters: JSONObject!
  """
  The icon of the custom view.
  """
  icon: String
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The name of the custom view.
  """
  name: String!
  """
  The organization of the custom view.
  """
  organization: Organization!
  """
  Whether the custom view is shared with everyone in the organization.
  """
  shared: Boolean!
  """
  The team associated with the custom view.
  """
  team: Team
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
}

type CustomViewConnection {
  edges: [CustomViewEdge!]!
  nodes: [CustomView!]!
  pageInfo: PageInfo!
}

input CustomViewCreateInput {
  """
  The color of the icon of the custom view.
  """
  color: String
  """
  The description of the custom view.
  """
  description: String
  """
  The filters applied to issues in the custom view.
  """
  filters: JSONObject
  """
  The icon of the custom view.
  """
  icon: String
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  The name of the custom view.
  """
  name: String!
  """
  Whether the custom view is shared with everyone in the organization.
  """
  shared: Boolean
  """
  The id of the team associated with the custom view.
  """
  teamId: String
}

type CustomViewEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: CustomView!
}

type CustomViewPayload {
  """
  The custom view that was created or updated.
  """
  customView: CustomView!
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

input CustomViewUpdateInput {
  """
  The color of the icon of the custom view.
  """
  color: String
  """
  The description of the custom view.
  """
  description: String
  """
  The filters applied to issues in the custom view.
  """
  filters: JSONObject
  """
  The icon of the custom view.
  """
  icon: String
  """
  The name of the custom view.
  """
  name: String
  """
  Whether the custom view is shared with everyone in the organization.
  """
  shared: Boolean
  """
  The id of the team associated with the custom view.
  """
  teamId: String
}

"""
A set of issues to be resolved in a specified amount of time.
"""
type Cycle implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the cycle was automatically archived by the auto pruning process.
  """
  autoArchivedAt: DateTime
  """
  The completion time of the cycle. If null, the cycle hasn't been completed.
  """
  completedAt: DateTime
  """
  The number of completed issues in the cycle after each day.
  """
  completedIssueCountHistory: [Float!]!
  """
  The number of completed estimation points after each day.
  """
  completedScopeHistory: [Float!]!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The end time of the cycle.
  """
  endsAt: DateTime!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The total number of issues in the cycle after each day.
  """
  issueCountHistory: [Float!]!
  """
  Issues associated with the cycle.
  """
  issues(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueConnection!
  """
  The custom name of the cycle.
  """
  name: String
  """
  The number of the cycle.
  """
  number: Float!
  """
  The total number of estimation points after each day.
  """
  scopeHistory: [Float!]!
  """
  The start time of the cycle.
  """
  startsAt: DateTime!
  """
  The team that the cycle is associated with.
  """
  team: Team!
  """
  Issues that weren't completed when the cycle was closed.
  """
  uncompletedIssuesUponClose(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueConnection!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
}

type CycleConnection {
  edges: [CycleEdge!]!
  nodes: [Cycle!]!
  pageInfo: PageInfo!
}

input CycleCreateInput {
  """
  The completion time of the cycle. If null, the cycle hasn't been completed.
  """
  completedAt: DateTime
  """
  The end date of the cycle.
  """
  endsAt: DateTime!
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  The custom name of the cycle.
  """
  name: String
  """
  The start date of the cycle.
  """
  startsAt: DateTime!
  """
  The team to associate the cycle with.
  """
  teamId: String!
}

type CycleEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: Cycle!
}

type CyclePayload {
  """
  The Cycle that was created or updated.
  """
  cycle: Cycle
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

input CycleUpdateInput {
  """
  The end date of the cycle.
  """
  completedAt: DateTime
  """
  The end date of the cycle.
  """
  endsAt: DateTime
  """
  The custom name of the cycle.
  """
  name: String
  """
  The start date of the cycle.
  """
  startsAt: DateTime
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type DebugPayload {
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

input DeleteOrganizationInput {
  """
  The deletion code to confirm operation.
  """
  deletionCode: String!
}

"""
Contains the requested dependencies.
"""
type DependencyResponse {
  """
  A JSON serialized collection of model objects loaded from the archive
  """
  dependencies: String!
}

"""
Collaborative editing steps for documents.
"""
type DocumentStep implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  Connected client ID.
  """
  clientId: String!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  Step data.
  """
  step: JSON!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  Step version.
  """
  version: Float!
}

input EmailUnsubscribeInput {
  """
  The user's email validation token.
  """
  token: String!
  """
  Email type to unsubscribed from.
  """
  type: String!
  """
  The identifier of the user.
  """
  userId: String!
}

type EmailUnsubscribePayload {
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

input EmailUserAccountAuthChallengeInput {
  """
  Auth code for the client initiating the sequence.
  """
  clientAuthCode: String
  """
  The email for which to generate the magic login code.
  """
  email: String!
  """
  Whether the login was requested from the desktop app.
  """
  isDesktop: Boolean
  """
  Signup code.
  """
  signupCode: String
}

type EmailUserAccountAuthChallengeResponse {
  """
  Supported challenge for this user account. Can be either verificationCode or password.
  """
  authType: String!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

"""
A custom emoji.
"""
type Emoji implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The user who created the emoji.
  """
  creator: User!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The emoji's name.
  """
  name: String!
  """
  The organization that the emoji belongs to.
  """
  organization: Organization!
  """
  The source of the emoji.
  """
  source: String!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  The emoji image URL.
  """
  url: String!
}

type EmojiConnection {
  edges: [EmojiEdge!]!
  nodes: [Emoji!]!
  pageInfo: PageInfo!
}

input EmojiCreateInput {
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  The name of the custom emoji.
  """
  name: String!
  """
  The URL for the emoji.
  """
  url: String!
}

type EmojiEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: Emoji!
}

type EmojiPayload {
  """
  The emoji that was created.
  """
  emoji: Emoji!
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

input EventCreateInput {
  """
  The category of the event to create.
  """
  category: String!
  """
  Additional data of the event, encoded as JSON.
  """
  data: JSON
  """
  The subject of the event.
  """
  subject: String!
  """
  The target identifier of the event.
  """
  targetId: String
  """
  The value of the event.
  """
  value: Float
}

type EventPayload {
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

"""
User favorites presented in the sidebar.
"""
type Favorite implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  Favorited cycle.
  """
  cycle: Cycle
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  Favorited issue.
  """
  issue: Issue
  """
  Favorited issue label.
  """
  label: IssueLabel
  """
  Favorited project.
  """
  project: Project
  """
  Favorited project team.
  """
  projectTeam: Project
  """
  The order of the item in the favorites list.
  """
  sortOrder: Float!
  """
  The type of the favorite.
  """
  type: String!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  The owner of the favorite.
  """
  user: User!
}

type FavoriteConnection {
  edges: [FavoriteEdge!]!
  nodes: [Favorite!]!
  pageInfo: PageInfo!
}

input FavoriteCreateInput {
  """
  The identifier of the custom view to favorite.
  """
  customViewId: String
  """
  The identifier of the cycle to favorite.
  """
  cycleId: String
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  The identifier of the issue to favorite.
  """
  issueId: String
  """
  The identifier of the label to favorite.
  """
  labelId: String
  """
  The identifier of the project to favorite.
  """
  projectId: String
  """
  The identifier of the project team to favorite.
  """
  projectTeamId: String
  """
  The position of the item in the favorites list.
  """
  sortOrder: Float
}

type FavoriteEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: Favorite!
}

type FavoritePayload {
  """
  The object that was added as a favorite.
  """
  favorite: Favorite!
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

input FavoriteUpdateInput {
  """
  The position of the item in the favorites list.
  """
  sortOrder: Float
}

input FeedbackCreateInput {
  """
  How disappointed the user would be if he/she could no longer use Linear.
  """
  disappointmentRating: Float!
  """
  The feedback the user sent.
  """
  feedback: String!
}

type FeedbackPayload {
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

"""
Object representing Figma preview information.
"""
type FigmaEmbed {
  """
  Date when the file was updated at the time of embedding.
  """
  lastModified: DateTime!
  """
  Figma file name.
  """
  name: String!
  """
  Node name.
  """
  nodeName: String
  """
  Figma screenshot URL.
  """
  url: String
}

type FigmaEmbedPayload {
  """
  Figma embed information.
  """
  figmaEmbed: FigmaEmbed
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

"""
GitHub OAuth token, plus information about the organizations the user is a member of.
"""
type GithubOAuthTokenPayload {
  """
  A list of the GitHub organizations the user is a member of with attached repositories.
  """
  organizations: [GithubOrg!]
  """
  The OAuth token if the operation to fetch it was successful.
  """
  token: String
}

"""
Relevant information for the GitHub organization.
"""
type GithubOrg {
  """
  GitHub organization id.
  """
  id: String!
  """
  The login for the GitHub organization.
  """
  login: String!
  """
  The name of the GitHub organization.
  """
  name: String!
  """
  Repositories that the organization owns.
  """
  repositories: [GithubRepo!]!
}

"""
Relevant information for the GitHub repository.
"""
type GithubRepo {
  """
  The id of the GitHub repository.
  """
  id: String!
  """
  The name of the GitHub repository.
  """
  name: String!
}

"""
Google Sheets specific settings.
"""
type GoogleSheetsSettings {
  sheetId: Float!
  spreadsheetId: String!
  spreadsheetUrl: String!
  updatedIssuesAt: DateTime!
}

input GoogleUserAccountAuthInput {
  """
  Code returned from Google's OAuth flow.
  """
  code: String!
  """
  The URI to redirect the user to.
  """
  redirectUri: String
  """
  Signup code.
  """
  signupCode: String
  """
  The identifiers of the teams to auto-join.
  """
  teamIdsToJoin: [String!]
  """
  The timezone of the user's browser.
  """
  timezone: String!
}

type ImageUploadFromUrlPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
  """
  The URL containing the image.
  """
  url: String
}

"""
An integration with an external service.
"""
type Integration implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The user that added the integration.
  """
  creator: User!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The organization that the integration is associated with.
  """
  organization: Organization!
  """
  The integration's type.
  """
  service: String!
  """
  The team that the integration is associated with.
  """
  team: Team
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
}

type IntegrationConnection {
  edges: [IntegrationEdge!]!
  nodes: [Integration!]!
  pageInfo: PageInfo!
}

type IntegrationEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: Integration!
}

type IntegrationPayload {
  """
  The integration that was created or updated.
  """
  integration: Integration
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

"""
An integration resource created by an external service.
"""
type IntegrationResource implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  Detailed information about the external resource.
  """
  data: IntegrationResourceData!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The integration that the resource is associated with.
  """
  integration: Integration!
  """
  The issue that the resource is associated with.
  """
  issue: Issue!
  """
  Pull request information for GitHub pull requests and GitLab merge requests.
  """
  pullRequest: PullRequestPayload!
  """
  The external service resource ID.
  """
  resourceId: String!
  """
  The integration's type.
  """
  resourceType: String!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
}

type IntegrationResourceConnection {
  edges: [IntegrationResourceEdge!]!
  nodes: [IntegrationResource!]!
  pageInfo: PageInfo!
}

"""
Integration resource's payload
"""
type IntegrationResourceData {
  """
  The payload for an IntegrationResource of type 'githubCommit'
  """
  githubCommit: CommitPayload
  """
  The payload for an IntegrationResource of type 'githubPullRequest'
  """
  githubPullRequest: PullRequestPayload
  """
  The payload for an IntegrationResource of type 'gitlabMergeRequest'
  """
  gitlabMergeRequest: PullRequestPayload
  """
  The payload for an IntegrationResource of type 'sentryIssue'
  """
  sentryIssue: SentryIssuePayload
}

type IntegrationResourceEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: IntegrationResource!
}

"""
The integration resource's settings
"""
type IntegrationSettings {
  googleSheets: GoogleSheetsSettings
  sentry: SentrySettings
  slackPost: SlackPostSettings
  slackProjectPost: SlackPostSettings
  zendesk: ZendeskSettings
}

type InviteData {
  """
  Avatar URLs for the invitees.
  """
  avatarURLs: [String!]!
  """
  The name of the inviter.
  """
  inviterName: String!
  """
  The domain of the organization the users were invited to.
  """
  organizationDomain: String!
  """
  The logo of the organization the users were invited to.
  """
  organizationLogoUrl: String
  """
  The name of the organization the users were invited to.
  """
  organizationName: String!
  """
  Team identifiers for the invitees.
  """
  teamIds: [String!]!
  """
  Team names for the invitees.
  """
  teamNames: [String!]!
  """
  The user count of the organization.
  """
  userCount: Float!
}

type InvitePagePayload {
  """
  Invite data.
  """
  inviteData: InviteData
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

type Invoice {
  """
  The creation date of the invoice.
  """
  created: DateTime!
  """
  The due date of the invoice.
  """
  dueDate: TimelessDateScalar
  """
  The status of the invoice.
  """
  status: String!
  """
  The invoice total, in cents.
  """
  total: Float!
  """
  The URL at which the invoice can be viewed or paid.
  """
  url: String
}

"""
An issue.
"""
type Issue implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The user to whom the issue is assigned to.
  """
  assignee: User
  """
  Attachments associated with the issue.
  """
  attachments(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): AttachmentConnection!
  """
  The time at which the issue was automatically archived by the auto pruning process.
  """
  autoArchivedAt: DateTime
  """
  The time at which the issue was automatically closed by the auto pruning process.
  """
  autoClosedAt: DateTime
  """
  The order of the item in its column on the board.
  """
  boardOrder: Float!
  """
  Suggested branch name for the issue.
  """
  branchName: String!
  """
  The time at which the issue was moved into canceled state.
  """
  canceledAt: DateTime
  """
  Children of the issue.
  """
  children(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueConnection!
  """
  Comments associated with the issue.
  """
  comments(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): CommentConnection!
  """
  The time at which the issue was moved into completed state.
  """
  completedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The user who created the issue.
  """
  creator: User
  """
  Returns the number of Attachment resources which are created by customer support ticketing systems (e.g. Zendesk).
  """
  customerTicketCount: Int!
  """
  The cycle that the issue is associated with.
  """
  cycle: Cycle
  """
  The issue's description in markdown format.
  """
  description: String
  """
  The date at which the issue is due.
  """
  dueDate: TimelessDateScalar
  """
  The estimate of the complexity of the issue..
  """
  estimate: Float
  """
  History entries associated with the issue.
  """
  history(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueHistoryConnection!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  Issue's human readable identifier (e.g. ENG-123).
  """
  identifier: String!
  """
  Integration resources for this issue.
  """
  integrationResources(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IntegrationResourceConnection!
  """
  Inverse relations associated with this issue.
  """
  inverseRelations(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueRelationConnection!
  """
  Labels associated with this issue.
  """
  labels(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueLabelConnection!
  """
  The issue's unique number.
  """
  number: Float!
  """
  The parent of the issue.
  """
  parent: Issue
  """
  Previous identifiers of the issue if it has been moved between teams.
  """
  previousIdentifiers: [String!]!
  """
  The priority of the issue.
  """
  priority: Float!
  """
  Label for the priority.
  """
  priorityLabel: String!
  """
  The project that the issue is associated with.
  """
  project: Project
  """
  Relations associated with this issue.
  """
  relations(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueRelationConnection!
  """
  The user who snoozed the issue.
  """
  snoozedBy: User
  """
  The time until an issue will be snoozed in Triage view.
  """
  snoozedUntilAt: DateTime
  """
  The time at which the issue was moved into started state.
  """
  startedAt: DateTime
  """
  The workflow state that the issue is associated with.
  """
  state: WorkflowState!
  """
  The order of the item in the sub-issue list. Only set if the issue has a parent.
  """
  subIssueSortOrder: Float
  """
  Users who are subscribed to the issue.
  """
  subscribers(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    Should query return disabled/suspended users (default: false).
    """
    includeDisabled: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): UserConnection!
  """
  The team that the issue is associated with.
  """
  team: Team!
  """
  The issue's title.
  """
  title: String!
  """
  A flag that indicates whether the issue is in the trash bin.
  """
  trashed: Boolean
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  Issue URL.
  """
  url: String!
}

type IssueConnection {
  edges: [IssueEdge!]!
  nodes: [Issue!]!
  pageInfo: PageInfo!
}

input IssueCreateInput {
  """
  The identifier of the user to assign the issue to.
  """
  assigneeId: String
  """
  The position of the issue in its column on the board view.
  """
  boardOrder: Float
  """
  The cycle associated with the issue.
  """
  cycleId: String
  """
  The issue description in markdown format.
  """
  description: String
  """
  The issue description as a Prosemirror document.
  """
  descriptionData: JSON
  """
  The date at which the issue is due.
  """
  dueDate: TimelessDateScalar
  """
  The estimated complexity of the issue.
  """
  estimate: Int
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  The identifiers of the issue labels associated with this ticket.
  """
  labelIds: [String!]
  """
  The identifier of the parent issue.
  """
  parentId: String
  """
  The priority of the issue.
  """
  priority: Int
  """
  The project associated with the issue.
  """
  projectId: String
  """
  The team state of the issue.
  """
  stateId: String
  """
  The position of the issue in parent's sub-issue list.
  """
  subIssueSortOrder: Float
  """
  The identifiers of the users subscribing to this ticket.
  """
  subscriberIds: [String!]
  """
  The identifier or key of the team associated with the issue.
  """
  teamId: String!
  """
  The title of the issue.
  """
  title: String!
}

type IssueDescriptionHistory {
  """
  The ID of the author of the change.
  """
  actorId: String
  """
  The description data of the issue as a JSON serialized string.
  """
  descriptionData: String!
  """
  The UUID of the change.
  """
  id: String!
  """
  The type of the revision, whether it was the creation or update of the issue.
  """
  type: String!
  """
  The date when the description was updated.
  """
  updatedAt: DateTime!
}

type IssueDescriptionHistoryPayload {
  """
  The issue that was created or updated.
  """
  history: [IssueDescriptionHistory!]
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

type IssueEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: Issue!
}

"""
A record of changes to an issue.
"""
type IssueHistory implements Node {
  """
  The user who made these changes. If null, possibly means that the change made by an integration.
  """
  actor: User
  """
  ID's of labels that were added.
  """
  addedLabelIds: [String!]
  """
  Whether the issue was archived or un-archived.
  """
  archived: Boolean
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  autoArchived: Boolean
  autoClosed: Boolean
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The user from whom the issue was re-assigned from.
  """
  fromAssignee: User
  """
  The previous cycle of the issue.
  """
  fromCycle: Cycle
  """
  What the due date was changed from
  """
  fromDueDate: TimelessDateScalar
  """
  What the estimate was changed from.
  """
  fromEstimate: Float
  """
  The previous parent of the issue.
  """
  fromParent: Issue
  """
  What the priority was changed from.
  """
  fromPriority: Float
  """
  The previous project of the issue.
  """
  fromProject: Project
  """
  The previous workflow state of the issue.
  """
  fromState: WorkflowState
  """
  The team from which the issue was moved from.
  """
  fromTeam: Team
  """
  What the title was changed from.
  """
  fromTitle: String
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The issue that was changed.
  """
  issue: Issue!
  """
  The import record.
  """
  issueImport: IssueImport
  """
  Changed issue relationships.
  """
  relationChanges: [IssueRelationHistoryPayload!]
  """
  ID's of labels that were removed.
  """
  removedLabelIds: [String!]
  """
  Information about the integration or application which created this history entry.
  """
  source: JSONObject
  """
  The user to whom the issue was assigned to.
  """
  toAssignee: User
  """
  The new cycle of the issue.
  """
  toCycle: Cycle
  """
  What the due date was changed to
  """
  toDueDate: TimelessDateScalar
  """
  What the estimate was changed to.
  """
  toEstimate: Float
  """
  The new parent of the issue.
  """
  toParent: Issue
  """
  What the priority was changed to.
  """
  toPriority: Float
  """
  The new project of the issue.
  """
  toProject: Project
  """
  The new workflow state of the issue.
  """
  toState: WorkflowState
  """
  The team to which the issue was moved to.
  """
  toTeam: Team
  """
  What the title was changed to.
  """
  toTitle: String
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  Whether the issue's description was updated.
  """
  updatedDescription: Boolean
}

type IssueHistoryConnection {
  edges: [IssueHistoryEdge!]!
  nodes: [IssueHistory!]!
  pageInfo: PageInfo!
}

type IssueHistoryEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: IssueHistory!
}

"""
An import job for data from an external service
"""
type IssueImport implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The id for the user that started the job.
  """
  creatorId: String!
  """
  User readable error message, if one has occurred during the import.
  """
  error: String
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The data mapping configuration for the import job.
  """
  mapping: JSONObject
  """
  The service from which data will be imported.
  """
  service: String!
  """
  The status for the import job.
  """
  status: String!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
}

type IssueImportDeletePayload {
  """
  The import job that was deleted.
  """
  issueImport: IssueImport
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

"""
Issue import mapping input
"""
input IssueImportMappingInput {
  """
  The mapping configuration for epics
  """
  epics: JSONObject
  """
  The mapping configuration for users
  """
  users: JSONObject
  """
  The mapping configuration for workflow states
  """
  workflowStates: JSONObject
}

type IssueImportPayload {
  """
  The import job that was created or updated.
  """
  issueImport: IssueImport
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

"""
Labels that can be associated with issues.
"""
type IssueLabel implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The label's color as a HEX string.
  """
  color: String!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The user who created the label.
  """
  creator: User
  """
  The label's description.
  """
  description: String
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  Issues associated with the label.
  """
  issues(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueConnection!
  """
  The label's name.
  """
  name: String!
  """
  The team to which the label belongs to.
  """
  team: Team!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
}

type IssueLabelConnection {
  edges: [IssueLabelEdge!]!
  nodes: [IssueLabel!]!
  pageInfo: PageInfo!
}

input IssueLabelCreateInput {
  """
  The color of the label.
  """
  color: String
  """
  The description of the label.
  """
  description: String
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  The name of the label.
  """
  name: String!
  """
  The team associated with the label.
  """
  teamId: String!
}

type IssueLabelEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: IssueLabel!
}

type IssueLabelPayload {
  """
  The label that was created or updated.
  """
  issueLabel: IssueLabel!
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

input IssueLabelUpdateInput {
  """
  The color of the label.
  """
  color: String
  """
  The description of the label.
  """
  description: String
  """
  The name of the label.
  """
  name: String
}

type IssuePayload {
  """
  The issue that was created or updated.
  """
  issue: Issue
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

type IssuePriorityValue {
  """
  Priority's label.
  """
  label: String!
  """
  Priority's number value.
  """
  priority: Int!
}

"""
A relation between two issues.
"""
type IssueRelation implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The issue whose relationship is being described.
  """
  issue: Issue!
  """
  The related issue.
  """
  relatedIssue: Issue!
  """
  The relationship of the issue with the related issue.
  """
  type: String!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
}

type IssueRelationConnection {
  edges: [IssueRelationEdge!]!
  nodes: [IssueRelation!]!
  pageInfo: PageInfo!
}

input IssueRelationCreateInput {
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  The identifier of the issue that is related to another issue.
  """
  issueId: String!
  """
  The identifier of the related issue.
  """
  relatedIssueId: String!
  """
  The type of relation of the issue to the related issue.
  """
  type: IssueRelationType!
}

type IssueRelationEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: IssueRelation!
}

"""
Issue relation history's payload
"""
type IssueRelationHistoryPayload {
  """
  The identifier of the related issue.
  """
  identifier: String!
  """
  The type of the change.
  """
  type: String!
}

type IssueRelationPayload {
  """
  The issue relation that was created or updated.
  """
  issueRelation: IssueRelation!
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

"""
The type of the issue relation.
"""
enum IssueRelationType {
  blocks
  duplicate
  related
}

input IssueRelationUpdateInput {
  """
  The identifier of the issue that is related to another issue.
  """
  issueId: String
  """
  The identifier of the related issue.
  """
  relatedIssueId: String
  """
  The type of relation of the issue to the related issue.
  """
  type: String
}

input IssueUpdateInput {
  """
  The identifier of the user to assign the issue to.
  """
  assigneeId: String
  """
  The position of the issue in its column on the board view.
  """
  boardOrder: Float
  """
  The cycle associated with the issue.
  """
  cycleId: String
  """
  The issue description in markdown format.
  """
  description: String
  """
  The issue description as a Prosemirror document.
  """
  descriptionData: JSON
  """
  [DEPRECATED] Document version for backwards compatibility.
  """
  documentVersion: Int
  """
  The date at which the issue is due.
  """
  dueDate: TimelessDateScalar
  """
  The estimated complexity of the issue.
  """
  estimate: Int
  """
  The identifiers of the issue labels associated with this ticket.
  """
  labelIds: [String!]
  """
  The identifier of the parent issue.
  """
  parentId: String
  """
  The priority of the issue.
  """
  priority: Int
  """
  The project associated with the issue.
  """
  projectId: String
  """
  The identifier of the user who snoozed the issue.
  """
  snoozedById: String
  """
  The time until an issue will be snoozed in Triage view.
  """
  snoozedUntilAt: DateTime
  """
  The team state of the issue.
  """
  stateId: String
  """
  The position of the issue in parent's sub-issue list.
  """
  subIssueSortOrder: Float
  """
  The identifiers of the users subscribing to this ticket.
  """
  subscriberIds: [String!]
  """
  The identifier or key of the team associated with the issue.
  """
  teamId: String
  """
  The issue title.
  """
  title: String
  """
  Wether the issue has been trashed.
  """
  trashed: Boolean
}

"""
The `JSON` scalar type represents JSON values
"""
scalar JSON

"""
The `JSONObject` scalar type represents JSON values as a string
"""
scalar JSONObject

input JoinOrganizationInput {
  """
  The identifier of the organization.
  """
  organizationId: String!
}

"""
A milestone that contains projects.
"""
type Milestone implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The name of the milestone.
  """
  name: String!
  """
  The organization that the milestone belongs to.
  """
  organization: Organization!
  """
  Projects associated with the milestone.
  """
  projects(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): ProjectConnection!
  """
  The sort order for the milestone.
  """
  sortOrder: Float!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
}

type MilestoneConnection {
  edges: [MilestoneEdge!]!
  nodes: [Milestone!]!
  pageInfo: PageInfo!
}

input MilestoneCreateInput {
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  The name of the milestone.
  """
  name: String!
  """
  The sort order of the milestone.
  """
  sortOrder: Float
}

type MilestoneEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: Milestone!
}

type MilestonePayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The milesteone that was created or updated.
  """
  milestone: Milestone
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

input MilestoneUpdateInput {
  """
  The name of the milestone.
  """
  name: String
  """
  The sort order of the milestone.
  """
  sortOrder: Float
}

type Mutation {
  """
  [Internal] Creates a new API key.
  """
  apiKeyCreate(
    """
    The api key object to create.
    """
    input: ApiKeyCreateInput!
  ): ApiKeyPayload!
  """
  [Internal] Deletes an API key.
  """
  apiKeyDelete(
    """
    The identifier of the API key to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  [DEPRECATED] Archives an issue attachment.
  """
  attachmentArchive(
    """
    The identifier of the attachment to archive.
    """
    id: String!
  ): ArchivePayload! @deprecated(reason: "This mutation is deprecated, please use `attachmentDelete` instead")
  """
  [Alpha] Creates a new attachment, or updates existing if the same `url` and `issueId` is used.
  """
  attachmentCreate(
    """
    The attachment object to create.
    """
    input: AttachmentCreateInput!
  ): AttachmentPayload!
  """
  [Alpha] Deletes an issue attachment.
  """
  attachmentDelete(
    """
    The identifier of the attachment to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Link an existing Front conversation to an issue.
  """
  attachmentLinkFront(
    """
    The Front conversation ID to link.
    """
    conversationId: String!
    """
    The issue for which to link the Front conversation.
    """
    issueId: String!
  ): AttachmentPayload!
  """
  Link an existing Intercom conversation to an issue.
  """
  attachmentLinkIntercom(
    """
    The Intercom conversation ID to link.
    """
    conversationId: String!
    """
    The issue for which to link the Intercom conversation.
    """
    issueId: String!
  ): AttachmentPayload!
  """
  Link any url to an issue.
  """
  attachmentLinkURL(
    """
    The issue for which to link the url.
    """
    issueId: String!
    """
    The Zendesk ticket ID to link.
    """
    url: String!
  ): AttachmentPayload!
  """
  Link an existing Zendesk ticket to an issue.
  """
  attachmentLinkZendesk(
    """
    The issue for which to link the Zendesk ticket.
    """
    issueId: String!
    """
    The Zendesk ticket ID to link.
    """
    ticketId: String!
  ): AttachmentPayload!
  """
  [Alpha] Updates an existing issue attachment.
  """
  attachmentUpdate(
    """
    The identifier of the attachment to update.
    """
    id: String!
    """
    A partial attachment object to update the attachment with.
    """
    input: AttachmentUpdateInput!
  ): AttachmentPayload!
  """
  Updates the billing email address for the customer.
  """
  billingEmailUpdate(
    """
    The properties of the billing details.
    """
    input: BillingEmailUpdateInput!
  ): BillingEmailPayload!
  """
  Update collaborative document with client steps.
  """
  collaborativeDocumentUpdate(input: CollaborationDocumentUpdateInput!): CollaborationDocumentUpdatePayload!
  """
  Creates a new comment.
  """
  commentCreate(
    """
    The comment object to create.
    """
    input: CommentCreateInput!
  ): CommentPayload!
  """
  Deletes a comment.
  """
  commentDelete(
    """
    The identifier of the comment to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Updates a comment.
  """
  commentUpdate(
    """
    The identifier of the comment to update.
    """
    id: String!
    """
    A partial comment object to update the comment with.
    """
    input: CommentUpdateInput!
  ): CommentPayload!
  """
  Saves user message.
  """
  contactCreate(
    """
    The contact entry to create.
    """
    input: ContactCreateInput!
  ): ContactPayload!
  """
  Create CSV export report for the organization.
  """
  createCsvExportReport(includePrivateTeamIds: [String!]): CreateCsvExportReportPayload!
  """
  Creates an organization from onboarding.
  """
  createOrganizationFromOnboarding(
    """
    Organization details for the new organization.
    """
    input: CreateOrganizationInput!
    """
    Onboarding survey.
    """
    survey: OnboardingCustomerSurvey
  ): CreateOrJoinOrganizationResponse!
  """
  Creates a new custom view.
  """
  customViewCreate(
    """
    The properties of the custom view to create.
    """
    input: CustomViewCreateInput!
  ): CustomViewPayload!
  """
  Deletes a custom view.
  """
  customViewDelete(
    """
    The identifier of the custom view to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Updates a custom view.
  """
  customViewUpdate(
    """
    The identifier of the custom view to update.
    """
    id: String!
    """
    The properties of the custom view to update.
    """
    input: CustomViewUpdateInput!
  ): CustomViewPayload!
  """
  Archives a cycle.
  """
  cycleArchive(
    """
    The identifier of the cycle to archive.
    """
    id: String!
  ): ArchivePayload!
  """
  Creates a new cycle.
  """
  cycleCreate(
    """
    The cycle object to create.
    """
    input: CycleCreateInput!
  ): CyclePayload!
  """
  Updates a cycle.
  """
  cycleUpdate(
    """
    The identifier of the cycle to update.
    """
    id: String!
    """
    A partial cycle object to update the cycle with.
    """
    input: CycleUpdateInput!
  ): CyclePayload!
  """
  Create the SAML test organization in development.
  """
  debugCreateSAMLOrg: DebugPayload!
  """
  Always fails with internal error. Used to debug logging.
  """
  debugFailWithInternalError: DebugPayload!
  """
  Always logs an error to Sentry as warning. Used to debug logging.
  """
  debugFailWithWarning: DebugPayload!
  """
  Authenticates a user account via email and authentication token.
  """
  emailTokenUserAccountAuth(
    """
    The data used for token authentication.
    """
    input: TokenUserAccountAuthInput!
  ): AuthResolverResponse!
  """
  Unsubscribes the user from one type of emails.
  """
  emailUnsubscribe(
    """
    Unsubscription details.
    """
    input: EmailUnsubscribeInput!
  ): EmailUnsubscribePayload!
  """
  Finds or creates a new user account by email and sends an email with token.
  """
  emailUserAccountAuthChallenge(
    """
    The data used for email authentication.
    """
    input: EmailUserAccountAuthChallengeInput!
  ): EmailUserAccountAuthChallengeResponse!
  """
  Creates a custom emoji.
  """
  emojiCreate(
    """
    The emoji object to create.
    """
    input: EmojiCreateInput!
  ): EmojiPayload!
  """
  Deletes an emoji.
  """
  emojiDelete(
    """
    The identifier of the emoji to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  [Deprecated] Creates a new event.
  """
  eventCreate(
    """
    The event to create.
    """
    input: EventCreateInput!
  ): EventPayload!
  """
  Creates a new favorite (project, cycle etc).
  """
  favoriteCreate(
    """
    The favorite object to create.
    """
    input: FavoriteCreateInput!
  ): FavoritePayload!
  """
  Deletes a favorite reference.
  """
  favoriteDelete(
    """
    The identifier of the favorite reference to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Updates a favorite.
  """
  favoriteUpdate(
    """
    The identifier of the favorite to update.
    """
    id: String!
    """
    A partial favorite object to update the favorite with.
    """
    input: FavoriteUpdateInput!
  ): FavoritePayload!
  """
  Saves user feedback.
  """
  feedbackCreate(
    """
    The feedback entry to create.
    """
    input: FeedbackCreateInput!
  ): FeedbackPayload!
  """
  XHR request payload to upload an images, video and other attachments directly to Linear's cloud storage.
  """
  fileUpload(
    """
    MIME type of the uploaded file.
    """
    contentType: String!
    """
    Filename of the uploaded file.
    """
    filename: String!
    """
    Optional metadata.
    """
    metaData: JSON
    """
    File size of the uploaded file.
    """
    size: Int!
  ): UploadPayload!
  """
  Authenticate user account through Google OAuth. This is the 2nd step of OAuth flow.
  """
  googleUserAccountAuth(
    """
    The data used for Google authentication.
    """
    input: GoogleUserAccountAuthInput!
  ): AuthResolverResponse!
  """
  Upload an image from an URL to Linear.
  """
  imageUploadFromUrl(
    """
    URL of the file to be uploaded to Linear.
    """
    url: String!
  ): ImageUploadFromUrlPayload!
  """
  Deletes an integration.
  """
  integrationDelete(
    """
    The identifier of the integration to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Integrates the organization with Figma.
  """
  integrationFigma(
    """
    The Figma OAuth code.
    """
    code: String!
    """
    The Figma OAuth redirect URI.
    """
    redirectUri: String!
  ): IntegrationPayload!
  """
  Integrates the organization with Front.
  """
  integrationFront(
    """
    The Front OAuth code.
    """
    code: String!
    """
    The Front OAuth redirect URI.
    """
    redirectUri: String!
  ): IntegrationPayload!
  """
  Connects the organization with the GitHub App.
  """
  integrationGithubConnect(
    """
    The GitHub data to connect with.
    """
    installationId: String!
  ): IntegrationPayload!
  """
  Connects the organization with a GitLab Access Token.
  """
  integrationGitlabConnect(
    """
    The GitLab Access Token to connect with.
    """
    accessToken: String!
    """
    The URL of the GitLab installation
    """
    gitlabUrl: String!
  ): IntegrationPayload!
  """
  Integrates the organization with Google Sheets.
  """
  integrationGoogleSheets(
    """
    The Google OAuth code.
    """
    code: String!
  ): IntegrationPayload!
  """
  Integrates the organization with Intercom.
  """
  integrationIntercom(
    """
    The Intercom OAuth code.
    """
    code: String!
    """
    The Intercom OAuth redirect URI.
    """
    redirectUri: String!
  ): IntegrationPayload!
  """
  Disconnects the organization from Intercom.
  """
  integrationIntercomDelete: IntegrationPayload!
  """
  Enables Loom integration for the organization.
  """
  integrationLoom: IntegrationPayload!
  """
  Archives an integration resource.
  """
  integrationResourceArchive(
    """
    The identifier of the integration resource to archive.
    """
    id: String!
  ): ArchivePayload!
  """
  Integrates the organization with Sentry.
  """
  integrationSentryConnect(
    """
    The Sentry grant code that's exchanged for OAuth tokens.
    """
    code: String!
    """
    The Sentry installationId to connect with.
    """
    installationId: String!
    """
    The slug of the Sentry organization being connected.
    """
    organizationSlug: String!
  ): IntegrationPayload!
  """
  Integrates the organization with Slack.
  """
  integrationSlack(
    """
    The Slack OAuth code.
    """
    code: String!
    """
    The Slack OAuth redirect URI.
    """
    redirectUri: String!
    """
    Whether or not v2 of Slack OAuth should be used
    """
    shouldUseV2Auth: Boolean
  ): IntegrationPayload!
  """
  Imports custom emojis from your Slack workspace.
  """
  integrationSlackImportEmojis(
    """
    The Slack OAuth code.
    """
    code: String!
    """
    The Slack OAuth redirect URI.
    """
    redirectUri: String!
  ): IntegrationPayload!
  """
  Integrates your personal notifications with Slack.
  """
  integrationSlackPersonal(
    """
    The Slack OAuth code.
    """
    code: String!
    """
    The Slack OAuth redirect URI.
    """
    redirectUri: String!
  ): IntegrationPayload!
  """
  Slack webhook integration.
  """
  integrationSlackPost(
    """
    The Slack OAuth code.
    """
    code: String!
    """
    The Slack OAuth redirect URI.
    """
    redirectUri: String!
    """
    Whether or not v2 of Slack OAuth should be used
    """
    shouldUseV2Auth: Boolean
    """
    Integration's associated team.
    """
    teamId: String!
  ): IntegrationPayload!
  """
  Slack integration for project notifications.
  """
  integrationSlackProjectPost(
    """
    The Slack OAuth code.
    """
    code: String!
    """
    Integration's associated project.
    """
    projectId: String!
    """
    The Slack OAuth redirect URI.
    """
    redirectUri: String!
  ): IntegrationPayload!
  """
  Integrates the organization with Zendesk.
  """
  integrationZendesk(
    """
    The Zendesk OAuth code.
    """
    code: String!
    """
    The Zendesk OAuth redirect URI.
    """
    redirectUri: String!
    """
    The Zendesk OAuth scopes.
    """
    scope: String!
    """
    The Zendesk installation subdomain.
    """
    subdomain: String!
  ): IntegrationPayload!
  """
  Archives an issue.
  """
  issueArchive(
    """
    The identifier of the issue to archive.
    """
    id: String!
    """
    Whether to trash the issue
    """
    trash: Boolean
  ): ArchivePayload!
  """
  Creates a new issue.
  """
  issueCreate(
    """
    The issue object to create.
    """
    input: IssueCreateInput!
  ): IssuePayload!
  """
  Deletes (trashes) an issue.
  """
  issueDelete(
    """
    The identifier of the issue to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Kicks off an Asana import job.
  """
  issueImportCreateAsana(
    """
    Asana team name to choose which issues we should import.
    """
    asanaTeamName: String!
    """
    Asana token to fetch information from the Asana API.
    """
    asanaToken: String!
    """
    ID of issue import. If not provided it will be generated.
    """
    id: String
    """
    Whether to instantly process the import with the default configuration mapping.
    """
    instantProcess: Boolean
    """
    ID of the team into which to import data.
    """
    teamId: String!
  ): IssueImportPayload!
  """
  Kicks off a Clubhouse import job.
  """
  issueImportCreateClubhouse(
    """
    Clubhouse team name to choose which issues we should import.
    """
    clubhouseTeamName: String!
    """
    Clubhouse token to fetch information from the Clubhouse API.
    """
    clubhouseToken: String!
    """
    ID of issue import. If not provided it will be generated.
    """
    id: String
    """
    Whether to instantly process the import with the default configuration mapping.
    """
    instantProcess: Boolean
    """
    ID of the team into which to import data.
    """
    teamId: String!
  ): IssueImportPayload!
  """
  Kicks off a GitHub import job.
  """
  issueImportCreateGithub(
    """
    GitHub repository name from which we will import data.
    """
    githubRepoName: String!
    """
    GitHub owner (user or org) for the repository from which we will import data.
    """
    githubRepoOwner: String!
    """
    Whether or not we should import GitHub organization level projects.
    """
    githubShouldImportOrgProjects: Boolean
    """
    GitHub token to fetch information from the GitHub API.
    """
    githubToken: String!
    """
    ID of issue import. If not provided it will be generated.
    """
    id: String
    """
    Whether to instantly process the import with the default configuration mapping.
    """
    instantProcess: Boolean
    """
    ID of the team into which to import data.
    """
    teamId: String!
  ): IssueImportPayload!
  """
  Kicks off a Jira import job.
  """
  issueImportCreateJira(
    """
    ID of issue import. If not provided it will be generated.
    """
    id: String
    """
    Whether to instantly process the import with the default configuration mapping.
    """
    instantProcess: Boolean
    """
    Jira user account email.
    """
    jiraEmail: String!
    """
    Jira installation or cloud hostname.
    """
    jiraHostname: String!
    """
    Jira project key from which we will import data.
    """
    jiraProject: String!
    """
    Jira personal access token to access Jira REST API.
    """
    jiraToken: String!
    """
    ID of the team into which to import data.
    """
    teamId: String!
  ): IssueImportPayload!
  """
  Deletes an import job.
  """
  issueImportDelete(
    """
    ID of the issue import to delete.
    """
    issueImportId: String!
  ): IssueImportDeletePayload!
  """
  Kicks off import processing.
  """
  issueImportProcess(
    """
    ID of the issue import which we're going to process.
    """
    issueImportId: String!
    """
    The mapping configuration to use for processing the import.
    """
    mapping: JSONObject!
  ): IssueImportPayload!
  """
  Archives an issue label.
  """
  issueLabelArchive(
    """
    The identifier of the label to archive.
    """
    id: String!
  ): ArchivePayload!
  """
  Creates a new label.
  """
  issueLabelCreate(
    """
    The issue label to create.
    """
    input: IssueLabelCreateInput!
  ): IssueLabelPayload!
  """
  Updates an label.
  """
  issueLabelUpdate(
    """
    The identifier of the label to update.
    """
    id: String!
    """
    A partial label object to update.
    """
    input: IssueLabelUpdateInput!
  ): IssueLabelPayload!
  """
  Creates a new issue relation.
  """
  issueRelationCreate(
    """
    The issue relation to create.
    """
    input: IssueRelationCreateInput!
  ): IssueRelationPayload!
  """
  Deletes an issue relation.
  """
  issueRelationDelete(
    """
    The identifier of the issue relation to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Updates an issue relation.
  """
  issueRelationUpdate(
    """
    The identifier of the issue relation to update.
    """
    id: String!
    """
    The properties of the issue relation to update.
    """
    input: IssueRelationUpdateInput!
  ): IssueRelationPayload!
  """
  Unarchives an issue.
  """
  issueUnarchive(
    """
    The identifier of the issue to archive.
    """
    id: String!
  ): ArchivePayload!
  """
  Updates an issue.
  """
  issueUpdate(
    """
    The identifier of the issue to update.
    """
    id: String!
    """
    A partial issue object to update the issue with.
    """
    input: IssueUpdateInput!
  ): IssuePayload!
  """
  Join an organization from onboarding.
  """
  joinOrganizationFromOnboarding(
    """
    Organization details for the organization to join.
    """
    input: JoinOrganizationInput!
  ): CreateOrJoinOrganizationResponse!
  """
  Leave an organization.
  """
  leaveOrganization(
    """
    ID of the organization to leave.
    """
    organizationId: String!
  ): CreateOrJoinOrganizationResponse!
  """
  Creates a new milestone.
  """
  milestoneCreate(
    """
    The issue object to create.
    """
    input: MilestoneCreateInput!
  ): MilestonePayload!
  """
  Deletes a milestone.
  """
  milestoneDelete(
    """
    The identifier of the milestone to delete. Only milestones without projects can be deleted.
    """
    id: String!
  ): ArchivePayload!
  """
  Updates a milestone.
  """
  milestoneUpdate(
    """
    The identifier of the milestone to update.
    """
    id: String!
    """
    A partial milestone object to update the milestone with.
    """
    input: MilestoneUpdateInput!
  ): MilestonePayload!
  """
  Archives a notification.
  """
  notificationArchive(
    """
    The id of the notification to archive.
    """
    id: String!
  ): ArchivePayload!
  """
  Creates a notification.
  """
  notificationCreate(
    """
    The identifier of the notification to update.
    """
    id: String!
    """
    A partial notification object to update the issue with.
    """
    input: NotificationUpdateInput!
  ): NotificationPayload!
  """
  Creates a new notification subscription for a team or a project.
  """
  notificationSubscriptionCreate(
    """
    The subscription object to create.
    """
    input: NotificationSubscriptionCreateInput!
  ): NotificationSubscriptionPayload!
  """
  Deletes a notification subscription reference.
  """
  notificationSubscriptionDelete(
    """
    The identifier of the notification subscription reference to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Unarchives a notification.
  """
  notificationUnarchive(
    """
    The id of the notification to archive.
    """
    id: String!
  ): ArchivePayload!
  """
  Updates a notification.
  """
  notificationUpdate(
    """
    The identifier of the notification to update.
    """
    id: String!
    """
    A partial notification object to update the issue with.
    """
    input: NotificationUpdateInput!
  ): NotificationPayload!
  """
  [Internal] Authenticates an auth string by the user.
  """
  oauthAuthStringAuthorize(
    """
    The identifier of the OAuth client that's trying to authenticate.
    """
    appId: String!
    """
    The auth string to authenticate.
    """
    authString: String!
  ): OauthAuthStringAuthorizePayload!
  """
  [Internal] Creates a temporary authentication code that can be exchanged for an OAuth token.
  """
  oauthAuthStringChallenge(
    """
    The identifier of the OAuth client that's trying to authenticate.
    """
    appId: String!
    """
    The group of scopes that are being requested.
    """
    scope: [String!]!
  ): OauthAuthStringChallengePayload!
  """
  [Internal] Returns an access token once the auth string has been authenticated.
  """
  oauthAuthStringCheck(
    """
    The identifier of the OAuth client that's trying to authenticate.
    """
    appId: String!
    """
    The auth string to authenticate.
    """
    authString: String!
  ): OauthAuthStringCheckPayload!
  """
  Archives an OAuth client.
  """
  oauthClientArchive(
    """
    The identifier of the OAuth client to archive.
    """
    id: String!
  ): ArchivePayload!
  """
  Creates a new OAuth client.
  """
  oauthClientCreate(
    """
    The OAuth client application object to create.
    """
    input: OauthClientCreateInput!
  ): OauthClientPayload!
  """
  Updates an OAuth client.
  """
  oauthClientRotateSecret(
    """
    The identifier of the OAuth client for which we want to rotate the secret.
    """
    id: String!
  ): RotateSecretPayload!
  """
  Updates an OAuth client.
  """
  oauthClientUpdate(
    """
    The identifier of the OAuth client to update.
    """
    id: String!
    """
    A partial client object to update the OAuth client with.
    """
    input: OauthClientUpdateInput!
  ): OauthClientPayload!
  """
  Revokes an OAuth token.
  """
  oauthTokenRevoke(
    """
    The identifier of the OAuth client for the tokens to be revoked.
    """
    appId: String!
    """
    The group of scopes for the tokens to be revoked.
    """
    scope: [String!]!
  ): OauthTokenRevokePayload!
  """
  Cancels the deletion of an organization. Administrator privileges required.
  """
  organizationCancelDelete: OrganizationCancelDeletePayload!
  """
  Delete's an organization. Administrator privileges required.
  """
  organizationDelete(
    """
    Information required to delete an organization.
    """
    input: DeleteOrganizationInput!
  ): OrganizationDeletePayload!
  """
  Get an organization's delete confirmation token. Administrator privileges required.
  """
  organizationDeleteChallenge: OrganizationDeletePayload!
  """
  Adds a domain to be allowed for an organization.
  """
  organizationDomainCreate(
    """
    The organization domain entry to create.
    """
    input: OrganizationDomainCreateInput!
  ): OrganizationDomainPayload!
  """
  Deletes a domain.
  """
  organizationDomainDelete(
    """
    The identifier of the domain to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Verifies a domain to be added to an organization.
  """
  organizationDomainVerify(
    """
    The organization domain to verify.
    """
    input: OrganizationDomainVerificationInput!
  ): OrganizationDomainPayload!
  """
  Creates a new organization invite.
  """
  organizationInviteCreate(
    """
    The organization invite object to create.
    """
    input: OrganizationInviteCreateInput!
  ): OrganizationInvitePayload!
  """
  Deletes an organization invite.
  """
  organizationInviteDelete(
    """
    The identifier of the organization invite to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Updates the user's organization.
  """
  organizationUpdate(
    """
    A partial organization object to update the organization with.
    """
    input: UpdateOrganizationInput!
  ): OrganizationPayload!
  """
  Archives a project.
  """
  projectArchive(
    """
    The identifier of the project to archive. Also the identifier from the URL is accepted.
    """
    id: String!
  ): ArchivePayload!
  """
  Creates a new project.
  """
  projectCreate(
    """
    The issue object to create.
    """
    input: ProjectCreateInput!
  ): ProjectPayload!
  """
  Creates a new project link.
  """
  projectLinkCreate(
    """
    The project link object to create.
    """
    input: ProjectLinkCreateInput!
  ): ProjectLinkPayload!
  """
  Deletes a project link.
  """
  projectLinkDelete(
    """
    The identifier of the project link to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Unarchives a project.
  """
  projectUnarchive(
    """
    The identifier of the project to restore. Also the identifier from the URL is accepted.
    """
    id: String!
  ): ArchivePayload!
  """
  Updates a project.
  """
  projectUpdate(
    """
    The identifier of the project to update. Also the identifier from the URL is accepted.
    """
    id: String!
    """
    A partial project object to update the project with.
    """
    input: ProjectUpdateInput!
  ): ProjectPayload!
  """
  Creates a push subscription.
  """
  pushSubscriptionCreate(
    """
    The push subscription to create.
    """
    input: PushSubscriptionCreateInput!
  ): PushSubscriptionPayload!
  """
  Deletes a push subscription.
  """
  pushSubscriptionDelete(
    """
    The identifier of the push subscription to delete.
    """
    id: String!
  ): PushSubscriptionPayload!
  """
  Creates a new reaction.
  """
  reactionCreate(
    """
    The reaction object to create.
    """
    input: ReactionCreateInput!
  ): ReactionPayload!
  """
  Deletes a reaction.
  """
  reactionDelete(
    """
    The identifier of the reaction to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Manually update Google Sheets data.
  """
  refreshGoogleSheetsData(
    """
    The identifier of the Google Sheets integration to update.
    """
    id: String!
  ): IntegrationPayload!
  """
  Re-send an organization invite.
  """
  resentOrganizationInvite(
    """
    The identifier of the organization invite to be re-send.
    """
    id: String!
  ): ArchivePayload!
  """
  Authenticates a user account via email and authentication token for SAML.
  """
  samlTokenUserAccountAuth(
    """
    The data used for token authentication.
    """
    input: TokenUserAccountAuthInput!
  ): AuthResolverResponse!
  """
  Archives a subscription.
  """
  subscriptionArchive(
    """
    The identifier of the subscription to archive.
    """
    id: String!
  ): ArchivePayload!
  """
  Creates a subscription session. Used internally to integrate with Stripe.
  """
  subscriptionSessionCreate(
    """
    The name of the plan.
    """
    plan: String!
  ): SubscriptionSessionPayload!
  """
  Updates a subscription.
  """
  subscriptionUpdate(
    """
    The identifier of the subscription.
    """
    id: String!
    """
    The properties of the subscription.
    """
    input: SubscriptionUpdateInput!
  ): SubscriptionPayload!
  """
  Creates a subscription update session. Used internally to integrate with Stripe.
  """
  subscriptionUpdateSessionCreate: SubscriptionSessionPayload!
  """
  Upgrades a subscription plan.
  """
  subscriptionUpgrade(
    """
    The identifier of the subscription.
    """
    id: String!
    """
    The subscription type to upgrade to.
    """
    type: String!
  ): SubscriptionPayload!
  """
  Archives a team.
  """
  teamArchive(
    """
    The identifier of the team to archive.
    """
    id: String!
  ): ArchivePayload!
  """
  Creates a new team. The user who creates the team will automatically be added as a member to the newly created team.
  """
  teamCreate(
    """
    The team id to copy settings from.
    """
    copySettingsFromTeamId: String
    """
    The team object to create.
    """
    input: TeamCreateInput!
  ): TeamPayload!
  """
  Deletes a team.
  """
  teamDelete(
    """
    The identifier of the team to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Deletes a previously used team key.
  """
  teamKeyDelete(
    """
    The identifier of the team key to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Creates a new team membership.
  """
  teamMembershipCreate(
    """
    The team membership object to create.
    """
    input: TeamMembershipCreateInput!
  ): TeamMembershipPayload!
  """
  Deletes a team membership.
  """
  teamMembershipDelete(
    """
    The identifier of the team membership to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Updates a team membership.
  """
  teamMembershipUpdate(
    """
    The identifier of the team membership to update.
    """
    id: String!
    """
    A partial team membership object to update the team membership with.
    """
    input: TeamMembershipUpdateInput!
  ): TeamMembershipPayload!
  """
  Updates a team.
  """
  teamUpdate(
    """
    The identifier of the team to update.
    """
    id: String!
    """
    A partial team object to update the team with.
    """
    input: TeamUpdateInput!
  ): TeamPayload!
  """
  Creates a new template.
  """
  templateCreate(
    """
    The template object to create.
    """
    input: TemplateCreateInput!
  ): TemplatePayload!
  """
  Deletes a template.
  """
  templateDelete(
    """
    The identifier of the template to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Updates an existing template.
  """
  templateUpdate(
    """
    The identifier of the template.
    """
    id: String!
    """
    The properties of the template to update.
    """
    input: TemplateUpdateInput!
  ): TemplatePayload!
  """
  Makes user a regular user. Can only be called by an admin.
  """
  userDemoteAdmin(
    """
    The identifier of the user to make a regular user.
    """
    id: String!
  ): UserAdminPayload!
  """
  Updates a user's settings flag.
  """
  userFlagUpdate(
    """
    Settings flag to increment.
    """
    flag: UserFlagType!
    """
    Flag operation to perform
    """
    operation: UserFlagUpdateOperation!
  ): UserSettingsFlagPayload!
  """
  Makes user an admin. Can only be called by an admin.
  """
  userPromoteAdmin(
    """
    The identifier of the user to make an admin.
    """
    id: String!
  ): UserAdminPayload!
  """
  [Deprecated] Updates a user's settings flag.
  """
  userSettingsFlagIncrement(
    """
    Flag to increment.
    """
    flag: String!
  ): UserSettingsFlagPayload!
  """
  Resets user's setting flags.
  """
  userSettingsFlagsReset: UserSettingsFlagsResetPayload!
  """
  Updates the user's settings.
  """
  userSettingsUpdate(
    """
    The identifier of the userSettings to update.
    """
    id: String!
    """
    A partial notification object to update the settings with.
    """
    input: UserSettingsUpdateInput!
  ): UserSettingsPayload!
  """
  Subscribes user to changelog newsletter.
  """
  userSubscribeToNewsletter: UserSubscribeToNewsletterPayload!
  """
  Suspends a user. Can only be called by an admin.
  """
  userSuspend(
    """
    The identifier of the user to suspend.
    """
    id: String!
  ): UserAdminPayload!
  """
  Un-suspends a user. Can only be called by an admin.
  """
  userUnsuspend(
    """
    The identifier of the user to unsuspend.
    """
    id: String!
  ): UserAdminPayload!
  """
  Updates a user. Only available to organization admins and the user themselves.
  """
  userUpdate(
    """
    The identifier of the user to update. Use `me` to reference currently authenticated user.
    """
    id: String!
    """
    A partial user object to update the user with.
    """
    input: UpdateUserInput!
  ): UserPayload!
  """
  Creates a new ViewPreferences object.
  """
  viewPreferencesCreate(
    """
    The ViewPreferences object to create.
    """
    input: ViewPreferencesCreateInput!
  ): ViewPreferencesPayload!
  """
  Deletes a ViewPreferences.
  """
  viewPreferencesDelete(
    """
    The identifier of the ViewPreferences to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Updates an existing ViewPreferences object.
  """
  viewPreferencesUpdate(
    """
    The identifier of the ViewPreferences object.
    """
    id: String!
    """
    The properties of the view preferences.
    """
    input: ViewPreferencesUpdateInput!
  ): ViewPreferencesPayload!
  """
  Creates a new webhook.
  """
  webhookCreate(
    """
    The webhook object to create.
    """
    input: WebhookCreateInput!
  ): WebhookPayload!
  """
  Deletes a Webhook.
  """
  webhookDelete(
    """
    The identifier of the Webhook to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Updates an existing Webhook.
  """
  webhookUpdate(
    """
    The identifier of the Webhook.
    """
    id: String!
    """
    The properties of the Webhook.
    """
    input: WebhookUpdateInput!
  ): WebhookPayload!
  """
  Archives a state. Only states with issues that have all been archived can be archived.
  """
  workflowStateArchive(
    """
    The identifier of the state to archive.
    """
    id: String!
  ): ArchivePayload!
  """
  Creates a new state, adding it to the workflow of a team.
  """
  workflowStateCreate(
    """
    The state to create.
    """
    input: WorkflowStateCreateInput!
  ): WorkflowStatePayload!
  """
  Updates a state.
  """
  workflowStateUpdate(
    """
    The identifier of the state to update.
    """
    id: String!
    """
    A partial state object to update.
    """
    input: WorkflowStateUpdateInput!
  ): WorkflowStatePayload!
}

interface Node {
  """
  The unique identifier of the entity.
  """
  id: ID!
}

"""
A notification sent to a user.
"""
type Notification implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The comment which the notification is associated with.
  """
  comment: Comment
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The time at when an email reminder for this notification was sent to the user. Null, if no email
      reminder has been sent.
  """
  emailedAt: DateTime
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The issue that the notification is associated with.
  """
  issue: Issue!
  """
  Name of the reaction emoji associated with the notification.
  """
  reactionEmoji: String
  """
  The time at when the user marked the notification as read. Null, if the the user hasn't read the notification
  """
  readAt: DateTime
  """
  The time until a notification will be snoozed. After that it will appear in the inbox again.
  """
  snoozedUntilAt: DateTime
  """
  The team which the notification is associated with.
  """
  team: Team!
  """
  Notification type
  """
  type: String!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  The recipient of the notification.
  """
  user: User!
}

type NotificationConnection {
  edges: [NotificationEdge!]!
  nodes: [Notification!]!
  pageInfo: PageInfo!
}

type NotificationEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: Notification!
}

type NotificationPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The notification that was created or updated.
  """
  notification: Notification!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

"""
Notification subscriptions for models.
"""
type NotificationSubscription implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  Subscribed project.
  """
  project: Project
  """
  Subscribed team.
  """
  team: Team
  """
  The type of the subscription.
  """
  type: String!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  The user associated with notification subscriptions.
  """
  user: User!
}

type NotificationSubscriptionConnection {
  edges: [NotificationSubscriptionEdge!]!
  nodes: [NotificationSubscription!]!
  pageInfo: PageInfo!
}

input NotificationSubscriptionCreateInput {
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  The identifier of the project to subscribe to.
  """
  projectId: String
  """
  The identifier of the team to subscribe to.
  """
  teamId: String
}

type NotificationSubscriptionEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: NotificationSubscription!
}

type NotificationSubscriptionPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The notification subscription that was created or updated.
  """
  notificationSubscription: NotificationSubscription!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

input NotificationUpdateInput {
  """
  The time when notification was marked as read.
  """
  readAt: DateTime
  """
  The time until a notification will be snoozed. After that it will appear in the inbox again.
  """
  snoozedUntilAt: DateTime
}

type OauthAuthStringAuthorizePayload {
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

type OauthAuthStringChallengePayload {
  """
  The created authentication string.
  """
  authString: String!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

type OauthAuthStringCheckPayload {
  """
  Whether the operation was successful.
  """
  success: Boolean!
  """
  Access token for use.
  """
  token: String
}

"""
OAuth2 client application
"""
type OauthClient implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  OAuth application's client ID.
  """
  clientId: String!
  """
  OAuth application's client secret.
  """
  clientSecret: String!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  Information about the application.
  """
  description: String!
  """
  Name of the developer.
  """
  developer: String!
  """
  Url of the developer.
  """
  developerUrl: String!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  Image of the application.
  """
  imageUrl: String!
  """
  OAuth application's client name.
  """
  name: String!
  """
  Whether the OAuth application is publicly visible, or only visible to the creating workspace.
  """
  publicEnabled: Boolean!
  """
  List of allowed redirect URIs for the application.
  """
  redirectUris: [String!]!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
}

input OauthClientCreateInput {
  """
  User facing description of the application.
  """
  description: String
  """
  Name of the developer of the application.
  """
  developer: String!
  """
  Url of the developer (homepage or docs).
  """
  developerUrl: String!
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  URL for the app icon.
  """
  imageUrl: String
  """
  The application's name.
  """
  name: String!
  """
  Whether the OAuth application should be publicly visible, or only visible to the creating workspace.
  """
  publicEnabled: Boolean
  """
  List of allowed redirect URIs for the application.
  """
  redirectUris: [String!]!
}

type OauthClientPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The OAuth client application that was created or updated.
  """
  oauthClient: OauthClient!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

input OauthClientUpdateInput {
  """
  User facing description of the application.
  """
  description: String
  """
  Name of the developer of the application.
  """
  developer: String
  """
  URL of the developer (homepage or docs).
  """
  developerUrl: String
  """
  URL for the app icon.
  """
  imageUrl: String
  """
  The application's name.
  """
  name: String
  """
  Whether the OAuth application should be publicly visible, or only visible to the creating workspace.
  """
  publicEnabled: Boolean
  """
  List of allowed redirect URIs for the application.
  """
  redirectUris: [String!]
}

type OauthTokenRevokePayload {
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

input OnboardingCustomerSurvey {
  companyRole: String
  companySize: String
}

"""
An organization. Organizations are root-level objects that contain user accounts and teams.
"""
type Organization implements Node {
  """
  Allowed authentication providers, empty array means all are allowed
  """
  allowedAuthServices: [String!]!
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  Number of issues in the organization.
  """
  createdIssueCount: Int!
  """
  The time at which deletion of the organization was requested.
  """
  deletionRequestedAt: DateTime
  """
  How git branches are formatted. If null, default formatting will be used.
  """
  gitBranchFormat: String
  """
  Whether the Git integration linkback messages should be sent to private repositories.
  """
  gitLinkbackMessagesEnabled: Boolean!
  """
  Whether the Git integration linkback messages should be sent to public repositories.
  """
  gitPublicLinkbackMessagesEnabled: Boolean!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  Integrations associated with the organization.
  """
  integrations(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IntegrationConnection!
  """
  The organization's logo URL.
  """
  logoUrl: String
  """
  Milestones associated with the organization.
  """
  milestones(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): MilestoneConnection!
  """
  The organization's name.
  """
  name: String!
  """
  Rolling 30-day total upload volume for the organization, in megabytes.
  """
  periodUploadVolume: Float!
  """
  Whether the organization is using a roadmap.
  """
  roadmapEnabled: Boolean!
  """
  Whether SAML authentication is enabled for organization.
  """
  samlEnabled: Boolean!
  """
  The organization's subscription to a paid plan.
  """
  subscription: Subscription
  """
  Teams associated with the organization.
  """
  teams(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): TeamConnection!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  The organization's unique URL key.
  """
  urlKey: String!
  """
  Number of active users in the organization.
  """
  userCount: Int!
  """
  Users associated with the organization.
  """
  users(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    Should query return disabled/suspended users (default: false).
    """
    includeDisabled: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): UserConnection!
}

type OrganizationCancelDeletePayload {
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

type OrganizationDeletePayload {
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

"""
Defines the use of a domain by an organization.
"""
type OrganizationDomain implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The user who added the domain.
  """
  creator: User
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  Domain name
  """
  name: String!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  E-mail used to verify this domain
  """
  verificationEmail: String
  """
  Is this domain verified
  """
  verified: Boolean!
}

input OrganizationDomainCreateInput {
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  The domain name to add.
  """
  name: String!
  """
  The email address to which to send the verification code.
  """
  verificationEmail: String!
  """
  Is the domain verified.
  """
  verified: Boolean!
}

type OrganizationDomainPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The organization domain that was created or updated.
  """
  organizationDomain: OrganizationDomain!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

type OrganizationDomainSimplePayload {
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

input OrganizationDomainVerificationInput {
  """
  The identifier of the domain being verified.
  """
  organizationDomainId: String!
  """
  The verification code sent via email.
  """
  verificationCode: String!
}

type OrganizationExistsPayload {
  """
  Whether the organization exists.
  """
  exists: Boolean!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

"""
An invitation to the organization that has been sent via email.
"""
type OrganizationInvite implements Node {
  """
  The time at which the invite was accepted. Null, if the invite hasn't been accepted
  """
  acceptedAt: DateTime
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The invitees email address.
  """
  email: String!
  """
  The time at which the invite will be expiring. Null, if the invite shouldn't expire
  """
  expiresAt: DateTime
  """
  The invite was sent to external address.
  """
  external: Boolean!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The user who has accepted the invite. Null, if the invite hasn't been accepted.
  """
  invitee: User
  """
  The user who created the invitation.
  """
  inviter: User!
  """
  The organization that the invite is associated with.
  """
  organization: Organization!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
}

type OrganizationInviteConnection {
  edges: [OrganizationInviteEdge!]!
  nodes: [OrganizationInvite!]!
  pageInfo: PageInfo!
}

input OrganizationInviteCreateInput {
  """
  The email of the invitee.
  """
  email: String!
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  The message to send to the invitee.
  """
  message: String
  """
  The teams that the user has been invited to.
  """
  teamIds: [String!]
}

type OrganizationInviteEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: OrganizationInvite!
}

type OrganizationInvitePayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The organization invite that was created or updated.
  """
  organizationInvite: OrganizationInvite!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

type OrganizationPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The organization that was created or updated.
  """
  organization: Organization
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

type PageInfo {
  """
  Cursor representing the last result in the paginated results.
  """
  endCursor: String
  """
  Indicates if there are more results when paginating forward.
  """
  hasNextPage: Boolean!
  """
  Indicates if there are more results when paginating backward.
  """
  hasPreviousPage: Boolean!
  """
  Cursor representing the first result in the paginated results.
  """
  startCursor: String
}

"""
By which field should the pagination order by
"""
enum PaginationOrderBy {
  createdAt
  updatedAt
}

"""
A project.
"""
type Project implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the project was automatically archived by the auto pruning process.
  """
  autoArchivedAt: DateTime
  """
  The time at which the project was moved into canceled state.
  """
  canceledAt: DateTime
  """
  The project's color.
  """
  color: String!
  """
  The time at which the project was moved into completed state.
  """
  completedAt: DateTime
  """
  The number of completed issues in the project after each week.
  """
  completedIssueCountHistory: [Float!]!
  """
  The number of completed estimation points after each week.
  """
  completedScopeHistory: [Float!]!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The user who created the project.
  """
  creator: User!
  """
  The project's description.
  """
  description: String!
  """
  The icon of the project.
  """
  icon: String
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The total number of issues in the project after each week.
  """
  issueCountHistory: [Float!]!
  """
  Issues associated with the project.
  """
  issues(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueConnection!
  """
  The project lead.
  """
  lead: User
  """
  Links associated with the project.
  """
  links(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): ProjectLinkConnection!
  """
  Users that are members of the project.
  """
  members(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    Should query return disabled/suspended users (default: false).
    """
    includeDisabled: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): UserConnection!
  """
  The milestone that this project is associated with.
  """
  milestone: Milestone
  """
  The project's name.
  """
  name: String!
  """
  The total number of estimation points after each week.
  """
  scopeHistory: [Float!]!
  """
  Whether to send new issue comment notifications to Slack.
  """
  slackIssueComments: Boolean!
  """
  Whether to send new issue status updates to Slack.
  """
  slackIssueStatuses: Boolean!
  """
  Whether to send new issue notifications to Slack.
  """
  slackNewIssue: Boolean!
  """
  The project's unique URL slug.
  """
  slugId: String!
  """
  The sort order for the project within its milestone.
  """
  sortOrder: Float!
  """
  [Internal] The estimated start date of the project.
  """
  startDate: TimelessDateScalar
  """
  The time at which the project was moved into started state.
  """
  startedAt: DateTime
  """
  The type of the state.
  """
  state: String!
  """
  The estimated completion date of the project.
  """
  targetDate: TimelessDateScalar
  """
  Teams associated with this project.
  """
  teams(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): TeamConnection!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  Project URL.
  """
  url: String!
}

type ProjectConnection {
  edges: [ProjectEdge!]!
  nodes: [Project!]!
  pageInfo: PageInfo!
}

input ProjectCreateInput {
  """
  The color of the project.
  """
  color: String
  """
  The description for the project.
  """
  description: String
  """
  The icon of the project.
  """
  icon: String
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  The identifier of the project lead.
  """
  leadId: String
  """
  The identifiers of the members of this project.
  """
  memberIds: [String!]
  """
  The identifier of the milestone to associate the project with.
  """
  milestoneId: String
  """
  The name of the project.
  """
  name: String!
  """
  The sort order for the project within its milestone.
  """
  sortOrder: Float
  """
  [Internal] The planned start date of the project.
  """
  startDate: TimelessDateScalar
  """
  The state of the project.
  """
  state: String
  """
  The planned target date of the project.
  """
  targetDate: TimelessDateScalar
  """
  The identifiers of the teams this project is associated with.
  """
  teamIds: [String!]!
}

type ProjectEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: Project!
}

"""
An external link for a project.
"""
type ProjectLink implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The user who created the link.
  """
  creator: User!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The link's label.
  """
  label: String!
  """
  The project that the link is associated with.
  """
  project: Project!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  The link's URL.
  """
  url: String!
}

type ProjectLinkConnection {
  edges: [ProjectLinkEdge!]!
  nodes: [ProjectLink!]!
  pageInfo: PageInfo!
}

input ProjectLinkCreateInput {
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  The label for the link.
  """
  label: String!
  """
  Related project for the link.
  """
  projectId: String!
  """
  The URL of the link.
  """
  url: String!
}

type ProjectLinkEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: ProjectLink!
}

type ProjectLinkPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The project that was created or updated.
  """
  projectLink: ProjectLink!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

type ProjectPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The project that was created or updated.
  """
  project: Project
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

input ProjectUpdateInput {
  """
  The date when the project was canceled.
  """
  canceledAt: DateTime
  """
  The color of the project.
  """
  color: String
  """
  The date when the project was completed.
  """
  completedAt: DateTime
  """
  The description for the project.
  """
  description: String
  """
  The icon of the project.
  """
  icon: String
  """
  The identifier of the project lead.
  """
  leadId: String
  """
  The identifiers of the members of this project.
  """
  memberIds: [String!]
  """
  The identifier of the milestone to associate the project with.
  """
  milestoneId: String
  """
  The name of the project.
  """
  name: String
  """
  Whether to send new issue comment notifications to Slack.
  """
  slackIssueComments: Boolean
  """
  Whether to send issue status update notifications to Slack.
  """
  slackIssueStatuses: Boolean
  """
  Whether to send new issue notifications to Slack.
  """
  slackNewIssue: Boolean
  """
  The sort order for the project within its milestone.
  """
  sortOrder: Float
  """
  [Internal] The planned start date of the project.
  """
  startDate: TimelessDateScalar
  """
  The state of the project.
  """
  state: String
  """
  The planned target date of the project.
  """
  targetDate: TimelessDateScalar
  """
  The identifiers of the teams this project is associated with.
  """
  teamIds: [String!]
}

"""
Pull request data
"""
type PullRequestPayload {
  branch: String!
  closedAt: String!
  createdAt: String!
  draft: Boolean!
  id: String!
  mergedAt: String!
  number: Float!
  repoLogin: String!
  repoName: String!
  status: String!
  title: String!
  updatedAt: String!
  url: String!
  userId: String!
  userLogin: String!
}

"""
A user's web browser push notification subscription.
"""
type PushSubscription implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
}

type PushSubscriptionConnection {
  edges: [PushSubscriptionEdge!]!
  nodes: [PushSubscription!]!
  pageInfo: PageInfo!
}

input PushSubscriptionCreateInput {
  """
  The data of the subscription in stringified JSON format.
  """
  data: String!
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  The user identifier of the subscription.
  """
  userId: String!
}

type PushSubscriptionEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: PushSubscription!
}

type PushSubscriptionPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

type PushSubscriptionTestPayload {
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

type Query {
  """
  [Internal] All API keys for the user.
  """
  apiKeys(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): ApiKeyConnection!
  """
  Get information for an application and whether a user has approved it for the given scopes.
  """
  applicationWithAuthorization(
    """
    The client ID of the application.
    """
    clientId: String!
    """
    Redirect URI for the application.
    """
    redirectUri: String
    """
    Scopes being requested by the application
    """
    scope: [String!]!
  ): UserAuthorizedApplication!
  """
  [Internal] Fetches an archived model.
  """
  archivedModelSync(
    """
    The identifier of the model to load. What an identifier is specific to the model class.
    """
    identifier: String!
    """
    The class name of the model to load.
    """
    modelClass: String!
  ): ArchiveResponse!
  """
  [Internal] Fetches archived models.
  """
  archivedModelsSync(
    """
    Retrieve issues that have been archived before this date.
    """
    before: DateTime
    """
    The number of issues to load.
    """
    last: Int
    """
    The class name of the models to load.
    """
    modelClass: String!
    """
    The teamId for which to load archived models.
    """
    teamId: String!
    """
    How trashed issues should be loaded. Defaults to TrashOptionType.excludeTrash
    """
    trashOption: TrashOptionType
  ): ArchiveResponse!
  """
  [Alpha] One specific issue attachment.
  [Deprecated] 'url' can no longer be used as the 'id' parameter. Use 'attachmentsForUrl' instead
  """
  attachment(id: String!): Attachment!
  """
  [Alpha] Query an issue by its associated attachment, and its id.
  """
  attachmentIssue(
    """
    `id` of the attachment for which you'll want to get the issue for. [Deprecated] `url` as the `id` parameter.
    """
    id: String!
  ): Issue!
    @deprecated(
      reason: "Will be removed in near future, please use `attachmentsForURL` to get attachments and their issues instead."
    )
  """
  [Alpha] All issue attachments.

  To get attachments for a given URL, use `attachmentsForURL` query.
  """
  attachments(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): AttachmentConnection!
  """
  [Alpha] Returns issue attachments for a given `url`.
  """
  attachmentsForURL(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
    """
    The attachment URL.
    """
    url: String!
  ): AttachmentConnection!
  """
  Get all authorized applications for a user
  """
  authorizedApplications: [AuthorizedApplication!]!
  """
  Fetch users belonging to this user account.
  """
  availableUsers: AuthResolverResponse!
  """
  Billing details for the customer.
  """
  billingDetails: BillingDetailsPayload!
  """
  Join collaborative document and get missing steps.
  """
  collaborativeDocumentJoin(
    """
    The identifier of the client.
    """
    clientId: String!
    """
    The identifier of the Issue to join.
    """
    issueId: String!
    """
    Document version.
    """
    version: Int!
  ): CollaborationDocumentUpdatePayload!
  """
  A specific comment.
  """
  comment(
    """
    The identifier of the comment to retrieve.
    """
    id: String!
  ): Comment!
  """
  All comments.
  """
  comments(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): CommentConnection!
  """
  One specific custom view.
  """
  customView(id: String!): CustomView!
  """
  Custom views for the user.
  """
  customViews(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): CustomViewConnection!
  """
  One specific cycle.
  """
  cycle(id: String!): Cycle!
  """
  All cycles.
  """
  cycles(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): CycleConnection!
  """
  [Internal] Fetches the dependencies of a model.
  """
  dependentModelSync(
    """
    The identifier of the model whose dependencies to load.
    """
    identifier: String!
    """
    The class name of the model to load.
    """
    modelClass: String!
  ): DependencyResponse!
  """
  A specific emoji.
  """
  emoji(
    """
    The identifier of the emoji to retrieve.
    """
    id: String!
  ): Emoji!
  """
  All custom emojis.
  """
  emojis(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): EmojiConnection!
  """
  One specific favorite.
  """
  favorite(id: String!): Favorite!
  """
  The user's favorites.
  """
  favorites(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): FavoriteConnection!
  """
  Fetch Figma screenshot and other information with file and node identifiers.
  """
  figmaEmbedInfo(
    """
    Figma file identifier.
    """
    fileId: String!
    """
    Figma node identifier.
    """
    nodeId: String
  ): FigmaEmbedPayload!
  """
  One specific integration.
  """
  integration(id: String!): Integration!
  """
  One specific integration resource. (e.g. linked GitHub pull requests for an issue)
  """
  integrationResource(id: String!): IntegrationResource!
  """
  All integrations resources (e.g. linked GitHub pull requests for issues).
  """
  integrationResources(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IntegrationResourceConnection!
  """
  All integrations.
  """
  integrations(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IntegrationConnection!
  """
  Retrieves information for the public invite page.
  """
  inviteInfo(
    """
    Team hash.
    """
    teamHash: String
    """
    User hash.
    """
    userHash: String!
  ): InvitePagePayload!
  """
  One specific issue.
  """
  issue(id: String!): Issue!
  """
  [Internal] The history of issue descriptions.
  """
  issueDescriptionHistory(id: String!): IssueDescriptionHistoryPayload!
  """
  Fetches the GitHub token, completing the OAuth flow.
  """
  issueImportFinishGithubOAuth(
    """
    OAuth code.
    """
    code: String!
  ): GithubOAuthTokenPayload!
  """
  One specific label.
  """
  issueLabel(id: String!): IssueLabel!
  """
  All issue labels.
  """
  issueLabels(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueLabelConnection!
  """
  Issue priority values and corresponding labels.
  """
  issuePriorityValues: [IssuePriorityValue!]!
  """
  One specific issue relation.
  """
  issueRelation(id: String!): IssueRelation!
  """
  All issue relationships.
  """
  issueRelations(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueRelationConnection!
  """
  [ALPHA] Search issues. This query is experimental and is subject to change without notice.
  """
  issueSearch(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
    """
    Search string to look for.
    """
    query: String!
  ): IssueConnection!
  """
  All issues.
  """
  issues(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueConnection!
  """
  One specific milestone.
  """
  milestone(id: String!): Milestone!
  """
  All milestones.
  """
  milestones(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): MilestoneConnection!
  """
  One specific notification.
  """
  notification(id: String!): Notification!
  """
  One specific notification subscription.
  """
  notificationSubscription(id: String!): NotificationSubscription!
  """
  The user's notification subscriptions.
  """
  notificationSubscriptions(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): NotificationSubscriptionConnection!
  """
  All notifications.
  """
  notifications(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): NotificationConnection!
  """
  The user's organization.
  """
  organization: Organization!
  """
  Does the organization exist.
  """
  organizationExists(urlKey: String!): OrganizationExistsPayload!
  """
  One specific organization invite.
  """
  organizationInvite(id: String!): IssueLabel!
  """
  All invites for the organization.
  """
  organizationInvites(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): OrganizationInviteConnection!
  """
  One specific project.
  """
  project(id: String!): Project!
  """
  One specific project link.
  """
  projectLink(id: String!): ProjectLink!
  """
  All links for the project.
  """
  projectLinks(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): ProjectLinkConnection!
  """
  All projects.
  """
  projects(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): ProjectConnection!
  """
  Sends a test push message.
  """
  pushSubscriptionTest: PushSubscriptionTestPayload!
  """
  A specific reaction.
  """
  reaction(
    """
    The identifier to retrieve.
    """
    id: String!
  ): Reaction!
  """
  All comment emoji reactions.
  """
  reactions(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): ReactionConnection!
  """
  [Internal] Search in Linear. This query is for internal purposes only and is subject to change without notice.
  """
  search(
    """
    From which result index number to load results.
    """
    from: Int
    """
    Search string to look for.
    """
    term: String!
  ): SearchResultPayload!
  """
  Fetch SSO login URL for the email provided.
  """
  ssoUrlFromEmail(
    """
    Email to query the SSO login URL by.
    """
    email: String!
    """
    Whether the client is the desktop app.
    """
    isDesktop: Boolean
  ): SsoUrlFromEmailResponse!
  """
  The organization's subscription.
  """
  subscription: Subscription
  """
  [Internal] Fetch data to catch up the client to the state of the world.
  """
  syncBootstrap(
    """
    If defined, only models of the given type will be loaded.
    """
    onlyModels: [String!]
    """
    If defined, only models for the given sync groups will be loaded.
    """
    syncGroups: [String!]
  ): SyncResponse!
  """
  [Internal] Fetches delta sync packets.
  """
  syncDelta(
    """
    The last sync id the client has seen.
    """
    lastSyncId: Int!
    """
    After which update to start, used for pagination.
    """
    offset: Int
    """
    Up until which sync id to load data for.
    """
    toSyncId: Int!
  ): SyncDeltaResponse!
  """
  One specific team.
  """
  team(id: String!): Team!
  """
  One specific team membership.
  """
  teamMembership(id: String!): TeamMembership!
  """
  All team memberships.
  """
  teamMemberships(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): TeamMembershipConnection!
  """
  All teams.
  """
  teams(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): TeamConnection!
  """
  A specific template.
  """
  template(
    """
    The identifier of the template to retrieve.
    """
    id: String!
  ): Template!
  """
  All templates from all users.
  """
  templates: [Template!]!
  """
  One specific user.
  """
  user(
    """
    The identifier of the user to retrieve. To retrieve the authenticated user, use `viewer` query.
    """
    id: String!
  ): User!
  """
  The user's settings.
  """
  userSettings: UserSettings!
  """
  All users for the organization.
  """
  users(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    Should query return disabled/suspended users (default: false).
    """
    includeDisabled: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): UserConnection!
  """
  The currently authenticated user.
  """
  viewer: User!
  """
  A specific webhook.
  """
  webhook(
    """
    The identifier of the webhook to retrieve.
    """
    id: String!
  ): Webhook!
  """
  All webhooks.
  """
  webhooks(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): WebhookConnection!
  """
  One specific state.
  """
  workflowState(id: String!): WorkflowState!
  """
  All issue workflow states.
  """
  workflowStates(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): WorkflowStateConnection!
}

"""
A reaction associated with a comment.
"""
type Reaction implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The comment that the reaction is associated with.
  """
  comment: Comment!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  Name of the reaction's emoji.
  """
  emoji: String!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  The user who reacted.
  """
  user: User!
}

type ReactionConnection {
  edges: [ReactionEdge!]!
  nodes: [Reaction!]!
  pageInfo: PageInfo!
}

input ReactionCreateInput {
  """
  The comment to associate the reaction with.
  """
  commentId: String!
  """
  The emoji the user reacted with.
  """
  emoji: String
  """
  The identifier. If none is provided, the backend will generate one
  """
  id: String
}

type ReactionEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: Reaction!
}

type ReactionPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  reaction: Reaction!
  success: Boolean!
}

type RotateSecretPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

"""
The integration resource's settings
"""
type SamlConfiguration {
  """
  List of allowed email domains for SAML authentication.
  """
  allowedDomains: [String!]
  """
  Binding method for authentication call. Can be either `post` (default) or `redirect`.
  """
  ssoBinding: String
  """
  Sign in endpoint URL for the identity provider.
  """
  ssoEndpoint: String
  """
  The algorithm of the Signing Certificate. Can be one of `sha1`, `sha256` (default), or `sha512`.
  """
  ssoSignAlgo: String
  """
  X.509 Signing Certificate in string form.
  """
  ssoSigningCert: String
}

input SamlConfigurationInput {
  """
  List of allowed email domains for SAML authentication.
  """
  allowedDomains: [String!]
  """
  Binding method for authentication call. Can be either `post` (default) or `redirect`.
  """
  ssoBinding: String
  """
  Sign in endpoint URL for the identity provider.
  """
  ssoEndpoint: String
  """
  The algorithm of the Signing Certificate. Can be one of `sha1`, `sha256` (default), or `sha512`.
  """
  ssoSignAlgo: String
  """
  X.509 Signing Certificate in string form.
  """
  ssoSigningCert: String
}

type SearchResultPayload {
  """
  Archived issues matching the search term along with all their dependencies.
  """
  archivePayload: ArchiveResponse!
  """
  Active issue IDs returned matching the search term.
  """
  issueIds: [String!]!
  """
  Total number of search results.
  """
  totalCount: Int!
}

"""
Sentry issue data
"""
type SentryIssuePayload {
  """
  The Sentry identifier of the actor who created the issue.
  """
  actorId: Float!
  """
  The name of the Sentry actor who created this issue.
  """
  actorName: String!
  """
  The type of the actor who created the issue.
  """
  actorType: String!
  """
  The date this issue was first seen.
  """
  firstSeen: String!
  """
  The name of the first release version this issue appeared on, if available.
  """
  firstVersion: String
  """
  The Sentry identifier for the issue.
  """
  issueId: String!
  """
  The title of the issue.
  """
  issueTitle: String!
  """
  The Sentry identifier of the project this issue belongs to.
  """
  projectId: Float!
  """
  The slug of the project this issue belongs to.
  """
  projectSlug: String!
  """
  The shortId of the issue.
  """
  shortId: String!
  """
  The description of the issue.
  """
  webUrl: String!
}

"""
Sentry specific settings.
"""
type SentrySettings {
  """
  The slug of the Sentry organization being connected.
  """
  organizationSlug: String!
}

"""
Slack notification specific settings.
"""
type SlackPostSettings {
  channel: String!
  channelId: String!
  configurationUrl: String!
}

type SsoUrlFromEmailResponse {
  """
  SAML SSO sign-in URL.
  """
  samlSsoUrl: String!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

type StepsResponse {
  """
  List of client IDs for the document steps.
  """
  clientIds: [String!]!
  """
  New document steps from the client.
  """
  steps: [JSON!]
  """
  Client's document version.
  """
  version: Int!
}

"""
The subscription of an organization.
"""
type Subscription implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The date the subscription was canceled, if any.
  """
  canceledAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The creator of the subscription.
  """
  creator: User
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The date the subscription will be billed next.
  """
  nextBillingAt: DateTime
  """
  The organization that the subscription is associated with.
  """
  organization: Organization!
  """
  The subscription type of a pending change. Null if no change pending.
  """
  pendingChangeType: String
  """
  The number of seats in the subscription.
  """
  seats: Float!
  """
  The subscription type.
  """
  type: String!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
}

type SubscriptionPayload {
  """
  The date the subscription was set to cancel at the end of the billing period, if any.
  """
  canceledAt: DateTime
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The subscription entity being mutated.
  """
  subscription: Subscription!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

type SubscriptionSessionPayload {
  """
  The subscription session that was created or updated.
  """
  session: String
}

input SubscriptionUpdateInput {
  """
  The date the subscription was set to cancel, if any.
  """
  canceledAt: DateTime
  """
  The subscription type of a pending change. Null if no change pending.
  """
  pendingChangeType: String
}

"""
Contains a delta sync.
"""
type SyncDeltaResponse {
  """
  Whether the client should try loading more.
  """
  loadMore: Boolean!
  """
  Whether loading the delta was successful. In case it wasn't, the client is instructed to do a full bootstrap.
  """
  success: Boolean!
  """
  A JSON serialized collection of delta packets.
  """
  updates: String
}

"""
Contains either the full serialized state of the application or delta packets that the requester can
  apply to the local data set in order to be up-to-date.
"""
type SyncResponse {
  """
  The version of the remote database. Incremented by 1 for each migration run on the database.
  """
  databaseVersion: Float!
  """
  JSON serialized delta changes that the client can apply to its local state
      in order to catch up with the state of the world.
  """
  delta: String
  """
  The last sync id covered by the response.
  """
  lastSyncId: Float!
  """
  The full state of the organization as a serialized JSON object.
      Mutually exclusive with the delta property
  """
  state: String
  """
  The sync groups that the user is subscribed to.
  """
  subscribedSyncGroups: [String!]!
}

type SynchronizedPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
}

"""
An organizational unit that contains issues.
"""
type Team implements Node {
  """
  Team's currently active cycle.
  """
  activeCycle: Cycle
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  Period after which automatically closed and completed issues are automatically archived in months. Null/undefined means disabled.
  """
  autoArchivePeriod: Float
  """
  Period after which issues are automatically closed in months. Null/undefined means disabled.
  """
  autoClosePeriod: Float
  """
  The canceled workflow state which auto closed issues will be set to. Defaults to the first canceled state.
  """
  autoCloseStateId: String
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  Calender feed (iCal) for cycles.
  """
  cycleCalenderUrl: String!
  """
  The cooldown time after each cycle in weeks.
  """
  cycleCooldownTime: Float!
  """
  The duration of a cycle in weeks.
  """
  cycleDuration: Float!
  """
  Auto assign completed issues to current cycle.
  """
  cycleIssueAutoAssignCompleted: Boolean!
  """
  Auto assign started issues to current cycle.
  """
  cycleIssueAutoAssignStarted: Boolean!
  """
  Only allow issues issues with cycles in Active Issues.
  """
  cycleLockToActive: Boolean!
  """
  The day of the week that a new cycle starts.
  """
  cycleStartDay: Float!
  """
  Cycles associated with the team.
  """
  cycles(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): CycleConnection!
  """
  Whether the team uses cycles.
  """
  cyclesEnabled: Boolean!
  """
  What to use as an default estimate for unestimated issues.
  """
  defaultIssueEstimate: Float!
  """
  The default workflow state into which issues are set when they are opened by team members.
  """
  defaultIssueState: WorkflowState
  """
  The default template to use for new issues created by members of the team.
  """
  defaultTemplateForMembersId: String
  """
  The default template to use for new issues created by non-members of the team.
  """
  defaultTemplateForNonMembersId: String
  """
  The team's description.
  """
  description: String
  """
  The workflow state into which issues are moved when a PR has been opened as draft.
  """
  draftWorkflowState: WorkflowState
  """
  Whether to group recent issue history entries.
  """
  groupIssueHistory: Boolean!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  Unique hash for the team to be used in invite URLs.
  """
  inviteHash: String!
  """
  Whether to allow zeros in issues estimates.
  """
  issueEstimationAllowZero: Boolean!
  """
  Whether to add additional points to the estimate scale.
  """
  issueEstimationExtended: Boolean!
  """
  The issue estimation type to use.
  """
  issueEstimationType: String!
  """
  Whether issues without priority should be sorted first.
  """
  issueOrderingNoPriorityFirst: Boolean!
  """
  Issues associated with the team.
  """
  issues(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueConnection!
  """
  The team's unique key. The key is used in URLs.
  """
  key: String!
  """
  Labels associated with the team.
  """
  labels(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueLabelConnection!
  """
  The workflow state into which issues are moved when they are marked as a duplicate of another issue. Defaults to the first canceled state.
  """
  markedAsDuplicateWorkflowState: WorkflowState
  """
  Users who are members of this team.
  """
  members(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    Should query return disabled/suspended users (default: false).
    """
    includeDisabled: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): UserConnection!
  """
  Memberships associated with the team. For easier access of the same data, use `members` query.
  """
  memberships(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): TeamMembershipConnection!
  """
  The workflow state into which issues are moved when a PR has been merged.
  """
  mergeWorkflowState: WorkflowState
  """
  The team's name.
  """
  name: String!
  """
  The organization that the team is associated with.
  """
  organization: Organization!
  """
  Whether the team is private or not.
  """
  private: Boolean!
  """
  Projects associated with the team.
  """
  projects(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): ProjectConnection!
  """
  The workflow state into which issues are moved when a review has been requested for the PR.
  """
  reviewWorkflowState: WorkflowState
  """
  Whether to send new issue comment notifications to Slack.
  """
  slackIssueComments: Boolean!
  """
  Whether to send new issue status updates to Slack.
  """
  slackIssueStatuses: Boolean!
  """
  Whether to send new issue notifications to Slack.
  """
  slackNewIssue: Boolean!
  """
  The workflow state into which issues are moved when a PR has been opened.
  """
  startWorkflowState: WorkflowState
  """
  The states that define the workflow associated with the team.
  """
  states(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): WorkflowStateConnection!
  """
  Templates associated with the team.
  """
  templates(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): TemplateConnection!
  """
  The timezone of the team. Defaults to "America/Los_Angeles"
  """
  timezone: String!
  """
  Whether triage mode is enabled for the team or not.
  """
  triageEnabled: Boolean!
  """
  The workflow state into which issues are set when they are opened by non-team members or integrations if triage is enabled.
  """
  triageIssueState: WorkflowState
  """
  How many upcoming cycles to create.
  """
  upcomingCycleCount: Float!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  Webhooks associated with the team.
  """
  webhooks(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): WebhookConnection!
}

type TeamConnection {
  edges: [TeamEdge!]!
  nodes: [Team!]!
  pageInfo: PageInfo!
}

input TeamCreateInput {
  """
  Period after which closed and completed issues are automatically archived, in months. 0 means disabled.
  """
  autoArchivePeriod: Float
  """
  Period after which issues are automatically closed, in months.
  """
  autoClosePeriod: Float
  """
  The canceled workflow state which auto closed issues will be set to.
  """
  autoCloseStateId: String
  """
  The cooldown time after each cycle in weeks.
  """
  cycleCooldownTime: Int
  """
  The duration of each cycle in weeks.
  """
  cycleDuration: Int
  """
  Auto assign completed issues to current active cycle setting.
  """
  cycleIssueAutoAssignCompleted: Boolean
  """
  Auto assign started issues to current active cycle setting.
  """
  cycleIssueAutoAssignStarted: Boolean
  """
  Only allow issues issues with cycles in Active Issues.
  """
  cycleLockToActive: Boolean
  """
  The day of the week that a new cycle starts.
  """
  cycleStartDay: Float
  """
  Whether the team uses cycles.
  """
  cyclesEnabled: Boolean
  """
  What to use as an default estimate for unestimated issues.
  """
  defaultIssueEstimate: Float
  """
  The identifier of the default template for members of this team.
  """
  defaultTemplateForMembersId: String
  """
  The identifier of the default template for non-members of this team.
  """
  defaultTemplateForNonMembersId: String
  """
  The description of the team.
  """
  description: String
  """
  Whether to group recent issue history entries.
  """
  groupIssueHistory: Boolean
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  Whether to allow zeros in issues estimates.
  """
  issueEstimationAllowZero: Boolean
  """
  Whether to add additional points to the estimate scale.
  """
  issueEstimationExtended: Boolean
  """
  The issue estimation type to use.
  """
  issueEstimationType: String
  """
  Whether issues without priority should be sorted first.
  """
  issueOrderingNoPriorityFirst: Boolean
  """
  The key of the team. If not given, the key will be generated based on the name of the team.
  """
  key: String
  """
  The workflow state into which issues are moved when they are marked as a duplicate of another issue.
  """
  markedAsDuplicateWorkflowStateId: String
  """
  The name of the team.
  """
  name: String!
  """
  The organization associated with the team.
  """
  organizationId: String
  """
  Internal. Whether the team is private or not.
  """
  private: Boolean
  """
  The timezone of the team.
  """
  timezone: String
  """
  Whether triage mode is enabled for the team.
  """
  triageEnabled: Boolean
  """
  How many upcoming cycles to create.
  """
  upcomingCycleCount: Float
}

type TeamEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: Team!
}

"""
Defines the membership of a user to a team.
"""
type TeamMembership implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  Whether the user is the owner of the team
  """
  owner: Boolean
  """
  The team that the membership is associated with.
  """
  team: Team!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  The user that the membership is associated with.
  """
  user: User!
}

type TeamMembershipConnection {
  edges: [TeamMembershipEdge!]!
  nodes: [TeamMembership!]!
  pageInfo: PageInfo!
}

input TeamMembershipCreateInput {
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  Internal. Whether the user is the owner of the team.
  """
  owner: Boolean
  """
  The identifier of the team associated with the membership.
  """
  teamId: String!
  """
  The identifier of the user associated with the membership.
  """
  userId: String!
}

type TeamMembershipEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: TeamMembership!
}

type TeamMembershipPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
  """
  The team membership that was created or updated.
  """
  teamMembership: TeamMembership
}

input TeamMembershipUpdateInput {
  """
  Internal. Whether the user is the owner of the team.
  """
  owner: Boolean!
}

type TeamPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
  """
  The team that was created or updated.
  """
  team: Team
}

input TeamUpdateInput {
  """
  Period after which closed and completed issues are automatically archived, in months.
  """
  autoArchivePeriod: Float
  """
  Period after which issues are automatically closed, in months.
  """
  autoClosePeriod: Float
  """
  The canceled workflow state which auto closed issues will be set to.
  """
  autoCloseStateId: String
  """
  The cooldown time after each cycle in weeks.
  """
  cycleCooldownTime: Int
  """
  The duration of each cycle in weeks.
  """
  cycleDuration: Int
  """
  Auto assign completed issues to current active cycle setting.
  """
  cycleIssueAutoAssignCompleted: Boolean
  """
  Auto assign started issues to current active cycle setting.
  """
  cycleIssueAutoAssignStarted: Boolean
  """
  Only allow issues with cycles in Active Issues.
  """
  cycleLockToActive: Boolean
  """
  The day of the week that a new cycle starts.
  """
  cycleStartDay: Float
  """
  Whether the team uses cycles.
  """
  cyclesEnabled: Boolean
  """
  What to use as an default estimate for unestimated issues.
  """
  defaultIssueEstimate: Float
  """
  Default status for newly created issues.
  """
  defaultIssueStateId: String
  """
  The identifier of the default template for members of this team.
  """
  defaultTemplateForMembersId: String
  """
  The identifier of the default template for non-members of this team.
  """
  defaultTemplateForNonMembersId: String
  """
  The description of the team.
  """
  description: String
  """
  The workflow state into which issues are moved when a draft PR has been opened.
  """
  draftWorkflowStateId: String
  """
  Whether to group recent issue history entries.
  """
  groupIssueHistory: Boolean
  """
  Whether to allow zeros in issues estimates.
  """
  issueEstimationAllowZero: Boolean
  """
  Whether to add additional points to the estimate scale.
  """
  issueEstimationExtended: Boolean
  """
  The issue estimation type to use.
  """
  issueEstimationType: String
  """
  Whether issues without priority should be sorted first.
  """
  issueOrderingNoPriorityFirst: Boolean
  """
  The key of the team.
  """
  key: String
  """
  The workflow state into which issues are moved when they are marked as a duplicate of another issue.
  """
  markedAsDuplicateWorkflowStateId: String
  """
  The workflow state into which issues are moved when a PR has been merged.
  """
  mergeWorkflowStateId: String
  """
  The name of the team.
  """
  name: String
  """
  Whether the team is private or not.
  """
  private: Boolean
  """
  The workflow state into which issues are moved when a review has been requested for the PR.
  """
  reviewWorkflowStateId: String
  """
  Whether to send new issue comment notifications to Slack.
  """
  slackIssueComments: Boolean
  """
  Whether to send issue status update notifications to Slack.
  """
  slackIssueStatuses: Boolean
  """
  Whether to send new issue notifications to Slack.
  """
  slackNewIssue: Boolean
  """
  The workflow state into which issues are moved when a PR has been opened.
  """
  startWorkflowStateId: String
  """
  The timezone of the team.
  """
  timezone: String
  """
  Whether triage mode is enabled for the team.
  """
  triageEnabled: Boolean
  """
  How many upcoming cycles to create.
  """
  upcomingCycleCount: Float
}

"""
A template object used for creating new issues faster.
"""
type Template implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The user who created the template.
  """
  creator: User
  """
  Template description.
  """
  description: String
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The name of the template.
  """
  name: String!
  """
  The team that the template is associated with.
  """
  team: Team!
  """
  Template data.
  """
  templateData: JSON!
  """
  The entity type this template is for.
  """
  type: String!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
}

type TemplateConnection {
  edges: [TemplateEdge!]!
  nodes: [Template!]!
  pageInfo: PageInfo!
}

input TemplateCreateInput {
  """
  The template description.
  """
  description: String
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  The template name.
  """
  name: String!
  """
  The identifier or key of the team associated with the template.
  """
  teamId: String!
  """
  The template data as JSON encoded attributes of the type of entity, such as an issue.
  """
  templateData: JSON!
  """
  The template type, e.g. 'issue'.
  """
  type: String!
}

type TemplateEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: Template!
}

type TemplatePayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
  """
  The template that was created or updated.
  """
  template: Template!
}

input TemplateUpdateInput {
  """
  The template description.
  """
  description: String
  """
  The template name.
  """
  name: String
  """
  The template data as JSON encoded attributes of the type of entity, such as an issue.
  """
  templateData: JSON
}

"""
The `TimelessDateScalar` scalar type represents Date values without a timestamp. It expects strings in the format YYYY-MM-DD
"""
scalar TimelessDateScalar

input TokenUserAccountAuthInput {
  """
  The email which to login via the magic login code.
  """
  email: String!
  """
  The identifiers of the teams to auto-join.
  """
  teamIdsToJoin: [String!]
  """
  The timezone of the user's browser.
  """
  timezone: String!
  """
  The magic login code.
  """
  token: String!
}

"""
How trashed models should be loaded.
"""
enum TrashOptionType {
  excludeTrash
  includeTrash
  trashOnly
}

input UpdateOrganizationInput {
  """
  List of services that are allowed to be used for login.
  """
  allowedAuthServices: [String!]
  """
  How git branches are formatted. If null, default formatting will be used.
  """
  gitBranchFormat: String
  """
  Whether the Git integration linkback messages should be sent for private repositories.
  """
  gitLinkbackMessagesEnabled: Boolean
  """
  Whether the Git integration linkback messages should be sent for public repositories.
  """
  gitPublicLinkbackMessagesEnabled: Boolean
  """
  Linear Preview feature flags
  """
  linearPreviewFlags: JSONObject
  """
  The logo of the organization.
  """
  logoUrl: String
  """
  The name of the organization.
  """
  name: String
  """
  Whether the organization is using project milestones.
  """
  roadmapEnabled: Boolean
  """
  The URL key of the organization.
  """
  urlKey: String
}

input UpdateUserInput {
  """
  Whether the user account is active.
  """
  active: Boolean
  """
  Whether the user account has admin privileges.
  """
  admin: Boolean
  """
  The avatar image URL of the user.
  """
  avatarUrl: String
  """
  Reason for deactivation.
  """
  disableReason: String
  """
  The display name of the user.
  """
  displayName: String
  """
  The name of the user.
  """
  name: String
}

"""
Object representing Google Cloud upload policy, plus additional data.
"""
type UploadFile {
  """
  The asset URL for the uploaded file. (assigned automatically)
  """
  assetUrl: String!
  """
  The content type.
  """
  contentType: String!
  """
  The filename.
  """
  filename: String!
  headers: [UploadFileHeader!]!
  metaData: JSON
  """
  The size of the uploaded file.
  """
  size: Int!
  """
  The signed URL the for the uploaded file. (assigned automatically)
  """
  uploadUrl: String!
}

type UploadFileHeader {
  """
  Upload file header key.
  """
  key: String!
  """
  Upload file header value.
  """
  value: String!
}

type UploadPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
  """
  Object describing the file to be uploaded.
  """
  uploadFile: UploadFile
}

"""
A user that has access to the the resources of an organization.
"""
type User implements Node {
  """
  Whether the user account is active or disabled (suspended).
  """
  active: Boolean!
  """
  Whether the user is an organization administrator.
  """
  admin: Boolean!
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  Issues assigned to the user.
  """
  assignedIssues(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueConnection!
  """
  An URL to the user's avatar image.
  """
  avatarUrl: String
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  Number of issues created.
  """
  createdIssueCount: Int!
  """
  Issues created by the user.
  """
  createdIssues(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueConnection!
  """
  Reason why is the account disabled.
  """
  disableReason: String
  """
  The user's display (nick) name. Unique within each organization.
  """
  displayName: String!
  """
  The user's email address.
  """
  email: String!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  Unique hash for the user to be used in invite URLs.
  """
  inviteHash: String!
  """
  The last time the user was seen online. If null, the user is currently online.
  """
  lastSeen: DateTime
  """
  The user's full name.
  """
  name: String!
  """
  Organization in which the user belongs to.
  """
  organization: Organization!
  """
  Memberships associated with the user. For easier access of the same data, use `teams` query.
  """
  teamMemberships(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): TeamMembershipConnection!
  """
  Teams the user is part of.
  """
  teams(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): TeamConnection!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  User's profile URL.
  """
  url: String!
}

"""
A user account.
"""
type UserAccount {
  """
  The time at which the model was archived.
  """
  archivedAt: DateTime
  """
  The time at which the model was created.
  """
  createdAt: DateTime!
  """
  The user's email address.
  """
  email: String!
  """
  The models identifier.
  """
  id: ID!
  """
  The user's name.
  """
  name: String
  """
  The authentication service used to create the account.
  """
  service: String!
  """
  The time at which the model was updated.
  """
  updatedAt: DateTime!
  """
  Users belonging to the account.
  """
  users: [User!]!
}

type UserAdminPayload {
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

"""
Public information of the OAuth application, plus whether the application has been authorized for the given scopes.
"""
type UserAuthorizedApplication {
  """
  OAuth application's client ID.
  """
  clientId: String!
  """
  Whether the application was created by Linear
  """
  createdByLinear: Boolean!
  """
  Information about the application.
  """
  description: String
  """
  Name of the developer.
  """
  developer: String!
  """
  Url of the developer (homepage or docs).
  """
  developerUrl: String!
  """
  Image of the application.
  """
  imageUrl: String
  """
  Whether the user has authorized the application for the given scopes.
  """
  isAuthorized: Boolean!
  """
  Application name.
  """
  name: String!
}

type UserConnection {
  edges: [UserEdge!]!
  nodes: [User!]!
  pageInfo: PageInfo!
}

type UserEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: User!
}

"""
The types of flags that the user can have.
"""
enum UserFlagType {
  analyticsWelcomeDismissed
  canPlaySnake
  completedOnboarding
  cycleWelcomeDismissed
  desktopDownloadToastDismissed
  desktopInstalled
  dueDateShortcutMigration
  emptyActiveIssuesDismissed
  emptyBacklogDismissed
  emptyCustomViewsDismissed
  emptyMyIssuesDismissed
  figmaPromptDismissed
  importBannerDismissed
  listSelectionTip
  migrateThemePreference
  projectWelcomeDismissed
  triageWelcomeDismissed
}

"""
Operations that can be applied to UserFlagType
"""
enum UserFlagUpdateOperation {
  clear
  decr
  incr
  lock
}

type UserPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
  """
  The user that was created or updated.
  """
  user: User
}

"""
The settings of a user as a JSON object.
"""
type UserSettings implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The notification channel settings the user has selected.
  """
  notificationPreferences: JSONObject!
  """
  The email types the user has unsubscribed from.
  """
  unsubscribedFrom: [String!]!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  The user associated with these settings.
  """
  user: User!
}

type UserSettingsFlagPayload {
  """
  The flag key which was updated.
  """
  flag: String!
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
  """
  The flag value after update.
  """
  value: Int!
}

type UserSettingsFlagsResetPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

type UserSettingsPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
  """
  The user's settings.
  """
  userSettings: UserSettings!
}

input UserSettingsUpdateInput {
  """
  The user's notification preferences.
  """
  notificationPreferences: JSONObject
  """
  The user's settings.
  """
  settings: String
  """
  The types of emails the user has unsubscribed from.
  """
  unsubscribedFrom: [String!]
}

type UserSubscribeToNewsletterPayload {
  """
  Whether the operation was successful.
  """
  success: Boolean!
}

"""
View preferences.
"""
type ViewPreferences implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The view preference type.
  """
  type: String!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  The view type.
  """
  viewType: String!
}

input ViewPreferencesCreateInput {
  """
  The custom view these view preferences are associated with.
  """
  customViewId: String
  """
  The cycle these view preferences are associated with.
  """
  cycleId: String
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  The label these view preferences are associated with.
  """
  labelId: String
  """
  View preferences object.
  """
  preferences: JSONObject!
  """
  The project these view preferences are associated with.
  """
  projectId: String
  """
  The team these view preferences are associated with.
  """
  teamId: String
  """
  The type of view preferences (either user or organization level preferences).
  """
  type: ViewPreferencesType!
  """
  The user profile these view preferences are associated with.
  """
  userId: String
  """
  The view type of the view preferences are associated with.
  """
  viewType: ViewType!
}

type ViewPreferencesPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
  """
  The view preferences entity being mutated.
  """
  viewPreferences: ViewPreferences!
}

"""
The type of view preferences (either user or organization level preferences).
"""
enum ViewPreferencesType {
  organization
  user
}

input ViewPreferencesUpdateInput {
  """
  View preferences.
  """
  preferences: JSONObject!
}

"""
The client view this custom view is targeting.
"""
enum ViewType {
  activeIssues
  allIssues
  backlog
  board
  completedCycle
  customView
  cycle
  inbox
  label
  myIssues
  project
  projects
  roadmap
  triage
  userProfile
}

"""
A webhook used to send HTTP notifications over data updates
"""
type Webhook implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The user who created the webhook.
  """
  creator: User
  """
  Whether the Webhook is enabled.
  """
  enabled: Boolean!
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  Webhook label
  """
  label: String!
  """
  The resource types this webhook is subscribed to.
  """
  resourceTypes: [String!]!
  """
  Secret token for verifying the origin on the recipient side.
  """
  secret: String
  """
  The team that the webhook is associated with.
  """
  team: Team!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  Webhook URL
  """
  url: String!
}

type WebhookConnection {
  edges: [WebhookEdge!]!
  nodes: [Webhook!]!
  pageInfo: PageInfo!
}

input WebhookCreateInput {
  """
  Whether this webhook is enabled.
  """
  enabled: Boolean = true
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  Label for the webhook.
  """
  label: String
  """
  List of resources the webhook should subscribe to.
  """
  resourceTypes: [String!]!
  """
  An optional secret token used to sign the webhook payload.
  """
  secret: String
  """
  The identifier or key of the team associated with the Webhook.
  """
  teamId: String!
  """
  The URL that will be called on data changes.
  """
  url: String!
}

type WebhookEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: Webhook!
}

type WebhookPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
  """
  The webhook entity being mutated.
  """
  webhook: Webhook!
}

input WebhookUpdateInput {
  """
  Whether this webhook is enabled.
  """
  enabled: Boolean
  """
  Label for the webhook.
  """
  label: String
  """
  List of resources the webhook should subscribe to.
  """
  resourceTypes: [String!]
  """
  An optional secret token used to sign the Webhook payload.
  """
  secret: String
  """
  The URL that will be called on data changes.
  """
  url: String
}

"""
A state in a team workflow.
"""
type WorkflowState implements Node {
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The state's UI color as a HEX string.
  """
  color: String!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  Description of the state.
  """
  description: String
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  Issues belonging in this state.
  """
  issues(
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueConnection!
  """
  The state's name.
  """
  name: String!
  """
  The position of the state in the team flow.
  """
  position: Float!
  """
  The team to which this state belongs to.
  """
  team: Team!
  """
  The type of the state.
  """
  type: String!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
}

type WorkflowStateConnection {
  edges: [WorkflowStateEdge!]!
  nodes: [WorkflowState!]!
  pageInfo: PageInfo!
}

input WorkflowStateCreateInput {
  """
  The color of the state.
  """
  color: String!
  """
  The description of the state.
  """
  description: String
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  The name of the state.
  """
  name: String!
  """
  The position of the state.
  """
  position: Float
  """
  The team associated with the state.
  """
  teamId: String!
  """
  The workflow type.
  """
  type: String!
}

type WorkflowStateEdge {
  """
  Used in `before` and `after` args
  """
  cursor: String!
  node: WorkflowState!
}

type WorkflowStatePayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
  """
  The state that was created or updated.
  """
  workflowState: WorkflowState!
}

input WorkflowStateUpdateInput {
  """
  The color of the state.
  """
  color: String
  """
  The description of the state.
  """
  description: String
  """
  The name of the state.
  """
  name: String
  """
  The position of the state.
  """
  position: Float
}

"""
Zendesk specific settings.
"""
type ZendeskSettings {
  """
  The ID of the Linear bot user.
  """
  botUserId: String!
  """
  The subdomain of the Zendesk organization being connected.
  """
  subdomain: String!
  """
  The URL of the connected Zendesk organization.
  """
  url: String!
}
