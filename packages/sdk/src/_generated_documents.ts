import { TypedDocumentNode as DocumentNode } from "@graphql-typed-document-node/core";
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** Represents a date and time in ISO 8601 format. Accepts shortcuts like `2021` to represent midnight Fri Jan 01 2021. Also accepts ISO 8601 durations strings which are added to the current date to create the represented date (e.g '-P2W1D' represents the date that was two weeks and 1 day ago) */
  DateTime: Date;
  /** Represents a date and time in ISO 8601 format. Accepts shortcuts like `2021` to represent midnight Fri Jan 01 2021. Also accepts ISO 8601 durations strings which are added to the current date to create the represented date (e.g '-P2W1D' represents the date that was two weeks and 1 day ago) */
  DateTimeOrDuration: Date | string;
  /** Represents a duration in ISO 8601 format. Accepts ISO 8601 duration strings or integers in milliseconds. */
  Duration: any;
  /** An issue assignment notification type. */
  IssueAssignedToYouNotificationType: "issueAssignedToYou";
  /** An issue comment mention notification type. */
  IssueCommentMentionNotificationType: "issueCommentMention";
  /** An issue comment reaction notification type. */
  IssueCommentReactionNotificationType: "issueCommentReaction";
  /** An issue emoji reaction notification type. */
  IssueEmojiReactionNotificationType: "issueEmojiReaction";
  /** An issue mention notification type. */
  IssueMentionNotificationType: "issueMention";
  /** An issue new comment notification type. */
  IssueNewCommentNotificationType: "issueNewComment";
  /** An issue status changed notification type. */
  IssueStatusChangedNotificationType: "issueStatusChanged";
  /** An issue unassignment notification type. */
  IssueUnassignedFromYouNotificationType: "issueUnassignedFromYou";
  /** The `JSON` scalar type represents arbitrary values as *stringified* JSON */
  JSON: Record<string, unknown>;
  /** The `JSONObject` scalar type represents arbitrary values as *embedded* JSON */
  JSONObject: any;
  /** Represents a date in ISO 8601 format. Accepts shortcuts like `2021` to represent midnight Fri Jan 01 2021. Also accepts ISO 8601 durations strings which are added to the current date to create the represented date (e.g '-P2W1D' represents the date that was two weeks and 1 day ago) */
  TimelessDate: any;
  /** Represents a date in ISO 8601 format or a duration. Accepts shortcuts like `2021` to represent midnight Fri Jan 01 2021. Also accepts ISO 8601 durations strings (e.g '-P2W1D'), which are not converted to dates. */
  TimelessDateOrDuration: any;
  /** A universally unique identifier as specified by RFC 4122. */
  UUID: any;
};

/** A bot actor is an actor that is not a user, but an application or integration. */
export type ActorBot = {
  __typename?: "ActorBot";
  /** A url pointing to the avatar representing this bot. */
  avatarUrl?: Maybe<Scalars["String"]>;
  id?: Maybe<Scalars["ID"]>;
  /** The display name of the bot. */
  name?: Maybe<Scalars["String"]>;
  /** The sub type of the bot. */
  subType?: Maybe<Scalars["String"]>;
  /** The type of bot. */
  type: Scalars["String"];
  /** The display name of the external user on behalf of which the bot acted. */
  userDisplayName?: Maybe<Scalars["String"]>;
};

/** An activity within an agent context. */
export type AgentActivity = Node & {
  __typename?: "AgentActivity";
  /** The agent session this activity belongs to. */
  agentSession: AgentSession;
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The content of the activity */
  content: AgentActivityContent;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** An optional modifier that provides additional instructions on how the activity should be interpreted. */
  signal?: Maybe<AgentActivitySignal>;
  /** The comment this activity is linked to. */
  sourceComment?: Maybe<Comment>;
  /** Metadata about the external source that created this agent activity. */
  sourceMetadata?: Maybe<Scalars["JSON"]>;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** The user who created this agent activity. */
  user: User;
};

/** Content for an action activity (tool call or action). */
export type AgentActivityActionContent = {
  __typename?: "AgentActivityActionContent";
  /** The action being performed. */
  action: Scalars["String"];
  /** The parameters for the action, e.g. a file path, a keyword, etc. */
  parameter: Scalars["String"];
  /** The result of the action in Markdown format. */
  result?: Maybe<Scalars["String"]>;
  /** The type of activity. */
  type: AgentActivityType;
};

export type AgentActivityConnection = {
  __typename?: "AgentActivityConnection";
  edges: Array<AgentActivityEdge>;
  nodes: Array<AgentActivity>;
  pageInfo: PageInfo;
};

/** Content for different types of agent activities. */
export type AgentActivityContent =
  | AgentActivityActionContent
  | AgentActivityElicitationContent
  | AgentActivityErrorContent
  | AgentActivityPromptContent
  | AgentActivityResponseContent
  | AgentActivityThoughtContent;

export type AgentActivityCreateInput = {
  /** The agent session this activity belongs to. */
  agentSessionId: Scalars["String"];
  /**
   * The content payload of the agent activity. This object is not strictly typed.
   * See https://linear.app/developers/agents for typing details.
   */
  content: Scalars["JSONObject"];
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** [Internal] An optional modifier that provides additional instructions on how the activity should be interpreted. */
  signal?: Maybe<AgentActivitySignal>;
};

/** [Internal] Input for creating prompt-type agent activities (created by users). */
export type AgentActivityCreatePromptInput = {
  /** The agent session this activity belongs to. */
  agentSessionId: Scalars["String"];
  /** The content payload of the prompt agent activity. */
  content: Scalars["JSONObject"];
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** [Internal] An optional modifier that provides additional instructions on how the activity should be interpreted. */
  signal?: Maybe<AgentActivitySignal>;
  /** The comment that contains the content of this activity. */
  sourceCommentId?: Maybe<Scalars["String"]>;
};

export type AgentActivityEdge = {
  __typename?: "AgentActivityEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: AgentActivity;
};

/** Content for an elicitation activity. */
export type AgentActivityElicitationContent = {
  __typename?: "AgentActivityElicitationContent";
  /** The elicitation message in Markdown format. */
  body: Scalars["String"];
  /** The type of activity. */
  type: AgentActivityType;
};

/** Content for an error activity. */
export type AgentActivityErrorContent = {
  __typename?: "AgentActivityErrorContent";
  /** The error message in Markdown format. */
  body: Scalars["String"];
  /** The type of activity. */
  type: AgentActivityType;
};

/** Agent activity filtering options. */
export type AgentActivityFilter = {
  /** Comparator for the agent session ID. */
  agentSessionId?: Maybe<StringComparator>;
  /** Compound filters, all of which need to be matched by the agent activity. */
  and?: Maybe<Array<AgentActivityFilter>>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Compound filters, one of which need to be matched by the agent activity. */
  or?: Maybe<Array<AgentActivityFilter>>;
  /** Filters that the source comment must satisfy. */
  sourceComment?: Maybe<NullableCommentFilter>;
  /** Comparator for the agent activity's content type. */
  type?: Maybe<StringComparator>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

export type AgentActivityPayload = {
  __typename?: "AgentActivityPayload";
  /** The agent activity that was created or updated. */
  agentActivity: AgentActivity;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** Content for a prompt activity. */
export type AgentActivityPromptContent = {
  __typename?: "AgentActivityPromptContent";
  /** A message requesting additional information or action from user. */
  body: Scalars["String"];
  /** The type of activity. */
  type: AgentActivityType;
};

/** Content for a response activity. */
export type AgentActivityResponseContent = {
  __typename?: "AgentActivityResponseContent";
  /** The response content in Markdown format. */
  body: Scalars["String"];
  /** The type of activity. */
  type: AgentActivityType;
};

/** A modifier that provides additional instructions on how the activity should be interpreted. */
export enum AgentActivitySignal {
  Stop = "stop",
}

/** Content for a thought activity. */
export type AgentActivityThoughtContent = {
  __typename?: "AgentActivityThoughtContent";
  /** The thought content in Markdown format. */
  body: Scalars["String"];
  /** The type of activity. */
  type: AgentActivityType;
};

/** The type of an agent activity. */
export enum AgentActivityType {
  Action = "action",
  Elicitation = "elicitation",
  Error = "error",
  Prompt = "prompt",
  Response = "response",
  Thought = "thought",
}

/** Payload for an agent activity webhook. */
export type AgentActivityWebhookPayload = {
  __typename?: "AgentActivityWebhookPayload";
  /** The ID of the agent session that this activity belongs to. */
  agentSessionId: Scalars["String"];
  /** The time at which the entity was archived. */
  archivedAt?: Maybe<Scalars["String"]>;
  /** The content of the agent activity. */
  content: Scalars["JSONObject"];
  /** The time at which the entity was created. */
  createdAt: Scalars["String"];
  /** The ID of the entity. */
  id: Scalars["String"];
  /** An optional modifier that provides additional instructions on how the activity should be interpreted. */
  signal?: Maybe<Scalars["String"]>;
  /** The time at which the entity was updated. */
  updatedAt: Scalars["String"];
  /** The ID of the user who created this agent activity. */
  userId?: Maybe<Scalars["String"]>;
};

/** A session for agent activities and state management. */
export type AgentSession = Node & {
  __typename?: "AgentSession";
  /** Activities associated with this agent session. */
  activities: AgentActivityConnection;
  /** The agent user that is associated with this agent session. */
  appUser: User;
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The comment this agent session is associated with. */
  comment?: Maybe<Comment>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The user that created this agent session. */
  creator?: Maybe<User>;
  /** The time the agent session ended. */
  endedAt?: Maybe<Scalars["DateTime"]>;
  /** The URL of an external agent-hosted page associated with this session. */
  externalLink?: Maybe<Scalars["String"]>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The issue this agent session is associated with. */
  issue?: Maybe<Issue>;
  /** Metadata about the external source that created this agent session. */
  sourceMetadata?: Maybe<Scalars["JSON"]>;
  /** The time the agent session started. */
  startedAt?: Maybe<Scalars["DateTime"]>;
  /** The current status of the agent session. */
  status: AgentSessionStatus;
  /** A summary of the activities in this session. */
  summary?: Maybe<Scalars["String"]>;
  /** The type of the agent session. */
  type: AgentSessionType;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

/** A session for agent activities and state management. */
export type AgentSessionActivitiesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<AgentActivityFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type AgentSessionConnection = {
  __typename?: "AgentSessionConnection";
  edges: Array<AgentSessionEdge>;
  nodes: Array<AgentSession>;
  pageInfo: PageInfo;
};

export type AgentSessionEdge = {
  __typename?: "AgentSessionEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: AgentSession;
};

/** Payload for agent session webhook events. */
export type AgentSessionEventWebhookPayload = {
  __typename?: "AgentSessionEventWebhookPayload";
  /** The type of action that triggered the webhook. */
  action: Scalars["String"];
  /** The agent activity that was created. */
  agentActivity?: Maybe<AgentActivityWebhookPayload>;
  /** The agent session that the event belongs to. */
  agentSession: AgentSessionWebhookPayload;
  /** ID of the app user the agent session belongs to. */
  appUserId: Scalars["String"];
  /** The time the payload was created. */
  createdAt: Scalars["DateTime"];
  /** ID of the OAuth client the app user is tied to. */
  oauthClientId: Scalars["String"];
  /** ID of the organization for which the webhook belongs to. */
  organizationId: Scalars["String"];
  /** The previous comments in the thread before this agent was mentioned and the session was initiated, if any. */
  previousComments?: Maybe<Array<CommentChildWebhookPayload>>;
  /** The type of resource. */
  type: Scalars["String"];
};

export type AgentSessionPayload = {
  __typename?: "AgentSessionPayload";
  /** The agent session that was created or updated. */
  agentSession: AgentSession;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** The status of an agent session. */
export enum AgentSessionStatus {
  Active = "active",
  AwaitingInput = "awaitingInput",
  Complete = "complete",
  Error = "error",
  Pending = "pending",
  Stale = "stale",
}

/** The type of an agent session. */
export enum AgentSessionType {
  CommentThread = "commentThread",
}

export type AgentSessionUpdateExternalUrlInput = {
  /** The URL of an external agent-hosted page associated with this session. */
  externalLink?: Maybe<Scalars["String"]>;
};

/** Payload for an agent session webhook. */
export type AgentSessionWebhookPayload = {
  __typename?: "AgentSessionWebhookPayload";
  /** The ID of the agent that the agent session belongs to. */
  appUserId: Scalars["String"];
  /** The time at which the entity was archived. */
  archivedAt?: Maybe<Scalars["String"]>;
  /** The comment this agent session is associated with. */
  comment?: Maybe<CommentChildWebhookPayload>;
  /** The ID of the comment this agent session is associated with. */
  commentId?: Maybe<Scalars["String"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["String"];
  /** The user that created the agent session. */
  creator: UserChildWebhookPayload;
  /** The ID of the user that created the agent session. */
  creatorId: Scalars["String"];
  /** The time the agent session ended. */
  endedAt?: Maybe<Scalars["String"]>;
  /** The ID of the entity. */
  id: Scalars["String"];
  /** The issue this agent session is associated with. */
  issue?: Maybe<IssueWithDescriptionChildWebhookPayload>;
  /** The ID of the issue this agent session is associated with. */
  issueId?: Maybe<Scalars["String"]>;
  /** The ID of the organization that the agent session belongs to. */
  organizationId: Scalars["String"];
  /** Metadata about the external source that created this agent session. */
  sourceMetadata?: Maybe<Scalars["JSONObject"]>;
  /** The time the agent session started working. */
  startedAt?: Maybe<Scalars["String"]>;
  /** The current status of the agent session. */
  status: Scalars["String"];
  /** A summary of the activities in this session. */
  summary?: Maybe<Scalars["String"]>;
  /** The type of the agent session. */
  type: Scalars["String"];
  /** The time at which the entity was updated. */
  updatedAt: Scalars["String"];
};

export type AirbyteConfigurationInput = {
  /** Linear export API key. */
  apiKey: Scalars["String"];
};

/** An API key. Grants access to the user's resources. */
export type ApiKey = Node & {
  __typename?: "ApiKey";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The label of the API key. */
  label: Scalars["String"];
  /** When the API key was last used. */
  lastActiveAt?: Maybe<Scalars["DateTime"]>;
  /** Organization the API key belongs to. */
  organization: Organization;
  /** The sync groups that this API key requests access to. If null, the API key has access to all sync groups the user has access to. The final set of sync groups is computed as the intersection of these requested groups with the user's base sync groups. */
  requestedSyncGroups?: Maybe<Array<Scalars["String"]>>;
  /** Scopes associated with the API key. */
  scope?: Maybe<Array<Scalars["String"]>>;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

export type ApiKeyConnection = {
  __typename?: "ApiKeyConnection";
  edges: Array<ApiKeyEdge>;
  nodes: Array<ApiKey>;
  pageInfo: PageInfo;
};

export type ApiKeyCreateInput = {
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The API key value. */
  key: Scalars["String"];
  /** The label for the API key. */
  label: Scalars["String"];
  /** Scopes the API key has access to. Default is all scopes. */
  scope?: Maybe<Array<Scalars["String"]>>;
  /** List of team IDs to restrict this API key to. Default is all teams the user has access to. */
  teamIds?: Maybe<Array<Scalars["String"]>>;
};

export type ApiKeyEdge = {
  __typename?: "ApiKeyEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: ApiKey;
};

export type ApiKeyPayload = {
  __typename?: "ApiKeyPayload";
  /** The API key that was created. */
  apiKey: ApiKey;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type ApiKeyUpdateInput = {
  /** The new label for the API key. */
  label?: Maybe<Scalars["String"]>;
  /** Scopes the API key has access to. Default is all scopes. */
  scope?: Maybe<Array<Scalars["String"]>>;
  /** List of team IDs to restrict this API key to. Default is all teams the user has access to. */
  teamIds?: Maybe<Array<Scalars["String"]>>;
};

/** [INTERNAL] Details of the app user's existing token. */
export type AppUserAuthentication = {
  __typename?: "AppUserAuthentication";
  /** The user that authorized the application, if known. */
  authorizingUser?: Maybe<AuthorizingUser>;
  /** The timestamp at which the token was created. */
  createdAt: Scalars["DateTime"];
  /** Whether the application has requested custom sync groups. */
  requestedSyncGroups: Scalars["Boolean"];
  /** The scopes that the token has. */
  scope: Array<Scalars["String"]>;
};

/** Payload for app user notification webhook events. */
export type AppUserNotificationWebhookPayload = {
  __typename?: "AppUserNotificationWebhookPayload";
  /** The type of action that triggered the webhook. */
  action: Scalars["String"];
  /** ID of the app user the notification is for. */
  appUserId: Scalars["String"];
  /** The time the payload was created. */
  createdAt: Scalars["DateTime"];
  /** Details of the notification. */
  notification: NotificationWebhookPayload;
  /** ID of the OAuth client the app user is tied to. */
  oauthClientId: Scalars["String"];
  /** ID of the organization for which the webhook belongs to. */
  organizationId: Scalars["String"];
  /** The type of resource. */
  type: Scalars["String"];
};

/** Payload for app user team access change webhook events. */
export type AppUserTeamAccessChangedWebhookPayload = {
  __typename?: "AppUserTeamAccessChangedWebhookPayload";
  /** The type of action that triggered the webhook. */
  action: Scalars["String"];
  /** IDs of the teams the app user was added to. */
  addedTeamIds: Array<Scalars["String"]>;
  /** ID of the app user the notification is for. */
  appUserId: Scalars["String"];
  /** Whether the app user can access all public teams. */
  canAccessAllPublicTeams: Scalars["Boolean"];
  /** The time the payload was created. */
  createdAt: Scalars["DateTime"];
  /** ID of the OAuth client the app user is tied to. */
  oauthClientId: Scalars["String"];
  /** ID of the organization for which the webhook belongs to. */
  organizationId: Scalars["String"];
  /** IDs of the teams the app user was removed from. */
  removedTeamIds: Array<Scalars["String"]>;
  /** The type of resource. */
  type: Scalars["String"];
};

/** Public information of the OAuth application. */
export type Application = {
  __typename?: "Application";
  /** OAuth application's client ID. */
  clientId: Scalars["String"];
  /** Information about the application. */
  description?: Maybe<Scalars["String"]>;
  /** Name of the developer. */
  developer: Scalars["String"];
  /** Url of the developer (homepage or docs). */
  developerUrl: Scalars["String"];
  /** OAuth application's ID. */
  id: Scalars["String"];
  /** Image of the application. */
  imageUrl?: Maybe<Scalars["String"]>;
  /** Application name. */
  name: Scalars["String"];
};

/** Customer approximate need count sorting options. */
export type ApproximateNeedCountSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

/** A generic payload return from entity archive or deletion mutations. */
export type ArchivePayload = {
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** Contains requested archived model objects. */
export type ArchiveResponse = {
  __typename?: "ArchiveResponse";
  /** A JSON serialized collection of model objects loaded from the archive */
  archive: Scalars["String"];
  /** The version of the remote database. Incremented by 1 for each migration run on the database. */
  databaseVersion: Scalars["Float"];
  /** Whether the dependencies for the model objects are included in the archive. */
  includesDependencies: Array<Scalars["String"]>;
  /** The total number of entities in the archive. */
  totalCount: Scalars["Float"];
};

export type AsksChannelConnectPayload = {
  __typename?: "AsksChannelConnectPayload";
  /** Whether the bot needs to be manually added to the channel. */
  addBot: Scalars["Boolean"];
  /** The integration that was created or updated. */
  integration?: Maybe<Integration>;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** The new Asks Slack channel mapping for the connected channel. */
  mapping: SlackChannelNameMapping;
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** Issue assignee sorting options. */
export type AssigneeSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

/** Issue attachment (e.g. support ticket, pull request). */
export type Attachment = Node & {
  __typename?: "Attachment";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The body data of the attachment, if any. */
  bodyData?: Maybe<Scalars["String"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The creator of the attachment. */
  creator?: Maybe<User>;
  /** The non-Linear user who created the attachment. */
  externalUserCreator?: Maybe<ExternalUser>;
  /** Indicates if attachments for the same source application should be grouped in the Linear UI. */
  groupBySource: Scalars["Boolean"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The issue this attachment belongs to. */
  issue: Issue;
  /** Custom metadata related to the attachment. */
  metadata: Scalars["JSONObject"];
  /** The issue this attachment was originally created on. Will be undefined if the attachment hasn't been moved. */
  originalIssue?: Maybe<Issue>;
  /** Information about the source which created the attachment. */
  source?: Maybe<Scalars["JSONObject"]>;
  /** An accessor helper to source.type, defines the source type of the attachment. */
  sourceType?: Maybe<Scalars["String"]>;
  /** Content for the subtitle line in the Linear attachment widget. */
  subtitle?: Maybe<Scalars["String"]>;
  /** Content for the title line in the Linear attachment widget. */
  title: Scalars["String"];
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** Location of the attachment which is also used as an identifier. */
  url: Scalars["String"];
};

/** Attachment collection filtering options. */
export type AttachmentCollectionFilter = {
  /** Compound filters, all of which need to be matched by the attachment. */
  and?: Maybe<Array<AttachmentCollectionFilter>>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Filters that the attachments creator must satisfy. */
  creator?: Maybe<NullableUserFilter>;
  /** Filters that needs to be matched by all attachments. */
  every?: Maybe<AttachmentFilter>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Comparator for the collection length. */
  length?: Maybe<NumberComparator>;
  /** Compound filters, one of which need to be matched by the attachment. */
  or?: Maybe<Array<AttachmentCollectionFilter>>;
  /** Filters that needs to be matched by some attachments. */
  some?: Maybe<AttachmentFilter>;
  /** Comparator for the source type. */
  sourceType?: Maybe<SourceTypeComparator>;
  /** Comparator for the subtitle. */
  subtitle?: Maybe<NullableStringComparator>;
  /** Comparator for the title. */
  title?: Maybe<StringComparator>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
  /** Comparator for the url. */
  url?: Maybe<StringComparator>;
};

export type AttachmentConnection = {
  __typename?: "AttachmentConnection";
  edges: Array<AttachmentEdge>;
  nodes: Array<Attachment>;
  pageInfo: PageInfo;
};

export type AttachmentCreateInput = {
  /** Create a linked comment with markdown body. */
  commentBody?: Maybe<Scalars["String"]>;
  /** [Internal] Create a linked comment with Prosemirror body. Please use `commentBody` instead. */
  commentBodyData?: Maybe<Scalars["JSONObject"]>;
  /** Create attachment as a user with the provided name. This option is only available to OAuth applications creating attachments in `actor=application` mode. */
  createAsUser?: Maybe<Scalars["String"]>;
  /** Indicates if attachments for the same source application should be grouped in the Linear UI. */
  groupBySource?: Maybe<Scalars["Boolean"]>;
  /** An icon url to display with the attachment. Should be of jpg or png format. Maximum of 1MB in size. Dimensions should be 20x20px for optimal display quality. */
  iconUrl?: Maybe<Scalars["String"]>;
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The issue to associate the attachment with. */
  issueId: Scalars["String"];
  /** Attachment metadata object with string and number values. */
  metadata?: Maybe<Scalars["JSONObject"]>;
  /** The attachment subtitle. */
  subtitle?: Maybe<Scalars["String"]>;
  /** The attachment title. */
  title: Scalars["String"];
  /** Attachment location which is also used as an unique identifier for the attachment. If another attachment is created with the same `url` value, existing record is updated instead. */
  url: Scalars["String"];
};

export type AttachmentEdge = {
  __typename?: "AttachmentEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: Attachment;
};

/** Attachment filtering options. */
export type AttachmentFilter = {
  /** Compound filters, all of which need to be matched by the attachment. */
  and?: Maybe<Array<AttachmentFilter>>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Filters that the attachments creator must satisfy. */
  creator?: Maybe<NullableUserFilter>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Compound filters, one of which need to be matched by the attachment. */
  or?: Maybe<Array<AttachmentFilter>>;
  /** Comparator for the source type. */
  sourceType?: Maybe<SourceTypeComparator>;
  /** Comparator for the subtitle. */
  subtitle?: Maybe<NullableStringComparator>;
  /** Comparator for the title. */
  title?: Maybe<StringComparator>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
  /** Comparator for the url. */
  url?: Maybe<StringComparator>;
};

export type AttachmentPayload = {
  __typename?: "AttachmentPayload";
  /** The issue attachment that was created. */
  attachment: Attachment;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type AttachmentSourcesPayload = {
  __typename?: "AttachmentSourcesPayload";
  /** A unique list of all source types used in this workspace. */
  sources: Scalars["JSONObject"];
};

export type AttachmentUpdateInput = {
  /** An icon url to display with the attachment. Should be of jpg or png format. Maximum of 1MB in size. Dimensions should be 20x20px for optimal display quality. */
  iconUrl?: Maybe<Scalars["String"]>;
  /** Attachment metadata object with string and number values. */
  metadata?: Maybe<Scalars["JSONObject"]>;
  /** The attachment subtitle. */
  subtitle?: Maybe<Scalars["String"]>;
  /** The attachment title. */
  title: Scalars["String"];
};

/** Payload for an attachment webhook. */
export type AttachmentWebhookPayload = {
  __typename?: "AttachmentWebhookPayload";
  /** The time at which the entity was archived. */
  archivedAt?: Maybe<Scalars["String"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["String"];
  /** The ID of the creator of the attachment. */
  creatorId?: Maybe<Scalars["String"]>;
  /** The ID of the non-Linear user who created the attachment. */
  externalUserCreatorId?: Maybe<Scalars["String"]>;
  /** Whether attachments for the same source application should be grouped in the Linear UI. */
  groupBySource: Scalars["Boolean"];
  /** The ID of the entity. */
  id: Scalars["String"];
  /** The ID of the issue this attachment belongs to. */
  issueId: Scalars["String"];
  /** Custom metadata related to the attachment. */
  metadata: Scalars["JSONObject"];
  /** The ID of the issue this attachment belonged to originally. */
  originalIssueId?: Maybe<Scalars["String"]>;
  /** Information about the source which created the attachment. */
  source?: Maybe<Scalars["JSONObject"]>;
  /** The source type of the attachment. */
  sourceType?: Maybe<Scalars["String"]>;
  /** Optional subtitle of the attachment. */
  subtitle?: Maybe<Scalars["String"]>;
  /** The title of the attachment. */
  title: Scalars["String"];
  /** The time at which the entity was updated. */
  updatedAt: Scalars["String"];
  /** The URL of the attachment. */
  url: Scalars["String"];
};

/** Workspace audit log entry object. */
export type AuditEntry = Node & {
  __typename?: "AuditEntry";
  /** The user that caused the audit entry to be created. */
  actor?: Maybe<User>;
  /** The ID of the user that caused the audit entry to be created. */
  actorId?: Maybe<Scalars["String"]>;
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** Country code of request resulting to audit entry. */
  countryCode?: Maybe<Scalars["String"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** IP from actor when entry was recorded. */
  ip?: Maybe<Scalars["String"]>;
  /** Additional metadata related to the audit entry. */
  metadata?: Maybe<Scalars["JSONObject"]>;
  /** The organization the audit log belongs to. */
  organization?: Maybe<Organization>;
  /** Additional information related to the request which performed the action. */
  requestInformation?: Maybe<Scalars["JSONObject"]>;
  type: Scalars["String"];
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

export type AuditEntryConnection = {
  __typename?: "AuditEntryConnection";
  edges: Array<AuditEntryEdge>;
  nodes: Array<AuditEntry>;
  pageInfo: PageInfo;
};

export type AuditEntryEdge = {
  __typename?: "AuditEntryEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: AuditEntry;
};

/** Audit entry filtering options. */
export type AuditEntryFilter = {
  /** Filters that the audit entry actor must satisfy. */
  actor?: Maybe<NullableUserFilter>;
  /** Compound filters, all of which need to be matched by the issue. */
  and?: Maybe<Array<AuditEntryFilter>>;
  /** Comparator for the country code. */
  countryCode?: Maybe<StringComparator>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Comparator for the IP address. */
  ip?: Maybe<StringComparator>;
  /** Compound filters, one of which need to be matched by the issue. */
  or?: Maybe<Array<AuditEntryFilter>>;
  /** Comparator for the type. */
  type?: Maybe<StringComparator>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

export type AuditEntryType = {
  __typename?: "AuditEntryType";
  /** Description of the audit entry type. */
  description: Scalars["String"];
  /** The audit entry type. */
  type: Scalars["String"];
};

/** Payload for an audit entry webhook. */
export type AuditEntryWebhookPayload = {
  __typename?: "AuditEntryWebhookPayload";
  /** The ID of the user that caused the audit entry to be created. */
  actorId?: Maybe<Scalars["String"]>;
  /** The time at which the entity was archived. */
  archivedAt?: Maybe<Scalars["String"]>;
  /** Country code of request resulting to audit entry. */
  countryCode?: Maybe<Scalars["String"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["String"];
  /** The ID of the entity. */
  id: Scalars["String"];
  /** IP from actor when entry was recorded. */
  ip?: Maybe<Scalars["String"]>;
  /** Additional metadata related to the audit entry. */
  metadata?: Maybe<Scalars["JSONObject"]>;
  /** The ID of the organization that the audit entry belongs to. */
  organizationId: Scalars["String"];
  /** Additional information related to the request which performed the action. */
  requestInformation?: Maybe<Scalars["JSONObject"]>;
  /** The type of the audit entry. */
  type: Scalars["String"];
  /** The time at which the entity was updated. */
  updatedAt: Scalars["String"];
};

/** [INTERNAL] An OAuth userId/createdDate tuple */
export type AuthMembership = {
  __typename?: "AuthMembership";
  /** The user ID associated with the authorization */
  authorizingUserId?: Maybe<Scalars["String"]>;
  /** The date of the authorization */
  createdAt: Scalars["DateTime"];
  /** The user ID the authorization was done for */
  userId: Scalars["String"];
};

/** An organization. Organizations are root-level objects that contain users and teams. */
export type AuthOrganization = {
  __typename?: "AuthOrganization";
  /** Allowed authentication providers, empty array means all are allowed */
  allowedAuthServices: Array<Scalars["String"]>;
  /** The time at which deletion of the organization was requested. */
  deletionRequestedAt?: Maybe<Scalars["DateTime"]>;
  /** Whether the organization is enabled. Used as a superuser tool to lock down the org. */
  enabled: Scalars["Boolean"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The organization's logo URL. */
  logoUrl?: Maybe<Scalars["String"]>;
  /** The organization's name. */
  name: Scalars["String"];
  /** Previously used URL keys for the organization (last 3 are kept and redirected). */
  previousUrlKeys: Array<Scalars["String"]>;
  /** The region the organization is hosted in. */
  region: Scalars["String"];
  /** The feature release channel the organization belongs to. */
  releaseChannel: ReleaseChannel;
  /** Whether SAML authentication is enabled for organization. */
  samlEnabled: Scalars["Boolean"];
  /** [INTERNAL] SAML settings */
  samlSettings?: Maybe<Scalars["JSONObject"]>;
  /** Whether SCIM provisioning is enabled for organization. */
  scimEnabled: Scalars["Boolean"];
  /** The email domain or URL key for the organization. */
  serviceId: Scalars["String"];
  /** The organization's unique URL key. */
  urlKey: Scalars["String"];
  userCount: Scalars["Float"];
};

export type AuthResolverResponse = {
  __typename?: "AuthResolverResponse";
  /** Should the signup flow allow access for the domain. */
  allowDomainAccess?: Maybe<Scalars["Boolean"]>;
  /** List of organizations allowing this user account to join automatically. */
  availableOrganizations?: Maybe<Array<AuthOrganization>>;
  /** Email for the authenticated account. */
  email: Scalars["String"];
  /** User account ID. */
  id: Scalars["String"];
  /** ID of the organization last accessed by the user. */
  lastUsedOrganizationId?: Maybe<Scalars["String"]>;
  /** List of organization available to this user account but locked due to the current auth method. */
  lockedOrganizations?: Maybe<Array<AuthOrganization>>;
  /** List of locked users that are locked by login restrictions */
  lockedUsers: Array<AuthUser>;
  /**
   * Application token.
   * @deprecated Deprecated and not used anymore. Never populated.
   */
  token?: Maybe<Scalars["String"]>;
  /** List of active users that belong to the user account. */
  users: Array<AuthUser>;
};

/** A user that has access to the the resources of an organization. */
export type AuthUser = {
  __typename?: "AuthUser";
  /** Whether the user is active. */
  active: Scalars["Boolean"];
  /** An URL to the user's avatar image. */
  avatarUrl?: Maybe<Scalars["String"]>;
  /** The user's display (nick) name. Unique within each organization. */
  displayName: Scalars["String"];
  /** The user's email address. */
  email: Scalars["String"];
  id: Scalars["ID"];
  /** The user's full name. */
  name: Scalars["String"];
  /** Organization the user belongs to. */
  organization: AuthOrganization;
  /** Whether the user is an organization admin or guest on a database level. */
  role: UserRoleType;
  /** User account ID the user belongs to. */
  userAccountId: Scalars["String"];
};

/** Authentication session information. */
export type AuthenticationSessionResponse = {
  __typename?: "AuthenticationSessionResponse";
  /** Used web browser. */
  browserType?: Maybe<Scalars["String"]>;
  /** Client used for the session */
  client?: Maybe<Scalars["String"]>;
  /** Country codes of all seen locations. */
  countryCodes: Array<Scalars["String"]>;
  /** Date when the session was created. */
  createdAt: Scalars["DateTime"];
  id: Scalars["String"];
  /** IP address. */
  ip?: Maybe<Scalars["String"]>;
  /** Identifies the session used to make the request. */
  isCurrentSession: Scalars["Boolean"];
  /** When was the session last seen */
  lastActiveAt?: Maybe<Scalars["DateTime"]>;
  /** Human readable location */
  location?: Maybe<Scalars["String"]>;
  /** Location city name. */
  locationCity?: Maybe<Scalars["String"]>;
  /** Location country name. */
  locationCountry?: Maybe<Scalars["String"]>;
  /** Location country code. */
  locationCountryCode?: Maybe<Scalars["String"]>;
  /** Location region code. */
  locationRegionCode?: Maybe<Scalars["String"]>;
  /** Name of the session, derived from the client and operating system */
  name: Scalars["String"];
  /** Operating system used for the session */
  operatingSystem?: Maybe<Scalars["String"]>;
  /** Service used for logging in. */
  service?: Maybe<Scalars["String"]>;
  /** Type of application used to authenticate. */
  type: AuthenticationSessionType;
  /** Date when the session was last updated. */
  updatedAt: Scalars["DateTime"];
  /** Session's user-agent. */
  userAgent?: Maybe<Scalars["String"]>;
};

export enum AuthenticationSessionType {
  Android = "android",
  Desktop = "desktop",
  Ios = "ios",
  Web = "web",
}

/** [INTERNAL] Public information of the OAuth application, plus the authorized scopes for a given user. */
export type AuthorizedApplication = {
  __typename?: "AuthorizedApplication";
  /** OAuth application's ID. */
  appId: Scalars["String"];
  /** OAuth application's client ID. */
  clientId: Scalars["String"];
  /** Description of the application. */
  description?: Maybe<Scalars["String"]>;
  /** Developer of the application. */
  developer?: Maybe<Scalars["String"]>;
  /** Developer URL of the application. */
  developerUrl?: Maybe<Scalars["String"]>;
  /** Image of the application. */
  imageUrl?: Maybe<Scalars["String"]>;
  /** Application name. */
  name: Scalars["String"];
  /** Scopes that are authorized for this application for a given user. */
  scope: Array<Scalars["String"]>;
  /** Whether or not webhooks are enabled for the application. */
  webhooksEnabled: Scalars["Boolean"];
};

/** Details of the app user's authorizing user. */
export type AuthorizingUser = {
  __typename?: "AuthorizingUser";
  /** The user's display name. */
  displayName: Scalars["String"];
  /** The user's full name. */
  name: Scalars["String"];
};

/** Base fields for all webhook payloads. */
export type BaseWebhookPayload = {
  __typename?: "BaseWebhookPayload";
  /** The time the payload was created. */
  createdAt: Scalars["DateTime"];
  /** ID of the organization for which the webhook belongs to. */
  organizationId: Scalars["String"];
};

/** Comparator for booleans. */
export type BooleanComparator = {
  /** Equals constraint. */
  eq?: Maybe<Scalars["Boolean"]>;
  /** Not equals constraint. */
  neq?: Maybe<Scalars["Boolean"]>;
};

/** A comment associated with an issue. */
export type Comment = Node & {
  __typename?: "Comment";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The comment content in markdown format. */
  body: Scalars["String"];
  /** [Internal] The comment content as a Prosemirror document. */
  bodyData: Scalars["String"];
  /** The bot that created the comment. */
  botActor?: Maybe<ActorBot>;
  /** The children of the comment. */
  children: CommentConnection;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The document content that the comment is associated with. */
  documentContent?: Maybe<DocumentContent>;
  /** The time user edited the comment. */
  editedAt?: Maybe<Scalars["DateTime"]>;
  /** The external thread that the comment is synced with. */
  externalThread?: Maybe<SyncedExternalThread>;
  /** The external user who wrote the comment. */
  externalUser?: Maybe<ExternalUser>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The initiative update that the comment is associated with. */
  initiativeUpdate?: Maybe<InitiativeUpdate>;
  /** The issue that the comment is associated with. */
  issue?: Maybe<Issue>;
  /** The parent comment under which the current comment is nested. */
  parent?: Maybe<Comment>;
  /** The post that the comment is associated with. */
  post?: Maybe<Post>;
  /** The project update that the comment is associated with. */
  projectUpdate?: Maybe<ProjectUpdate>;
  /** The text that this comment references. Only defined for inline comments. */
  quotedText?: Maybe<Scalars["String"]>;
  /** Emoji reaction summary, grouped by emoji type. */
  reactionData: Scalars["JSONObject"];
  /** Reactions associated with the comment. */
  reactions: Array<Reaction>;
  /** The time the resolvingUser resolved the thread. */
  resolvedAt?: Maybe<Scalars["DateTime"]>;
  /** The comment that resolved the thread. */
  resolvingComment?: Maybe<Comment>;
  /** The user that resolved the thread. */
  resolvingUser?: Maybe<User>;
  /** The external services the comment is synced with. */
  syncedWith?: Maybe<Array<ExternalEntityInfo>>;
  /** [Internal] A generated summary of the comment thread. */
  threadSummary?: Maybe<Scalars["JSONObject"]>;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** Comment's URL. */
  url: Scalars["String"];
  /** The user who wrote the comment. */
  user?: Maybe<User>;
};

/** A comment associated with an issue. */
export type CommentChildrenArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CommentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** Certain properties of a comment. */
export type CommentChildWebhookPayload = {
  __typename?: "CommentChildWebhookPayload";
  /** The body of the comment. */
  body: Scalars["String"];
  /** The ID of the document content this comment belongs to. */
  documentContentId?: Maybe<Scalars["String"]>;
  /** The ID of the comment. */
  id: Scalars["String"];
  /** The ID of the initiative update this comment belongs to. */
  initiativeUpdateId?: Maybe<Scalars["String"]>;
  /** The ID of the issue this comment belongs to. */
  issueId?: Maybe<Scalars["String"]>;
  /** The ID of the project update this comment belongs to. */
  projectUpdateId?: Maybe<Scalars["String"]>;
  /** The ID of the user who created this comment. */
  userId?: Maybe<Scalars["String"]>;
};

/** Comment filtering options. */
export type CommentCollectionFilter = {
  /** Compound filters, all of which need to be matched by the comment. */
  and?: Maybe<Array<CommentCollectionFilter>>;
  /** Comparator for the comment's body. */
  body?: Maybe<StringComparator>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Filters that the comment's document content must satisfy. */
  documentContent?: Maybe<NullableDocumentContentFilter>;
  /** Filters that needs to be matched by all comments. */
  every?: Maybe<CommentFilter>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Filters that the comment's issue must satisfy. */
  issue?: Maybe<NullableIssueFilter>;
  /** Comparator for the collection length. */
  length?: Maybe<NumberComparator>;
  /** Filters that the comment's customer needs must satisfy. */
  needs?: Maybe<CustomerNeedCollectionFilter>;
  /** Compound filters, one of which need to be matched by the comment. */
  or?: Maybe<Array<CommentCollectionFilter>>;
  /** Filters that the comment parent must satisfy. */
  parent?: Maybe<NullableCommentFilter>;
  /** Filters that the comment's project update must satisfy. */
  projectUpdate?: Maybe<NullableProjectUpdateFilter>;
  /** Filters that the comment's reactions must satisfy. */
  reactions?: Maybe<ReactionCollectionFilter>;
  /** Filters that needs to be matched by some comments. */
  some?: Maybe<CommentFilter>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
  /** Filters that the comment's creator must satisfy. */
  user?: Maybe<UserFilter>;
};

export type CommentConnection = {
  __typename?: "CommentConnection";
  edges: Array<CommentEdge>;
  nodes: Array<Comment>;
  pageInfo: PageInfo;
};

export type CommentCreateInput = {
  /** The comment content in markdown format. */
  body?: Maybe<Scalars["String"]>;
  /** [Internal] The comment content as a Prosemirror document. */
  bodyData?: Maybe<Scalars["JSON"]>;
  /** Create comment as a user with the provided name. This option is only available to OAuth applications creating comments in `actor=app` mode. */
  createAsUser?: Maybe<Scalars["String"]>;
  /** Flag to indicate this comment should be created on the issue's synced Slack comment thread. If no synced Slack comment thread exists, the mutation will fail. */
  createOnSyncedSlackThread?: Maybe<Scalars["Boolean"]>;
  /** The date when the comment was created (e.g. if importing from another system). Must be a date in the past. If none is provided, the backend will generate the time as now. */
  createdAt?: Maybe<Scalars["DateTime"]>;
  /** Provide an external user avatar URL. Can only be used in conjunction with the `createAsUser` options. This option is only available to OAuth applications creating comments in `actor=app` mode. */
  displayIconUrl?: Maybe<Scalars["String"]>;
  /** Flag to prevent auto subscription to the issue the comment is created on. */
  doNotSubscribeToIssue?: Maybe<Scalars["Boolean"]>;
  /** The document content to associate the comment with. */
  documentContentId?: Maybe<Scalars["String"]>;
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The initiative update to associate the comment with. */
  initiativeUpdateId?: Maybe<Scalars["String"]>;
  /** The issue to associate the comment with. */
  issueId?: Maybe<Scalars["String"]>;
  /** The parent comment under which to nest a current comment. */
  parentId?: Maybe<Scalars["String"]>;
  /** The post to associate the comment with. */
  postId?: Maybe<Scalars["String"]>;
  /** The project update to associate the comment with. */
  projectUpdateId?: Maybe<Scalars["String"]>;
  /** The text that this comment references. Only defined for inline comments. */
  quotedText?: Maybe<Scalars["String"]>;
  /** [INTERNAL] The identifiers of the users subscribing to this comment thread. */
  subscriberIds?: Maybe<Array<Scalars["String"]>>;
};

export type CommentEdge = {
  __typename?: "CommentEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: Comment;
};

/** Comment filtering options. */
export type CommentFilter = {
  /** Compound filters, all of which need to be matched by the comment. */
  and?: Maybe<Array<CommentFilter>>;
  /** Comparator for the comment's body. */
  body?: Maybe<StringComparator>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Filters that the comment's document content must satisfy. */
  documentContent?: Maybe<NullableDocumentContentFilter>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Filters that the comment's issue must satisfy. */
  issue?: Maybe<NullableIssueFilter>;
  /** Filters that the comment's customer needs must satisfy. */
  needs?: Maybe<CustomerNeedCollectionFilter>;
  /** Compound filters, one of which need to be matched by the comment. */
  or?: Maybe<Array<CommentFilter>>;
  /** Filters that the comment parent must satisfy. */
  parent?: Maybe<NullableCommentFilter>;
  /** Filters that the comment's project update must satisfy. */
  projectUpdate?: Maybe<NullableProjectUpdateFilter>;
  /** Filters that the comment's reactions must satisfy. */
  reactions?: Maybe<ReactionCollectionFilter>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
  /** Filters that the comment's creator must satisfy. */
  user?: Maybe<UserFilter>;
};

export type CommentPayload = {
  __typename?: "CommentPayload";
  /** The comment that was created or updated. */
  comment: Comment;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type CommentUpdateInput = {
  /** The comment content. */
  body?: Maybe<Scalars["String"]>;
  /** [Internal] The comment content as a Prosemirror document. */
  bodyData?: Maybe<Scalars["JSON"]>;
  /** [INTERNAL] Flag to prevent auto subscription to the issue the comment is updated on. */
  doNotSubscribeToIssue?: Maybe<Scalars["Boolean"]>;
  /** The text that this comment references. Only defined for inline comments. */
  quotedText?: Maybe<Scalars["String"]>;
  /** [INTERNAL] The child comment that resolves this thread. */
  resolvingCommentId?: Maybe<Scalars["String"]>;
  /** [INTERNAL] The user who resolved this thread. */
  resolvingUserId?: Maybe<Scalars["String"]>;
  /** [INTERNAL] The identifiers of the users subscribing to this comment. */
  subscriberIds?: Maybe<Array<Scalars["String"]>>;
};

/** Payload for a comment webhook. */
export type CommentWebhookPayload = {
  __typename?: "CommentWebhookPayload";
  /** The time at which the entity was archived. */
  archivedAt?: Maybe<Scalars["String"]>;
  /** The body of the comment. */
  body: Scalars["String"];
  /** The bot actor data for this comment. */
  botActor?: Maybe<Scalars["String"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["String"];
  /** The document content for this comment. */
  documentContent?: Maybe<DocumentContentChildWebhookPayload>;
  /** The ID of the document content this comment belongs to. */
  documentContentId?: Maybe<Scalars["String"]>;
  /** When the comment was last edited. */
  editedAt?: Maybe<Scalars["String"]>;
  /** The external user who created this comment. */
  externalUser?: Maybe<ExternalUserChildWebhookPayload>;
  /** The ID of the external user who created this comment. */
  externalUserId?: Maybe<Scalars["String"]>;
  /** The ID of the entity. */
  id: Scalars["String"];
  /** The initiative update this comment belongs to. */
  initiativeUpdate?: Maybe<InitiativeUpdateChildWebhookPayload>;
  /** The ID of the initiative update this comment belongs to. */
  initiativeUpdateId?: Maybe<Scalars["String"]>;
  /** The issue this comment belongs to. */
  issue?: Maybe<IssueChildWebhookPayload>;
  /** The ID of the issue this comment belongs to. */
  issueId?: Maybe<Scalars["String"]>;
  /** The parent comment. */
  parent?: Maybe<CommentChildWebhookPayload>;
  /** The ID of the parent comment. */
  parentId?: Maybe<Scalars["String"]>;
  /** The ID of the post this comment belongs to. */
  postId?: Maybe<Scalars["String"]>;
  /** The project update this comment belongs to. */
  projectUpdate?: Maybe<ProjectUpdateChildWebhookPayload>;
  /** The ID of the project update this comment belongs to. */
  projectUpdateId?: Maybe<Scalars["String"]>;
  /** The quoted text in this comment. */
  quotedText?: Maybe<Scalars["String"]>;
  /** The reaction data for this comment. */
  reactionData: Scalars["JSONObject"];
  /** When the comment was resolved. */
  resolvedAt?: Maybe<Scalars["String"]>;
  /** The ID of the comment that resolved this comment. */
  resolvingCommentId?: Maybe<Scalars["String"]>;
  /** The ID of the user who resolved this comment. */
  resolvingUserId?: Maybe<Scalars["String"]>;
  /** The entity this comment is synced with. */
  syncedWith?: Maybe<Scalars["JSONObject"]>;
  /** The time at which the entity was updated. */
  updatedAt: Scalars["String"];
  /** The user who created this comment. */
  user?: Maybe<UserChildWebhookPayload>;
  /** The ID of the user who created this comment. */
  userId?: Maybe<Scalars["String"]>;
};

/** Issue completion date sorting options. */
export type CompletedAtSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

export type ContactCreateInput = {
  /** User's browser information. */
  browser?: Maybe<Scalars["String"]>;
  /** User's Linear client information. */
  clientVersion?: Maybe<Scalars["String"]>;
  /** User's device information. */
  device?: Maybe<Scalars["String"]>;
  /** How disappointed the user would be if they could no longer use Linear. */
  disappointmentRating?: Maybe<Scalars["Int"]>;
  /** The message the user sent. */
  message: Scalars["String"];
  /** User's operating system. */
  operatingSystem?: Maybe<Scalars["String"]>;
  /** The type of support contact. */
  type: Scalars["String"];
};

export type ContactPayload = {
  __typename?: "ContactPayload";
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** [INTERNAL] Input for sending a message to the Linear Sales team. */
export type ContactSalesCreateInput = {
  /** Size of the company. */
  companySize?: Maybe<Scalars["String"]>;
  /** Work email of the person requesting information. */
  email: Scalars["String"];
  /** The message the user sent. */
  message?: Maybe<Scalars["String"]>;
  /** Name of the person requesting information. */
  name: Scalars["String"];
};

/** [Internal] Comparator for content. */
export type ContentComparator = {
  /** [Internal] Contains constraint. */
  contains?: Maybe<Scalars["String"]>;
  /** [Internal] Not-contains constraint. */
  notContains?: Maybe<Scalars["String"]>;
};

export enum ContextViewType {
  ActiveCycle = "activeCycle",
  ActiveIssues = "activeIssues",
  Backlog = "backlog",
  Triage = "triage",
  UpcomingCycle = "upcomingCycle",
}

export type CreateCsvExportReportPayload = {
  __typename?: "CreateCsvExportReportPayload";
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type CreateOrJoinOrganizationResponse = {
  __typename?: "CreateOrJoinOrganizationResponse";
  organization: AuthOrganization;
  user: AuthUser;
};

export type CreateOrganizationInput = {
  /** Whether the organization should allow email domain access. */
  domainAccess?: Maybe<Scalars["Boolean"]>;
  /** The name of the organization. */
  name: Scalars["String"];
  /** The timezone of the organization, passed in by client. */
  timezone?: Maybe<Scalars["String"]>;
  /** The URL key of the organization. */
  urlKey: Scalars["String"];
  /** JSON serialized UTM parameters associated with the creation of the workspace. */
  utm?: Maybe<Scalars["String"]>;
};

/** Issue creation date sorting options. */
export type CreatedAtSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

/** Payload for custom webhook resource events. */
export type CustomResourceWebhookPayload = {
  __typename?: "CustomResourceWebhookPayload";
  /** The type of action that triggered the webhook. */
  action: Scalars["String"];
  /** The time the payload was created. */
  createdAt: Scalars["DateTime"];
  /** ID of the organization for which the webhook belongs to. */
  organizationId: Scalars["String"];
  /** The type of resource. */
  type: Scalars["String"];
};

/** A custom view that has been saved by a user. */
export type CustomView = Node & {
  __typename?: "CustomView";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The color of the icon of the custom view. */
  color?: Maybe<Scalars["String"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The user who created the custom view. */
  creator: User;
  /** The description of the custom view. */
  description?: Maybe<Scalars["String"]>;
  /** [INTERNAL] The facet associated with the custom view. */
  facet?: Maybe<Facet>;
  /** The filter applied to feed items in the custom view. */
  feedItemFilterData?: Maybe<Scalars["JSONObject"]>;
  /** The filter applied to issues in the custom view. */
  filterData: Scalars["JSONObject"];
  /**
   * The filters applied to issues in the custom view.
   * @deprecated Will be replaced by `filterData` in a future update
   */
  filters: Scalars["JSONObject"];
  /** The icon of the custom view. */
  icon?: Maybe<Scalars["String"]>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The filter applied to initiatives in the custom view. */
  initiativeFilterData?: Maybe<Scalars["JSONObject"]>;
  /** Initiatives associated with the custom view. */
  initiatives: InitiativeConnection;
  /** Issues associated with the custom view. */
  issues: IssueConnection;
  /** The model name of the custom view. */
  modelName: Scalars["String"];
  /** The name of the custom view. */
  name: Scalars["String"];
  /** The organization of the custom view. */
  organization: Organization;
  /** The organizations default view preferences for this custom view. */
  organizationViewPreferences?: Maybe<ViewPreferences>;
  /** The user who owns the custom view. */
  owner: User;
  /** The filter applied to projects in the custom view. */
  projectFilterData?: Maybe<Scalars["JSONObject"]>;
  /** Projects associated with the custom view. */
  projects: ProjectConnection;
  /** Whether the custom view is shared with everyone in the organization. */
  shared: Scalars["Boolean"];
  /** The custom view's unique URL slug. */
  slugId: Scalars["String"];
  /** The team associated with the custom view. */
  team?: Maybe<Team>;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** The user who last updated the custom view. */
  updatedBy?: Maybe<User>;
  /** Feed items associated with the custom view. */
  updates: FeedItemConnection;
  /** The current users view preferences for this custom view. */
  userViewPreferences?: Maybe<ViewPreferences>;
  /** The calculated view preferences values for this custom view. */
  viewPreferencesValues?: Maybe<ViewPreferencesValues>;
};

/** A custom view that has been saved by a user. */
export type CustomViewInitiativesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<InitiativeFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** A custom view that has been saved by a user. */
export type CustomViewIssuesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  includeSubTeams?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
  sort?: Maybe<Array<IssueSortInput>>;
};

/** A custom view that has been saved by a user. */
export type CustomViewProjectsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<ProjectFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  includeSubTeams?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
  sort?: Maybe<Array<ProjectSortInput>>;
};

/** A custom view that has been saved by a user. */
export type CustomViewUpdatesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<FeedItemFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  includeSubTeams?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type CustomViewConnection = {
  __typename?: "CustomViewConnection";
  edges: Array<CustomViewEdge>;
  nodes: Array<CustomView>;
  pageInfo: PageInfo;
};

export type CustomViewCreateInput = {
  /** The color of the icon of the custom view. */
  color?: Maybe<Scalars["String"]>;
  /** The description of the custom view. */
  description?: Maybe<Scalars["String"]>;
  /** The feed item filter applied to issues in the custom view. */
  feedItemFilterData?: Maybe<FeedItemFilter>;
  /** The filter applied to issues in the custom view. */
  filterData?: Maybe<IssueFilter>;
  /** The icon of the custom view. */
  icon?: Maybe<Scalars["String"]>;
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** [ALPHA] The initiative filter applied to issues in the custom view. */
  initiativeFilterData?: Maybe<InitiativeFilter>;
  /** The id of the initiative associated with the custom view. */
  initiativeId?: Maybe<Scalars["String"]>;
  /** The name of the custom view. */
  name: Scalars["String"];
  /** The owner of the custom view. */
  ownerId?: Maybe<Scalars["String"]>;
  /** The project filter applied to issues in the custom view. */
  projectFilterData?: Maybe<ProjectFilter>;
  /** The id of the project associated with the custom view. */
  projectId?: Maybe<Scalars["String"]>;
  /** Whether the custom view is shared with everyone in the organization. */
  shared?: Maybe<Scalars["Boolean"]>;
  /** The id of the team associated with the custom view. */
  teamId?: Maybe<Scalars["String"]>;
};

/** Custom view creation date sorting options. */
export type CustomViewCreatedAtSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

export type CustomViewEdge = {
  __typename?: "CustomViewEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: CustomView;
};

/** Custom view filtering options. */
export type CustomViewFilter = {
  /** Compound filters, all of which need to be matched by the custom view. */
  and?: Maybe<Array<CustomViewFilter>>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Filters that the custom view creator must satisfy. */
  creator?: Maybe<UserFilter>;
  /** [INTERNAL] Filter based on whether the custom view has a facet. */
  hasFacet?: Maybe<Scalars["Boolean"]>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Comparator for the custom view model name. */
  modelName?: Maybe<StringComparator>;
  /** Comparator for the custom view name. */
  name?: Maybe<StringComparator>;
  /** Compound filters, one of which need to be matched by the custom view. */
  or?: Maybe<Array<CustomViewFilter>>;
  /** Comparator for whether the custom view is shared. */
  shared?: Maybe<BooleanComparator>;
  /** Filters that the custom view's team must satisfy. */
  team?: Maybe<NullableTeamFilter>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

export type CustomViewHasSubscribersPayload = {
  __typename?: "CustomViewHasSubscribersPayload";
  /** Whether the custom view has subscribers. */
  hasSubscribers: Scalars["Boolean"];
};

/** Custom view name sorting options. */
export type CustomViewNameSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

/** A custom view notification subscription. */
export type CustomViewNotificationSubscription = Entity &
  Node &
  NotificationSubscription & {
    __typename?: "CustomViewNotificationSubscription";
    /** Whether the subscription is active or not. */
    active: Scalars["Boolean"];
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: Maybe<Scalars["DateTime"]>;
    /** The type of view to which the notification subscription context is associated with. */
    contextViewType?: Maybe<ContextViewType>;
    /** The time at which the entity was created. */
    createdAt: Scalars["DateTime"];
    /** The custom view subscribed to. */
    customView: CustomView;
    /** The customer associated with the notification subscription. */
    customer?: Maybe<Customer>;
    /** The contextual cycle view associated with the notification subscription. */
    cycle?: Maybe<Cycle>;
    /** The unique identifier of the entity. */
    id: Scalars["ID"];
    /** The contextual initiative view associated with the notification subscription. */
    initiative?: Maybe<Initiative>;
    /** The contextual label view associated with the notification subscription. */
    label?: Maybe<IssueLabel>;
    /** The type of subscription. */
    notificationSubscriptionTypes: Array<Scalars["String"]>;
    /** The contextual project view associated with the notification subscription. */
    project?: Maybe<Project>;
    /** The user that subscribed to receive notifications. */
    subscriber: User;
    /** The team associated with the notification subscription. */
    team?: Maybe<Team>;
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars["DateTime"];
    /** The user view associated with the notification subscription. */
    user?: Maybe<User>;
    /** The type of user view to which the notification subscription context is associated with. */
    userContextViewType?: Maybe<UserContextViewType>;
  };

export type CustomViewPayload = {
  __typename?: "CustomViewPayload";
  /** The custom view that was created or updated. */
  customView: CustomView;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** Custom view shared status sorting options. Ascending order puts shared views last. */
export type CustomViewSharedSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

export type CustomViewSortInput = {
  /** Sort by custom view creation date. */
  createdAt?: Maybe<CustomViewCreatedAtSort>;
  /** Sort by custom view name. */
  name?: Maybe<CustomViewNameSort>;
  /** Sort by custom view shared status. */
  shared?: Maybe<CustomViewSharedSort>;
  /** Sort by custom view update date. */
  updatedAt?: Maybe<CustomViewUpdatedAtSort>;
};

export type CustomViewSuggestionPayload = {
  __typename?: "CustomViewSuggestionPayload";
  /** The suggested view description. */
  description?: Maybe<Scalars["String"]>;
  /** The suggested view icon. */
  icon?: Maybe<Scalars["String"]>;
  /** The suggested view name. */
  name?: Maybe<Scalars["String"]>;
};

export type CustomViewUpdateInput = {
  /** The color of the icon of the custom view. */
  color?: Maybe<Scalars["String"]>;
  /** The description of the custom view. */
  description?: Maybe<Scalars["String"]>;
  /** The feed item filter applied to issues in the custom view. */
  feedItemFilterData?: Maybe<FeedItemFilter>;
  /** The filter applied to issues in the custom view. */
  filterData?: Maybe<IssueFilter>;
  /** The icon of the custom view. */
  icon?: Maybe<Scalars["String"]>;
  /** [ALPHA] The initiative filter applied to issues in the custom view. */
  initiativeFilterData?: Maybe<InitiativeFilter>;
  /** [Internal] The id of the initiative associated with the custom view. */
  initiativeId?: Maybe<Scalars["String"]>;
  /** The name of the custom view. */
  name?: Maybe<Scalars["String"]>;
  /** The owner of the custom view. */
  ownerId?: Maybe<Scalars["String"]>;
  /** The project filter applied to issues in the custom view. */
  projectFilterData?: Maybe<ProjectFilter>;
  /** [Internal] The id of the project associated with the custom view. */
  projectId?: Maybe<Scalars["String"]>;
  /** Whether the custom view is shared with everyone in the organization. */
  shared?: Maybe<Scalars["Boolean"]>;
  /** The id of the team associated with the custom view. */
  teamId?: Maybe<Scalars["String"]>;
};

/** Custom view update date sorting options. */
export type CustomViewUpdatedAtSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

/** A customer whose needs will be tied to issues or projects. */
export type Customer = Node & {
  __typename?: "Customer";
  /** The approximate number of needs of the customer. */
  approximateNeedCount: Scalars["Float"];
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The domains associated with this customer. */
  domains: Array<Scalars["String"]>;
  /** The ids of the customers in external systems. */
  externalIds: Array<Scalars["String"]>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The integration that manages the Customer. */
  integration?: Maybe<Integration>;
  /** The customer's logo URL. */
  logoUrl?: Maybe<Scalars["String"]>;
  /** The ID of the main source, when a customer has multiple sources. Must be one of externalIds. */
  mainSourceId?: Maybe<Scalars["String"]>;
  /** The customer's name. */
  name: Scalars["String"];
  /** The user who owns the customer. */
  owner?: Maybe<User>;
  /** The annual revenue generated by the customer. */
  revenue?: Maybe<Scalars["Float"]>;
  /** The size of the customer. */
  size?: Maybe<Scalars["Float"]>;
  /** The ID of the Slack channel used to interact with the customer. */
  slackChannelId?: Maybe<Scalars["String"]>;
  /** The customer's unique URL slug. */
  slugId: Scalars["String"];
  /** The current status of the customer. */
  status: CustomerStatus;
  /** The tier of the customer. */
  tier?: Maybe<CustomerTier>;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

/** Certain properties of a customer. */
export type CustomerChildWebhookPayload = {
  __typename?: "CustomerChildWebhookPayload";
  /** The domains associated with this customer. */
  domains: Array<Scalars["String"]>;
  /** The ids of the customers in external systems. */
  externalIds: Array<Scalars["String"]>;
  /** The ID of the customer. */
  id: Scalars["String"];
  /** The name of the customer. */
  name: Scalars["String"];
};

export type CustomerConnection = {
  __typename?: "CustomerConnection";
  edges: Array<CustomerEdge>;
  nodes: Array<Customer>;
  pageInfo: PageInfo;
};

/** Issue customer count sorting options. */
export type CustomerCountSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

export type CustomerCreateInput = {
  /** The domains associated with this customer. */
  domains?: Maybe<Array<Scalars["String"]>>;
  /** The ids of the customers in external systems. */
  externalIds?: Maybe<Array<Scalars["String"]>>;
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The URL of the customer's logo. */
  logoUrl?: Maybe<Scalars["String"]>;
  /** The main source of the customer, for customers with multiple sources. Must be one of externalIds. */
  mainSourceId?: Maybe<Scalars["String"]>;
  /** The name of the customer. */
  name: Scalars["String"];
  /** The user who owns the customer. */
  ownerId?: Maybe<Scalars["String"]>;
  /** The annual revenue generated by the customer. */
  revenue?: Maybe<Scalars["Int"]>;
  /** The size of the customer. */
  size?: Maybe<Scalars["Int"]>;
  /** The ID of the Slack channel used to interact with the customer. */
  slackChannelId?: Maybe<Scalars["String"]>;
  /** The status of the customer. */
  statusId?: Maybe<Scalars["String"]>;
  /** The tier of the customer customer. */
  tierId?: Maybe<Scalars["String"]>;
};

/** Customer creation date sorting options. */
export type CustomerCreatedAtSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

export type CustomerEdge = {
  __typename?: "CustomerEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: Customer;
};

/** Customer filtering options. */
export type CustomerFilter = {
  /** Compound filters, all of which need to be matched by the customer. */
  and?: Maybe<Array<CustomerFilter>>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Comparator for the customer's domains. */
  domains?: Maybe<StringArrayComparator>;
  /** Comparator for the customer's external IDs. */
  externalIds?: Maybe<StringArrayComparator>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Comparator for the customer name. */
  name?: Maybe<StringComparator>;
  /** Filters that the customer's needs must satisfy. */
  needs?: Maybe<CustomerNeedCollectionFilter>;
  /** Compound filters, one of which need to be matched by the customer. */
  or?: Maybe<Array<CustomerFilter>>;
  /** Filters that the customer owner must satisfy. */
  owner?: Maybe<NullableUserFilter>;
  /** Comparator for the customer generated revenue. */
  revenue?: Maybe<NumberComparator>;
  /** Comparator for the customer size. */
  size?: Maybe<NumberComparator>;
  /** Comparator for the customer slack channel ID. */
  slackChannelId?: Maybe<StringComparator>;
  /** Filters that the customer's status must satisfy. */
  status?: Maybe<CustomerStatusFilter>;
  /** Filters that the customer's tier must satisfy. */
  tier?: Maybe<CustomerTierFilter>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

/** Issue customer important count sorting options. */
export type CustomerImportantCountSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

/** A customer need, expressed through a reference to an issue, project, or comment. */
export type CustomerNeed = Node & {
  __typename?: "CustomerNeed";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The attachment this need is referencing. */
  attachment?: Maybe<Attachment>;
  /** The need content in markdown format. */
  body?: Maybe<Scalars["String"]>;
  /** [Internal] The content of the need as a Prosemirror document. */
  bodyData?: Maybe<Scalars["String"]>;
  /** The comment this need is referencing. */
  comment?: Maybe<Comment>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The creator of the customer need. */
  creator?: Maybe<User>;
  /** The customer that this need is attached to. */
  customer?: Maybe<Customer>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The issue this need is referencing. */
  issue?: Maybe<Issue>;
  /** The issue this customer need was originally created on. Will be undefined if the customer need hasn't been moved. */
  originalIssue?: Maybe<Issue>;
  /** Whether the customer need is important or not. 0 = Not important, 1 = Important. */
  priority: Scalars["Float"];
  /** The project this need is referencing. */
  project?: Maybe<Project>;
  /** The project attachment this need is referencing. */
  projectAttachment?: Maybe<ProjectAttachment>;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** The URL of the underlying attachment, if any */
  url?: Maybe<Scalars["String"]>;
};

/** A generic payload return from entity archive mutations. */
export type CustomerNeedArchivePayload = ArchivePayload & {
  __typename?: "CustomerNeedArchivePayload";
  /** The archived/unarchived entity. Null if entity was deleted. */
  entity?: Maybe<CustomerNeed>;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** Certain properties of a customer need. */
export type CustomerNeedChildWebhookPayload = {
  __typename?: "CustomerNeedChildWebhookPayload";
  /** The ID of the attachment this need is referencing. */
  attachmentId?: Maybe<Scalars["String"]>;
  /** The ID of the customer that this need is attached to. */
  customerId?: Maybe<Scalars["String"]>;
  /** The ID of the customer need. */
  id: Scalars["String"];
  /** The ID of the issue this need is referencing. */
  issueId?: Maybe<Scalars["String"]>;
  /** The ID of the project this need is referencing. */
  projectId?: Maybe<Scalars["String"]>;
};

/** Customer needs filtering options. */
export type CustomerNeedCollectionFilter = {
  /** Compound filters, all of which need to be matched by the customer needs. */
  and?: Maybe<Array<CustomerNeedCollectionFilter>>;
  /** Filters that the need's comment must satisfy. */
  comment?: Maybe<NullableCommentFilter>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Filters that the need's customer must satisfy. */
  customer?: Maybe<NullableCustomerFilter>;
  /** Filters that needs to be matched by all customer needs. */
  every?: Maybe<CustomerNeedFilter>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Filters that the need's issue must satisfy. */
  issue?: Maybe<NullableIssueFilter>;
  /** Comparator for the collection length. */
  length?: Maybe<NumberComparator>;
  /** Compound filters, one of which need to be matched by the customer needs. */
  or?: Maybe<Array<CustomerNeedCollectionFilter>>;
  /** Comparator for the customer need priority. */
  priority?: Maybe<NumberComparator>;
  /** Filters that the need's project must satisfy. */
  project?: Maybe<NullableProjectFilter>;
  /** Filters that needs to be matched by some customer needs. */
  some?: Maybe<CustomerNeedFilter>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

export type CustomerNeedConnection = {
  __typename?: "CustomerNeedConnection";
  edges: Array<CustomerNeedEdge>;
  nodes: Array<CustomerNeed>;
  pageInfo: PageInfo;
};

export type CustomerNeedCreateFromAttachmentInput = {
  /** The attachment this need is created from. */
  attachmentId: Scalars["String"];
};

export type CustomerNeedCreateInput = {
  /** The attachment this need is referencing. */
  attachmentId?: Maybe<Scalars["String"]>;
  /** Optional URL for the attachment associated with the customer need. */
  attachmentUrl?: Maybe<Scalars["String"]>;
  /** The content of the need in markdown format. */
  body?: Maybe<Scalars["String"]>;
  /** [Internal] The content of the need as a Prosemirror document. */
  bodyData?: Maybe<Scalars["JSON"]>;
  /** The comment this need is referencing. */
  commentId?: Maybe<Scalars["String"]>;
  /** Create need as a user with the provided name. This option is only available to OAuth applications creating needs in `actor=app` mode. */
  createAsUser?: Maybe<Scalars["String"]>;
  /** The external ID of the customer the need belongs to. */
  customerExternalId?: Maybe<Scalars["String"]>;
  /** The uuid of the customer the need belongs to. */
  customerId?: Maybe<Scalars["String"]>;
  /** Provide an external user avatar URL. Can only be used in conjunction with the `createAsUser` options. This option is only available to OAuth applications creating needs in `actor=app` mode. */
  displayIconUrl?: Maybe<Scalars["String"]>;
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The issue this need is referencing. */
  issueId?: Maybe<Scalars["String"]>;
  /** Whether the customer need is important or not. 0 = Not important, 1 = Important. */
  priority?: Maybe<Scalars["Float"]>;
  /** [INTERNAL] The project this need is referencing. */
  projectId?: Maybe<Scalars["String"]>;
};

export type CustomerNeedEdge = {
  __typename?: "CustomerNeedEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: CustomerNeed;
};

/** Customer filtering options. */
export type CustomerNeedFilter = {
  /** Compound filters, all of which need to be matched by the customer need. */
  and?: Maybe<Array<CustomerNeedFilter>>;
  /** Filters that the need's comment must satisfy. */
  comment?: Maybe<NullableCommentFilter>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Filters that the need's customer must satisfy. */
  customer?: Maybe<NullableCustomerFilter>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Filters that the need's issue must satisfy. */
  issue?: Maybe<NullableIssueFilter>;
  /** Compound filters, one of which need to be matched by the customer need. */
  or?: Maybe<Array<CustomerNeedFilter>>;
  /** Comparator for the customer need priority. */
  priority?: Maybe<NumberComparator>;
  /** Filters that the need's project must satisfy. */
  project?: Maybe<NullableProjectFilter>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

/** A customer need related notification. */
export type CustomerNeedNotification = Entity &
  Node &
  Notification & {
    __typename?: "CustomerNeedNotification";
    /** The user that caused the notification. */
    actor?: Maybe<User>;
    /** [Internal] Notification actor initials if avatar is not available. */
    actorAvatarColor: Scalars["String"];
    /** [Internal] Notification avatar URL. */
    actorAvatarUrl?: Maybe<Scalars["String"]>;
    /** [Internal] Notification actor initials if avatar is not available. */
    actorInitials?: Maybe<Scalars["String"]>;
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: Maybe<Scalars["DateTime"]>;
    /** The bot that caused the notification. */
    botActor?: Maybe<ActorBot>;
    /** The category of the notification. */
    category: NotificationCategory;
    /** The time at which the entity was created. */
    createdAt: Scalars["DateTime"];
    /** The customer need related to the notification. */
    customerNeed: CustomerNeed;
    /** Related customer need. */
    customerNeedId: Scalars["String"];
    /**
     * The time at when an email reminder for this notification was sent to the user. Null, if no email
     *     reminder has been sent.
     */
    emailedAt?: Maybe<Scalars["DateTime"]>;
    /** The external user that caused the notification. */
    externalUserActor?: Maybe<ExternalUser>;
    /** [Internal] Notifications with the same grouping key will be grouped together in the UI. */
    groupingKey: Scalars["String"];
    /** [Internal] Priority of the notification with the same grouping key. Higher number means higher priority. If priority is the same, notifications should be sorted by `createdAt`. */
    groupingPriority: Scalars["Float"];
    /** The unique identifier of the entity. */
    id: Scalars["ID"];
    /** [Internal] Inbox URL for the notification. */
    inboxUrl: Scalars["String"];
    /** [Internal] If notification actor was Linear. */
    isLinearActor: Scalars["Boolean"];
    /** [Internal] Issue's status type for issue notifications. */
    issueStatusType?: Maybe<Scalars["String"]>;
    /** [Internal] Project update health for new updates. */
    projectUpdateHealth?: Maybe<Scalars["String"]>;
    /** The time at when the user marked the notification as read. Null, if the the user hasn't read the notification */
    readAt?: Maybe<Scalars["DateTime"]>;
    /** The issue related to the notification. */
    relatedIssue?: Maybe<Issue>;
    /** The project related to the notification. */
    relatedProject?: Maybe<Project>;
    /** The time until a notification will be snoozed. After that it will appear in the inbox again. */
    snoozedUntilAt?: Maybe<Scalars["DateTime"]>;
    /** [Internal] Notification subtitle. */
    subtitle: Scalars["String"];
    /** [Internal] Notification title. */
    title: Scalars["String"];
    /** Notification type. */
    type: Scalars["String"];
    /** The time at which a notification was unsnoozed.. */
    unsnoozedAt?: Maybe<Scalars["DateTime"]>;
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars["DateTime"];
    /** [Internal] URL to the target of the notification. */
    url: Scalars["String"];
    /** The user that received the notification. */
    user: User;
  };

export type CustomerNeedPayload = {
  __typename?: "CustomerNeedPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** The customer need that was created or updated. */
  need: CustomerNeed;
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type CustomerNeedUpdateInput = {
  /** Whether to also update the priority of needs from the same customer on the same issue/project. */
  applyPriorityToRelatedNeeds?: Maybe<Scalars["Boolean"]>;
  /** Optional URL for the attachment associated with the customer need. */
  attachmentUrl?: Maybe<Scalars["String"]>;
  /** The content of the need in markdown format. */
  body?: Maybe<Scalars["String"]>;
  /** [Internal] The content of the need as a Prosemirror document. */
  bodyData?: Maybe<Scalars["JSON"]>;
  /** The external ID of the customer the need belongs to. */
  customerExternalId?: Maybe<Scalars["String"]>;
  /** The uuid of the customer the need belongs to. */
  customerId?: Maybe<Scalars["String"]>;
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The issue this need is referencing. */
  issueId?: Maybe<Scalars["String"]>;
  /** Whether the customer need is important or not. 0 = Not important, 1 = Important. */
  priority?: Maybe<Scalars["Float"]>;
  /** [INTERNAL] The project this need is referencing. */
  projectId?: Maybe<Scalars["String"]>;
};

export type CustomerNeedUpdatePayload = {
  __typename?: "CustomerNeedUpdatePayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** The customer need that was created or updated. */
  need: CustomerNeed;
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
  /** The related customer needs that were updated. */
  updatedRelatedNeeds: Array<CustomerNeed>;
};

/** Payload for a customer need webhook. */
export type CustomerNeedWebhookPayload = {
  __typename?: "CustomerNeedWebhookPayload";
  /** The time at which the entity was archived. */
  archivedAt?: Maybe<Scalars["String"]>;
  /** The attachment this need is referencing. */
  attachment?: Maybe<AttachmentWebhookPayload>;
  /** The ID of the attachment this need is referencing. */
  attachmentId?: Maybe<Scalars["String"]>;
  /** The body of the need in Markdown format. */
  body?: Maybe<Scalars["String"]>;
  /** The ID of the comment this need is referencing. */
  commentId?: Maybe<Scalars["String"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["String"];
  /** The ID of the creator of the customer need. */
  creatorId?: Maybe<Scalars["String"]>;
  /** The customer that this need is attached to. */
  customer?: Maybe<CustomerChildWebhookPayload>;
  /** The ID of the customer that this need is attached to. */
  customerId?: Maybe<Scalars["String"]>;
  /** The ID of the entity. */
  id: Scalars["String"];
  /** The issue this need is referencing. */
  issue?: Maybe<IssueChildWebhookPayload>;
  /** The ID of the issue this need is referencing. */
  issueId?: Maybe<Scalars["String"]>;
  /** The issue ID this customer need was originally created on. Will be undefined if the customer need hasn't been moved. */
  originalIssueId?: Maybe<Scalars["String"]>;
  /** The priority of the need. */
  priority: Scalars["Float"];
  /** The project this need is referencing. */
  project?: Maybe<ProjectChildWebhookPayload>;
  /** The ID of the project attachment this need is referencing. */
  projectAttachmentId?: Maybe<Scalars["String"]>;
  /** The ID of the project this need is referencing. */
  projectId?: Maybe<Scalars["String"]>;
  /** The time at which the entity was updated. */
  updatedAt: Scalars["String"];
};

/** A customer related notification. */
export type CustomerNotification = Entity &
  Node &
  Notification & {
    __typename?: "CustomerNotification";
    /** The user that caused the notification. */
    actor?: Maybe<User>;
    /** [Internal] Notification actor initials if avatar is not available. */
    actorAvatarColor: Scalars["String"];
    /** [Internal] Notification avatar URL. */
    actorAvatarUrl?: Maybe<Scalars["String"]>;
    /** [Internal] Notification actor initials if avatar is not available. */
    actorInitials?: Maybe<Scalars["String"]>;
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: Maybe<Scalars["DateTime"]>;
    /** The bot that caused the notification. */
    botActor?: Maybe<ActorBot>;
    /** The category of the notification. */
    category: NotificationCategory;
    /** The time at which the entity was created. */
    createdAt: Scalars["DateTime"];
    /** The customer related to the notification. */
    customer: Customer;
    /** Related customer. */
    customerId: Scalars["String"];
    /**
     * The time at when an email reminder for this notification was sent to the user. Null, if no email
     *     reminder has been sent.
     */
    emailedAt?: Maybe<Scalars["DateTime"]>;
    /** The external user that caused the notification. */
    externalUserActor?: Maybe<ExternalUser>;
    /** [Internal] Notifications with the same grouping key will be grouped together in the UI. */
    groupingKey: Scalars["String"];
    /** [Internal] Priority of the notification with the same grouping key. Higher number means higher priority. If priority is the same, notifications should be sorted by `createdAt`. */
    groupingPriority: Scalars["Float"];
    /** The unique identifier of the entity. */
    id: Scalars["ID"];
    /** [Internal] Inbox URL for the notification. */
    inboxUrl: Scalars["String"];
    /** [Internal] If notification actor was Linear. */
    isLinearActor: Scalars["Boolean"];
    /** [Internal] Issue's status type for issue notifications. */
    issueStatusType?: Maybe<Scalars["String"]>;
    /** [Internal] Project update health for new updates. */
    projectUpdateHealth?: Maybe<Scalars["String"]>;
    /** The time at when the user marked the notification as read. Null, if the the user hasn't read the notification */
    readAt?: Maybe<Scalars["DateTime"]>;
    /** The time until a notification will be snoozed. After that it will appear in the inbox again. */
    snoozedUntilAt?: Maybe<Scalars["DateTime"]>;
    /** [Internal] Notification subtitle. */
    subtitle: Scalars["String"];
    /** [Internal] Notification title. */
    title: Scalars["String"];
    /** Notification type. */
    type: Scalars["String"];
    /** The time at which a notification was unsnoozed.. */
    unsnoozedAt?: Maybe<Scalars["DateTime"]>;
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars["DateTime"];
    /** [Internal] URL to the target of the notification. */
    url: Scalars["String"];
    /** The user that received the notification. */
    user: User;
  };

/** A customer notification subscription. */
export type CustomerNotificationSubscription = Entity &
  Node &
  NotificationSubscription & {
    __typename?: "CustomerNotificationSubscription";
    /** Whether the subscription is active or not. */
    active: Scalars["Boolean"];
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: Maybe<Scalars["DateTime"]>;
    /** The type of view to which the notification subscription context is associated with. */
    contextViewType?: Maybe<ContextViewType>;
    /** The time at which the entity was created. */
    createdAt: Scalars["DateTime"];
    /** The contextual custom view associated with the notification subscription. */
    customView?: Maybe<CustomView>;
    /** The customer subscribed to. */
    customer: Customer;
    /** The contextual cycle view associated with the notification subscription. */
    cycle?: Maybe<Cycle>;
    /** The unique identifier of the entity. */
    id: Scalars["ID"];
    /** The contextual initiative view associated with the notification subscription. */
    initiative?: Maybe<Initiative>;
    /** The contextual label view associated with the notification subscription. */
    label?: Maybe<IssueLabel>;
    /** The type of subscription. */
    notificationSubscriptionTypes: Array<Scalars["String"]>;
    /** The contextual project view associated with the notification subscription. */
    project?: Maybe<Project>;
    /** The user that subscribed to receive notifications. */
    subscriber: User;
    /** The team associated with the notification subscription. */
    team?: Maybe<Team>;
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars["DateTime"];
    /** The user view associated with the notification subscription. */
    user?: Maybe<User>;
    /** The type of user view to which the notification subscription context is associated with. */
    userContextViewType?: Maybe<UserContextViewType>;
  };

export type CustomerPayload = {
  __typename?: "CustomerPayload";
  /** The customer that was created or updated. */
  customer: Customer;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** Issue customer revenue sorting options. */
export type CustomerRevenueSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

/** Issue customer sorting options. */
export type CustomerSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

/** Customer sorting options. */
export type CustomerSortInput = {
  /** Sort by approximate customer need count */
  approximateNeedCount?: Maybe<ApproximateNeedCountSort>;
  /** Sort by customer creation date */
  createdAt?: Maybe<CustomerCreatedAtSort>;
  /** Sort by name */
  name?: Maybe<NameSort>;
  /** Sort by owner name */
  owner?: Maybe<OwnerSort>;
  /** Sort by customer generated revenue */
  revenue?: Maybe<RevenueSort>;
  /** Sort by customer size */
  size?: Maybe<SizeSort>;
  /** Sort by customer status */
  status?: Maybe<CustomerStatusSort>;
  /** Sort by customer tier */
  tier?: Maybe<TierSort>;
};

/** A customer status. */
export type CustomerStatus = Node & {
  __typename?: "CustomerStatus";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The UI color of the status as a HEX string. */
  color: Scalars["String"];
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** Description of the status. */
  description?: Maybe<Scalars["String"]>;
  /** The display name of the status. */
  displayName: Scalars["String"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The name of the status. */
  name: Scalars["String"];
  /** The position of the status in the workspace's customers flow. */
  position: Scalars["Float"];
  /**
   * The type of the customer status.
   * @deprecated Customer statuses are no longer grouped by type.
   */
  type?: Maybe<CustomerStatusType>;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

/** Certain properties of a customer status. */
export type CustomerStatusChildWebhookPayload = {
  __typename?: "CustomerStatusChildWebhookPayload";
  /** The color of the customer status. */
  color: Scalars["String"];
  /** The description of the customer status. */
  description?: Maybe<Scalars["String"]>;
  /** The display name of the customer status. */
  displayName: Scalars["String"];
  /** The ID of the customer status. */
  id: Scalars["String"];
  /** The name of the customer status. */
  name: Scalars["String"];
  /**
   * The type of the customer status.
   * @deprecated Customer statuses are no longer grouped by type.
   */
  type?: Maybe<Scalars["String"]>;
};

export type CustomerStatusConnection = {
  __typename?: "CustomerStatusConnection";
  edges: Array<CustomerStatusEdge>;
  nodes: Array<CustomerStatus>;
  pageInfo: PageInfo;
};

export type CustomerStatusCreateInput = {
  /** The UI color of the status as a HEX string. */
  color: Scalars["String"];
  /** Description of the status. */
  description?: Maybe<Scalars["String"]>;
  /** The display name of the status. */
  displayName?: Maybe<Scalars["String"]>;
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The name of the status. */
  name?: Maybe<Scalars["String"]>;
  /** The position of the status in the workspace's customer flow. */
  position?: Maybe<Scalars["Float"]>;
};

export type CustomerStatusEdge = {
  __typename?: "CustomerStatusEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: CustomerStatus;
};

/** Customer status filtering options. */
export type CustomerStatusFilter = {
  /** Compound filters, all of which need to be matched by the customer status. */
  and?: Maybe<Array<CustomerStatusFilter>>;
  /** Comparator for the customer status color. */
  color?: Maybe<StringComparator>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Comparator for the customer status description. */
  description?: Maybe<StringComparator>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Comparator for the customer status name. */
  name?: Maybe<StringComparator>;
  /** Compound filters, one of which needs to be matched by the customer status. */
  or?: Maybe<Array<CustomerStatusFilter>>;
  /** Comparator for the customer status position. */
  position?: Maybe<NumberComparator>;
  /** Comparator for the customer status type. */
  type?: Maybe<StringComparator>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

export type CustomerStatusPayload = {
  __typename?: "CustomerStatusPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** The customer status that was created or updated. */
  status: CustomerStatus;
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** Customer status sorting options. */
export type CustomerStatusSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

/** [DEPRECATED] A type of customer status. */
export enum CustomerStatusType {
  Active = "active",
  Inactive = "inactive",
}

export type CustomerStatusUpdateInput = {
  /** The UI color of the status as a HEX string. */
  color?: Maybe<Scalars["String"]>;
  /** Description of the status. */
  description?: Maybe<Scalars["String"]>;
  /** The display name of the status. */
  displayName?: Maybe<Scalars["String"]>;
  /** The name of the status. */
  name?: Maybe<Scalars["String"]>;
  /** The position of the status in the workspace's customer flow. */
  position?: Maybe<Scalars["Float"]>;
};

/** A customer tier. */
export type CustomerTier = Node & {
  __typename?: "CustomerTier";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The UI color of the tier as a HEX string. */
  color: Scalars["String"];
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** Description of the tier. */
  description?: Maybe<Scalars["String"]>;
  /** The display name of the tier. */
  displayName: Scalars["String"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The name of the tier. */
  name: Scalars["String"];
  /** The position of the tier in the workspace's customers flow. */
  position: Scalars["Float"];
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

/** Certain properties of a customer tier. */
export type CustomerTierChildWebhookPayload = {
  __typename?: "CustomerTierChildWebhookPayload";
  /** The color of the customer tier. */
  color: Scalars["String"];
  /** The description of the customer tier. */
  description?: Maybe<Scalars["String"]>;
  /** The display name of the customer tier. */
  displayName: Scalars["String"];
  /** The ID of the customer tier. */
  id: Scalars["String"];
  /** The name of the customer tier. */
  name: Scalars["String"];
};

export type CustomerTierConnection = {
  __typename?: "CustomerTierConnection";
  edges: Array<CustomerTierEdge>;
  nodes: Array<CustomerTier>;
  pageInfo: PageInfo;
};

export type CustomerTierCreateInput = {
  /** The UI color of the tier as a HEX string. */
  color: Scalars["String"];
  /** Description of the tier. */
  description?: Maybe<Scalars["String"]>;
  /** The display name of the tier. */
  displayName?: Maybe<Scalars["String"]>;
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The name of the tier. */
  name?: Maybe<Scalars["String"]>;
  /** The position of the tier in the workspace's customer flow. */
  position?: Maybe<Scalars["Float"]>;
};

export type CustomerTierEdge = {
  __typename?: "CustomerTierEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: CustomerTier;
};

/** Customer tier filtering options. */
export type CustomerTierFilter = {
  /** Compound filters, all of which need to be matched by the customer tier. */
  and?: Maybe<Array<CustomerTierFilter>>;
  /** Comparator for the customer tier color. */
  color?: Maybe<StringComparator>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Comparator for the customer tier description. */
  description?: Maybe<StringComparator>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Comparator for the customer tier name. */
  name?: Maybe<StringComparator>;
  /** Compound filters, one of which needs to be matched by the customer tier. */
  or?: Maybe<Array<CustomerTierFilter>>;
  /** Comparator for the customer tier position. */
  position?: Maybe<NumberComparator>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

export type CustomerTierPayload = {
  __typename?: "CustomerTierPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
  /** The customer tier that was created or updated. */
  tier: CustomerTier;
};

export type CustomerTierUpdateInput = {
  /** The UI color of the tier as a HEX string. */
  color?: Maybe<Scalars["String"]>;
  /** Description of the tier. */
  description?: Maybe<Scalars["String"]>;
  /** The display name of the tier. */
  displayName?: Maybe<Scalars["String"]>;
  /** The name of the tier. */
  name?: Maybe<Scalars["String"]>;
  /** The position of the tier in the workspace's customer flow. */
  position?: Maybe<Scalars["Float"]>;
};

export type CustomerUpdateInput = {
  /** The domains associated with this customer. */
  domains?: Maybe<Array<Scalars["String"]>>;
  /** The ids of the customers in external systems. */
  externalIds?: Maybe<Array<Scalars["String"]>>;
  /** The URL of the customer's logo. */
  logoUrl?: Maybe<Scalars["String"]>;
  /** The main source of the customer, for customers with multiple sources. Must be one of externalIds. */
  mainSourceId?: Maybe<Scalars["String"]>;
  /** The name of the customer. */
  name?: Maybe<Scalars["String"]>;
  /** The user who owns the customer. */
  ownerId?: Maybe<Scalars["String"]>;
  /** The annual revenue generated by the customer. */
  revenue?: Maybe<Scalars["Int"]>;
  /** The size of the customer. */
  size?: Maybe<Scalars["Int"]>;
  /** The ID of the Slack channel used to interact with the customer. */
  slackChannelId?: Maybe<Scalars["String"]>;
  /** The status of the customer. */
  statusId?: Maybe<Scalars["String"]>;
  /** The tier of the customer customer. */
  tierId?: Maybe<Scalars["String"]>;
};

export type CustomerUpsertInput = {
  /** The domains associated with this customer. */
  domains?: Maybe<Array<Scalars["String"]>>;
  /** The id of the customers in external systems. */
  externalId?: Maybe<Scalars["String"]>;
  /** The identifier in UUID v4 format. */
  id?: Maybe<Scalars["String"]>;
  /** The URL of the customer's logo. */
  logoUrl?: Maybe<Scalars["String"]>;
  /** The name of the customer. */
  name?: Maybe<Scalars["String"]>;
  /** The user who owns the customer. */
  ownerId?: Maybe<Scalars["String"]>;
  /** The annual revenue generated by the customer. */
  revenue?: Maybe<Scalars["Int"]>;
  /** The size of the customer. */
  size?: Maybe<Scalars["Int"]>;
  /** The ID of the Slack channel used to interact with the customer. */
  slackChannelId?: Maybe<Scalars["String"]>;
  /** The status of the customer. */
  statusId?: Maybe<Scalars["String"]>;
  /** The tier of the customer. */
  tierId?: Maybe<Scalars["String"]>;
  /** The name tier of the customer. Will be created if doesn't exist */
  tierName?: Maybe<Scalars["String"]>;
};

/** Payload for a customer webhook. */
export type CustomerWebhookPayload = {
  __typename?: "CustomerWebhookPayload";
  /** The approximate number of needs of the customer. */
  approximateNeedCount: Scalars["Float"];
  /** The time at which the entity was archived. */
  archivedAt?: Maybe<Scalars["String"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["String"];
  /** The domains associated with this customer. */
  domains: Array<Scalars["String"]>;
  /** The ids of the customers in external systems. */
  externalIds: Array<Scalars["String"]>;
  /** The ID of the entity. */
  id: Scalars["String"];
  /** The customer's logo URL. */
  logoUrl?: Maybe<Scalars["String"]>;
  /** The ID of the main source, when a customer has multiple sources. Must be one of externalIds. */
  mainSourceId?: Maybe<Scalars["String"]>;
  /** The name of the customer. */
  name: Scalars["String"];
  /** The ID of the user who owns the customer. */
  ownerId?: Maybe<Scalars["String"]>;
  /** The annual revenue generated by the customer. */
  revenue?: Maybe<Scalars["Float"]>;
  /** The size of the customer. */
  size?: Maybe<Scalars["Float"]>;
  /** The ID of the Slack channel used to interact with the customer. */
  slackChannelId?: Maybe<Scalars["String"]>;
  /** The customer's unique URL slug. */
  slugId: Scalars["String"];
  /** The customer status. */
  status?: Maybe<CustomerStatusChildWebhookPayload>;
  /** The ID of the customer status. */
  statusId?: Maybe<Scalars["String"]>;
  /** The customer tier. */
  tier?: Maybe<CustomerTierChildWebhookPayload>;
  /** The ID of the customer tier. */
  tierId?: Maybe<Scalars["String"]>;
  /** The time at which the entity was updated. */
  updatedAt: Scalars["String"];
};

/** A set of issues to be resolved in a specified amount of time. */
export type Cycle = Node & {
  __typename?: "Cycle";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the cycle was automatically archived by the auto pruning process. */
  autoArchivedAt?: Maybe<Scalars["DateTime"]>;
  /** The completion time of the cycle. If null, the cycle hasn't been completed. */
  completedAt?: Maybe<Scalars["DateTime"]>;
  /** The number of completed issues in the cycle after each day. */
  completedIssueCountHistory: Array<Scalars["Float"]>;
  /** The number of completed estimation points after each day. */
  completedScopeHistory: Array<Scalars["Float"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** [Internal] The current progress of the cycle. */
  currentProgress: Scalars["JSONObject"];
  /** The cycle's description. */
  description?: Maybe<Scalars["String"]>;
  /** The end time of the cycle. */
  endsAt: Scalars["DateTime"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The number of in progress estimation points after each day. */
  inProgressScopeHistory: Array<Scalars["Float"]>;
  /** The cycle inherited from. */
  inheritedFrom?: Maybe<Cycle>;
  /** Whether the cycle is currently active. */
  isActive: Scalars["Boolean"];
  /** Whether the cycle is in the future. */
  isFuture: Scalars["Boolean"];
  /** Whether the cycle is the next cycle for the team. */
  isNext: Scalars["Boolean"];
  /** Whether the cycle is in the past. */
  isPast: Scalars["Boolean"];
  /** Whether the cycle is the previous cycle for the team. */
  isPrevious: Scalars["Boolean"];
  /** The total number of issues in the cycle after each day. */
  issueCountHistory: Array<Scalars["Float"]>;
  /** Issues associated with the cycle. */
  issues: IssueConnection;
  /** The custom name of the cycle. */
  name?: Maybe<Scalars["String"]>;
  /** The number of the cycle. */
  number: Scalars["Float"];
  /** The overall progress of the cycle. This is the (completed estimate points + 0.25 * in progress estimate points) / total estimate points. */
  progress: Scalars["Float"];
  /** [Internal] The progress history of the cycle. */
  progressHistory: Scalars["JSONObject"];
  /** The total number of estimation points after each day. */
  scopeHistory: Array<Scalars["Float"]>;
  /** The start time of the cycle. */
  startsAt: Scalars["DateTime"];
  /** The team that the cycle is associated with. */
  team: Team;
  /** Issues that weren't completed when the cycle was closed. */
  uncompletedIssuesUponClose: IssueConnection;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

/** A set of issues to be resolved in a specified amount of time. */
export type CycleIssuesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** A set of issues to be resolved in a specified amount of time. */
export type CycleUncompletedIssuesUponCloseArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** A generic payload return from entity archive mutations. */
export type CycleArchivePayload = ArchivePayload & {
  __typename?: "CycleArchivePayload";
  /** The archived/unarchived entity. Null if entity was deleted. */
  entity?: Maybe<Cycle>;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** Certain properties of a cycle. */
export type CycleChildWebhookPayload = {
  __typename?: "CycleChildWebhookPayload";
  /** The end date of the cycle. */
  endsAt: Scalars["String"];
  /** The ID of the cycle. */
  id: Scalars["String"];
  /** The name of the cycle. */
  name?: Maybe<Scalars["String"]>;
  /** The number of the cycle. */
  number: Scalars["Float"];
  /** The start date of the cycle. */
  startsAt: Scalars["String"];
};

export type CycleConnection = {
  __typename?: "CycleConnection";
  edges: Array<CycleEdge>;
  nodes: Array<Cycle>;
  pageInfo: PageInfo;
};

export type CycleCreateInput = {
  /** The completion time of the cycle. If null, the cycle hasn't been completed. */
  completedAt?: Maybe<Scalars["DateTime"]>;
  /** The description of the cycle. */
  description?: Maybe<Scalars["String"]>;
  /** The end date of the cycle. */
  endsAt: Scalars["DateTime"];
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The custom name of the cycle. */
  name?: Maybe<Scalars["String"]>;
  /** The start date of the cycle. */
  startsAt: Scalars["DateTime"];
  /** The team to associate the cycle with. */
  teamId: Scalars["String"];
};

export type CycleEdge = {
  __typename?: "CycleEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: Cycle;
};

/** Cycle filtering options. */
export type CycleFilter = {
  /** Compound filters, all of which need to be matched by the cycle. */
  and?: Maybe<Array<CycleFilter>>;
  /** Comparator for the cycle completed at date. */
  completedAt?: Maybe<DateComparator>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Comparator for the cycle ends at date. */
  endsAt?: Maybe<DateComparator>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Comparator for the filtering active cycle. */
  isActive?: Maybe<BooleanComparator>;
  /** Comparator for the filtering future cycles. */
  isFuture?: Maybe<BooleanComparator>;
  /** Comparator for filtering for whether the cycle is currently in cooldown. */
  isInCooldown?: Maybe<BooleanComparator>;
  /** Comparator for the filtering next cycle. */
  isNext?: Maybe<BooleanComparator>;
  /** Comparator for the filtering past cycles. */
  isPast?: Maybe<BooleanComparator>;
  /** Comparator for the filtering previous cycle. */
  isPrevious?: Maybe<BooleanComparator>;
  /** Filters that the cycles issues must satisfy. */
  issues?: Maybe<IssueCollectionFilter>;
  /** Comparator for the cycle name. */
  name?: Maybe<StringComparator>;
  /** Comparator for the cycle number. */
  number?: Maybe<NumberComparator>;
  /** Compound filters, one of which need to be matched by the cycle. */
  or?: Maybe<Array<CycleFilter>>;
  /** Comparator for the cycle start date. */
  startsAt?: Maybe<DateComparator>;
  /** Filters that the cycles team must satisfy. */
  team?: Maybe<TeamFilter>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

/** A cycle notification subscription. */
export type CycleNotificationSubscription = Entity &
  Node &
  NotificationSubscription & {
    __typename?: "CycleNotificationSubscription";
    /** Whether the subscription is active or not. */
    active: Scalars["Boolean"];
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: Maybe<Scalars["DateTime"]>;
    /** The type of view to which the notification subscription context is associated with. */
    contextViewType?: Maybe<ContextViewType>;
    /** The time at which the entity was created. */
    createdAt: Scalars["DateTime"];
    /** The contextual custom view associated with the notification subscription. */
    customView?: Maybe<CustomView>;
    /** The customer associated with the notification subscription. */
    customer?: Maybe<Customer>;
    /** The cycle subscribed to. */
    cycle: Cycle;
    /** The unique identifier of the entity. */
    id: Scalars["ID"];
    /** The contextual initiative view associated with the notification subscription. */
    initiative?: Maybe<Initiative>;
    /** The contextual label view associated with the notification subscription. */
    label?: Maybe<IssueLabel>;
    /** The type of subscription. */
    notificationSubscriptionTypes: Array<Scalars["String"]>;
    /** The contextual project view associated with the notification subscription. */
    project?: Maybe<Project>;
    /** The user that subscribed to receive notifications. */
    subscriber: User;
    /** The team associated with the notification subscription. */
    team?: Maybe<Team>;
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars["DateTime"];
    /** The user view associated with the notification subscription. */
    user?: Maybe<User>;
    /** The type of user view to which the notification subscription context is associated with. */
    userContextViewType?: Maybe<UserContextViewType>;
  };

export type CyclePayload = {
  __typename?: "CyclePayload";
  /** The Cycle that was created or updated. */
  cycle?: Maybe<Cycle>;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export enum CyclePeriod {
  After = "after",
  Before = "before",
  During = "during",
}

/** Comparator for period when issue was added to a cycle. */
export type CyclePeriodComparator = {
  /** Equals constraint. */
  eq?: Maybe<CyclePeriod>;
  /** In-array constraint. */
  in?: Maybe<Array<CyclePeriod>>;
  /** Not-equals constraint. */
  neq?: Maybe<CyclePeriod>;
  /** Not-in-array constraint. */
  nin?: Maybe<Array<CyclePeriod>>;
  /** Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values. */
  null?: Maybe<Scalars["Boolean"]>;
};

/** Input for shifting all cycles from a certain cycle onwards by a certain number of days */
export type CycleShiftAllInput = {
  /** The number of days to shift the cycles by. */
  daysToShift: Scalars["Float"];
  /** The cycle ID at which to start the shift. */
  id: Scalars["String"];
};

/** Issue cycle sorting options. */
export type CycleSort = {
  /** When set to true, cycles will be ordered with a custom order. Current cycle comes first, followed by upcoming cycles in ASC order, followed by previous cycles in DESC order. */
  currentCycleFirst?: Maybe<Scalars["Boolean"]>;
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

export type CycleUpdateInput = {
  /** The end date of the cycle. */
  completedAt?: Maybe<Scalars["DateTime"]>;
  /** The description of the cycle. */
  description?: Maybe<Scalars["String"]>;
  /** The end date of the cycle. */
  endsAt?: Maybe<Scalars["DateTime"]>;
  /** The custom name of the cycle. */
  name?: Maybe<Scalars["String"]>;
  /** The start date of the cycle. */
  startsAt?: Maybe<Scalars["DateTime"]>;
};

/** Payload for a cycle webhook. */
export type CycleWebhookPayload = {
  __typename?: "CycleWebhookPayload";
  /** The time at which the entity was archived. */
  archivedAt?: Maybe<Scalars["String"]>;
  /** The time at which the cycle was automatically archived by the auto pruning process. */
  autoArchivedAt?: Maybe<Scalars["String"]>;
  /** The completion time of the cycle. If null, the cycle hasn't been completed. */
  completedAt?: Maybe<Scalars["String"]>;
  /** The number of completed issues in the cycle after each day. */
  completedIssueCountHistory: Array<Scalars["Float"]>;
  /** The number of completed estimation points after each day. */
  completedScopeHistory: Array<Scalars["Float"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["String"];
  /** The cycle's description. */
  description?: Maybe<Scalars["String"]>;
  /** The end date of the cycle. */
  endsAt: Scalars["String"];
  /** The ID of the entity. */
  id: Scalars["String"];
  /** The number of in progress estimation points after each day. */
  inProgressScopeHistory: Array<Scalars["Float"]>;
  /** The ID of the cycle inherited from. */
  inheritedFromId?: Maybe<Scalars["String"]>;
  /** The total number of issues in the cycle after each day. */
  issueCountHistory: Array<Scalars["Float"]>;
  /** The name of the cycle. */
  name?: Maybe<Scalars["String"]>;
  /** The number of the cycle. */
  number: Scalars["Float"];
  /** The total number of estimation points after each day. */
  scopeHistory: Array<Scalars["Float"]>;
  /** The start date of the cycle. */
  startsAt: Scalars["String"];
  /** The team ID of the cycle. */
  teamId: Scalars["String"];
  /** The IDs of the uncompleted issues upon close. */
  uncompletedIssuesUponCloseIds: Array<Scalars["String"]>;
  /** The time at which the entity was updated. */
  updatedAt: Scalars["String"];
};

/** [Internal] A dashboard, usually a collection of widgets to display several insights at once. */
export type Dashboard = Node & {
  __typename?: "Dashboard";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The color of the icon of the dashboard. */
  color?: Maybe<Scalars["String"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The user who created the dashboard. */
  creator?: Maybe<User>;
  /** The description of the dashboard. */
  description?: Maybe<Scalars["String"]>;
  /** The icon of the dashboard. */
  icon?: Maybe<Scalars["String"]>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The filter applied to all dashboard widgets showing issues data. */
  issueFilter?: Maybe<Scalars["JSONObject"]>;
  /** The name of the dashboard. */
  name: Scalars["String"];
  /** The organization of the dashboard. */
  organization: Organization;
  /** The owner of the dashboard. */
  owner?: Maybe<User>;
  /** The filter applied to all dashboard widgets showing projects data. */
  projectFilter?: Maybe<Scalars["JSONObject"]>;
  /** Whether the dashboard is shared with everyone in the organization. */
  shared: Scalars["Boolean"];
  /** The dashboard's unique URL slug. */
  slugId: Scalars["String"];
  /** The sort order of the dashboard within the organization or its team. */
  sortOrder: Scalars["Float"];
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** The user who last updated the dashboard. */
  updatedBy?: Maybe<User>;
  /** The widgets on the dashboard. */
  widgets: Scalars["JSONObject"];
};

/** Union type for all possible webhook entity data payloads */
export type DataWebhookPayload =
  | AgentActivityWebhookPayload
  | AgentSessionWebhookPayload
  | AttachmentWebhookPayload
  | AuditEntryWebhookPayload
  | CommentWebhookPayload
  | CustomerNeedWebhookPayload
  | CustomerWebhookPayload
  | CycleWebhookPayload
  | DocumentWebhookPayload
  | InitiativeUpdateWebhookPayload
  | InitiativeWebhookPayload
  | IssueLabelWebhookPayload
  | IssueWebhookPayload
  | ProjectUpdateWebhookPayload
  | ProjectWebhookPayload
  | ReactionWebhookPayload
  | UserWebhookPayload;

/** Comparator for dates. */
export type DateComparator = {
  /** Equals constraint. */
  eq?: Maybe<Scalars["DateTimeOrDuration"]>;
  /** Greater-than constraint. Matches any values that are greater than the given value. */
  gt?: Maybe<Scalars["DateTimeOrDuration"]>;
  /** Greater-than-or-equal constraint. Matches any values that are greater than or equal to the given value. */
  gte?: Maybe<Scalars["DateTimeOrDuration"]>;
  /** In-array constraint. */
  in?: Maybe<Array<Scalars["DateTimeOrDuration"]>>;
  /** Less-than constraint. Matches any values that are less than the given value. */
  lt?: Maybe<Scalars["DateTimeOrDuration"]>;
  /** Less-than-or-equal constraint. Matches any values that are less than or equal to the given value. */
  lte?: Maybe<Scalars["DateTimeOrDuration"]>;
  /** Not-equals constraint. */
  neq?: Maybe<Scalars["DateTimeOrDuration"]>;
  /** Not-in-array constraint. */
  nin?: Maybe<Array<Scalars["DateTimeOrDuration"]>>;
};

/** By which resolution is a date defined. */
export enum DateResolutionType {
  HalfYear = "halfYear",
  Month = "month",
  Quarter = "quarter",
  Year = "year",
}

/** The day of the week. */
export enum Day {
  Friday = "Friday",
  Monday = "Monday",
  Saturday = "Saturday",
  Sunday = "Sunday",
  Thursday = "Thursday",
  Tuesday = "Tuesday",
  Wednesday = "Wednesday",
}

/** Issue delegate sorting options. */
export type DelegateSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

export type DeleteOrganizationInput = {
  /** The deletion code to confirm operation. */
  deletionCode: Scalars["String"];
};

/** A generic payload return from entity deletion mutations. */
export type DeletePayload = ArchivePayload & {
  __typename?: "DeletePayload";
  /** The identifier of the deleted entity. */
  entityId: Scalars["String"];
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** A document that can be attached to different entities. */
export type Document = Node & {
  __typename?: "Document";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The color of the icon. */
  color?: Maybe<Scalars["String"]>;
  /** Comments associated with the document. */
  comments: CommentConnection;
  /** The documents content in markdown format. */
  content?: Maybe<Scalars["String"]>;
  /** [Internal] The documents content as YJS state. */
  contentState?: Maybe<Scalars["String"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The user who created the document. */
  creator?: Maybe<User>;
  /** The ID of the document content associated with the document. */
  documentContentId?: Maybe<Scalars["String"]>;
  /** The time at which the document was hidden. Null if the entity has not been hidden. */
  hiddenAt?: Maybe<Scalars["DateTime"]>;
  /** The icon of the document. */
  icon?: Maybe<Scalars["String"]>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The initiative that the document is associated with. */
  initiative?: Maybe<Initiative>;
  /** The last template that was applied to this document. */
  lastAppliedTemplate?: Maybe<Template>;
  /** The project that the document is associated with. */
  project?: Maybe<Project>;
  /** The document's unique URL slug. */
  slugId: Scalars["String"];
  /** The order of the item in the resources list. */
  sortOrder: Scalars["Float"];
  /** [Internal] The team that the document is associated with. */
  team?: Maybe<Team>;
  /** The document title. */
  title: Scalars["String"];
  /** A flag that indicates whether the document is in the trash bin. */
  trashed?: Maybe<Scalars["Boolean"]>;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** The user who last updated the document. */
  updatedBy?: Maybe<User>;
  /** The canonical url for the document. */
  url: Scalars["String"];
};

/** A document that can be attached to different entities. */
export type DocumentCommentsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CommentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** A generic payload return from entity archive mutations. */
export type DocumentArchivePayload = ArchivePayload & {
  __typename?: "DocumentArchivePayload";
  /** The archived/unarchived entity. Null if entity was deleted. */
  entity?: Maybe<Document>;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** Certain properties of a document. */
export type DocumentChildWebhookPayload = {
  __typename?: "DocumentChildWebhookPayload";
  /** The ID of the document. */
  id: Scalars["String"];
  /** The initiative this document belongs to. */
  initiative?: Maybe<InitiativeChildWebhookPayload>;
  /** The ID of the initiative this document belongs to. */
  initiativeId?: Maybe<Scalars["String"]>;
  /** The project this document belongs to. */
  project?: Maybe<ProjectChildWebhookPayload>;
  /** The ID of the project this document belongs to. */
  projectId?: Maybe<Scalars["String"]>;
  /** The title of the document. */
  title: Scalars["String"];
};

export type DocumentConnection = {
  __typename?: "DocumentConnection";
  edges: Array<DocumentEdge>;
  nodes: Array<Document>;
  pageInfo: PageInfo;
};

/** A document content for a project. */
export type DocumentContent = Node & {
  __typename?: "DocumentContent";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The document content in markdown format. */
  content?: Maybe<Scalars["String"]>;
  /** The document content state as a base64 encoded string. */
  contentState?: Maybe<Scalars["String"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The document that the content is associated with. */
  document?: Maybe<Document>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The initiative that the content is associated with. */
  initiative?: Maybe<Initiative>;
  /** The issue that the content is associated with. */
  issue?: Maybe<Issue>;
  /** The project that the content is associated with. */
  project?: Maybe<Project>;
  /** The project milestone that the content is associated with. */
  projectMilestone?: Maybe<ProjectMilestone>;
  /** The time at which the document content was restored from a previous version. */
  restoredAt?: Maybe<Scalars["DateTime"]>;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

/** Certain properties of a document content. */
export type DocumentContentChildWebhookPayload = {
  __typename?: "DocumentContentChildWebhookPayload";
  /** The document this document content belongs to. */
  document?: Maybe<DocumentChildWebhookPayload>;
  /** The project this document belongs to. */
  project?: Maybe<ProjectChildWebhookPayload>;
};

export type DocumentContentHistoryPayload = {
  __typename?: "DocumentContentHistoryPayload";
  /** The document content history entries. */
  history: Array<DocumentContentHistoryType>;
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type DocumentContentHistoryType = {
  __typename?: "DocumentContentHistoryType";
  /** The ID of the author of the change. */
  actorIds?: Maybe<Array<Scalars["String"]>>;
  /** [Internal] The document content as Prosemirror document. */
  contentData?: Maybe<Scalars["JSON"]>;
  /** The date when the document content history snapshot was taken. This can be different than createdAt since the content is captured from its state at the previously known updatedAt timestamp in the case of an update. On document create, these timestamps can be the same. */
  contentDataSnapshotAt: Scalars["DateTime"];
  /** The date when the document content history entry was created. */
  createdAt: Scalars["DateTime"];
  /** The UUID of the document content history entry. */
  id: Scalars["String"];
};

export type DocumentCreateInput = {
  /** The color of the icon. */
  color?: Maybe<Scalars["String"]>;
  /** The document content as markdown. */
  content?: Maybe<Scalars["String"]>;
  /** The icon of the document. */
  icon?: Maybe<Scalars["String"]>;
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** [Internal] Related initiative for the document. */
  initiativeId?: Maybe<Scalars["String"]>;
  /** The ID of the last template applied to the document. */
  lastAppliedTemplateId?: Maybe<Scalars["String"]>;
  /** Related project for the document. */
  projectId?: Maybe<Scalars["String"]>;
  /** [Internal] The resource folder containing the document. */
  resourceFolderId?: Maybe<Scalars["String"]>;
  /** The order of the item in the resources list. */
  sortOrder?: Maybe<Scalars["Float"]>;
  /** [INTERNAL] The identifiers of the users subscribing to this document. */
  subscriberIds?: Maybe<Array<Scalars["String"]>>;
  /** [Internal] Related team for the document. */
  teamId?: Maybe<Scalars["String"]>;
  /** The title of the document. */
  title: Scalars["String"];
};

export type DocumentEdge = {
  __typename?: "DocumentEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: Document;
};

/** Document filtering options. */
export type DocumentFilter = {
  /** Compound filters, all of which need to be matched by the document. */
  and?: Maybe<Array<DocumentFilter>>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Filters that the document's creator must satisfy. */
  creator?: Maybe<UserFilter>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Filters that the document's initiative must satisfy. */
  initiative?: Maybe<InitiativeFilter>;
  /** Compound filters, one of which need to be matched by the document. */
  or?: Maybe<Array<DocumentFilter>>;
  /** Filters that the document's project must satisfy. */
  project?: Maybe<ProjectFilter>;
  /** Comparator for the document slug ID. */
  slugId?: Maybe<StringComparator>;
  /** Comparator for the document title. */
  title?: Maybe<StringComparator>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

/** A document related notification. */
export type DocumentNotification = Entity &
  Node &
  Notification & {
    __typename?: "DocumentNotification";
    /** The user that caused the notification. */
    actor?: Maybe<User>;
    /** [Internal] Notification actor initials if avatar is not available. */
    actorAvatarColor: Scalars["String"];
    /** [Internal] Notification avatar URL. */
    actorAvatarUrl?: Maybe<Scalars["String"]>;
    /** [Internal] Notification actor initials if avatar is not available. */
    actorInitials?: Maybe<Scalars["String"]>;
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: Maybe<Scalars["DateTime"]>;
    /** The bot that caused the notification. */
    botActor?: Maybe<ActorBot>;
    /** The category of the notification. */
    category: NotificationCategory;
    /** Related comment ID. Null if the notification is not related to a comment. */
    commentId?: Maybe<Scalars["String"]>;
    /** The time at which the entity was created. */
    createdAt: Scalars["DateTime"];
    /** Related document ID. */
    documentId: Scalars["String"];
    /**
     * The time at when an email reminder for this notification was sent to the user. Null, if no email
     *     reminder has been sent.
     */
    emailedAt?: Maybe<Scalars["DateTime"]>;
    /** The external user that caused the notification. */
    externalUserActor?: Maybe<ExternalUser>;
    /** [Internal] Notifications with the same grouping key will be grouped together in the UI. */
    groupingKey: Scalars["String"];
    /** [Internal] Priority of the notification with the same grouping key. Higher number means higher priority. If priority is the same, notifications should be sorted by `createdAt`. */
    groupingPriority: Scalars["Float"];
    /** The unique identifier of the entity. */
    id: Scalars["ID"];
    /** [Internal] Inbox URL for the notification. */
    inboxUrl: Scalars["String"];
    /** [Internal] If notification actor was Linear. */
    isLinearActor: Scalars["Boolean"];
    /** [Internal] Issue's status type for issue notifications. */
    issueStatusType?: Maybe<Scalars["String"]>;
    /** Related parent comment ID. Null if the notification is not related to a comment. */
    parentCommentId?: Maybe<Scalars["String"]>;
    /** [Internal] Project update health for new updates. */
    projectUpdateHealth?: Maybe<Scalars["String"]>;
    /** Name of the reaction emoji related to the notification. */
    reactionEmoji?: Maybe<Scalars["String"]>;
    /** The time at when the user marked the notification as read. Null, if the the user hasn't read the notification */
    readAt?: Maybe<Scalars["DateTime"]>;
    /** The time until a notification will be snoozed. After that it will appear in the inbox again. */
    snoozedUntilAt?: Maybe<Scalars["DateTime"]>;
    /** [Internal] Notification subtitle. */
    subtitle: Scalars["String"];
    /** [Internal] Notification title. */
    title: Scalars["String"];
    /** Notification type. */
    type: Scalars["String"];
    /** The time at which a notification was unsnoozed.. */
    unsnoozedAt?: Maybe<Scalars["DateTime"]>;
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars["DateTime"];
    /** [Internal] URL to the target of the notification. */
    url: Scalars["String"];
    /** The user that received the notification. */
    user: User;
  };

export type DocumentPayload = {
  __typename?: "DocumentPayload";
  /** The document that was created or updated. */
  document: Document;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type DocumentSearchPayload = {
  __typename?: "DocumentSearchPayload";
  /** Archived entities matching the search term along with all their dependencies. */
  archivePayload: ArchiveResponse;
  edges: Array<DocumentSearchResultEdge>;
  nodes: Array<DocumentSearchResult>;
  pageInfo: PageInfo;
  /** Total number of results for query without filters applied. */
  totalCount: Scalars["Float"];
};

export type DocumentSearchResult = Node & {
  __typename?: "DocumentSearchResult";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The color of the icon. */
  color?: Maybe<Scalars["String"]>;
  /** Comments associated with the document. */
  comments: CommentConnection;
  /** The documents content in markdown format. */
  content?: Maybe<Scalars["String"]>;
  /** [Internal] The documents content as YJS state. */
  contentState?: Maybe<Scalars["String"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The user who created the document. */
  creator?: Maybe<User>;
  /** The ID of the document content associated with the document. */
  documentContentId?: Maybe<Scalars["String"]>;
  /** The time at which the document was hidden. Null if the entity has not been hidden. */
  hiddenAt?: Maybe<Scalars["DateTime"]>;
  /** The icon of the document. */
  icon?: Maybe<Scalars["String"]>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The initiative that the document is associated with. */
  initiative?: Maybe<Initiative>;
  /** The last template that was applied to this document. */
  lastAppliedTemplate?: Maybe<Template>;
  /** Metadata related to search result. */
  metadata: Scalars["JSONObject"];
  /** The project that the document is associated with. */
  project?: Maybe<Project>;
  /** The document's unique URL slug. */
  slugId: Scalars["String"];
  /** The order of the item in the resources list. */
  sortOrder: Scalars["Float"];
  /** [Internal] The team that the document is associated with. */
  team?: Maybe<Team>;
  /** The document title. */
  title: Scalars["String"];
  /** A flag that indicates whether the document is in the trash bin. */
  trashed?: Maybe<Scalars["Boolean"]>;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** The user who last updated the document. */
  updatedBy?: Maybe<User>;
  /** The canonical url for the document. */
  url: Scalars["String"];
};

export type DocumentSearchResultCommentsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CommentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type DocumentSearchResultEdge = {
  __typename?: "DocumentSearchResultEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: DocumentSearchResult;
};

export type DocumentUpdateInput = {
  /** The color of the icon. */
  color?: Maybe<Scalars["String"]>;
  /** The document content as markdown. */
  content?: Maybe<Scalars["String"]>;
  /** The time at which the document was hidden. */
  hiddenAt?: Maybe<Scalars["DateTime"]>;
  /** The icon of the document. */
  icon?: Maybe<Scalars["String"]>;
  /** [Internal] Related initiative for the document. */
  initiativeId?: Maybe<Scalars["String"]>;
  /** The ID of the last template applied to the document. */
  lastAppliedTemplateId?: Maybe<Scalars["String"]>;
  /** Related project for the document. */
  projectId?: Maybe<Scalars["String"]>;
  /** [Internal] The resource folder containing the document. */
  resourceFolderId?: Maybe<Scalars["String"]>;
  /** The order of the item in the resources list. */
  sortOrder?: Maybe<Scalars["Float"]>;
  /** [INTERNAL] The identifiers of the users subscribing to this document. */
  subscriberIds?: Maybe<Array<Scalars["String"]>>;
  /** [Internal] Related team for the document. */
  teamId?: Maybe<Scalars["String"]>;
  /** The title of the document. */
  title?: Maybe<Scalars["String"]>;
  /** Whether the document has been trashed. */
  trashed?: Maybe<Scalars["Boolean"]>;
};

/** Payload for a document webhook. */
export type DocumentWebhookPayload = {
  __typename?: "DocumentWebhookPayload";
  /** The time at which the entity was archived. */
  archivedAt?: Maybe<Scalars["String"]>;
  /** The color of the document. */
  color?: Maybe<Scalars["String"]>;
  /** The content of the document. */
  content?: Maybe<Scalars["String"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["String"];
  /** The ID of the user who created the document. */
  creatorId?: Maybe<Scalars["String"]>;
  /** The description of the document. */
  description?: Maybe<Scalars["String"]>;
  /** The time at which the document was hidden. */
  hiddenAt?: Maybe<Scalars["String"]>;
  /** The icon of the document. */
  icon?: Maybe<Scalars["String"]>;
  /** The ID of the entity. */
  id: Scalars["String"];
  /** The ID of the initiative this document belongs to. */
  initiativeId?: Maybe<Scalars["String"]>;
  /** The ID of the last template that was applied to this document. */
  lastAppliedTemplateId?: Maybe<Scalars["String"]>;
  /** The ID of the project this document belongs to. */
  projectId?: Maybe<Scalars["String"]>;
  /** The ID of the resource folder this document belongs to. */
  resourceFolderId?: Maybe<Scalars["String"]>;
  /** The document's unique URL slug. */
  slugId: Scalars["String"];
  /** The order of the item in the resources list. */
  sortOrder: Scalars["Float"];
  /** The IDs of the users who are subscribed to this document. */
  subscriberIds?: Maybe<Array<Scalars["String"]>>;
  /** The title of the document. */
  title: Scalars["String"];
  /** A flag that indicates whether the document is in the trash bin. */
  trashed?: Maybe<Scalars["Boolean"]>;
  /** The time at which the entity was updated. */
  updatedAt: Scalars["String"];
  /** The ID of the user who last updated the document. */
  updatedById?: Maybe<Scalars["String"]>;
};

/** A general purpose draft. Used for comments, project updates, etc. */
export type Draft = Node & {
  __typename?: "Draft";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The text content as a Prosemirror document. */
  bodyData: Scalars["JSON"];
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The customer need that this draft is referencing. */
  customerNeed?: Maybe<CustomerNeed>;
  /** Additional properties for the draft. */
  data?: Maybe<Scalars["JSONObject"]>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The initiative for which this is a draft initiative update. */
  initiative?: Maybe<Initiative>;
  /** The initiative update for which this is a draft comment. */
  initiativeUpdate?: Maybe<InitiativeUpdate>;
  /** Whether the draft was autogenerated for the user. */
  isAutogenerated: Scalars["Boolean"];
  /** The issue for which this is a draft comment. */
  issue?: Maybe<Issue>;
  /** The comment for which this is a draft comment reply. */
  parentComment?: Maybe<Comment>;
  /** The post for which this is a draft comment. */
  post?: Maybe<Post>;
  /** The project for which this is a draft project update. */
  project?: Maybe<Project>;
  /** The project update for which this is a draft comment. */
  projectUpdate?: Maybe<ProjectUpdate>;
  /** The team for which this is a draft post. */
  team?: Maybe<Team>;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** The user who created the draft. */
  user: User;
  /** [INTERNAL] Whether the draft was ported from a local draft. */
  wasLocalDraft: Scalars["Boolean"];
};

export type DraftConnection = {
  __typename?: "DraftConnection";
  edges: Array<DraftEdge>;
  nodes: Array<Draft>;
  pageInfo: PageInfo;
};

export type DraftEdge = {
  __typename?: "DraftEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: Draft;
};

/** Issue due date sorting options. */
export type DueDateSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

/** An email address that can be used for submitting issues. */
export type EmailIntakeAddress = Node & {
  __typename?: "EmailIntakeAddress";
  /** Unique email address user name (before @) used for incoming email. */
  address: Scalars["String"];
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The user who created the email intake address. */
  creator?: Maybe<User>;
  /** Whether issues created from that email address will be turned into customer requests. */
  customerRequestsEnabled: Scalars["Boolean"];
  /** Whether the email address is enabled. */
  enabled: Scalars["Boolean"];
  /** The email address used to forward emails to the intake address. */
  forwardingEmailAddress?: Maybe<Scalars["String"]>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The auto-reply message for issue canceled. If not set, the default reply will be used. */
  issueCanceledAutoReply?: Maybe<Scalars["String"]>;
  /** Whether the auto-reply for issue canceled is enabled. */
  issueCanceledAutoReplyEnabled: Scalars["Boolean"];
  /** The auto-reply message for issue completed. If not set, the default reply will be used. */
  issueCompletedAutoReply?: Maybe<Scalars["String"]>;
  /** Whether the auto-reply for issue completed is enabled. */
  issueCompletedAutoReplyEnabled: Scalars["Boolean"];
  /** The auto-reply message for issue created. If not set, the default reply will be used. */
  issueCreatedAutoReply?: Maybe<Scalars["String"]>;
  /** The organization that the email address is associated with. */
  organization: Organization;
  /** Whether email replies are enabled. */
  repliesEnabled: Scalars["Boolean"];
  /** The name to be used for outgoing emails. */
  senderName?: Maybe<Scalars["String"]>;
  /** The SES domain identity that the email address is associated with. */
  sesDomainIdentity?: Maybe<SesDomainIdentity>;
  /** The team that the email address is associated with. */
  team?: Maybe<Team>;
  /** The template that the email address is associated with. */
  template?: Maybe<Template>;
  /** The type of the email address. */
  type: EmailIntakeAddressType;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** Whether the commenter's name is included in the email replies. */
  useUserNamesInReplies: Scalars["Boolean"];
};

export type EmailIntakeAddressCreateInput = {
  /** Whether customer requests are enabled. */
  customerRequestsEnabled?: Maybe<Scalars["Boolean"]>;
  /** The email address used to forward emails to the intake address. */
  forwardingEmailAddress?: Maybe<Scalars["String"]>;
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The auto-reply message for issue canceled. */
  issueCanceledAutoReply?: Maybe<Scalars["String"]>;
  /** Whether the issue canceled auto-reply is enabled. */
  issueCanceledAutoReplyEnabled?: Maybe<Scalars["Boolean"]>;
  /** The auto-reply message for issue completed. */
  issueCompletedAutoReply?: Maybe<Scalars["String"]>;
  /** Whether the issue completed auto-reply is enabled. */
  issueCompletedAutoReplyEnabled?: Maybe<Scalars["Boolean"]>;
  /** The auto-reply message for issue created. */
  issueCreatedAutoReply?: Maybe<Scalars["String"]>;
  /** Whether email replies are enabled. */
  repliesEnabled?: Maybe<Scalars["Boolean"]>;
  /** The name to be used for outgoing emails. */
  senderName?: Maybe<Scalars["String"]>;
  /** The identifier or key of the team this email address will intake issues for. */
  teamId?: Maybe<Scalars["String"]>;
  /** The identifier of the template this email address will intake issues for. */
  templateId?: Maybe<Scalars["String"]>;
  /** The type of the email address. If not provided, the backend will default to team or template. */
  type?: Maybe<EmailIntakeAddressType>;
  /** Whether the commenter's name is included in the email replies. */
  useUserNamesInReplies?: Maybe<Scalars["Boolean"]>;
};

export type EmailIntakeAddressPayload = {
  __typename?: "EmailIntakeAddressPayload";
  /** The email address that was created or updated. */
  emailIntakeAddress: EmailIntakeAddress;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** The type of the email address. */
export enum EmailIntakeAddressType {
  Asks = "asks",
  Team = "team",
  Template = "template",
}

export type EmailIntakeAddressUpdateInput = {
  /** Whether customer requests are enabled. */
  customerRequestsEnabled?: Maybe<Scalars["Boolean"]>;
  /** Whether the email address is currently enabled. If set to false, the email address will be disabled and no longer accept incoming emails. */
  enabled?: Maybe<Scalars["Boolean"]>;
  /** The email address used to forward emails to the intake address. */
  forwardingEmailAddress?: Maybe<Scalars["String"]>;
  /** Custom auto-reply message for issue canceled. */
  issueCanceledAutoReply?: Maybe<Scalars["String"]>;
  /** Whether the issue canceled auto-reply is enabled. */
  issueCanceledAutoReplyEnabled?: Maybe<Scalars["Boolean"]>;
  /** Custom auto-reply message for issue completed. */
  issueCompletedAutoReply?: Maybe<Scalars["String"]>;
  /** Whether the issue completed auto-reply is enabled. */
  issueCompletedAutoReplyEnabled?: Maybe<Scalars["Boolean"]>;
  /** The auto-reply message for issue created. */
  issueCreatedAutoReply?: Maybe<Scalars["String"]>;
  /** Whether email replies are enabled. */
  repliesEnabled?: Maybe<Scalars["Boolean"]>;
  /** The name to be used for outgoing emails. */
  senderName?: Maybe<Scalars["String"]>;
  /** The identifier or key of the team this email address will intake issues for. */
  teamId?: Maybe<Scalars["String"]>;
  /** The identifier of the template this email address will intake issues for. */
  templateId?: Maybe<Scalars["String"]>;
  /** Whether the commenter's name is included in the email replies. */
  useUserNamesInReplies?: Maybe<Scalars["Boolean"]>;
};

export type EmailUnsubscribeInput = {
  /** The user's email validation token. */
  token: Scalars["String"];
  /** Email type to unsubscribe from. */
  type: Scalars["String"];
  /** The identifier of the user. */
  userId: Scalars["String"];
};

export type EmailUnsubscribePayload = {
  __typename?: "EmailUnsubscribePayload";
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type EmailUserAccountAuthChallengeInput = {
  /** Auth code for the client initiating the sequence. */
  clientAuthCode?: Maybe<Scalars["String"]>;
  /** The email for which to generate the magic login code. */
  email: Scalars["String"];
  /** The organization invite link to associate with this authentication. */
  inviteLink?: Maybe<Scalars["String"]>;
  /** Whether the login was requested from the desktop app. */
  isDesktop?: Maybe<Scalars["Boolean"]>;
  /** Whether to only return the login code. This is used by mobile apps to skip showing the login link. */
  loginCodeOnly?: Maybe<Scalars["Boolean"]>;
};

export type EmailUserAccountAuthChallengeResponse = {
  __typename?: "EmailUserAccountAuthChallengeResponse";
  /** Supported challenge for this user account. Can be either verificationCode or password. */
  authType: Scalars["String"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** A custom emoji. */
export type Emoji = Node & {
  __typename?: "Emoji";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The user who created the emoji. */
  creator?: Maybe<User>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The emoji's name. */
  name: Scalars["String"];
  /** The organization that the emoji belongs to. */
  organization: Organization;
  /** The source of the emoji. */
  source: Scalars["String"];
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** The emoji image URL. */
  url: Scalars["String"];
};

export type EmojiConnection = {
  __typename?: "EmojiConnection";
  edges: Array<EmojiEdge>;
  nodes: Array<Emoji>;
  pageInfo: PageInfo;
};

export type EmojiCreateInput = {
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The name of the custom emoji. */
  name: Scalars["String"];
  /** The URL for the emoji. */
  url: Scalars["String"];
};

export type EmojiEdge = {
  __typename?: "EmojiEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: Emoji;
};

export type EmojiPayload = {
  __typename?: "EmojiPayload";
  /** The emoji that was created. */
  emoji: Emoji;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** A basic entity. */
export type Entity = {
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

/** An external link for an entity like initiative, etc... */
export type EntityExternalLink = Node & {
  __typename?: "EntityExternalLink";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The user who created the link. */
  creator: User;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The initiative that the link is associated with. */
  initiative?: Maybe<Initiative>;
  /** The link's label. */
  label: Scalars["String"];
  /** The order of the item in the resources list. */
  sortOrder: Scalars["Float"];
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** The link's URL. */
  url: Scalars["String"];
};

export type EntityExternalLinkConnection = {
  __typename?: "EntityExternalLinkConnection";
  edges: Array<EntityExternalLinkEdge>;
  nodes: Array<EntityExternalLink>;
  pageInfo: PageInfo;
};

export type EntityExternalLinkCreateInput = {
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The initiative associated with the link. */
  initiativeId?: Maybe<Scalars["String"]>;
  /** The label for the link. */
  label: Scalars["String"];
  /** The project associated with the link. */
  projectId?: Maybe<Scalars["String"]>;
  /** [Internal] The resource folder containing the link. */
  resourceFolderId?: Maybe<Scalars["String"]>;
  /** The order of the item in the entities resources list. */
  sortOrder?: Maybe<Scalars["Float"]>;
  /** [Internal] The team associated with the link. */
  teamId?: Maybe<Scalars["String"]>;
  /** The URL of the link. */
  url: Scalars["String"];
};

export type EntityExternalLinkEdge = {
  __typename?: "EntityExternalLinkEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: EntityExternalLink;
};

export type EntityExternalLinkPayload = {
  __typename?: "EntityExternalLinkPayload";
  /** The link that was created or updated. */
  entityExternalLink: EntityExternalLink;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type EntityExternalLinkUpdateInput = {
  /** The label for the link. */
  label?: Maybe<Scalars["String"]>;
  /** [Internal] The resource folder containing the link. */
  resourceFolderId?: Maybe<Scalars["String"]>;
  /** The order of the item in the entities resources list. */
  sortOrder?: Maybe<Scalars["Float"]>;
  /** The URL of the link. */
  url?: Maybe<Scalars["String"]>;
};

/** Payload for entity-related webhook events. */
export type EntityWebhookPayload = {
  __typename?: "EntityWebhookPayload";
  /** The type of action that triggered the webhook. */
  action: Scalars["String"];
  /** The time the payload was created. */
  createdAt: Scalars["DateTime"];
  /** The entity that was changed. */
  data: DataWebhookPayload;
  /** ID of the organization for which the webhook belongs to. */
  organizationId: Scalars["String"];
  /** The type of resource, i.e., the name of the entity. */
  type: Scalars["String"];
  /** In case of an update event, previous values of all updated properties. */
  updatedFrom?: Maybe<Scalars["JSONObject"]>;
  /** URL for the entity. */
  url?: Maybe<Scalars["String"]>;
};

/** Comparator for estimates. */
export type EstimateComparator = {
  /** Compound filters, one of which need to be matched by the estimate. */
  and?: Maybe<Array<NullableNumberComparator>>;
  /** Equals constraint. */
  eq?: Maybe<Scalars["Float"]>;
  /** Greater-than constraint. Matches any values that are greater than the given value. */
  gt?: Maybe<Scalars["Float"]>;
  /** Greater-than-or-equal constraint. Matches any values that are greater than or equal to the given value. */
  gte?: Maybe<Scalars["Float"]>;
  /** In-array constraint. */
  in?: Maybe<Array<Scalars["Float"]>>;
  /** Less-than constraint. Matches any values that are less than the given value. */
  lt?: Maybe<Scalars["Float"]>;
  /** Less-than-or-equal constraint. Matches any values that are less than or equal to the given value. */
  lte?: Maybe<Scalars["Float"]>;
  /** Not-equals constraint. */
  neq?: Maybe<Scalars["Float"]>;
  /** Not-in-array constraint. */
  nin?: Maybe<Array<Scalars["Float"]>>;
  /** Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values. */
  null?: Maybe<Scalars["Boolean"]>;
  /** Compound filters, all of which need to be matched by the estimate. */
  or?: Maybe<Array<NullableNumberComparator>>;
};

/** Issue estimate sorting options. */
export type EstimateSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

/** Information about an external entity. */
export type ExternalEntityInfo = {
  __typename?: "ExternalEntityInfo";
  /** The id of the external entity. */
  id: Scalars["String"];
  /** Metadata about the external entity. */
  metadata?: Maybe<ExternalEntityInfoMetadata>;
  /** The name of the service this entity is synced with. */
  service: ExternalSyncService;
};

/** Metadata about the external GitHub entity. */
export type ExternalEntityInfoGithubMetadata = {
  __typename?: "ExternalEntityInfoGithubMetadata";
  /** The number of the issue. */
  number?: Maybe<Scalars["Float"]>;
  /** The owner of the repository. */
  owner?: Maybe<Scalars["String"]>;
  /** The repository name. */
  repo?: Maybe<Scalars["String"]>;
};

/** Metadata about the external Jira entity. */
export type ExternalEntityInfoJiraMetadata = {
  __typename?: "ExternalEntityInfoJiraMetadata";
  /** The key of the Jira issue. */
  issueKey?: Maybe<Scalars["String"]>;
  /** The id of the Jira issue type. */
  issueTypeId?: Maybe<Scalars["String"]>;
  /** The id of the Jira project. */
  projectId?: Maybe<Scalars["String"]>;
};

export type ExternalEntityInfoMetadata =
  | ExternalEntityInfoGithubMetadata
  | ExternalEntityInfoJiraMetadata
  | ExternalEntitySlackMetadata;

/** Metadata about the external Slack entity. */
export type ExternalEntitySlackMetadata = {
  __typename?: "ExternalEntitySlackMetadata";
  /** The id of the Slack channel. */
  channelId?: Maybe<Scalars["String"]>;
  /** The name of the Slack channel. */
  channelName?: Maybe<Scalars["String"]>;
  /** Whether the entity originated from Slack (not Linear). */
  isFromSlack: Scalars["Boolean"];
  /** The URL of the Slack message. */
  messageUrl?: Maybe<Scalars["String"]>;
};

/** The service that syncs an external entity to Linear. */
export enum ExternalSyncService {
  Github = "github",
  Jira = "jira",
  Slack = "slack",
}

/** An external authenticated (e.g., through Slack) user which doesn't have a Linear account, but can create and update entities in Linear from the external system that authenticated them. */
export type ExternalUser = Node & {
  __typename?: "ExternalUser";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** An URL to the external user's avatar image. */
  avatarUrl?: Maybe<Scalars["String"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The external user's display name. Unique within each organization. Can match the display name of an actual user. */
  displayName: Scalars["String"];
  /** The external user's email address. */
  email?: Maybe<Scalars["String"]>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The last time the external user was seen interacting with Linear. */
  lastSeen?: Maybe<Scalars["DateTime"]>;
  /** The external user's full name. */
  name: Scalars["String"];
  /** Organization the external user belongs to. */
  organization: Organization;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

/** Certain properties of an external user. */
export type ExternalUserChildWebhookPayload = {
  __typename?: "ExternalUserChildWebhookPayload";
  /** The email of the external user. */
  email: Scalars["String"];
  /** The ID of the external user. */
  id: Scalars["String"];
  /** The name of the external user. */
  name: Scalars["String"];
};

export type ExternalUserConnection = {
  __typename?: "ExternalUserConnection";
  edges: Array<ExternalUserEdge>;
  nodes: Array<ExternalUser>;
  pageInfo: PageInfo;
};

export type ExternalUserEdge = {
  __typename?: "ExternalUserEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: ExternalUser;
};

/** A facet. Facets are joins between entities. A facet can tie a custom view to a project, or a a project to a roadmap for example. */
export type Facet = Node & {
  __typename?: "Facet";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The sort order of the facet. */
  sortOrder: Scalars["Float"];
  /** The owning feed user. */
  sourceFeedUser?: Maybe<User>;
  /** The owning initiative. */
  sourceInitiative?: Maybe<Initiative>;
  /** The owning organization. */
  sourceOrganization?: Maybe<Organization>;
  /** The owning page. */
  sourcePage?: Maybe<FacetPageSource>;
  /** The owning project. */
  sourceProject?: Maybe<Project>;
  /** The owning team. */
  sourceTeam?: Maybe<Team>;
  /** The targeted custom view. */
  targetCustomView?: Maybe<CustomView>;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

export enum FacetPageSource {
  Feed = "feed",
  Projects = "projects",
  TeamIssues = "teamIssues",
}

/** User favorites presented in the sidebar. */
export type Favorite = Node & {
  __typename?: "Favorite";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** Children of the favorite. Only applies to favorites of type folder. */
  children: FavoriteConnection;
  /** [Internal] Returns the color of the favorite's icon. Unavailable for avatars and views with fixed icons (e.g. cycle). */
  color?: Maybe<Scalars["String"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The favorited custom view. */
  customView?: Maybe<CustomView>;
  /** The favorited customer. */
  customer?: Maybe<Customer>;
  /** The favorited cycle. */
  cycle?: Maybe<Cycle>;
  /** The favorited dashboard. */
  dashboard?: Maybe<Dashboard>;
  /** [Internal] Detail text for favorite's `title` (e.g. team's name for a project). */
  detail?: Maybe<Scalars["String"]>;
  /** The favorited document. */
  document?: Maybe<Document>;
  /** [INTERNAL] The favorited facet. */
  facet?: Maybe<Facet>;
  /** The name of the folder. Only applies to favorites of type folder. */
  folderName?: Maybe<Scalars["String"]>;
  /** [Internal] Name of the favorite's icon. Unavailable for standard views, issues, and avatars */
  icon?: Maybe<Scalars["String"]>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The favorited initiative. */
  initiative?: Maybe<Initiative>;
  /** The targeted tab of the initiative. */
  initiativeTab?: Maybe<InitiativeTab>;
  /** The favorited issue. */
  issue?: Maybe<Issue>;
  /** The favorited label. */
  label?: Maybe<IssueLabel>;
  /** The owner of the favorite. */
  owner: User;
  /** The parent folder of the favorite. */
  parent?: Maybe<Favorite>;
  /** The team of the favorited predefined view. */
  predefinedViewTeam?: Maybe<Team>;
  /** The type of favorited predefined view. */
  predefinedViewType?: Maybe<Scalars["String"]>;
  /** The favorited project. */
  project?: Maybe<Project>;
  /** The favorited project label. */
  projectLabel?: Maybe<ProjectLabel>;
  /** The targeted tab of the project. */
  projectTab?: Maybe<ProjectTab>;
  /** [DEPRECATED] The favorited team of the project. */
  projectTeam?: Maybe<Team>;
  /** The favorited pull request. */
  pullRequest?: Maybe<PullRequest>;
  /** The order of the item in the favorites list. */
  sortOrder: Scalars["Float"];
  /** [Internal] Favorite's title text (name of the favorite'd object or folder). */
  title: Scalars["String"];
  /** The type of the favorite. */
  type: Scalars["String"];
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** URL of the favorited entity. Folders return 'null' value. */
  url?: Maybe<Scalars["String"]>;
  /** The favorited user. */
  user?: Maybe<User>;
};

/** User favorites presented in the sidebar. */
export type FavoriteChildrenArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type FavoriteConnection = {
  __typename?: "FavoriteConnection";
  edges: Array<FavoriteEdge>;
  nodes: Array<Favorite>;
  pageInfo: PageInfo;
};

export type FavoriteCreateInput = {
  /** The identifier of the custom view to favorite. */
  customViewId?: Maybe<Scalars["String"]>;
  /** The identifier of the customer to favorite. */
  customerId?: Maybe<Scalars["String"]>;
  /** The identifier of the cycle to favorite. */
  cycleId?: Maybe<Scalars["String"]>;
  /** The identifier of the dashboard to favorite. */
  dashboardId?: Maybe<Scalars["String"]>;
  /** The identifier of the document to favorite. */
  documentId?: Maybe<Scalars["String"]>;
  /** The identifier of the facet to favorite. */
  facetId?: Maybe<Scalars["String"]>;
  /** The name of the favorite folder. */
  folderName?: Maybe<Scalars["String"]>;
  /** The identifier. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** [INTERNAL] The identifier of the initiative to favorite. */
  initiativeId?: Maybe<Scalars["String"]>;
  /** The tab of the initiative to favorite. */
  initiativeTab?: Maybe<InitiativeTab>;
  /** The identifier of the issue to favorite. */
  issueId?: Maybe<Scalars["String"]>;
  /** The identifier of the label to favorite. */
  labelId?: Maybe<Scalars["String"]>;
  /** The parent folder of the favorite. */
  parentId?: Maybe<Scalars["String"]>;
  /** The identifier of team for the predefined view to favorite. */
  predefinedViewTeamId?: Maybe<Scalars["String"]>;
  /** The type of the predefined view to favorite. */
  predefinedViewType?: Maybe<Scalars["String"]>;
  /** The identifier of the project to favorite. */
  projectId?: Maybe<Scalars["String"]>;
  /** The identifier of the label to favorite. */
  projectLabelId?: Maybe<Scalars["String"]>;
  /** The tab of the project to favorite. */
  projectTab?: Maybe<ProjectTab>;
  /** The identifier of the pull request to favorite. */
  pullRequestId?: Maybe<Scalars["String"]>;
  /** The position of the item in the favorites list. */
  sortOrder?: Maybe<Scalars["Float"]>;
  /** The identifier of the user to favorite. */
  userId?: Maybe<Scalars["String"]>;
};

export type FavoriteEdge = {
  __typename?: "FavoriteEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: Favorite;
};

export type FavoritePayload = {
  __typename?: "FavoritePayload";
  /** The object that was added as a favorite. */
  favorite: Favorite;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type FavoriteUpdateInput = {
  /** The name of the favorite folder. */
  folderName?: Maybe<Scalars["String"]>;
  /** The identifier (in UUID v4 format) of the folder to move the favorite under. */
  parentId?: Maybe<Scalars["String"]>;
  /** The position of the item in the favorites list. */
  sortOrder?: Maybe<Scalars["Float"]>;
};

/** [Internal] An item in a users feed. */
export type FeedItem = Node & {
  __typename?: "FeedItem";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The initiative update that is in the feed. */
  initiativeUpdate?: Maybe<InitiativeUpdate>;
  /** The organization that will see this feed item. */
  organization: Organization;
  /** The post that is in the feed. */
  post?: Maybe<Post>;
  /** The project update that is in the feed. */
  projectUpdate?: Maybe<ProjectUpdate>;
  /** The team that will see this feed item. */
  team?: Maybe<Team>;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** The user that will see this feed item. */
  user?: Maybe<User>;
};

export type FeedItemConnection = {
  __typename?: "FeedItemConnection";
  edges: Array<FeedItemEdge>;
  nodes: Array<FeedItem>;
  pageInfo: PageInfo;
};

export type FeedItemEdge = {
  __typename?: "FeedItemEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: FeedItem;
};

/** Feed item filtering options */
export type FeedItemFilter = {
  /** Compound filters, all of which need to be matched by the feed item. */
  and?: Maybe<Array<FeedItemFilter>>;
  /** Filters that the feed item author must satisfy. */
  author?: Maybe<UserFilter>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Compound filters, one of which need to be matched by the feed item. */
  or?: Maybe<Array<FeedItemFilter>>;
  /** Filters that the feed item's project update must satisfy. */
  projectUpdate?: Maybe<ProjectUpdateFilter>;
  /** Filters that the related feed item initiatives must satisfy. */
  relatedInitiatives?: Maybe<InitiativeCollectionFilter>;
  /** Filters that the related feed item team must satisfy. */
  relatedTeams?: Maybe<TeamCollectionFilter>;
  /** Comparator for the project or initiative update health: onTrack, atRisk, offTrack */
  updateHealth?: Maybe<StringComparator>;
  /** Comparator for the update type: initiative, project, team */
  updateType?: Maybe<StringComparator>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

/** Cadence to generate feed summary */
export enum FeedSummarySchedule {
  Daily = "daily",
  Never = "never",
  Weekly = "weekly",
}

export type FetchDataPayload = {
  __typename?: "FetchDataPayload";
  /** The fetched data based on the natural language query. */
  data?: Maybe<Scalars["JSONObject"]>;
  /** Whether the fetch operation was successful. */
  success: Scalars["Boolean"];
};

/** By which resolution is frequency defined. */
export enum FrequencyResolutionType {
  Daily = "daily",
  Weekly = "weekly",
}

export type FrontAttachmentPayload = {
  __typename?: "FrontAttachmentPayload";
  /** The issue attachment that was created. */
  attachment: Attachment;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type FrontSettingsInput = {
  /** Whether a ticket should be automatically reopened when its linked Linear issue is cancelled. */
  automateTicketReopeningOnCancellation?: Maybe<Scalars["Boolean"]>;
  /** Whether a ticket should be automatically reopened when a comment is posted on its linked Linear issue */
  automateTicketReopeningOnComment?: Maybe<Scalars["Boolean"]>;
  /** Whether a ticket should be automatically reopened when its linked Linear issue is completed. */
  automateTicketReopeningOnCompletion?: Maybe<Scalars["Boolean"]>;
  /** Whether a ticket should be automatically reopened when its linked Linear project is cancelled. */
  automateTicketReopeningOnProjectCancellation?: Maybe<Scalars["Boolean"]>;
  /** Whether a ticket should be automatically reopened when its linked Linear project is completed. */
  automateTicketReopeningOnProjectCompletion?: Maybe<Scalars["Boolean"]>;
  /** [ALPHA] Whether customer and customer requests should not be automatically created when conversations are linked to a Linear issue. */
  disableCustomerRequestsAutoCreation?: Maybe<Scalars["Boolean"]>;
  /** Whether an internal message should be added when someone comments on an issue. */
  sendNoteOnComment?: Maybe<Scalars["Boolean"]>;
  /** Whether an internal message should be added when a Linear issue changes status (for status types except completed or canceled). */
  sendNoteOnStatusChange?: Maybe<Scalars["Boolean"]>;
};

/** A trigger that updates the issue status according to Git automations. */
export type GitAutomationState = Node & {
  __typename?: "GitAutomationState";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /**
   * [DEPRECATED] The target branch, if null, the automation will be triggered on any branch.
   * @deprecated Use targetBranch instead.
   */
  branchPattern?: Maybe<Scalars["String"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The event that triggers the automation. */
  event: GitAutomationStates;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The associated workflow state. */
  state?: Maybe<WorkflowState>;
  /** The target branch associated to this automation state. */
  targetBranch?: Maybe<GitAutomationTargetBranch>;
  /** The team to which this automation state belongs. */
  team: Team;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

export type GitAutomationStateConnection = {
  __typename?: "GitAutomationStateConnection";
  edges: Array<GitAutomationStateEdge>;
  nodes: Array<GitAutomationState>;
  pageInfo: PageInfo;
};

export type GitAutomationStateCreateInput = {
  /** The event that triggers the automation. */
  event: GitAutomationStates;
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The associated workflow state. If null, will override default behaviour and take no action. */
  stateId?: Maybe<Scalars["String"]>;
  /** The associated target branch. If null, all branches are targeted. */
  targetBranchId?: Maybe<Scalars["String"]>;
  /** The team associated with the automation state. */
  teamId: Scalars["String"];
};

export type GitAutomationStateEdge = {
  __typename?: "GitAutomationStateEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: GitAutomationState;
};

export type GitAutomationStatePayload = {
  __typename?: "GitAutomationStatePayload";
  /** The automation state that was created or updated. */
  gitAutomationState: GitAutomationState;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type GitAutomationStateUpdateInput = {
  /** The event that triggers the automation. */
  event?: Maybe<GitAutomationStates>;
  /** The associated workflow state. */
  stateId?: Maybe<Scalars["String"]>;
  /** The associated target branch. If null, all branches are targeted. */
  targetBranchId?: Maybe<Scalars["String"]>;
};

/** The various states of a pull/merge request. */
export enum GitAutomationStates {
  Draft = "draft",
  Merge = "merge",
  Mergeable = "mergeable",
  Review = "review",
  Start = "start",
}

/** A Git target branch for which there are automations (GitAutomationState). */
export type GitAutomationTargetBranch = Node & {
  __typename?: "GitAutomationTargetBranch";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** Automation states associated with the target branch. */
  automationStates: GitAutomationStateConnection;
  /** The target branch pattern. */
  branchPattern: Scalars["String"];
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** Whether the branch pattern is a regular expression. */
  isRegex: Scalars["Boolean"];
  /** The team to which this Git target branch automation belongs. */
  team: Team;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

/** A Git target branch for which there are automations (GitAutomationState). */
export type GitAutomationTargetBranchAutomationStatesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type GitAutomationTargetBranchCreateInput = {
  /** The target branch pattern. */
  branchPattern: Scalars["String"];
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** Whether the branch pattern is a regular expression. */
  isRegex?: Maybe<Scalars["Boolean"]>;
  /** The team associated with the Git target branch automation. */
  teamId: Scalars["String"];
};

export type GitAutomationTargetBranchPayload = {
  __typename?: "GitAutomationTargetBranchPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
  /** The Git target branch automation that was created or updated. */
  targetBranch: GitAutomationTargetBranch;
};

export type GitAutomationTargetBranchUpdateInput = {
  /** The target branch pattern. */
  branchPattern?: Maybe<Scalars["String"]>;
  /** Whether the branch pattern is a regular expression. */
  isRegex?: Maybe<Scalars["Boolean"]>;
};

export type GitHubCommitIntegrationPayload = {
  __typename?: "GitHubCommitIntegrationPayload";
  /** The integration that was created or updated. */
  integration?: Maybe<Integration>;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
  /** The webhook secret to provide to GitHub. */
  webhookSecret: Scalars["String"];
};

export type GitHubEnterpriseServerInstallVerificationPayload = {
  __typename?: "GitHubEnterpriseServerInstallVerificationPayload";
  /** Has the install been successful. */
  success: Scalars["Boolean"];
};

export type GitHubEnterpriseServerPayload = {
  __typename?: "GitHubEnterpriseServerPayload";
  /** The app install address. */
  installUrl: Scalars["String"];
  /** The integration that was created or updated. */
  integration?: Maybe<Integration>;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** The setup address. */
  setupUrl: Scalars["String"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
  /** The webhook secret to provide to GitHub. */
  webhookSecret: Scalars["String"];
};

export type GitHubImportSettingsInput = {
  /** A map storing all available issue labels per repository */
  labels?: Maybe<Scalars["JSONObject"]>;
  /** The avatar URL for the GitHub organization. */
  orgAvatarUrl: Scalars["String"];
  /** The GitHub organization's name. */
  orgLogin: Scalars["String"];
  /** The type of Github org */
  orgType: GithubOrgType;
  /** The names of the repositories connected for the GitHub integration. */
  repositories: Array<GitHubRepoInput>;
};

export type GitHubPersonalSettingsInput = {
  /** The GitHub user's name. */
  login: Scalars["String"];
};

export type GitHubRepoInput = {
  /** Whether the repository is archived. */
  archived?: Maybe<Scalars["Boolean"]>;
  /** The full name of the repository. */
  fullName: Scalars["String"];
  /** The GitHub repo id. */
  id: Scalars["Float"];
};

export type GitHubRepoMappingInput = {
  /** Whether the sync for this mapping is bidirectional. */
  bidirectional?: Maybe<Scalars["Boolean"]>;
  /** Whether this mapping is the default one for issue creation. */
  default?: Maybe<Scalars["Boolean"]>;
  /** Labels to filter incoming GitHub issue creation by. */
  gitHubLabels?: Maybe<Array<Scalars["String"]>>;
  /** The GitHub repo id. */
  gitHubRepoId: Scalars["Float"];
  /** The unique identifier for this mapping. */
  id: Scalars["String"];
  /** The Linear team id to map to the given project. */
  linearTeamId: Scalars["String"];
};

export type GitHubSettingsInput = {
  /** Whether the integration has code access */
  codeAccess?: Maybe<Scalars["Boolean"]>;
  /** The avatar URL for the GitHub organization. */
  orgAvatarUrl?: Maybe<Scalars["String"]>;
  /** The GitHub organization's name. */
  orgLogin: Scalars["String"];
  /** The type of Github org */
  orgType?: Maybe<GithubOrgType>;
  pullRequestReviewTool?: Maybe<PullRequestReviewTool>;
  /** The names of the repositories connected for the GitHub integration. */
  repositories?: Maybe<Array<GitHubRepoInput>>;
  /** Mapping of team to repository for syncing. */
  repositoriesMapping?: Maybe<Array<GitHubRepoMappingInput>>;
};

export type GitLabIntegrationCreatePayload = {
  __typename?: "GitLabIntegrationCreatePayload";
  /** The integration that was created or updated. */
  integration?: Maybe<Integration>;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
  /** The webhook secret to provide to GitLab. */
  webhookSecret: Scalars["String"];
};

export type GitLabSettingsInput = {
  /** The ISO timestamp the GitLab access token expires. */
  expiresAt?: Maybe<Scalars["String"]>;
  /** Whether the token is limited to a read-only scope. */
  readonly?: Maybe<Scalars["Boolean"]>;
  /** The self-hosted URL of the GitLab instance. */
  url?: Maybe<Scalars["String"]>;
};

/** [Internal] The kind of link between an issue and a pull request. */
export enum GitLinkKind {
  Closes = "closes",
  Contributes = "contributes",
  Links = "links",
}

export enum GithubOrgType {
  Organization = "organization",
  User = "user",
}

export type GoogleSheetsExportSettings = {
  /** Whether the export is enabled. */
  enabled?: Maybe<Scalars["Boolean"]>;
  /** The ID of the target sheet (tab) within the Google Sheet. */
  sheetId?: Maybe<Scalars["Float"]>;
  /** The ID of the exported Google Sheet. */
  spreadsheetId?: Maybe<Scalars["String"]>;
  /** The URL of the exported Google Sheet. */
  spreadsheetUrl?: Maybe<Scalars["String"]>;
  /** The date of the most recent export. */
  updatedAt?: Maybe<Scalars["DateTime"]>;
};

export type GoogleSheetsSettingsInput = {
  /** The export settings for initiatives. */
  initiative?: Maybe<GoogleSheetsExportSettings>;
  /** The export settings for issues. */
  issue?: Maybe<GoogleSheetsExportSettings>;
  /** The export settings for projects. */
  project?: Maybe<GoogleSheetsExportSettings>;
  /** [Deprecated] The ID of the target sheet (tab) within the Google Sheet. */
  sheetId?: Maybe<Scalars["Float"]>;
  /** [Deprecated] The ID of the exported Google Sheet. */
  spreadsheetId?: Maybe<Scalars["String"]>;
  /** [Deprecated] The URL of the exported Google Sheet. */
  spreadsheetUrl?: Maybe<Scalars["String"]>;
  /** [Deprecated] The date of the most recent export. */
  updatedIssuesAt?: Maybe<Scalars["DateTime"]>;
};

export type GoogleUserAccountAuthInput = {
  /** Code returned from Google's OAuth flow. */
  code: Scalars["String"];
  /** An optional parameter to disable new user signup and force login. Default: false. */
  disallowSignup?: Maybe<Scalars["Boolean"]>;
  /** An optional invite link for an organization used to populate available organizations. */
  inviteLink?: Maybe<Scalars["String"]>;
  /** The URI to redirect the user to. */
  redirectUri?: Maybe<Scalars["String"]>;
  /** The timezone of the user's browser. */
  timezone: Scalars["String"];
};

/** Comparator for identifiers. */
export type IdComparator = {
  /** Equals constraint. */
  eq?: Maybe<Scalars["ID"]>;
  /** In-array constraint. */
  in?: Maybe<Array<Scalars["ID"]>>;
  /** Not-equals constraint. */
  neq?: Maybe<Scalars["ID"]>;
  /** Not-in-array constraint. */
  nin?: Maybe<Array<Scalars["ID"]>>;
};

/** An identity provider. */
export type IdentityProvider = Node & {
  __typename?: "IdentityProvider";
  /** [INTERNAL] SCIM admins group push settings. */
  adminsGroupPush?: Maybe<Scalars["JSONObject"]>;
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** Whether the identity provider is the default identity provider migrated from organization level settings. */
  defaultMigrated: Scalars["Boolean"];
  /** [INTERNAL] SCIM guests group push settings. */
  guestsGroupPush?: Maybe<Scalars["JSONObject"]>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The issuer's custom entity ID. */
  issuerEntityId?: Maybe<Scalars["String"]>;
  /** The SAML priority used to pick default workspace in SAML SP initiated flow, when same domain is claimed for SAML by multiple workspaces. Lower priority value means higher preference. */
  priority?: Maybe<Scalars["Float"]>;
  /** Whether SAML authentication is enabled for organization. */
  samlEnabled: Scalars["Boolean"];
  /** Whether SCIM provisioning is enabled for organization. */
  scimEnabled: Scalars["Boolean"];
  /** Binding method for authentication call. Can be either `post` (default) or `redirect`. */
  ssoBinding?: Maybe<Scalars["String"]>;
  /** Sign in endpoint URL for the identity provider. */
  ssoEndpoint?: Maybe<Scalars["String"]>;
  /** The algorithm of the Signing Certificate. Can be one of `sha1`, `sha256` (default), or `sha512`. */
  ssoSignAlgo?: Maybe<Scalars["String"]>;
  /** X.509 Signing Certificate in string form. */
  ssoSigningCert?: Maybe<Scalars["String"]>;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

export type ImageUploadFromUrlPayload = {
  __typename?: "ImageUploadFromUrlPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
  /** The URL containing the image. */
  url?: Maybe<Scalars["String"]>;
};

export type InheritanceEntityMapping = {
  /** Mapping of the IssueLabel ID to the new IssueLabel name. */
  issueLabels?: Maybe<Scalars["JSONObject"]>;
  /** Mapping of the WorkflowState ID to the new WorkflowState ID. */
  workflowStates: Scalars["JSONObject"];
};

/** An initiative to group projects. */
export type Initiative = Node & {
  __typename?: "Initiative";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The initiative's color. */
  color?: Maybe<Scalars["String"]>;
  /** The time at which the initiative was moved into completed status. */
  completedAt?: Maybe<Scalars["DateTime"]>;
  /** The initiative's content in markdown format. */
  content?: Maybe<Scalars["String"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The user who created the initiative. */
  creator?: Maybe<User>;
  /** The description of the initiative. */
  description?: Maybe<Scalars["String"]>;
  /** The content of the initiative description. */
  documentContent?: Maybe<DocumentContent>;
  /** Documents associated with the initiative. */
  documents: DocumentConnection;
  /** [Internal] Facets associated with the initiative. */
  facets: Array<Facet>;
  /** The resolution of the reminder frequency. */
  frequencyResolution: FrequencyResolutionType;
  /** The health of the initiative. */
  health?: Maybe<InitiativeUpdateHealthType>;
  /** The time at which the initiative health was updated. */
  healthUpdatedAt?: Maybe<Scalars["DateTime"]>;
  /** History entries associated with the initiative. */
  history: InitiativeHistoryConnection;
  /** The icon of the initiative. */
  icon?: Maybe<Scalars["String"]>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** Settings for all integrations associated with that initiative. */
  integrationsSettings?: Maybe<IntegrationsSettings>;
  /** The last initiative update posted for this initiative. */
  lastUpdate?: Maybe<InitiativeUpdate>;
  /** Links associated with the initiative. */
  links: EntityExternalLinkConnection;
  /** The name of the initiative. */
  name: Scalars["String"];
  /** The organization of the initiative. */
  organization: Organization;
  /** The user who owns the initiative. */
  owner?: Maybe<User>;
  /** Parent initiative associated with the initiative. */
  parentInitiative?: Maybe<Initiative>;
  /** Projects associated with the initiative. */
  projects: ProjectConnection;
  /** The initiative's unique URL slug. */
  slugId: Scalars["String"];
  /** The sort order of the initiative within the organization. */
  sortOrder: Scalars["Float"];
  /** The time at which the initiative was moved into active status. */
  startedAt?: Maybe<Scalars["DateTime"]>;
  /** The status of the initiative. One of Planned, Active, Completed */
  status: InitiativeStatus;
  /** Sub-initiatives associated with the initiative. */
  subInitiatives: InitiativeConnection;
  /** The estimated completion date of the initiative. */
  targetDate?: Maybe<Scalars["TimelessDate"]>;
  /** The resolution of the initiative's estimated completion date. */
  targetDateResolution?: Maybe<DateResolutionType>;
  /** A flag that indicates whether the initiative is in the trash bin. */
  trashed?: Maybe<Scalars["Boolean"]>;
  /** The frequency at which to prompt for updates. When not set, reminders are inherited from workspace. */
  updateReminderFrequency?: Maybe<Scalars["Float"]>;
  /** The n-weekly frequency at which to prompt for updates. When not set, reminders are inherited from workspace. */
  updateReminderFrequencyInWeeks?: Maybe<Scalars["Float"]>;
  /** The day at which to prompt for updates. */
  updateRemindersDay?: Maybe<Day>;
  /** The hour at which to prompt for updates. */
  updateRemindersHour?: Maybe<Scalars["Float"]>;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** Initiative URL. */
  url: Scalars["String"];
};

/** An initiative to group projects. */
export type InitiativeDocumentsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<DocumentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** An initiative to group projects. */
export type InitiativeHistoryArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** An initiative to group projects. */
export type InitiativeLinksArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** An initiative to group projects. */
export type InitiativeProjectsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<ProjectFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  includeSubInitiatives?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
  sort?: Maybe<Array<ProjectSortInput>>;
};

/** An initiative to group projects. */
export type InitiativeSubInitiativesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<InitiativeFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
  sort?: Maybe<Array<InitiativeSortInput>>;
};

/** A generic payload return from entity archive mutations. */
export type InitiativeArchivePayload = ArchivePayload & {
  __typename?: "InitiativeArchivePayload";
  /** The archived/unarchived entity. Null if entity was deleted. */
  entity?: Maybe<Initiative>;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** Certain properties of an initiative. */
export type InitiativeChildWebhookPayload = {
  __typename?: "InitiativeChildWebhookPayload";
  /** The ID of the initiative. */
  id: Scalars["String"];
  /** The name of the initiative. */
  name: Scalars["String"];
  /** The URL of the initiative. */
  url: Scalars["String"];
};

/** Initiative collection filtering options. */
export type InitiativeCollectionFilter = {
  /** Comparator for the initiative activity type. */
  activityType?: Maybe<StringComparator>;
  /** Filters that the initiative must be an ancestor of. */
  ancestors?: Maybe<InitiativeCollectionFilter>;
  /** Compound filters, all of which need to be matched by the initiative. */
  and?: Maybe<Array<InitiativeCollectionFilter>>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Filters that the initiative creator must satisfy. */
  creator?: Maybe<NullableUserFilter>;
  /** Filters that needs to be matched by all initiatives. */
  every?: Maybe<InitiativeFilter>;
  /** Comparator for the initiative health: onTrack, atRisk, offTrack */
  health?: Maybe<StringComparator>;
  /** Comparator for the initiative health (with age): onTrack, atRisk, offTrack, outdated, noUpdate */
  healthWithAge?: Maybe<StringComparator>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Comparator for the collection length. */
  length?: Maybe<NumberComparator>;
  /** Comparator for the initiative name. */
  name?: Maybe<StringComparator>;
  /** Compound filters, one of which need to be matched by the initiative. */
  or?: Maybe<Array<InitiativeCollectionFilter>>;
  /** Filters that the initiative owner must satisfy. */
  owner?: Maybe<NullableUserFilter>;
  /** Comparator for the initiative slug ID. */
  slugId?: Maybe<StringComparator>;
  /** Filters that needs to be matched by some initiatives. */
  some?: Maybe<InitiativeFilter>;
  /** Comparator for the initiative status: Planned, Active, Completed */
  status?: Maybe<StringComparator>;
  /** Comparator for the initiative target date. */
  targetDate?: Maybe<NullableDateComparator>;
  /** Filters that the initiative teams must satisfy. */
  teams?: Maybe<TeamCollectionFilter>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

export type InitiativeConnection = {
  __typename?: "InitiativeConnection";
  edges: Array<InitiativeEdge>;
  nodes: Array<Initiative>;
  pageInfo: PageInfo;
};

/** The properties of the initiative to create. */
export type InitiativeCreateInput = {
  /** The initiative's color. */
  color?: Maybe<Scalars["String"]>;
  /** The initiative's content in markdown format. */
  content?: Maybe<Scalars["String"]>;
  /** The description of the initiative. */
  description?: Maybe<Scalars["String"]>;
  /** The initiative's icon. */
  icon?: Maybe<Scalars["String"]>;
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The name of the initiative. */
  name: Scalars["String"];
  /** The owner of the initiative. */
  ownerId?: Maybe<Scalars["String"]>;
  /** The sort order of the initiative within the organization. */
  sortOrder?: Maybe<Scalars["Float"]>;
  /** The initiative's status. */
  status?: Maybe<InitiativeStatus>;
  /** The estimated completion date of the initiative. */
  targetDate?: Maybe<Scalars["TimelessDate"]>;
  /** The resolution of the initiative's estimated completion date. */
  targetDateResolution?: Maybe<DateResolutionType>;
};

/** Initiative creation date sorting options. */
export type InitiativeCreatedAtSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

export type InitiativeEdge = {
  __typename?: "InitiativeEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: Initiative;
};

/** Initiative filtering options. */
export type InitiativeFilter = {
  /** Comparator for the initiative activity type. */
  activityType?: Maybe<StringComparator>;
  /** Filters that the initiative must be an ancestor of. */
  ancestors?: Maybe<InitiativeCollectionFilter>;
  /** Compound filters, all of which need to be matched by the initiative. */
  and?: Maybe<Array<InitiativeFilter>>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Filters that the initiative creator must satisfy. */
  creator?: Maybe<NullableUserFilter>;
  /** Comparator for the initiative health: onTrack, atRisk, offTrack */
  health?: Maybe<StringComparator>;
  /** Comparator for the initiative health (with age): onTrack, atRisk, offTrack, outdated, noUpdate */
  healthWithAge?: Maybe<StringComparator>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Comparator for the initiative name. */
  name?: Maybe<StringComparator>;
  /** Compound filters, one of which need to be matched by the initiative. */
  or?: Maybe<Array<InitiativeFilter>>;
  /** Filters that the initiative owner must satisfy. */
  owner?: Maybe<NullableUserFilter>;
  /** Comparator for the initiative slug ID. */
  slugId?: Maybe<StringComparator>;
  /** Comparator for the initiative status: Planned, Active, Completed */
  status?: Maybe<StringComparator>;
  /** Comparator for the initiative target date. */
  targetDate?: Maybe<NullableDateComparator>;
  /** Filters that the initiative teams must satisfy. */
  teams?: Maybe<TeamCollectionFilter>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

/** Initiative health sorting options. */
export type InitiativeHealthSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

/** Initiative health update date sorting options. */
export type InitiativeHealthUpdatedAtSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

/** A initiative history containing relevant change events. */
export type InitiativeHistory = Node & {
  __typename?: "InitiativeHistory";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The events that happened while recording that history. */
  entries: Scalars["JSONObject"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The initiative that the history is associated with. */
  initiative: Initiative;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

export type InitiativeHistoryConnection = {
  __typename?: "InitiativeHistoryConnection";
  edges: Array<InitiativeHistoryEdge>;
  nodes: Array<InitiativeHistory>;
  pageInfo: PageInfo;
};

export type InitiativeHistoryEdge = {
  __typename?: "InitiativeHistoryEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: InitiativeHistory;
};

/** Initiative manual sorting options. */
export type InitiativeManualSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

/** Initiative name sorting options. */
export type InitiativeNameSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

/** An initiative related notification. */
export type InitiativeNotification = Entity &
  Node &
  Notification & {
    __typename?: "InitiativeNotification";
    /** The user that caused the notification. */
    actor?: Maybe<User>;
    /** [Internal] Notification actor initials if avatar is not available. */
    actorAvatarColor: Scalars["String"];
    /** [Internal] Notification avatar URL. */
    actorAvatarUrl?: Maybe<Scalars["String"]>;
    /** [Internal] Notification actor initials if avatar is not available. */
    actorInitials?: Maybe<Scalars["String"]>;
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: Maybe<Scalars["DateTime"]>;
    /** The bot that caused the notification. */
    botActor?: Maybe<ActorBot>;
    /** The category of the notification. */
    category: NotificationCategory;
    /** The comment related to the notification. */
    comment?: Maybe<Comment>;
    /** Related comment ID. Null if the notification is not related to a comment. */
    commentId?: Maybe<Scalars["String"]>;
    /** The time at which the entity was created. */
    createdAt: Scalars["DateTime"];
    /** The document related to the notification. */
    document?: Maybe<Document>;
    /**
     * The time at when an email reminder for this notification was sent to the user. Null, if no email
     *     reminder has been sent.
     */
    emailedAt?: Maybe<Scalars["DateTime"]>;
    /** The external user that caused the notification. */
    externalUserActor?: Maybe<ExternalUser>;
    /** [Internal] Notifications with the same grouping key will be grouped together in the UI. */
    groupingKey: Scalars["String"];
    /** [Internal] Priority of the notification with the same grouping key. Higher number means higher priority. If priority is the same, notifications should be sorted by `createdAt`. */
    groupingPriority: Scalars["Float"];
    /** The unique identifier of the entity. */
    id: Scalars["ID"];
    /** [Internal] Inbox URL for the notification. */
    inboxUrl: Scalars["String"];
    /** The initiative related to the notification. */
    initiative?: Maybe<Initiative>;
    /** Related initiative ID. */
    initiativeId: Scalars["String"];
    /** The initiative update related to the notification. */
    initiativeUpdate?: Maybe<InitiativeUpdate>;
    /** Related initiative update ID. */
    initiativeUpdateId?: Maybe<Scalars["String"]>;
    /** [Internal] If notification actor was Linear. */
    isLinearActor: Scalars["Boolean"];
    /** [Internal] Issue's status type for issue notifications. */
    issueStatusType?: Maybe<Scalars["String"]>;
    /** The parent comment related to the notification, if a notification is a reply comment notification. */
    parentComment?: Maybe<Comment>;
    /** Related parent comment ID. Null if the notification is not related to a comment. */
    parentCommentId?: Maybe<Scalars["String"]>;
    /** [Internal] Project update health for new updates. */
    projectUpdateHealth?: Maybe<Scalars["String"]>;
    /** Name of the reaction emoji related to the notification. */
    reactionEmoji?: Maybe<Scalars["String"]>;
    /** The time at when the user marked the notification as read. Null, if the the user hasn't read the notification */
    readAt?: Maybe<Scalars["DateTime"]>;
    /** The time until a notification will be snoozed. After that it will appear in the inbox again. */
    snoozedUntilAt?: Maybe<Scalars["DateTime"]>;
    /** [Internal] Notification subtitle. */
    subtitle: Scalars["String"];
    /** [Internal] Notification title. */
    title: Scalars["String"];
    /** Notification type. */
    type: Scalars["String"];
    /** The time at which a notification was unsnoozed.. */
    unsnoozedAt?: Maybe<Scalars["DateTime"]>;
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars["DateTime"];
    /** [Internal] URL to the target of the notification. */
    url: Scalars["String"];
    /** The user that received the notification. */
    user: User;
  };

/** An initiative notification subscription. */
export type InitiativeNotificationSubscription = Entity &
  Node &
  NotificationSubscription & {
    __typename?: "InitiativeNotificationSubscription";
    /** Whether the subscription is active or not. */
    active: Scalars["Boolean"];
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: Maybe<Scalars["DateTime"]>;
    /** The type of view to which the notification subscription context is associated with. */
    contextViewType?: Maybe<ContextViewType>;
    /** The time at which the entity was created. */
    createdAt: Scalars["DateTime"];
    /** The contextual custom view associated with the notification subscription. */
    customView?: Maybe<CustomView>;
    /** The customer associated with the notification subscription. */
    customer?: Maybe<Customer>;
    /** The contextual cycle view associated with the notification subscription. */
    cycle?: Maybe<Cycle>;
    /** The unique identifier of the entity. */
    id: Scalars["ID"];
    /** The initiative subscribed to. */
    initiative: Initiative;
    /** The contextual label view associated with the notification subscription. */
    label?: Maybe<IssueLabel>;
    /** The type of subscription. */
    notificationSubscriptionTypes: Array<Scalars["String"]>;
    /** The contextual project view associated with the notification subscription. */
    project?: Maybe<Project>;
    /** The user that subscribed to receive notifications. */
    subscriber: User;
    /** The team associated with the notification subscription. */
    team?: Maybe<Team>;
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars["DateTime"];
    /** The user view associated with the notification subscription. */
    user?: Maybe<User>;
    /** The type of user view to which the notification subscription context is associated with. */
    userContextViewType?: Maybe<UserContextViewType>;
  };

/** Initiative owner sorting options. */
export type InitiativeOwnerSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

/** The payload returned by the initiative mutations. */
export type InitiativePayload = {
  __typename?: "InitiativePayload";
  /** The initiative that was created or updated. */
  initiative: Initiative;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** A relation representing the dependency between two initiatives. */
export type InitiativeRelation = Node & {
  __typename?: "InitiativeRelation";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The parent initiative. */
  initiative: Initiative;
  /** The child initiative. */
  relatedInitiative: Initiative;
  /** The sort order of the relation within the initiative. */
  sortOrder: Scalars["Float"];
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** The last user who created or modified the relation. */
  user?: Maybe<User>;
};

export type InitiativeRelationConnection = {
  __typename?: "InitiativeRelationConnection";
  edges: Array<InitiativeRelationEdge>;
  nodes: Array<InitiativeRelation>;
  pageInfo: PageInfo;
};

export type InitiativeRelationCreateInput = {
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The identifier of the parent initiative. */
  initiativeId: Scalars["String"];
  /** The identifier of the child initiative. */
  relatedInitiativeId: Scalars["String"];
  /** The sort order of the initiative relation. */
  sortOrder?: Maybe<Scalars["Float"]>;
};

export type InitiativeRelationEdge = {
  __typename?: "InitiativeRelationEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: InitiativeRelation;
};

export type InitiativeRelationPayload = {
  __typename?: "InitiativeRelationPayload";
  /** The initiative relation that was created or updated. */
  initiativeRelation: InitiativeRelation;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** The properties of the initiativeRelation to update. */
export type InitiativeRelationUpdateInput = {
  /** The sort order of the initiative relation. */
  sortOrder?: Maybe<Scalars["Float"]>;
};

/** Initiative sorting options. */
export type InitiativeSortInput = {
  /** Sort by initiative creation date. */
  createdAt?: Maybe<InitiativeCreatedAtSort>;
  /** Sort by initiative health status. */
  health?: Maybe<InitiativeHealthSort>;
  /** Sort by initiative health update date. */
  healthUpdatedAt?: Maybe<InitiativeHealthUpdatedAtSort>;
  /** Sort by manual order. */
  manual?: Maybe<InitiativeManualSort>;
  /** Sort by initiative name. */
  name?: Maybe<InitiativeNameSort>;
  /** Sort by initiative owner name. */
  owner?: Maybe<InitiativeOwnerSort>;
  /** Sort by initiative target date. */
  targetDate?: Maybe<InitiativeTargetDateSort>;
  /** Sort by initiative update date. */
  updatedAt?: Maybe<InitiativeUpdatedAtSort>;
};

export enum InitiativeStatus {
  Active = "Active",
  Completed = "Completed",
  Planned = "Planned",
}

/** Different tabs available inside an initiative. */
export enum InitiativeTab {
  Overview = "overview",
  Projects = "projects",
  Updates = "updates",
}

/** Initiative target date sorting options. */
export type InitiativeTargetDateSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

/** Join table between projects and initiatives. */
export type InitiativeToProject = Node & {
  __typename?: "InitiativeToProject";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The initiative that the project is associated with. */
  initiative: Initiative;
  /** The project that the initiative is associated with. */
  project: Project;
  /** The sort order of the project within the initiative. */
  sortOrder: Scalars["String"];
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

export type InitiativeToProjectConnection = {
  __typename?: "InitiativeToProjectConnection";
  edges: Array<InitiativeToProjectEdge>;
  nodes: Array<InitiativeToProject>;
  pageInfo: PageInfo;
};

/** The properties of the initiativeToProject to create. */
export type InitiativeToProjectCreateInput = {
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The identifier of the initiative. */
  initiativeId: Scalars["String"];
  /** The identifier of the project. */
  projectId: Scalars["String"];
  /** The sort order for the project within its organization. */
  sortOrder?: Maybe<Scalars["Float"]>;
};

export type InitiativeToProjectEdge = {
  __typename?: "InitiativeToProjectEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: InitiativeToProject;
};

/** The result of a initiativeToProject mutation. */
export type InitiativeToProjectPayload = {
  __typename?: "InitiativeToProjectPayload";
  /** The initiativeToProject that was created or updated. */
  initiativeToProject: InitiativeToProject;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** The properties of the initiativeToProject to update. */
export type InitiativeToProjectUpdateInput = {
  /** The sort order for the project within its organization. */
  sortOrder?: Maybe<Scalars["Float"]>;
};

/** An initiative update. */
export type InitiativeUpdate = Node & {
  __typename?: "InitiativeUpdate";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The update content in markdown format. */
  body: Scalars["String"];
  /** [Internal] The content of the update as a Prosemirror document. */
  bodyData: Scalars["String"];
  /** Comments associated with the initiative update. */
  comments: CommentConnection;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The diff between the current update and the previous one. */
  diff?: Maybe<Scalars["JSONObject"]>;
  /** The diff between the current update and the previous one, formatted as markdown. */
  diffMarkdown?: Maybe<Scalars["String"]>;
  /** The time the update was edited. */
  editedAt?: Maybe<Scalars["DateTime"]>;
  /** The health at the time of the update. */
  health: InitiativeUpdateHealthType;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** [Internal] Serialized JSON representing current state of the initiative properties when posting the initiative update. */
  infoSnapshot?: Maybe<Scalars["JSONObject"]>;
  /** The initiative that the update is associated with. */
  initiative: Initiative;
  /** Whether initiative update diff should be hidden. */
  isDiffHidden: Scalars["Boolean"];
  /** Whether the initiative update is stale. */
  isStale: Scalars["Boolean"];
  /** Emoji reaction summary, grouped by emoji type. */
  reactionData: Scalars["JSONObject"];
  /** Reactions associated with the initiative update. */
  reactions: Array<Reaction>;
  /** The update's unique URL slug. */
  slugId: Scalars["String"];
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** The URL to the initiative update. */
  url: Scalars["String"];
  /** The user who wrote the update. */
  user: User;
};

/** An initiative update. */
export type InitiativeUpdateCommentsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CommentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** A generic payload return from entity archive mutations. */
export type InitiativeUpdateArchivePayload = ArchivePayload & {
  __typename?: "InitiativeUpdateArchivePayload";
  /** The archived/unarchived entity. Null if entity was deleted. */
  entity?: Maybe<InitiativeUpdate>;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** Certain properties of an initiative update. */
export type InitiativeUpdateChildWebhookPayload = {
  __typename?: "InitiativeUpdateChildWebhookPayload";
  /** The body of the initiative update. */
  bodyData: Scalars["String"];
  /** The edited at timestamp of the initiative update. */
  editedAt: Scalars["String"];
  /** The health of the initiative update. */
  health: Scalars["String"];
  /** The ID of the initiative update. */
  id: Scalars["String"];
};

export type InitiativeUpdateConnection = {
  __typename?: "InitiativeUpdateConnection";
  edges: Array<InitiativeUpdateEdge>;
  nodes: Array<InitiativeUpdate>;
  pageInfo: PageInfo;
};

export type InitiativeUpdateCreateInput = {
  /** The content of the update in markdown format. */
  body?: Maybe<Scalars["String"]>;
  /** [Internal] The content of the update as a Prosemirror document. */
  bodyData?: Maybe<Scalars["JSON"]>;
  /** The health of the initiative at the time of the update. */
  health?: Maybe<InitiativeUpdateHealthType>;
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The initiative to associate the update with. */
  initiativeId: Scalars["String"];
  /** Whether the diff between the current update and the previous one should be hidden. */
  isDiffHidden?: Maybe<Scalars["Boolean"]>;
};

export type InitiativeUpdateEdge = {
  __typename?: "InitiativeUpdateEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: InitiativeUpdate;
};

/** Options for filtering initiative updates. */
export type InitiativeUpdateFilter = {
  /** Compound filters, all of which need to be matched by the InitiativeUpdate. */
  and?: Maybe<Array<InitiativeUpdateFilter>>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Filters that the initiative update initiative must satisfy. */
  initiative?: Maybe<InitiativeFilter>;
  /** Compound filters, one of which need to be matched by the InitiativeUpdate. */
  or?: Maybe<Array<InitiativeUpdateFilter>>;
  /** Filters that the initiative updates reactions must satisfy. */
  reactions?: Maybe<ReactionCollectionFilter>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
  /** Filters that the initiative update creator must satisfy. */
  user?: Maybe<UserFilter>;
};

/** The health type when the update is created. */
export enum InitiativeUpdateHealthType {
  AtRisk = "atRisk",
  OffTrack = "offTrack",
  OnTrack = "onTrack",
}

/** The properties of the initiative to update. */
export type InitiativeUpdateInput = {
  /** The initiative's color. */
  color?: Maybe<Scalars["String"]>;
  /** The initiative's content in markdown format. */
  content?: Maybe<Scalars["String"]>;
  /** The description of the initiative. */
  description?: Maybe<Scalars["String"]>;
  /** The frequency resolution. */
  frequencyResolution?: Maybe<FrequencyResolutionType>;
  /** The initiative's icon. */
  icon?: Maybe<Scalars["String"]>;
  /** The name of the initiative. */
  name?: Maybe<Scalars["String"]>;
  /** The owner of the initiative. */
  ownerId?: Maybe<Scalars["String"]>;
  /** The sort order of the initiative within the organization. */
  sortOrder?: Maybe<Scalars["Float"]>;
  /** The initiative's status. */
  status?: Maybe<InitiativeStatus>;
  /** The estimated completion date of the initiative. */
  targetDate?: Maybe<Scalars["TimelessDate"]>;
  /** The resolution of the initiative's estimated completion date. */
  targetDateResolution?: Maybe<DateResolutionType>;
  /** Whether the initiative has been trashed. */
  trashed?: Maybe<Scalars["Boolean"]>;
  /** The frequency at which to prompt for updates. When not set, reminders are inherited from workspace. */
  updateReminderFrequency?: Maybe<Scalars["Float"]>;
  /** The n-weekly frequency at which to prompt for updates. When not set, reminders are inherited from workspace. */
  updateReminderFrequencyInWeeks?: Maybe<Scalars["Float"]>;
  /** The day at which to prompt for updates. */
  updateRemindersDay?: Maybe<Day>;
  /** The hour at which to prompt for updates. */
  updateRemindersHour?: Maybe<Scalars["Int"]>;
};

export type InitiativeUpdatePayload = {
  __typename?: "InitiativeUpdatePayload";
  /** The initiative update that was created. */
  initiativeUpdate: InitiativeUpdate;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type InitiativeUpdateReminderPayload = {
  __typename?: "InitiativeUpdateReminderPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type InitiativeUpdateUpdateInput = {
  /** The content of the update in markdown format. */
  body?: Maybe<Scalars["String"]>;
  /** The content of the update as a Prosemirror document. */
  bodyData?: Maybe<Scalars["JSON"]>;
  /** The health of the initiative at the time of the update. */
  health?: Maybe<InitiativeUpdateHealthType>;
  /** Whether the diff between the current update and the previous one should be hidden. */
  isDiffHidden?: Maybe<Scalars["Boolean"]>;
};

/** Payload for an initiative update webhook. */
export type InitiativeUpdateWebhookPayload = {
  __typename?: "InitiativeUpdateWebhookPayload";
  /** The time at which the entity was archived. */
  archivedAt?: Maybe<Scalars["String"]>;
  /** The body of the initiative update. */
  body: Scalars["String"];
  /** The body data of the initiative update. */
  bodyData: Scalars["String"];
  /** The time at which the entity was created. */
  createdAt: Scalars["String"];
  /** The edited at timestamp of the initiative update. */
  editedAt: Scalars["String"];
  /** The health of the initiative update. */
  health: Scalars["String"];
  /** The ID of the entity. */
  id: Scalars["String"];
  /** The initiative that the initiative update belongs to. */
  initiative: InitiativeChildWebhookPayload;
  /** The initiative id of the initiative update. */
  initiativeId: Scalars["String"];
  /** The reaction data for this initiative update. */
  reactionData: Scalars["JSONObject"];
  /** The slug id of the initiative update. */
  slugId: Scalars["String"];
  /** The time at which the entity was updated. */
  updatedAt: Scalars["String"];
  /** The URL of the initiative update. */
  url?: Maybe<Scalars["String"]>;
  /** The user that created the initiative update. */
  user: UserChildWebhookPayload;
  /** The user id of the initiative update. */
  userId: Scalars["String"];
};

/** Initiative update date sorting options. */
export type InitiativeUpdatedAtSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

/** Payload for an initiative webhook. */
export type InitiativeWebhookPayload = {
  __typename?: "InitiativeWebhookPayload";
  /** The time at which the entity was archived. */
  archivedAt?: Maybe<Scalars["String"]>;
  /** The color of the initiative. */
  color?: Maybe<Scalars["String"]>;
  /** When the initiative was completed. */
  completedAt?: Maybe<Scalars["String"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["String"];
  /** The user who created the initiative. */
  creator?: Maybe<UserChildWebhookPayload>;
  /** The ID of the user who created the initiative. */
  creatorId?: Maybe<Scalars["String"]>;
  /** The description of the initiative. */
  description: Scalars["String"];
  /** The resolution of the update reminder frequency. */
  frequencyResolution: Scalars["String"];
  /** The health status of the initiative. */
  health?: Maybe<Scalars["String"]>;
  /** When the health status was last updated. */
  healthUpdatedAt?: Maybe<Scalars["String"]>;
  /** The icon of the initiative. */
  icon?: Maybe<Scalars["String"]>;
  /** The ID of the entity. */
  id: Scalars["String"];
  /** The last update for this initiative. */
  lastUpdate?: Maybe<InitiativeUpdateChildWebhookPayload>;
  /** The ID of the last update for this initiative. */
  lastUpdateId?: Maybe<Scalars["String"]>;
  /** The name of the initiative. */
  name: Scalars["String"];
  /** The ID of the organization this initiative belongs to. */
  organizationId: Scalars["String"];
  /** The user who owns the initiative. */
  owner?: Maybe<UserChildWebhookPayload>;
  /** The ID of the user who owns the initiative. */
  ownerId?: Maybe<Scalars["String"]>;
  /** The parent initiative associated with the initiative. */
  parentInitiative?: Maybe<InitiativeChildWebhookPayload>;
  /** The projects associated with the initiative. */
  projects?: Maybe<Array<ProjectChildWebhookPayload>>;
  /** The unique slug identifier of the initiative. */
  slugId: Scalars["String"];
  /** The sort order of the initiative within the organization. */
  sortOrder: Scalars["Float"];
  /** When the initiative was started. */
  startedAt?: Maybe<Scalars["String"]>;
  /** The current status of the initiative. */
  status: Scalars["String"];
  /** The sub-initiatives associated with the initiative. */
  subInitiatives?: Maybe<Array<InitiativeChildWebhookPayload>>;
  /** The target date of the initiative. */
  targetDate?: Maybe<Scalars["String"]>;
  /** The resolution of the target date. */
  targetDateResolution?: Maybe<Scalars["String"]>;
  /** Whether the initiative is trashed. */
  trashed?: Maybe<Scalars["Boolean"]>;
  /** The frequency of update reminders. */
  updateReminderFrequency?: Maybe<Scalars["Float"]>;
  /** The frequency of update reminders in weeks. */
  updateReminderFrequencyInWeeks?: Maybe<Scalars["Float"]>;
  /** The day of the week for update reminders. */
  updateRemindersDay?: Maybe<Scalars["Float"]>;
  /** The hour of the day for update reminders. */
  updateRemindersHour?: Maybe<Scalars["Float"]>;
  /** The time at which the entity was updated. */
  updatedAt: Scalars["String"];
  /** The URL of the initiative. */
  url: Scalars["String"];
};

/** An integration with an external service. */
export type Integration = Node & {
  __typename?: "Integration";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The user that added the integration. */
  creator: User;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The organization that the integration is associated with. */
  organization: Organization;
  /** The integration's type. */
  service: Scalars["String"];
  /** The team that the integration is associated with. */
  team?: Maybe<Team>;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

/** Certain properties of an integration. */
export type IntegrationChildWebhookPayload = {
  __typename?: "IntegrationChildWebhookPayload";
  /** The ID of the integration. */
  id: Scalars["String"];
  /** The service of the integration. */
  service: Scalars["String"];
};

export type IntegrationConnection = {
  __typename?: "IntegrationConnection";
  edges: Array<IntegrationEdge>;
  nodes: Array<Integration>;
  pageInfo: PageInfo;
};

export type IntegrationCustomerDataAttributesRefreshInput = {
  /** The integration service to refresh customer data attributes from. */
  service: Scalars["String"];
};

export type IntegrationEdge = {
  __typename?: "IntegrationEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: Integration;
};

export type IntegrationHasScopesPayload = {
  __typename?: "IntegrationHasScopesPayload";
  /** Whether the integration has the required scopes. */
  hasAllScopes: Scalars["Boolean"];
  /** The missing scopes. */
  missingScopes?: Maybe<Array<Scalars["String"]>>;
};

export type IntegrationPayload = {
  __typename?: "IntegrationPayload";
  /** The integration that was created or updated. */
  integration?: Maybe<Integration>;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type IntegrationRequestInput = {
  /** Email associated with the request. */
  email?: Maybe<Scalars["String"]>;
  /** Name of the requested integration. */
  name: Scalars["String"];
};

export type IntegrationRequestPayload = {
  __typename?: "IntegrationRequestPayload";
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** Linear supported integration services. */
export enum IntegrationService {
  Airbyte = "airbyte",
  Discord = "discord",
  Email = "email",
  Figma = "figma",
  FigmaPlugin = "figmaPlugin",
  Front = "front",
  Github = "github",
  GithubCodeAccessPersonal = "githubCodeAccessPersonal",
  GithubCommit = "githubCommit",
  GithubEnterpriseServer = "githubEnterpriseServer",
  GithubImport = "githubImport",
  GithubPersonal = "githubPersonal",
  Gitlab = "gitlab",
  GoogleCalendarPersonal = "googleCalendarPersonal",
  GoogleSheets = "googleSheets",
  Intercom = "intercom",
  Jira = "jira",
  JiraPersonal = "jiraPersonal",
  LaunchDarkly = "launchDarkly",
  LaunchDarklyPersonal = "launchDarklyPersonal",
  Loom = "loom",
  Notion = "notion",
  Opsgenie = "opsgenie",
  PagerDuty = "pagerDuty",
  Salesforce = "salesforce",
  Sentry = "sentry",
  Slack = "slack",
  SlackAsks = "slackAsks",
  SlackCustomViewNotifications = "slackCustomViewNotifications",
  SlackInitiativePost = "slackInitiativePost",
  SlackOrgInitiativeUpdatesPost = "slackOrgInitiativeUpdatesPost",
  SlackOrgProjectUpdatesPost = "slackOrgProjectUpdatesPost",
  SlackPersonal = "slackPersonal",
  SlackPost = "slackPost",
  SlackProjectPost = "slackProjectPost",
  SlackProjectUpdatesPost = "slackProjectUpdatesPost",
  Zendesk = "zendesk",
}

export type IntegrationSettingsInput = {
  front?: Maybe<FrontSettingsInput>;
  gitHub?: Maybe<GitHubSettingsInput>;
  gitHubImport?: Maybe<GitHubImportSettingsInput>;
  gitHubPersonal?: Maybe<GitHubPersonalSettingsInput>;
  gitLab?: Maybe<GitLabSettingsInput>;
  googleSheets?: Maybe<GoogleSheetsSettingsInput>;
  intercom?: Maybe<IntercomSettingsInput>;
  jira?: Maybe<JiraSettingsInput>;
  jiraPersonal?: Maybe<JiraPersonalSettingsInput>;
  launchDarkly?: Maybe<LaunchDarklySettingsInput>;
  notion?: Maybe<NotionSettingsInput>;
  opsgenie?: Maybe<OpsgenieInput>;
  pagerDuty?: Maybe<PagerDutyInput>;
  salesforce?: Maybe<SalesforceSettingsInput>;
  sentry?: Maybe<SentrySettingsInput>;
  slack?: Maybe<SlackSettingsInput>;
  slackAsks?: Maybe<SlackAsksSettingsInput>;
  slackCustomViewNotifications?: Maybe<SlackPostSettingsInput>;
  slackInitiativePost?: Maybe<SlackPostSettingsInput>;
  slackOrgInitiativeUpdatesPost?: Maybe<SlackPostSettingsInput>;
  slackOrgProjectUpdatesPost?: Maybe<SlackPostSettingsInput>;
  slackPost?: Maybe<SlackPostSettingsInput>;
  slackProjectPost?: Maybe<SlackPostSettingsInput>;
  zendesk?: Maybe<ZendeskSettingsInput>;
};

export type IntegrationSlackWorkspaceNamePayload = {
  __typename?: "IntegrationSlackWorkspaceNamePayload";
  /** The current name of the Slack workspace. */
  name: Scalars["String"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** Join table between templates and integrations. */
export type IntegrationTemplate = Node & {
  __typename?: "IntegrationTemplate";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** ID of the foreign entity in the external integration this template is for, e.g., Slack channel ID. */
  foreignEntityId?: Maybe<Scalars["String"]>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The integration that the template is associated with. */
  integration: Integration;
  /** The template that the integration is associated with. */
  template: Template;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

export type IntegrationTemplateConnection = {
  __typename?: "IntegrationTemplateConnection";
  edges: Array<IntegrationTemplateEdge>;
  nodes: Array<IntegrationTemplate>;
  pageInfo: PageInfo;
};

export type IntegrationTemplateCreateInput = {
  /** The foreign identifier in the other service. */
  foreignEntityId?: Maybe<Scalars["String"]>;
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The identifier of the integration. */
  integrationId: Scalars["String"];
  /** The identifier of the template. */
  templateId: Scalars["String"];
};

export type IntegrationTemplateEdge = {
  __typename?: "IntegrationTemplateEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: IntegrationTemplate;
};

export type IntegrationTemplatePayload = {
  __typename?: "IntegrationTemplatePayload";
  /** The IntegrationTemplate that was created or updated. */
  integrationTemplate: IntegrationTemplate;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type IntegrationUpdateInput = {
  /** The settings to update. */
  settings?: Maybe<IntegrationSettingsInput>;
};

/** The configuration of all integrations for different entities. */
export type IntegrationsSettings = Node & {
  __typename?: "IntegrationsSettings";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The type of view to which the integration settings context is associated with. */
  contextViewType?: Maybe<ContextViewType>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** Initiative which those settings apply to. */
  initiative?: Maybe<Initiative>;
  /** Project which those settings apply to. */
  project?: Maybe<Project>;
  /** Whether to send a Slack message when a initiate update is created. */
  slackInitiativeUpdateCreated?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when a new issue is added to triage. */
  slackIssueAddedToTriage?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when an issue is added to the custom view. */
  slackIssueAddedToView?: Maybe<Scalars["Boolean"]>;
  /**
   * Whether to send a Slack message when a new issue is created for the project or the team.
   * @deprecated No longer in use. Use `slackIssueAddedToView` instead.
   */
  slackIssueCreated?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when a comment is created on any of the project or team's issues. */
  slackIssueNewComment?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when an SLA is breached. */
  slackIssueSlaBreached?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when an SLA is at high risk. */
  slackIssueSlaHighRisk?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when any of the project or team's issues has a change in status. */
  slackIssueStatusChangedAll?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when any of the project or team's issues change to completed or cancelled. */
  slackIssueStatusChangedDone?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when a project update is created. */
  slackProjectUpdateCreated?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a new project update to team Slack channels. */
  slackProjectUpdateCreatedToTeam?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a new project update to workspace Slack channel. */
  slackProjectUpdateCreatedToWorkspace?: Maybe<Scalars["Boolean"]>;
  /** Team which those settings apply to. */
  team?: Maybe<Team>;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

export type IntegrationsSettingsCreateInput = {
  /** The type of view to which the integration settings context is associated with. */
  contextViewType?: Maybe<ContextViewType>;
  /** The identifier of the custom view to create settings for. */
  customViewId?: Maybe<Scalars["String"]>;
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The identifier of the initiative to create settings for. */
  initiativeId?: Maybe<Scalars["String"]>;
  /** The identifier of the project to create settings for. */
  projectId?: Maybe<Scalars["String"]>;
  /** Whether to send a Slack message when an initiative update is created. */
  slackInitiativeUpdateCreated?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when a new issue is added to triage. */
  slackIssueAddedToTriage?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when an issue is added to a view. */
  slackIssueAddedToView?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when a new issue is created for the project or the team. */
  slackIssueCreated?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when a comment is created on any of the project or team's issues. */
  slackIssueNewComment?: Maybe<Scalars["Boolean"]>;
  /** Whether to receive notification when an SLA has breached on Slack. */
  slackIssueSlaBreached?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when an SLA is at high risk. */
  slackIssueSlaHighRisk?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when any of the project or team's issues has a change in status. */
  slackIssueStatusChangedAll?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when any of the project or team's issues change to completed or cancelled. */
  slackIssueStatusChangedDone?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when a project update is created. */
  slackProjectUpdateCreated?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when a project update is created to team channels. */
  slackProjectUpdateCreatedToTeam?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when a project update is created to workspace channel. */
  slackProjectUpdateCreatedToWorkspace?: Maybe<Scalars["Boolean"]>;
  /** The identifier of the team to create settings for. */
  teamId?: Maybe<Scalars["String"]>;
};

export type IntegrationsSettingsPayload = {
  __typename?: "IntegrationsSettingsPayload";
  /** The settings that were created or updated. */
  integrationsSettings: IntegrationsSettings;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type IntegrationsSettingsUpdateInput = {
  /** Whether to send a Slack message when an initiative update is created. */
  slackInitiativeUpdateCreated?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when a new issue is added to triage. */
  slackIssueAddedToTriage?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when an issue is added to a view. */
  slackIssueAddedToView?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when a new issue is created for the project or the team. */
  slackIssueCreated?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when a comment is created on any of the project or team's issues. */
  slackIssueNewComment?: Maybe<Scalars["Boolean"]>;
  /** Whether to receive notification when an SLA has breached on Slack. */
  slackIssueSlaBreached?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when an SLA is at high risk. */
  slackIssueSlaHighRisk?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when any of the project or team's issues has a change in status. */
  slackIssueStatusChangedAll?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when any of the project or team's issues change to completed or cancelled. */
  slackIssueStatusChangedDone?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when a project update is created. */
  slackProjectUpdateCreated?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when a project update is created to team channels. */
  slackProjectUpdateCreatedToTeam?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when a project update is created to workspace channel. */
  slackProjectUpdateCreatedToWorkspace?: Maybe<Scalars["Boolean"]>;
};

export type IntercomSettingsInput = {
  /** Whether a ticket should be automatically reopened when its linked Linear issue is cancelled. */
  automateTicketReopeningOnCancellation?: Maybe<Scalars["Boolean"]>;
  /** Whether a ticket should be automatically reopened when a comment is posted on its linked Linear issue */
  automateTicketReopeningOnComment?: Maybe<Scalars["Boolean"]>;
  /** Whether a ticket should be automatically reopened when its linked Linear issue is completed. */
  automateTicketReopeningOnCompletion?: Maybe<Scalars["Boolean"]>;
  /** Whether a ticket should be automatically reopened when its linked Linear project is cancelled. */
  automateTicketReopeningOnProjectCancellation?: Maybe<Scalars["Boolean"]>;
  /** Whether a ticket should be automatically reopened when its linked Linear project is completed. */
  automateTicketReopeningOnProjectCompletion?: Maybe<Scalars["Boolean"]>;
  /** [ALPHA] Whether customer and customer requests should not be automatically created when conversations are linked to a Linear issue. */
  disableCustomerRequestsAutoCreation?: Maybe<Scalars["Boolean"]>;
  /** Whether an internal message should be added when someone comments on an issue. */
  sendNoteOnComment?: Maybe<Scalars["Boolean"]>;
  /** Whether an internal message should be added when a Linear issue changes status (for status types except completed or canceled). */
  sendNoteOnStatusChange?: Maybe<Scalars["Boolean"]>;
};

/** An issue. */
export type Issue = Node & {
  __typename?: "Issue";
  /** [Internal] The activity summary information for this issue. */
  activitySummary?: Maybe<Scalars["JSONObject"]>;
  /** The time at which the issue was added to a cycle. */
  addedToCycleAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the issue was added to a project. */
  addedToProjectAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the issue was added to a team. */
  addedToTeamAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The user to whom the issue is assigned to. */
  assignee?: Maybe<User>;
  /** Attachments associated with the issue. */
  attachments: AttachmentConnection;
  /** The time at which the issue was automatically archived by the auto pruning process. */
  autoArchivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the issue was automatically closed by the auto pruning process. */
  autoClosedAt?: Maybe<Scalars["DateTime"]>;
  /**
   * The order of the item in its column on the board.
   * @deprecated Will be removed in near future, please use `sortOrder` instead
   */
  boardOrder: Scalars["Float"];
  /** The bot that created the issue, if applicable. */
  botActor?: Maybe<ActorBot>;
  /** Suggested branch name for the issue. */
  branchName: Scalars["String"];
  /** The time at which the issue was moved into canceled state. */
  canceledAt?: Maybe<Scalars["DateTime"]>;
  /** Children of the issue. */
  children: IssueConnection;
  /** Comments associated with the issue. */
  comments: CommentConnection;
  /** The time at which the issue was moved into completed state. */
  completedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The user who created the issue. */
  creator?: Maybe<User>;
  /** Returns the number of Attachment resources which are created by customer support ticketing systems (e.g. Zendesk). */
  customerTicketCount: Scalars["Int"];
  /** The cycle that the issue is associated with. */
  cycle?: Maybe<Cycle>;
  /** The agent user that is delegated to work on this issue. */
  delegate?: Maybe<User>;
  /** The issue's description in markdown format. */
  description?: Maybe<Scalars["String"]>;
  /** [Internal] The issue's description content as YJS state. */
  descriptionState?: Maybe<Scalars["String"]>;
  /** [ALPHA] The document content representing this issue description. */
  documentContent?: Maybe<DocumentContent>;
  /** The date at which the issue is due. */
  dueDate?: Maybe<Scalars["TimelessDate"]>;
  /** The estimate of the complexity of the issue.. */
  estimate?: Maybe<Scalars["Float"]>;
  /** The external user who created the issue. */
  externalUserCreator?: Maybe<ExternalUser>;
  /** The users favorite associated with this issue. */
  favorite?: Maybe<Favorite>;
  /** Attachments previously associated with the issue before being moved to another issue. */
  formerAttachments: AttachmentConnection;
  /** Customer needs previously associated with the issue before being moved to another issue. */
  formerNeeds: CustomerNeedConnection;
  /** History entries associated with the issue. */
  history: IssueHistoryConnection;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** Issue's human readable identifier (e.g. ENG-123). */
  identifier: Scalars["String"];
  /** [Internal] Incoming product intelligence relation suggestions for the issue. */
  incomingSuggestions: IssueSuggestionConnection;
  /** Integration type that created this issue, if applicable. */
  integrationSourceType?: Maybe<IntegrationService>;
  /** Inverse relations associated with this issue. */
  inverseRelations: IssueRelationConnection;
  /** Id of the labels associated with this issue. */
  labelIds: Array<Scalars["String"]>;
  /** Labels associated with this issue. */
  labels: IssueLabelConnection;
  /** The last template that was applied to this issue. */
  lastAppliedTemplate?: Maybe<Template>;
  /** Customer needs associated with the issue. */
  needs: CustomerNeedConnection;
  /** The issue's unique number. */
  number: Scalars["Float"];
  /** The parent of the issue. */
  parent?: Maybe<Issue>;
  /** Previous identifiers of the issue if it has been moved between teams. */
  previousIdentifiers: Array<Scalars["String"]>;
  /** The priority of the issue. 0 = No priority, 1 = Urgent, 2 = High, 3 = Normal, 4 = Low. */
  priority: Scalars["Float"];
  /** Label for the priority. */
  priorityLabel: Scalars["String"];
  /** The order of the item in relation to other items in the organization, when ordered by priority. */
  prioritySortOrder: Scalars["Float"];
  /** The project that the issue is associated with. */
  project?: Maybe<Project>;
  /** The projectMilestone that the issue is associated with. */
  projectMilestone?: Maybe<ProjectMilestone>;
  /** Emoji reaction summary, grouped by emoji type. */
  reactionData: Scalars["JSONObject"];
  /** Reactions associated with the issue. */
  reactions: Array<Reaction>;
  /** The recurring issue template that created this issue. */
  recurringIssueTemplate?: Maybe<Template>;
  /** Relations associated with this issue. */
  relations: IssueRelationConnection;
  /** The time at which the issue's SLA will breach. */
  slaBreachesAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the issue's SLA will enter high risk state. */
  slaHighRiskAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the issue's SLA will enter medium risk state. */
  slaMediumRiskAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the issue's SLA began. */
  slaStartedAt?: Maybe<Scalars["DateTime"]>;
  /** The type of SLA set on the issue. Calendar days or business days. */
  slaType?: Maybe<Scalars["String"]>;
  /** The user who snoozed the issue. */
  snoozedBy?: Maybe<User>;
  /** The time until an issue will be snoozed in Triage view. */
  snoozedUntilAt?: Maybe<Scalars["DateTime"]>;
  /** The order of the item in relation to other items in the organization. */
  sortOrder: Scalars["Float"];
  /** The comment that this issue was created from. */
  sourceComment?: Maybe<Comment>;
  /** The time at which the issue was moved into started state. */
  startedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the issue entered triage. */
  startedTriageAt?: Maybe<Scalars["DateTime"]>;
  /** The workflow state that the issue is associated with. */
  state: WorkflowState;
  /** The order of the item in the sub-issue list. Only set if the issue has a parent. */
  subIssueSortOrder?: Maybe<Scalars["Float"]>;
  /** Users who are subscribed to the issue. */
  subscribers: UserConnection;
  /** [Internal] Product Intelligence suggestions for the issue. */
  suggestions: IssueSuggestionConnection;
  /** [Internal] The time at which the most recent suggestions for this issue were generated. */
  suggestionsGeneratedAt?: Maybe<Scalars["DateTime"]>;
  /** [DEPRECATED] [Internal] The user who has delegated this issue to be completed by an agent. */
  supervisor?: Maybe<User>;
  /** The external services the issue is synced with. */
  syncedWith?: Maybe<Array<ExternalEntityInfo>>;
  /** The team that the issue is associated with. */
  team: Team;
  /** The issue's title. */
  title: Scalars["String"];
  /** A flag that indicates whether the issue is in the trash bin. */
  trashed?: Maybe<Scalars["Boolean"]>;
  /** The time at which the issue left triage. */
  triagedAt?: Maybe<Scalars["DateTime"]>;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** Issue URL. */
  url: Scalars["String"];
};

/** An issue. */
export type IssueAttachmentsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<AttachmentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** An issue. */
export type IssueChildrenArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** An issue. */
export type IssueCommentsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CommentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** An issue. */
export type IssueFormerAttachmentsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<AttachmentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** An issue. */
export type IssueFormerNeedsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CustomerNeedFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** An issue. */
export type IssueHistoryArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** An issue. */
export type IssueIncomingSuggestionsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** An issue. */
export type IssueInverseRelationsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** An issue. */
export type IssueLabelsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueLabelFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** An issue. */
export type IssueNeedsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CustomerNeedFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** An issue. */
export type IssueRelationsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** An issue. */
export type IssueSubscribersArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<UserFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  includeDisabled?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** An issue. */
export type IssueSuggestionsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** A generic payload return from entity archive mutations. */
export type IssueArchivePayload = ArchivePayload & {
  __typename?: "IssueArchivePayload";
  /** The archived/unarchived entity. Null if entity was deleted. */
  entity?: Maybe<Issue>;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** Payload for an issue assigned to you notification. */
export type IssueAssignedToYouNotificationWebhookPayload = {
  __typename?: "IssueAssignedToYouNotificationWebhookPayload";
  /** The actor who caused the notification. */
  actor?: Maybe<UserChildWebhookPayload>;
  /** The ID of the actor who caused the notification. */
  actorId?: Maybe<Scalars["String"]>;
  /** The time at which the entity was archived. */
  archivedAt?: Maybe<Scalars["String"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["String"];
  /** The ID of the external user who caused the notification. */
  externalUserActorId?: Maybe<Scalars["String"]>;
  /** The ID of the entity. */
  id: Scalars["String"];
  /** The issue this notification belongs to. */
  issue: IssueWithDescriptionChildWebhookPayload;
  /** The ID of the issue this notification belongs to. */
  issueId: Scalars["String"];
  /** An issue assigned to you notification type. */
  type: Scalars["IssueAssignedToYouNotificationType"];
  /** The time at which the entity was updated. */
  updatedAt: Scalars["String"];
  /** The ID of the user who received the notification. */
  userId: Scalars["String"];
};

export type IssueBatchCreateInput = {
  /** The issues to create. */
  issues: Array<IssueCreateInput>;
};

export type IssueBatchPayload = {
  __typename?: "IssueBatchPayload";
  /** The issues that were updated. */
  issues: Array<Issue>;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** Certain properties of an issue. */
export type IssueChildWebhookPayload = {
  __typename?: "IssueChildWebhookPayload";
  /** The ID of the issue. */
  id: Scalars["String"];
  /** The identifier of the issue. */
  identifier: Scalars["String"];
  /** The ID of the team that the issue belongs to. */
  team: TeamChildWebhookPayload;
  /** The ID of the team that the issue belongs to. */
  teamId: Scalars["String"];
  /** The title of the issue. */
  title: Scalars["String"];
  /** The URL of the issue. */
  url: Scalars["String"];
};

/** Issue filtering options. */
export type IssueCollectionFilter = {
  /** Comparator for the issues added to cycle at date. */
  addedToCycleAt?: Maybe<NullableDateComparator>;
  /** Comparator for the period when issue was added to a cycle. */
  addedToCyclePeriod?: Maybe<CyclePeriodComparator>;
  /** [Internal] Age (created -> now) comparator, defined if the issue is still open. */
  ageTime?: Maybe<NullableDurationComparator>;
  /** Compound filters, all of which need to be matched by the issue. */
  and?: Maybe<Array<IssueCollectionFilter>>;
  /** Comparator for the issues archived at date. */
  archivedAt?: Maybe<NullableDateComparator>;
  /** Filters that the issues assignee must satisfy. */
  assignee?: Maybe<NullableUserFilter>;
  /** Filters that the issues attachments must satisfy. */
  attachments?: Maybe<AttachmentCollectionFilter>;
  /** Comparator for the issues auto archived at date. */
  autoArchivedAt?: Maybe<NullableDateComparator>;
  /** Comparator for the issues auto closed at date. */
  autoClosedAt?: Maybe<NullableDateComparator>;
  /** Comparator for the issues canceled at date. */
  canceledAt?: Maybe<NullableDateComparator>;
  /** Filters that the child issues must satisfy. */
  children?: Maybe<IssueCollectionFilter>;
  /** Filters that the issues comments must satisfy. */
  comments?: Maybe<CommentCollectionFilter>;
  /** Comparator for the issues completed at date. */
  completedAt?: Maybe<NullableDateComparator>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Filters that the issues creator must satisfy. */
  creator?: Maybe<NullableUserFilter>;
  /** Count of customers */
  customerCount?: Maybe<NumberComparator>;
  /** Count of important customers */
  customerImportantCount?: Maybe<NumberComparator>;
  /** Filters that the issues cycle must satisfy. */
  cycle?: Maybe<NullableCycleFilter>;
  /** [Internal] Cycle time (started -> completed) comparator. */
  cycleTime?: Maybe<NullableDurationComparator>;
  /** Filters that the issue's delegated agent must satisfy. */
  delegate?: Maybe<NullableUserFilter>;
  /** Comparator for the issues description. */
  description?: Maybe<NullableStringComparator>;
  /** Comparator for the issues due date. */
  dueDate?: Maybe<NullableTimelessDateComparator>;
  /** Comparator for the issues estimate. */
  estimate?: Maybe<EstimateComparator>;
  /** Filters that needs to be matched by all issues. */
  every?: Maybe<IssueFilter>;
  /** Comparator for filtering issues which are blocked. */
  hasBlockedByRelations?: Maybe<RelationExistsComparator>;
  /** Comparator for filtering issues which are blocking. */
  hasBlockingRelations?: Maybe<RelationExistsComparator>;
  /** Comparator for filtering issues which are duplicates. */
  hasDuplicateRelations?: Maybe<RelationExistsComparator>;
  /** Comparator for filtering issues with relations. */
  hasRelatedRelations?: Maybe<RelationExistsComparator>;
  /** [Internal] Comparator for filtering issues which have suggested assignees. */
  hasSuggestedAssignees?: Maybe<RelationExistsComparator>;
  /** [Internal] Comparator for filtering issues which have suggested labels. */
  hasSuggestedLabels?: Maybe<RelationExistsComparator>;
  /** [Internal] Comparator for filtering issues which have suggested projects. */
  hasSuggestedProjects?: Maybe<RelationExistsComparator>;
  /** [Internal] Comparator for filtering issues which have suggested related issues. */
  hasSuggestedRelatedIssues?: Maybe<RelationExistsComparator>;
  /** [Internal] Comparator for filtering issues which have suggested similar issues. */
  hasSuggestedSimilarIssues?: Maybe<RelationExistsComparator>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Filters that issue labels must satisfy. */
  labels?: Maybe<IssueLabelCollectionFilter>;
  /** Filters that the last applied template must satisfy. */
  lastAppliedTemplate?: Maybe<NullableTemplateFilter>;
  /** [Internal] Lead time (created -> completed) comparator. */
  leadTime?: Maybe<NullableDurationComparator>;
  /** Comparator for the collection length. */
  length?: Maybe<NumberComparator>;
  /** Filters that the issue's customer needs must satisfy. */
  needs?: Maybe<CustomerNeedCollectionFilter>;
  /** Comparator for the issues number. */
  number?: Maybe<NumberComparator>;
  /** Compound filters, one of which need to be matched by the issue. */
  or?: Maybe<Array<IssueCollectionFilter>>;
  /** Filters that the issue parent must satisfy. */
  parent?: Maybe<NullableIssueFilter>;
  /** Comparator for the issues priority. */
  priority?: Maybe<NullableNumberComparator>;
  /** Filters that the issues project must satisfy. */
  project?: Maybe<NullableProjectFilter>;
  /** Filters that the issues project milestone must satisfy. */
  projectMilestone?: Maybe<NullableProjectMilestoneFilter>;
  /** Filters that the issues reactions must satisfy. */
  reactions?: Maybe<ReactionCollectionFilter>;
  /** [ALPHA] Filters that the recurring issue template must satisfy. */
  recurringIssueTemplate?: Maybe<NullableTemplateFilter>;
  /** [Internal] Comparator for the issues content. */
  searchableContent?: Maybe<ContentComparator>;
  /** Comparator for the issues sla status. */
  slaStatus?: Maybe<SlaStatusComparator>;
  /** Filters that the issues snoozer must satisfy. */
  snoozedBy?: Maybe<NullableUserFilter>;
  /** Comparator for the issues snoozed until date. */
  snoozedUntilAt?: Maybe<NullableDateComparator>;
  /** Filters that needs to be matched by some issues. */
  some?: Maybe<IssueFilter>;
  /** Filters that the source must satisfy. */
  sourceMetadata?: Maybe<SourceMetadataComparator>;
  /** Comparator for the issues started at date. */
  startedAt?: Maybe<NullableDateComparator>;
  /** Filters that the issues state must satisfy. */
  state?: Maybe<WorkflowStateFilter>;
  /** Filters that issue subscribers must satisfy. */
  subscribers?: Maybe<UserCollectionFilter>;
  /** Filters that the issues team must satisfy. */
  team?: Maybe<TeamFilter>;
  /** Comparator for the issues title. */
  title?: Maybe<StringComparator>;
  /** [Internal] Triage time (entered triaged -> triaged) comparator. */
  triageTime?: Maybe<NullableDurationComparator>;
  /** Comparator for the issues triaged at date. */
  triagedAt?: Maybe<NullableDateComparator>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

/** Payload for an issue comment mention notification. */
export type IssueCommentMentionNotificationWebhookPayload = {
  __typename?: "IssueCommentMentionNotificationWebhookPayload";
  /** The actor who caused the notification. */
  actor?: Maybe<UserChildWebhookPayload>;
  /** The ID of the actor who caused the notification. */
  actorId?: Maybe<Scalars["String"]>;
  /** The time at which the entity was archived. */
  archivedAt?: Maybe<Scalars["String"]>;
  /** The comment this notification belongs to. */
  comment: CommentChildWebhookPayload;
  /** The ID of the comment this notification belongs to. */
  commentId: Scalars["String"];
  /** The time at which the entity was created. */
  createdAt: Scalars["String"];
  /** The ID of the external user who caused the notification. */
  externalUserActorId?: Maybe<Scalars["String"]>;
  /** The ID of the entity. */
  id: Scalars["String"];
  /** The issue this notification belongs to. */
  issue: IssueWithDescriptionChildWebhookPayload;
  /** The ID of the issue this notification belongs to. */
  issueId: Scalars["String"];
  /** The parent comment for the comment this notification belongs to. */
  parentComment?: Maybe<CommentChildWebhookPayload>;
  /** The ID of the parent comment for the comment this notification belongs to. */
  parentCommentId?: Maybe<Scalars["String"]>;
  /** An issue comment mention notification type. */
  type: Scalars["IssueCommentMentionNotificationType"];
  /** The time at which the entity was updated. */
  updatedAt: Scalars["String"];
  /** The ID of the user who received the notification. */
  userId: Scalars["String"];
};

/** Payload for an issue comment reaction notification. */
export type IssueCommentReactionNotificationWebhookPayload = {
  __typename?: "IssueCommentReactionNotificationWebhookPayload";
  /** The actor who caused the notification. */
  actor?: Maybe<UserChildWebhookPayload>;
  /** The ID of the actor who caused the notification. */
  actorId?: Maybe<Scalars["String"]>;
  /** The time at which the entity was archived. */
  archivedAt?: Maybe<Scalars["String"]>;
  /** The comment this notification belongs to. */
  comment: CommentChildWebhookPayload;
  /** The ID of the comment this notification belongs to. */
  commentId: Scalars["String"];
  /** The time at which the entity was created. */
  createdAt: Scalars["String"];
  /** The ID of the external user who caused the notification. */
  externalUserActorId?: Maybe<Scalars["String"]>;
  /** The ID of the entity. */
  id: Scalars["String"];
  /** The issue this notification belongs to. */
  issue: IssueWithDescriptionChildWebhookPayload;
  /** The ID of the issue this notification belongs to. */
  issueId: Scalars["String"];
  /** The parent comment for the comment this notification belongs to. */
  parentComment?: Maybe<CommentChildWebhookPayload>;
  /** The ID of the parent comment for the comment this notification belongs to. */
  parentCommentId?: Maybe<Scalars["String"]>;
  /** The emoji of the reaction this notification is for. */
  reactionEmoji: Scalars["String"];
  /** An issue comment reaction notification type. */
  type: Scalars["IssueCommentReactionNotificationType"];
  /** The time at which the entity was updated. */
  updatedAt: Scalars["String"];
  /** The ID of the user who received the notification. */
  userId: Scalars["String"];
};

export type IssueConnection = {
  __typename?: "IssueConnection";
  edges: Array<IssueEdge>;
  nodes: Array<Issue>;
  pageInfo: PageInfo;
};

export type IssueCreateInput = {
  /** The identifier of the user to assign the issue to. */
  assigneeId?: Maybe<Scalars["String"]>;
  /** The date when the issue was completed (e.g. if importing from another system). Must be a date in the past and after createdAt date. Cannot be provided with an incompatible workflow state. */
  completedAt?: Maybe<Scalars["DateTime"]>;
  /** Create issue as a user with the provided name. This option is only available to OAuth applications creating issues in `actor=app` mode. */
  createAsUser?: Maybe<Scalars["String"]>;
  /** The date when the issue was created (e.g. if importing from another system). Must be a date in the past. If none is provided, the backend will generate the time as now. */
  createdAt?: Maybe<Scalars["DateTime"]>;
  /** The cycle associated with the issue. */
  cycleId?: Maybe<Scalars["String"]>;
  /** The identifier of the agent user to delegate the issue to. */
  delegateId?: Maybe<Scalars["String"]>;
  /** The issue description in markdown format. */
  description?: Maybe<Scalars["String"]>;
  /** [Internal] The issue description as a Prosemirror document. */
  descriptionData?: Maybe<Scalars["JSON"]>;
  /** Provide an external user avatar URL. Can only be used in conjunction with the `createAsUser` options. This option is only available to OAuth applications creating comments in `actor=app` mode. */
  displayIconUrl?: Maybe<Scalars["String"]>;
  /** The date at which the issue is due. */
  dueDate?: Maybe<Scalars["TimelessDate"]>;
  /** The estimated complexity of the issue. */
  estimate?: Maybe<Scalars["Int"]>;
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The identifiers of the issue labels associated with this ticket. */
  labelIds?: Maybe<Array<Scalars["String"]>>;
  /** The ID of the last template applied to the issue. */
  lastAppliedTemplateId?: Maybe<Scalars["String"]>;
  /** The identifier of the parent issue. */
  parentId?: Maybe<Scalars["String"]>;
  /** Whether the passed sort order should be preserved. */
  preserveSortOrderOnCreate?: Maybe<Scalars["Boolean"]>;
  /** The priority of the issue. 0 = No priority, 1 = Urgent, 2 = High, 3 = Normal, 4 = Low. */
  priority?: Maybe<Scalars["Int"]>;
  /** The position of the issue related to other issues, when ordered by priority. */
  prioritySortOrder?: Maybe<Scalars["Float"]>;
  /** The project associated with the issue. */
  projectId?: Maybe<Scalars["String"]>;
  /** The project milestone associated with the issue. */
  projectMilestoneId?: Maybe<Scalars["String"]>;
  /** The comment the issue is referencing. */
  referenceCommentId?: Maybe<Scalars["String"]>;
  /** [Internal] The timestamp at which an issue will be considered in breach of SLA. */
  slaBreachesAt?: Maybe<Scalars["DateTime"]>;
  /** [Internal] The timestamp at which the issue's SLA was started. */
  slaStartedAt?: Maybe<Scalars["DateTime"]>;
  /** The SLA day count type for the issue. Whether SLA should be business days only or calendar days (default). */
  slaType?: Maybe<SLADayCountType>;
  /** The position of the issue related to other issues. */
  sortOrder?: Maybe<Scalars["Float"]>;
  /** The comment the issue is created from. */
  sourceCommentId?: Maybe<Scalars["String"]>;
  /** [Internal] The pull request comment the issue is created from. */
  sourcePullRequestCommentId?: Maybe<Scalars["String"]>;
  /** The team state of the issue. */
  stateId?: Maybe<Scalars["String"]>;
  /** The position of the issue in parent's sub-issue list. */
  subIssueSortOrder?: Maybe<Scalars["Float"]>;
  /** The identifiers of the users subscribing to this ticket. */
  subscriberIds?: Maybe<Array<Scalars["String"]>>;
  /** The identifier of the team associated with the issue. */
  teamId: Scalars["String"];
  /** The identifier of a template the issue should be created from. If other values are provided in the input, they will override template values. */
  templateId?: Maybe<Scalars["String"]>;
  /** The title of the issue. */
  title?: Maybe<Scalars["String"]>;
  /** Whether to use the default template for the team. When set to true, the default template of this team based on user's membership will be applied. */
  useDefaultTemplate?: Maybe<Scalars["Boolean"]>;
};

/** [Internal] A draft issue. */
export type IssueDraft = Node & {
  __typename?: "IssueDraft";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The user assigned to the draft. */
  assigneeId?: Maybe<Scalars["String"]>;
  /** Serialized array of JSONs representing attachments. */
  attachments?: Maybe<Scalars["JSONObject"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The user who created the draft. */
  creator: User;
  /** The cycle associated with the draft. */
  cycleId?: Maybe<Scalars["String"]>;
  /** The agent user delegated to work on the issue being drafted. */
  delegateId?: Maybe<Scalars["String"]>;
  /** The draft's description in markdown format. */
  description?: Maybe<Scalars["String"]>;
  /** [Internal] The draft's description as a Prosemirror document. */
  descriptionData?: Maybe<Scalars["JSON"]>;
  /** The date at which the issue would be due. */
  dueDate?: Maybe<Scalars["TimelessDate"]>;
  /** The estimate of the complexity of the draft. */
  estimate?: Maybe<Scalars["Float"]>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The IDs of labels added to the draft. */
  labelIds: Array<Scalars["String"]>;
  /** Serialized array of JSONs representing customer needs. */
  needs?: Maybe<Scalars["JSONObject"]>;
  /** The parent draft of the draft. */
  parent?: Maybe<IssueDraft>;
  /** The ID of the parent issue draft, if any. */
  parentId?: Maybe<Scalars["String"]>;
  /** The parent issue of the draft. */
  parentIssue?: Maybe<Issue>;
  /** The ID of the parent issue, if any. */
  parentIssueId?: Maybe<Scalars["String"]>;
  /** The priority of the draft. */
  priority: Scalars["Float"];
  /** Label for the priority. */
  priorityLabel: Scalars["String"];
  /** The project associated with the draft. */
  projectId?: Maybe<Scalars["String"]>;
  /** The project milestone associated with the draft. */
  projectMilestoneId?: Maybe<Scalars["String"]>;
  /** Serialized array of JSONs representing the recurring issue's schedule. */
  schedule?: Maybe<Scalars["JSONObject"]>;
  /** The ID of the comment that the draft was created from. */
  sourceCommentId?: Maybe<Scalars["String"]>;
  /** The workflow state associated with the draft. */
  stateId: Scalars["String"];
  /** The order of items in the sub-draft list. Only set if the draft has `parent` set. */
  subIssueSortOrder?: Maybe<Scalars["Float"]>;
  /** The team associated with the draft. */
  teamId: Scalars["String"];
  /** The draft's title. */
  title: Scalars["String"];
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

export type IssueDraftConnection = {
  __typename?: "IssueDraftConnection";
  edges: Array<IssueDraftEdge>;
  nodes: Array<IssueDraft>;
  pageInfo: PageInfo;
};

export type IssueDraftEdge = {
  __typename?: "IssueDraftEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: IssueDraft;
};

export type IssueEdge = {
  __typename?: "IssueEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: Issue;
};

/** Payload for an issue emoji reaction notification. */
export type IssueEmojiReactionNotificationWebhookPayload = {
  __typename?: "IssueEmojiReactionNotificationWebhookPayload";
  /** The actor who caused the notification. */
  actor?: Maybe<UserChildWebhookPayload>;
  /** The ID of the actor who caused the notification. */
  actorId?: Maybe<Scalars["String"]>;
  /** The time at which the entity was archived. */
  archivedAt?: Maybe<Scalars["String"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["String"];
  /** The ID of the external user who caused the notification. */
  externalUserActorId?: Maybe<Scalars["String"]>;
  /** The ID of the entity. */
  id: Scalars["String"];
  /** The issue this notification belongs to. */
  issue: IssueWithDescriptionChildWebhookPayload;
  /** The ID of the issue this notification belongs to. */
  issueId: Scalars["String"];
  /** The emoji of the reaction this notification is for. */
  reactionEmoji: Scalars["String"];
  /** An issue emoji reaction notification type. */
  type: Scalars["IssueEmojiReactionNotificationType"];
  /** The time at which the entity was updated. */
  updatedAt: Scalars["String"];
  /** The ID of the user who received the notification. */
  userId: Scalars["String"];
};

/** Issue filtering options. */
export type IssueFilter = {
  /** Comparator for the issues added to cycle at date. */
  addedToCycleAt?: Maybe<NullableDateComparator>;
  /** Comparator for the period when issue was added to a cycle. */
  addedToCyclePeriod?: Maybe<CyclePeriodComparator>;
  /** [Internal] Age (created -> now) comparator, defined if the issue is still open. */
  ageTime?: Maybe<NullableDurationComparator>;
  /** Compound filters, all of which need to be matched by the issue. */
  and?: Maybe<Array<IssueFilter>>;
  /** Comparator for the issues archived at date. */
  archivedAt?: Maybe<NullableDateComparator>;
  /** Filters that the issues assignee must satisfy. */
  assignee?: Maybe<NullableUserFilter>;
  /** Filters that the issues attachments must satisfy. */
  attachments?: Maybe<AttachmentCollectionFilter>;
  /** Comparator for the issues auto archived at date. */
  autoArchivedAt?: Maybe<NullableDateComparator>;
  /** Comparator for the issues auto closed at date. */
  autoClosedAt?: Maybe<NullableDateComparator>;
  /** Comparator for the issues canceled at date. */
  canceledAt?: Maybe<NullableDateComparator>;
  /** Filters that the child issues must satisfy. */
  children?: Maybe<IssueCollectionFilter>;
  /** Filters that the issues comments must satisfy. */
  comments?: Maybe<CommentCollectionFilter>;
  /** Comparator for the issues completed at date. */
  completedAt?: Maybe<NullableDateComparator>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Filters that the issues creator must satisfy. */
  creator?: Maybe<NullableUserFilter>;
  /** Count of customers */
  customerCount?: Maybe<NumberComparator>;
  /** Count of important customers */
  customerImportantCount?: Maybe<NumberComparator>;
  /** Filters that the issues cycle must satisfy. */
  cycle?: Maybe<NullableCycleFilter>;
  /** [Internal] Cycle time (started -> completed) comparator. */
  cycleTime?: Maybe<NullableDurationComparator>;
  /** Filters that the issue's delegated agent must satisfy. */
  delegate?: Maybe<NullableUserFilter>;
  /** Comparator for the issues description. */
  description?: Maybe<NullableStringComparator>;
  /** Comparator for the issues due date. */
  dueDate?: Maybe<NullableTimelessDateComparator>;
  /** Comparator for the issues estimate. */
  estimate?: Maybe<EstimateComparator>;
  /** Comparator for filtering issues which are blocked. */
  hasBlockedByRelations?: Maybe<RelationExistsComparator>;
  /** Comparator for filtering issues which are blocking. */
  hasBlockingRelations?: Maybe<RelationExistsComparator>;
  /** Comparator for filtering issues which are duplicates. */
  hasDuplicateRelations?: Maybe<RelationExistsComparator>;
  /** Comparator for filtering issues with relations. */
  hasRelatedRelations?: Maybe<RelationExistsComparator>;
  /** [Internal] Comparator for filtering issues which have suggested assignees. */
  hasSuggestedAssignees?: Maybe<RelationExistsComparator>;
  /** [Internal] Comparator for filtering issues which have suggested labels. */
  hasSuggestedLabels?: Maybe<RelationExistsComparator>;
  /** [Internal] Comparator for filtering issues which have suggested projects. */
  hasSuggestedProjects?: Maybe<RelationExistsComparator>;
  /** [Internal] Comparator for filtering issues which have suggested related issues. */
  hasSuggestedRelatedIssues?: Maybe<RelationExistsComparator>;
  /** [Internal] Comparator for filtering issues which have suggested similar issues. */
  hasSuggestedSimilarIssues?: Maybe<RelationExistsComparator>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Filters that issue labels must satisfy. */
  labels?: Maybe<IssueLabelCollectionFilter>;
  /** Filters that the last applied template must satisfy. */
  lastAppliedTemplate?: Maybe<NullableTemplateFilter>;
  /** [Internal] Lead time (created -> completed) comparator. */
  leadTime?: Maybe<NullableDurationComparator>;
  /** Filters that the issue's customer needs must satisfy. */
  needs?: Maybe<CustomerNeedCollectionFilter>;
  /** Comparator for the issues number. */
  number?: Maybe<NumberComparator>;
  /** Compound filters, one of which need to be matched by the issue. */
  or?: Maybe<Array<IssueFilter>>;
  /** Filters that the issue parent must satisfy. */
  parent?: Maybe<NullableIssueFilter>;
  /** Comparator for the issues priority. */
  priority?: Maybe<NullableNumberComparator>;
  /** Filters that the issues project must satisfy. */
  project?: Maybe<NullableProjectFilter>;
  /** Filters that the issues project milestone must satisfy. */
  projectMilestone?: Maybe<NullableProjectMilestoneFilter>;
  /** Filters that the issues reactions must satisfy. */
  reactions?: Maybe<ReactionCollectionFilter>;
  /** [ALPHA] Filters that the recurring issue template must satisfy. */
  recurringIssueTemplate?: Maybe<NullableTemplateFilter>;
  /** [Internal] Comparator for the issues content. */
  searchableContent?: Maybe<ContentComparator>;
  /** Comparator for the issues sla status. */
  slaStatus?: Maybe<SlaStatusComparator>;
  /** Filters that the issues snoozer must satisfy. */
  snoozedBy?: Maybe<NullableUserFilter>;
  /** Comparator for the issues snoozed until date. */
  snoozedUntilAt?: Maybe<NullableDateComparator>;
  /** Filters that the source must satisfy. */
  sourceMetadata?: Maybe<SourceMetadataComparator>;
  /** Comparator for the issues started at date. */
  startedAt?: Maybe<NullableDateComparator>;
  /** Filters that the issues state must satisfy. */
  state?: Maybe<WorkflowStateFilter>;
  /** Filters that issue subscribers must satisfy. */
  subscribers?: Maybe<UserCollectionFilter>;
  /** Filters that the issues team must satisfy. */
  team?: Maybe<TeamFilter>;
  /** Comparator for the issues title. */
  title?: Maybe<StringComparator>;
  /** [Internal] Triage time (entered triaged -> triaged) comparator. */
  triageTime?: Maybe<NullableDurationComparator>;
  /** Comparator for the issues triaged at date. */
  triagedAt?: Maybe<NullableDateComparator>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

export type IssueFilterSuggestionPayload = {
  __typename?: "IssueFilterSuggestionPayload";
  /** The json filter that is suggested. */
  filter?: Maybe<Scalars["JSONObject"]>;
  /** The log id of the prompt, that created this filter. */
  logId?: Maybe<Scalars["String"]>;
};

/** A record of changes to an issue. */
export type IssueHistory = Node & {
  __typename?: "IssueHistory";
  /** The actor that performed the actions. This field may be empty in the case of integrations or automations. */
  actor?: Maybe<User>;
  /** The id of user who made these changes. If null, possibly means that the change made by an integration. */
  actorId?: Maybe<Scalars["String"]>;
  /**
   * The actors that performed the actions. This field may be empty in the case of integrations or automations.
   * @deprecated Use `actor` and `descriptionUpdatedBy` instead.
   */
  actors?: Maybe<Array<User>>;
  /** ID's of labels that were added. */
  addedLabelIds?: Maybe<Array<Scalars["String"]>>;
  /** The labels that were added to the issue. */
  addedLabels?: Maybe<Array<IssueLabel>>;
  /** Whether the issue is archived at the time of this history entry. */
  archived?: Maybe<Scalars["Boolean"]>;
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The linked attachment. */
  attachment?: Maybe<Attachment>;
  /** The id of linked attachment. */
  attachmentId?: Maybe<Scalars["String"]>;
  /** Whether the issue was auto-archived. */
  autoArchived?: Maybe<Scalars["Boolean"]>;
  /** Whether the issue was auto-closed. */
  autoClosed?: Maybe<Scalars["Boolean"]>;
  /** The bot that performed the action. */
  botActor?: Maybe<ActorBot>;
  /** [Internal] Serialized JSON representing changes for certain non-relational properties. */
  changes?: Maybe<Scalars["JSONObject"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The id of linked customer need. */
  customerNeedId?: Maybe<Scalars["String"]>;
  /** The actors that edited the description of the issue, if any. */
  descriptionUpdatedBy?: Maybe<Array<User>>;
  /** The user that was unassigned from the issue. */
  fromAssignee?: Maybe<User>;
  /** The id of user from whom the issue was re-assigned from. */
  fromAssigneeId?: Maybe<Scalars["String"]>;
  /** The cycle that the issue was moved from. */
  fromCycle?: Maybe<Cycle>;
  /** The id of previous cycle of the issue. */
  fromCycleId?: Maybe<Scalars["String"]>;
  /** The app user from whom the issue delegation was transferred. */
  fromDelegate?: Maybe<User>;
  /** What the due date was changed from. */
  fromDueDate?: Maybe<Scalars["TimelessDate"]>;
  /** What the estimate was changed from. */
  fromEstimate?: Maybe<Scalars["Float"]>;
  /** The parent issue that the issue was moved from. */
  fromParent?: Maybe<Issue>;
  /** The id of previous parent of the issue. */
  fromParentId?: Maybe<Scalars["String"]>;
  /** What the priority was changed from. */
  fromPriority?: Maybe<Scalars["Float"]>;
  /** The project that the issue was moved from. */
  fromProject?: Maybe<Project>;
  /** The id of previous project of the issue. */
  fromProjectId?: Maybe<Scalars["String"]>;
  /** The state that the issue was moved from. */
  fromState?: Maybe<WorkflowState>;
  /** The id of previous workflow state of the issue. */
  fromStateId?: Maybe<Scalars["String"]>;
  /** The team that the issue was moved from. */
  fromTeam?: Maybe<Team>;
  /** The id of team from which the issue was moved from. */
  fromTeamId?: Maybe<Scalars["String"]>;
  /** What the title was changed from. */
  fromTitle?: Maybe<Scalars["String"]>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The issue that was changed. */
  issue: Issue;
  /** The import record. */
  issueImport?: Maybe<IssueImport>;
  /** Changed issue relationships. */
  relationChanges?: Maybe<Array<IssueRelationHistoryPayload>>;
  /** ID's of labels that were removed. */
  removedLabelIds?: Maybe<Array<Scalars["String"]>>;
  /** The labels that were removed from the issue. */
  removedLabels?: Maybe<Array<IssueLabel>>;
  /** The user that was assigned to the issue. */
  toAssignee?: Maybe<User>;
  /** The id of user to whom the issue was assigned to. */
  toAssigneeId?: Maybe<Scalars["String"]>;
  /** The new project created from the issue. */
  toConvertedProject?: Maybe<Project>;
  /** The id of new project created from the issue. */
  toConvertedProjectId?: Maybe<Scalars["String"]>;
  /** The cycle that the issue was moved to. */
  toCycle?: Maybe<Cycle>;
  /** The id of new cycle of the issue. */
  toCycleId?: Maybe<Scalars["String"]>;
  /** The app user to whom the issue delegation was transferred. */
  toDelegate?: Maybe<User>;
  /** What the due date was changed to. */
  toDueDate?: Maybe<Scalars["TimelessDate"]>;
  /** What the estimate was changed to. */
  toEstimate?: Maybe<Scalars["Float"]>;
  /** The parent issue that the issue was moved to. */
  toParent?: Maybe<Issue>;
  /** The id of new parent of the issue. */
  toParentId?: Maybe<Scalars["String"]>;
  /** What the priority was changed to. */
  toPriority?: Maybe<Scalars["Float"]>;
  /** The project that the issue was moved to. */
  toProject?: Maybe<Project>;
  /** The id of new project of the issue. */
  toProjectId?: Maybe<Scalars["String"]>;
  /** The state that the issue was moved to. */
  toState?: Maybe<WorkflowState>;
  /** The id of new workflow state of the issue. */
  toStateId?: Maybe<Scalars["String"]>;
  /** The team that the issue was moved to. */
  toTeam?: Maybe<Team>;
  /** The id of team to which the issue was moved to. */
  toTeamId?: Maybe<Scalars["String"]>;
  /** What the title was changed to. */
  toTitle?: Maybe<Scalars["String"]>;
  /** Whether the issue was trashed or un-trashed. */
  trashed?: Maybe<Scalars["Boolean"]>;
  /** The users that were notified of the issue. */
  triageResponsibilityNotifiedUsers?: Maybe<Array<User>>;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** Whether the issue's description was updated. */
  updatedDescription?: Maybe<Scalars["Boolean"]>;
};

export type IssueHistoryConnection = {
  __typename?: "IssueHistoryConnection";
  edges: Array<IssueHistoryEdge>;
  nodes: Array<IssueHistory>;
  pageInfo: PageInfo;
};

export type IssueHistoryEdge = {
  __typename?: "IssueHistoryEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: IssueHistory;
};

/** An import job for data from an external service. */
export type IssueImport = Node & {
  __typename?: "IssueImport";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The id for the user that started the job. */
  creatorId?: Maybe<Scalars["String"]>;
  /** File URL for the uploaded CSV for the import, if there is one. */
  csvFileUrl?: Maybe<Scalars["String"]>;
  /** The display name of the import service. */
  displayName: Scalars["String"];
  /** User readable error message, if one has occurred during the import. */
  error?: Maybe<Scalars["String"]>;
  /** Error code and metadata, if one has occurred during the import. */
  errorMetadata?: Maybe<Scalars["JSONObject"]>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The data mapping configuration for the import job. */
  mapping?: Maybe<Scalars["JSONObject"]>;
  /** Current step progress in % (0-100). */
  progress?: Maybe<Scalars["Float"]>;
  /** The service from which data will be imported. */
  service: Scalars["String"];
  /** Metadata related to import service. */
  serviceMetadata?: Maybe<Scalars["JSONObject"]>;
  /** The status for the import job. */
  status: Scalars["String"];
  /** New team's name in cases when teamId not set. */
  teamName?: Maybe<Scalars["String"]>;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

export type IssueImportCheckPayload = {
  __typename?: "IssueImportCheckPayload";
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type IssueImportDeletePayload = {
  __typename?: "IssueImportDeletePayload";
  /** The import job that was deleted. */
  issueImport?: Maybe<IssueImport>;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** Whether a custom JQL query is valid or not */
export type IssueImportJqlCheckPayload = {
  __typename?: "IssueImportJqlCheckPayload";
  /** Returns an approximate number of issues matching the JQL query, if available */
  count?: Maybe<Scalars["Float"]>;
  /** An error message returned by Jira when validating the JQL query. */
  error?: Maybe<Scalars["String"]>;
  /** Returns true if the JQL query has been validated successfully, false otherwise */
  success: Scalars["Boolean"];
};

export type IssueImportPayload = {
  __typename?: "IssueImportPayload";
  /** The import job that was created or updated. */
  issueImport?: Maybe<IssueImport>;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** Whether an issue import can be synced at the end of an import or not */
export type IssueImportSyncCheckPayload = {
  __typename?: "IssueImportSyncCheckPayload";
  /** Returns true if the import can be synced, false otherwise */
  canSync: Scalars["Boolean"];
  /** An error message with a root cause of why the import cannot be synced */
  error?: Maybe<Scalars["String"]>;
};

export type IssueImportUpdateInput = {
  /** The mapping configuration for the import. */
  mapping: Scalars["JSONObject"];
};

/** Labels that can be associated with issues. */
export type IssueLabel = Node & {
  __typename?: "IssueLabel";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** Children of the label. */
  children: IssueLabelConnection;
  /** The label's color as a HEX string. */
  color: Scalars["String"];
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The user who created the label. */
  creator?: Maybe<User>;
  /** The label's description. */
  description?: Maybe<Scalars["String"]>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The original label inherited from. */
  inheritedFrom?: Maybe<IssueLabel>;
  /** Whether the label is a group. */
  isGroup: Scalars["Boolean"];
  /** Issues associated with the label. */
  issues: IssueConnection;
  /** The date when the label was last applied to an issue or project. */
  lastAppliedAt?: Maybe<Scalars["DateTime"]>;
  /** The label's name. */
  name: Scalars["String"];
  /** @deprecated Workspace labels are identified by their team being null. */
  organization: Organization;
  /** The parent label. */
  parent?: Maybe<IssueLabel>;
  /** The team that the label is associated with. If null, the label is associated with the global workspace. */
  team?: Maybe<Team>;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

/** Labels that can be associated with issues. */
export type IssueLabelChildrenArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueLabelFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** Labels that can be associated with issues. */
export type IssueLabelIssuesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** Certain properties of an issue label. */
export type IssueLabelChildWebhookPayload = {
  __typename?: "IssueLabelChildWebhookPayload";
  /** The color of the issue label. */
  color: Scalars["String"];
  /** The ID of the issue label. */
  id: Scalars["String"];
  /** The name of the issue label. */
  name: Scalars["String"];
  /** The parent ID of the issue label. */
  parentId?: Maybe<Scalars["String"]>;
};

/** Issue label filtering options. */
export type IssueLabelCollectionFilter = {
  /** Compound filters, all of which need to be matched by the label. */
  and?: Maybe<Array<IssueLabelCollectionFilter>>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Filters that the issue labels creator must satisfy. */
  creator?: Maybe<NullableUserFilter>;
  /** Filters that needs to be matched by all issue labels. */
  every?: Maybe<IssueLabelFilter>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Comparator for whether the label is a group label. */
  isGroup?: Maybe<BooleanComparator>;
  /** Comparator for the collection length. */
  length?: Maybe<NumberComparator>;
  /** Comparator for the name. */
  name?: Maybe<StringComparator>;
  /** Filter based on the existence of the relation. */
  null?: Maybe<Scalars["Boolean"]>;
  /** Compound filters, one of which need to be matched by the label. */
  or?: Maybe<Array<IssueLabelCollectionFilter>>;
  /** Filters that the issue label's parent label must satisfy. */
  parent?: Maybe<IssueLabelFilter>;
  /** Filters that needs to be matched by some issue labels. */
  some?: Maybe<IssueLabelFilter>;
  /** Filters that the issue labels team must satisfy. */
  team?: Maybe<NullableTeamFilter>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

export type IssueLabelConnection = {
  __typename?: "IssueLabelConnection";
  edges: Array<IssueLabelEdge>;
  nodes: Array<IssueLabel>;
  pageInfo: PageInfo;
};

export type IssueLabelCreateInput = {
  /** The color of the label. */
  color?: Maybe<Scalars["String"]>;
  /** The description of the label. */
  description?: Maybe<Scalars["String"]>;
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** Whether the label is a group. */
  isGroup?: Maybe<Scalars["Boolean"]>;
  /** The name of the label. */
  name: Scalars["String"];
  /** The identifier of the parent label. */
  parentId?: Maybe<Scalars["String"]>;
  /** The team associated with the label. If not given, the label will be associated with the entire workspace. */
  teamId?: Maybe<Scalars["String"]>;
};

export type IssueLabelEdge = {
  __typename?: "IssueLabelEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: IssueLabel;
};

/** Issue label filtering options. */
export type IssueLabelFilter = {
  /** Compound filters, all of which need to be matched by the label. */
  and?: Maybe<Array<IssueLabelFilter>>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Filters that the issue labels creator must satisfy. */
  creator?: Maybe<NullableUserFilter>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Comparator for whether the label is a group label. */
  isGroup?: Maybe<BooleanComparator>;
  /** Comparator for the name. */
  name?: Maybe<StringComparator>;
  /** Compound filters, one of which need to be matched by the label. */
  or?: Maybe<Array<IssueLabelFilter>>;
  /** Filters that the issue label's parent label must satisfy. */
  parent?: Maybe<IssueLabelFilter>;
  /** Filters that the issue labels team must satisfy. */
  team?: Maybe<NullableTeamFilter>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

export type IssueLabelMoveToTeamLabelsInput = {
  /** The identifier of the workspace label to convert. */
  id: Scalars["String"];
};

export type IssueLabelMoveToTeamLabelsPayload = {
  __typename?: "IssueLabelMoveToTeamLabelsPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type IssueLabelPayload = {
  __typename?: "IssueLabelPayload";
  /** The label that was created or updated. */
  issueLabel: IssueLabel;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type IssueLabelUpdateInput = {
  /** The color of the label. */
  color?: Maybe<Scalars["String"]>;
  /** The description of the label. */
  description?: Maybe<Scalars["String"]>;
  /** Whether the label is a group. */
  isGroup?: Maybe<Scalars["Boolean"]>;
  /** The name of the label. */
  name?: Maybe<Scalars["String"]>;
  /** The identifier of the parent label. */
  parentId?: Maybe<Scalars["String"]>;
};

/** Payload for an issue label webhook. */
export type IssueLabelWebhookPayload = {
  __typename?: "IssueLabelWebhookPayload";
  /** The time at which the entity was archived. */
  archivedAt?: Maybe<Scalars["String"]>;
  /** The color of the issue label. */
  color: Scalars["String"];
  /** The time at which the entity was created. */
  createdAt: Scalars["String"];
  /** The creator ID of the issue label. */
  creatorId?: Maybe<Scalars["String"]>;
  /** The label's description. */
  description?: Maybe<Scalars["String"]>;
  /** The ID of the entity. */
  id: Scalars["String"];
  /** The original label inherited from. */
  inheritedFromId?: Maybe<Scalars["String"]>;
  /** Whether the label is a group. */
  isGroup: Scalars["Boolean"];
  /** The name of the issue label. */
  name: Scalars["String"];
  /** The parent ID of the issue label. */
  parentId?: Maybe<Scalars["String"]>;
  /** The team ID of the issue label. */
  teamId?: Maybe<Scalars["String"]>;
  /** The time at which the entity was updated. */
  updatedAt: Scalars["String"];
};

/** Payload for an issue mention notification. */
export type IssueMentionNotificationWebhookPayload = {
  __typename?: "IssueMentionNotificationWebhookPayload";
  /** The actor who caused the notification. */
  actor?: Maybe<UserChildWebhookPayload>;
  /** The ID of the actor who caused the notification. */
  actorId?: Maybe<Scalars["String"]>;
  /** The time at which the entity was archived. */
  archivedAt?: Maybe<Scalars["String"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["String"];
  /** The ID of the external user who caused the notification. */
  externalUserActorId?: Maybe<Scalars["String"]>;
  /** The ID of the entity. */
  id: Scalars["String"];
  /** The issue this notification belongs to. */
  issue: IssueWithDescriptionChildWebhookPayload;
  /** The ID of the issue this notification belongs to. */
  issueId: Scalars["String"];
  /** An issue mention notification type. */
  type: Scalars["IssueMentionNotificationType"];
  /** The time at which the entity was updated. */
  updatedAt: Scalars["String"];
  /** The ID of the user who received the notification. */
  userId: Scalars["String"];
};

/** Payload for an issue new comment notification. */
export type IssueNewCommentNotificationWebhookPayload = {
  __typename?: "IssueNewCommentNotificationWebhookPayload";
  /** The actor who caused the notification. */
  actor?: Maybe<UserChildWebhookPayload>;
  /** The ID of the actor who caused the notification. */
  actorId?: Maybe<Scalars["String"]>;
  /** The time at which the entity was archived. */
  archivedAt?: Maybe<Scalars["String"]>;
  /** The comment this notification belongs to. */
  comment: CommentChildWebhookPayload;
  /** The ID of the comment this notification belongs to. */
  commentId: Scalars["String"];
  /** The time at which the entity was created. */
  createdAt: Scalars["String"];
  /** The ID of the external user who caused the notification. */
  externalUserActorId?: Maybe<Scalars["String"]>;
  /** The ID of the entity. */
  id: Scalars["String"];
  /** The issue this notification belongs to. */
  issue: IssueWithDescriptionChildWebhookPayload;
  /** The ID of the issue this notification belongs to. */
  issueId: Scalars["String"];
  /** The parent comment for the comment this notification belongs to. */
  parentComment?: Maybe<CommentChildWebhookPayload>;
  /** The ID of the parent comment for the comment this notification belongs to. */
  parentCommentId?: Maybe<Scalars["String"]>;
  /** An issue new comment notification type. */
  type: Scalars["IssueNewCommentNotificationType"];
  /** The time at which the entity was updated. */
  updatedAt: Scalars["String"];
  /** The ID of the user who received the notification. */
  userId: Scalars["String"];
};

/** An issue related notification. */
export type IssueNotification = Entity &
  Node &
  Notification & {
    __typename?: "IssueNotification";
    /** The user that caused the notification. */
    actor?: Maybe<User>;
    /** [Internal] Notification actor initials if avatar is not available. */
    actorAvatarColor: Scalars["String"];
    /** [Internal] Notification avatar URL. */
    actorAvatarUrl?: Maybe<Scalars["String"]>;
    /** [Internal] Notification actor initials if avatar is not available. */
    actorInitials?: Maybe<Scalars["String"]>;
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: Maybe<Scalars["DateTime"]>;
    /** The bot that caused the notification. */
    botActor?: Maybe<ActorBot>;
    /** The category of the notification. */
    category: NotificationCategory;
    /** The comment related to the notification. */
    comment?: Maybe<Comment>;
    /** Related comment ID. Null if the notification is not related to a comment. */
    commentId?: Maybe<Scalars["String"]>;
    /** The time at which the entity was created. */
    createdAt: Scalars["DateTime"];
    /**
     * The time at when an email reminder for this notification was sent to the user. Null, if no email
     *     reminder has been sent.
     */
    emailedAt?: Maybe<Scalars["DateTime"]>;
    /** The external user that caused the notification. */
    externalUserActor?: Maybe<ExternalUser>;
    /** [Internal] Notifications with the same grouping key will be grouped together in the UI. */
    groupingKey: Scalars["String"];
    /** [Internal] Priority of the notification with the same grouping key. Higher number means higher priority. If priority is the same, notifications should be sorted by `createdAt`. */
    groupingPriority: Scalars["Float"];
    /** The unique identifier of the entity. */
    id: Scalars["ID"];
    /** [Internal] Inbox URL for the notification. */
    inboxUrl: Scalars["String"];
    /** [Internal] If notification actor was Linear. */
    isLinearActor: Scalars["Boolean"];
    /** The issue related to the notification. */
    issue: Issue;
    /** Related issue ID. */
    issueId: Scalars["String"];
    /** [Internal] Issue's status type for issue notifications. */
    issueStatusType?: Maybe<Scalars["String"]>;
    /** The parent comment related to the notification, if a notification is a reply comment notification. */
    parentComment?: Maybe<Comment>;
    /** Related parent comment ID. Null if the notification is not related to a comment. */
    parentCommentId?: Maybe<Scalars["String"]>;
    /** [Internal] Project update health for new updates. */
    projectUpdateHealth?: Maybe<Scalars["String"]>;
    /** Name of the reaction emoji related to the notification. */
    reactionEmoji?: Maybe<Scalars["String"]>;
    /** The time at when the user marked the notification as read. Null, if the the user hasn't read the notification */
    readAt?: Maybe<Scalars["DateTime"]>;
    /** The time until a notification will be snoozed. After that it will appear in the inbox again. */
    snoozedUntilAt?: Maybe<Scalars["DateTime"]>;
    /** The subscriptions related to the notification. */
    subscriptions?: Maybe<Array<NotificationSubscription>>;
    /** [Internal] Notification subtitle. */
    subtitle: Scalars["String"];
    /** The team related to the issue notification. */
    team: Team;
    /** [Internal] Notification title. */
    title: Scalars["String"];
    /** Notification type. */
    type: Scalars["String"];
    /** The time at which a notification was unsnoozed.. */
    unsnoozedAt?: Maybe<Scalars["DateTime"]>;
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars["DateTime"];
    /** [Internal] URL to the target of the notification. */
    url: Scalars["String"];
    /** The user that received the notification. */
    user: User;
  };

export type IssuePayload = {
  __typename?: "IssuePayload";
  /** The issue that was created or updated. */
  issue?: Maybe<Issue>;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type IssuePriorityValue = {
  __typename?: "IssuePriorityValue";
  /** Priority's label. */
  label: Scalars["String"];
  /** Priority's number value. */
  priority: Scalars["Int"];
};

/** A relation between two issues. */
export type IssueRelation = Node & {
  __typename?: "IssueRelation";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The issue whose relationship is being described. */
  issue: Issue;
  /** The related issue. */
  relatedIssue: Issue;
  /** The relationship of the issue with the related issue. */
  type: Scalars["String"];
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

export type IssueRelationConnection = {
  __typename?: "IssueRelationConnection";
  edges: Array<IssueRelationEdge>;
  nodes: Array<IssueRelation>;
  pageInfo: PageInfo;
};

export type IssueRelationCreateInput = {
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The identifier of the issue that is related to another issue. */
  issueId: Scalars["String"];
  /** The identifier of the related issue. */
  relatedIssueId: Scalars["String"];
  /** The type of relation of the issue to the related issue. */
  type: IssueRelationType;
};

export type IssueRelationEdge = {
  __typename?: "IssueRelationEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: IssueRelation;
};

/** Issue relation history's payload. */
export type IssueRelationHistoryPayload = {
  __typename?: "IssueRelationHistoryPayload";
  /** The identifier of the related issue. */
  identifier: Scalars["String"];
  /** The type of the change. */
  type: Scalars["String"];
};

export type IssueRelationPayload = {
  __typename?: "IssueRelationPayload";
  /** The issue relation that was created or updated. */
  issueRelation: IssueRelation;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** The type of the issue relation. */
export enum IssueRelationType {
  Blocks = "blocks",
  Duplicate = "duplicate",
  Related = "related",
  Similar = "similar",
}

export type IssueRelationUpdateInput = {
  /** The identifier of the issue that is related to another issue. */
  issueId?: Maybe<Scalars["String"]>;
  /** The identifier of the related issue. */
  relatedIssueId?: Maybe<Scalars["String"]>;
  /** The type of relation of the issue to the related issue. */
  type?: Maybe<Scalars["String"]>;
};

export type IssueSearchPayload = {
  __typename?: "IssueSearchPayload";
  /** Archived entities matching the search term along with all their dependencies. */
  archivePayload: ArchiveResponse;
  edges: Array<IssueSearchResultEdge>;
  nodes: Array<IssueSearchResult>;
  pageInfo: PageInfo;
  /** Total number of results for query without filters applied. */
  totalCount: Scalars["Float"];
};

export type IssueSearchResult = Node & {
  __typename?: "IssueSearchResult";
  /** [Internal] The activity summary information for this issue. */
  activitySummary?: Maybe<Scalars["JSONObject"]>;
  /** The time at which the issue was added to a cycle. */
  addedToCycleAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the issue was added to a project. */
  addedToProjectAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the issue was added to a team. */
  addedToTeamAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The user to whom the issue is assigned to. */
  assignee?: Maybe<User>;
  /** Attachments associated with the issue. */
  attachments: AttachmentConnection;
  /** The time at which the issue was automatically archived by the auto pruning process. */
  autoArchivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the issue was automatically closed by the auto pruning process. */
  autoClosedAt?: Maybe<Scalars["DateTime"]>;
  /**
   * The order of the item in its column on the board.
   * @deprecated Will be removed in near future, please use `sortOrder` instead
   */
  boardOrder: Scalars["Float"];
  /** The bot that created the issue, if applicable. */
  botActor?: Maybe<ActorBot>;
  /** Suggested branch name for the issue. */
  branchName: Scalars["String"];
  /** The time at which the issue was moved into canceled state. */
  canceledAt?: Maybe<Scalars["DateTime"]>;
  /** Children of the issue. */
  children: IssueConnection;
  /** Comments associated with the issue. */
  comments: CommentConnection;
  /** The time at which the issue was moved into completed state. */
  completedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The user who created the issue. */
  creator?: Maybe<User>;
  /** Returns the number of Attachment resources which are created by customer support ticketing systems (e.g. Zendesk). */
  customerTicketCount: Scalars["Int"];
  /** The cycle that the issue is associated with. */
  cycle?: Maybe<Cycle>;
  /** The agent user that is delegated to work on this issue. */
  delegate?: Maybe<User>;
  /** The issue's description in markdown format. */
  description?: Maybe<Scalars["String"]>;
  /** [Internal] The issue's description content as YJS state. */
  descriptionState?: Maybe<Scalars["String"]>;
  /** [ALPHA] The document content representing this issue description. */
  documentContent?: Maybe<DocumentContent>;
  /** The date at which the issue is due. */
  dueDate?: Maybe<Scalars["TimelessDate"]>;
  /** The estimate of the complexity of the issue.. */
  estimate?: Maybe<Scalars["Float"]>;
  /** The external user who created the issue. */
  externalUserCreator?: Maybe<ExternalUser>;
  /** The users favorite associated with this issue. */
  favorite?: Maybe<Favorite>;
  /** Attachments previously associated with the issue before being moved to another issue. */
  formerAttachments: AttachmentConnection;
  /** Customer needs previously associated with the issue before being moved to another issue. */
  formerNeeds: CustomerNeedConnection;
  /** History entries associated with the issue. */
  history: IssueHistoryConnection;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** Issue's human readable identifier (e.g. ENG-123). */
  identifier: Scalars["String"];
  /** [Internal] Incoming product intelligence relation suggestions for the issue. */
  incomingSuggestions: IssueSuggestionConnection;
  /** Integration type that created this issue, if applicable. */
  integrationSourceType?: Maybe<IntegrationService>;
  /** Inverse relations associated with this issue. */
  inverseRelations: IssueRelationConnection;
  /** Id of the labels associated with this issue. */
  labelIds: Array<Scalars["String"]>;
  /** Labels associated with this issue. */
  labels: IssueLabelConnection;
  /** The last template that was applied to this issue. */
  lastAppliedTemplate?: Maybe<Template>;
  /** Metadata related to search result. */
  metadata: Scalars["JSONObject"];
  /** Customer needs associated with the issue. */
  needs: CustomerNeedConnection;
  /** The issue's unique number. */
  number: Scalars["Float"];
  /** The parent of the issue. */
  parent?: Maybe<Issue>;
  /** Previous identifiers of the issue if it has been moved between teams. */
  previousIdentifiers: Array<Scalars["String"]>;
  /** The priority of the issue. 0 = No priority, 1 = Urgent, 2 = High, 3 = Normal, 4 = Low. */
  priority: Scalars["Float"];
  /** Label for the priority. */
  priorityLabel: Scalars["String"];
  /** The order of the item in relation to other items in the organization, when ordered by priority. */
  prioritySortOrder: Scalars["Float"];
  /** The project that the issue is associated with. */
  project?: Maybe<Project>;
  /** The projectMilestone that the issue is associated with. */
  projectMilestone?: Maybe<ProjectMilestone>;
  /** Emoji reaction summary, grouped by emoji type. */
  reactionData: Scalars["JSONObject"];
  /** Reactions associated with the issue. */
  reactions: Array<Reaction>;
  /** The recurring issue template that created this issue. */
  recurringIssueTemplate?: Maybe<Template>;
  /** Relations associated with this issue. */
  relations: IssueRelationConnection;
  /** The time at which the issue's SLA will breach. */
  slaBreachesAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the issue's SLA will enter high risk state. */
  slaHighRiskAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the issue's SLA will enter medium risk state. */
  slaMediumRiskAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the issue's SLA began. */
  slaStartedAt?: Maybe<Scalars["DateTime"]>;
  /** The type of SLA set on the issue. Calendar days or business days. */
  slaType?: Maybe<Scalars["String"]>;
  /** The user who snoozed the issue. */
  snoozedBy?: Maybe<User>;
  /** The time until an issue will be snoozed in Triage view. */
  snoozedUntilAt?: Maybe<Scalars["DateTime"]>;
  /** The order of the item in relation to other items in the organization. */
  sortOrder: Scalars["Float"];
  /** The comment that this issue was created from. */
  sourceComment?: Maybe<Comment>;
  /** The time at which the issue was moved into started state. */
  startedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the issue entered triage. */
  startedTriageAt?: Maybe<Scalars["DateTime"]>;
  /** The workflow state that the issue is associated with. */
  state: WorkflowState;
  /** The order of the item in the sub-issue list. Only set if the issue has a parent. */
  subIssueSortOrder?: Maybe<Scalars["Float"]>;
  /** Users who are subscribed to the issue. */
  subscribers: UserConnection;
  /** [Internal] Product Intelligence suggestions for the issue. */
  suggestions: IssueSuggestionConnection;
  /** [Internal] The time at which the most recent suggestions for this issue were generated. */
  suggestionsGeneratedAt?: Maybe<Scalars["DateTime"]>;
  /** [DEPRECATED] [Internal] The user who has delegated this issue to be completed by an agent. */
  supervisor?: Maybe<User>;
  /** The external services the issue is synced with. */
  syncedWith?: Maybe<Array<ExternalEntityInfo>>;
  /** The team that the issue is associated with. */
  team: Team;
  /** The issue's title. */
  title: Scalars["String"];
  /** A flag that indicates whether the issue is in the trash bin. */
  trashed?: Maybe<Scalars["Boolean"]>;
  /** The time at which the issue left triage. */
  triagedAt?: Maybe<Scalars["DateTime"]>;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** Issue URL. */
  url: Scalars["String"];
};

export type IssueSearchResultAttachmentsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<AttachmentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type IssueSearchResultChildrenArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type IssueSearchResultCommentsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CommentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type IssueSearchResultFormerAttachmentsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<AttachmentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type IssueSearchResultFormerNeedsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CustomerNeedFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type IssueSearchResultHistoryArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type IssueSearchResultIncomingSuggestionsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type IssueSearchResultInverseRelationsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type IssueSearchResultLabelsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueLabelFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type IssueSearchResultNeedsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CustomerNeedFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type IssueSearchResultRelationsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type IssueSearchResultSubscribersArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<UserFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  includeDisabled?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type IssueSearchResultSuggestionsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type IssueSearchResultEdge = {
  __typename?: "IssueSearchResultEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: IssueSearchResult;
};

/** Payload for issue SLA webhook events. */
export type IssueSlaWebhookPayload = {
  __typename?: "IssueSlaWebhookPayload";
  /** The type of action that triggered the webhook. */
  action: Scalars["String"];
  /** The time the payload was created. */
  createdAt: Scalars["DateTime"];
  /** The issue that the SLA event is about. */
  issueData: IssueWebhookPayload;
  /** ID of the organization for which the webhook belongs to. */
  organizationId: Scalars["String"];
  /** The type of resource. */
  type: Scalars["String"];
  /** URL for the issue. */
  url?: Maybe<Scalars["String"]>;
};

/** Issue sorting options. */
export type IssueSortInput = {
  /** Sort by assignee name */
  assignee?: Maybe<AssigneeSort>;
  /** Sort by issue completion date */
  completedAt?: Maybe<CompletedAtSort>;
  /** Sort by issue creation date */
  createdAt?: Maybe<CreatedAtSort>;
  /** Sort by customer name */
  customer?: Maybe<CustomerSort>;
  /** Sort by number of customers associated with the issue */
  customerCount?: Maybe<CustomerCountSort>;
  /** Sort by number of important customers associated with the issue */
  customerImportantCount?: Maybe<CustomerImportantCountSort>;
  /** Sort by customer revenue */
  customerRevenue?: Maybe<CustomerRevenueSort>;
  /** Sort by Cycle start date */
  cycle?: Maybe<CycleSort>;
  /** Sort by delegate name */
  delegate?: Maybe<DelegateSort>;
  /** Sort by issue due date */
  dueDate?: Maybe<DueDateSort>;
  /** Sort by estimate */
  estimate?: Maybe<EstimateSort>;
  /** Sort by label */
  label?: Maybe<LabelSort>;
  /** Sort by label group */
  labelGroup?: Maybe<LabelGroupSort>;
  /** [ALPHA] Sort by number of links associated with the issue */
  linkCount?: Maybe<LinkCountSort>;
  /** Sort by manual order */
  manual?: Maybe<ManualSort>;
  /** Sort by Project Milestone target date */
  milestone?: Maybe<MilestoneSort>;
  /** Sort by priority */
  priority?: Maybe<PrioritySort>;
  /** Sort by Project name */
  project?: Maybe<ProjectSort>;
  /** Sort by the root issue */
  rootIssue?: Maybe<RootIssueSort>;
  /** Sort by SLA status */
  slaStatus?: Maybe<SlaStatusSort>;
  /** Sort by Team name */
  team?: Maybe<TeamSort>;
  /** Sort by issue title */
  title?: Maybe<TitleSort>;
  /** Sort by issue update date */
  updatedAt?: Maybe<UpdatedAtSort>;
  /** Sort by workflow state type */
  workflowState?: Maybe<WorkflowStateSort>;
};

/** Payload for a terminal issue status change notification. */
export type IssueStatusChangedNotificationWebhookPayload = {
  __typename?: "IssueStatusChangedNotificationWebhookPayload";
  /** The actor who caused the notification. */
  actor?: Maybe<UserChildWebhookPayload>;
  /** The ID of the actor who caused the notification. */
  actorId?: Maybe<Scalars["String"]>;
  /** The time at which the entity was archived. */
  archivedAt?: Maybe<Scalars["String"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["String"];
  /** The ID of the external user who caused the notification. */
  externalUserActorId?: Maybe<Scalars["String"]>;
  /** The ID of the entity. */
  id: Scalars["String"];
  /** The issue this notification belongs to. */
  issue: IssueWithDescriptionChildWebhookPayload;
  /** The ID of the issue this notification belongs to. */
  issueId: Scalars["String"];
  /** A terminal issue status change notification type. */
  type: Scalars["IssueStatusChangedNotificationType"];
  /** The time at which the entity was updated. */
  updatedAt: Scalars["String"];
  /** The ID of the user who received the notification. */
  userId: Scalars["String"];
};

export type IssueSuggestion = Node & {
  __typename?: "IssueSuggestion";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  issue: Issue;
  issueId: Scalars["String"];
  metadata?: Maybe<IssueSuggestionMetadata>;
  state: IssueSuggestionState;
  stateChangedAt: Scalars["DateTime"];
  suggestedIssue?: Maybe<Issue>;
  suggestedIssueId?: Maybe<Scalars["String"]>;
  suggestedLabel?: Maybe<IssueLabel>;
  suggestedLabelId?: Maybe<Scalars["String"]>;
  suggestedProject?: Maybe<Project>;
  suggestedTeam?: Maybe<Team>;
  suggestedUser?: Maybe<User>;
  suggestedUserId?: Maybe<Scalars["String"]>;
  type: IssueSuggestionType;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

export type IssueSuggestionConnection = {
  __typename?: "IssueSuggestionConnection";
  edges: Array<IssueSuggestionEdge>;
  nodes: Array<IssueSuggestion>;
  pageInfo: PageInfo;
};

export type IssueSuggestionEdge = {
  __typename?: "IssueSuggestionEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: IssueSuggestion;
};

export type IssueSuggestionMetadata = {
  __typename?: "IssueSuggestionMetadata";
  classification?: Maybe<Scalars["String"]>;
  evalLogId?: Maybe<Scalars["String"]>;
  rank?: Maybe<Scalars["Float"]>;
  reasons?: Maybe<Array<Scalars["String"]>>;
  score?: Maybe<Scalars["Float"]>;
};

export enum IssueSuggestionState {
  Accepted = "accepted",
  Active = "active",
  Dismissed = "dismissed",
  Stale = "stale",
}

export enum IssueSuggestionType {
  Assignee = "assignee",
  Label = "label",
  Project = "project",
  RelatedIssue = "relatedIssue",
  SimilarIssue = "similarIssue",
  Team = "team",
}

export type IssueTitleSuggestionFromCustomerRequestPayload = {
  __typename?: "IssueTitleSuggestionFromCustomerRequestPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** [Internal] The log id of the ai response. */
  logId?: Maybe<Scalars["String"]>;
  /** The suggested issue title. */
  title: Scalars["String"];
};

/** Payload for an issue unassignment notification. */
export type IssueUnassignedFromYouNotificationWebhookPayload = {
  __typename?: "IssueUnassignedFromYouNotificationWebhookPayload";
  /** The actor who caused the notification. */
  actor?: Maybe<UserChildWebhookPayload>;
  /** The ID of the actor who caused the notification. */
  actorId?: Maybe<Scalars["String"]>;
  /** The time at which the entity was archived. */
  archivedAt?: Maybe<Scalars["String"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["String"];
  /** The ID of the external user who caused the notification. */
  externalUserActorId?: Maybe<Scalars["String"]>;
  /** The ID of the entity. */
  id: Scalars["String"];
  /** The issue this notification belongs to. */
  issue: IssueWithDescriptionChildWebhookPayload;
  /** The ID of the issue this notification belongs to. */
  issueId: Scalars["String"];
  /** An issue unassignment notification type. */
  type: Scalars["IssueUnassignedFromYouNotificationType"];
  /** The time at which the entity was updated. */
  updatedAt: Scalars["String"];
  /** The ID of the user who received the notification. */
  userId: Scalars["String"];
};

export type IssueUpdateInput = {
  /** The identifiers of the issue labels to be added to this issue. */
  addedLabelIds?: Maybe<Array<Scalars["String"]>>;
  /** The identifier of the user to assign the issue to. */
  assigneeId?: Maybe<Scalars["String"]>;
  /** Whether the issue was automatically closed because its parent issue was closed. */
  autoClosedByParentClosing?: Maybe<Scalars["Boolean"]>;
  /** The cycle associated with the issue. */
  cycleId?: Maybe<Scalars["String"]>;
  /** The identifier of the agent user to delegate the issue to. */
  delegateId?: Maybe<Scalars["String"]>;
  /** The issue description in markdown format. */
  description?: Maybe<Scalars["String"]>;
  /** [Internal] The issue description as a Prosemirror document. */
  descriptionData?: Maybe<Scalars["JSON"]>;
  /** The date at which the issue is due. */
  dueDate?: Maybe<Scalars["TimelessDate"]>;
  /** The estimated complexity of the issue. */
  estimate?: Maybe<Scalars["Int"]>;
  /** The identifiers of the issue labels associated with this ticket. */
  labelIds?: Maybe<Array<Scalars["String"]>>;
  /** The ID of the last template applied to the issue. */
  lastAppliedTemplateId?: Maybe<Scalars["String"]>;
  /** The identifier of the parent issue. */
  parentId?: Maybe<Scalars["String"]>;
  /** The priority of the issue. 0 = No priority, 1 = Urgent, 2 = High, 3 = Normal, 4 = Low. */
  priority?: Maybe<Scalars["Int"]>;
  /** The position of the issue related to other issues, when ordered by priority. */
  prioritySortOrder?: Maybe<Scalars["Float"]>;
  /** The project associated with the issue. */
  projectId?: Maybe<Scalars["String"]>;
  /** The project milestone associated with the issue. */
  projectMilestoneId?: Maybe<Scalars["String"]>;
  /** The identifiers of the issue labels to be removed from this issue. */
  removedLabelIds?: Maybe<Array<Scalars["String"]>>;
  /** [Internal] The timestamp at which an issue will be considered in breach of SLA. */
  slaBreachesAt?: Maybe<Scalars["DateTime"]>;
  /** [Internal] The timestamp at which the issue's SLA was started. */
  slaStartedAt?: Maybe<Scalars["DateTime"]>;
  /** The SLA day count type for the issue. Whether SLA should be business days only or calendar days (default). */
  slaType?: Maybe<SLADayCountType>;
  /** The identifier of the user who snoozed the issue. */
  snoozedById?: Maybe<Scalars["String"]>;
  /** The time until an issue will be snoozed in Triage view. */
  snoozedUntilAt?: Maybe<Scalars["DateTime"]>;
  /** The position of the issue related to other issues. */
  sortOrder?: Maybe<Scalars["Float"]>;
  /** The team state of the issue. */
  stateId?: Maybe<Scalars["String"]>;
  /** The position of the issue in parent's sub-issue list. */
  subIssueSortOrder?: Maybe<Scalars["Float"]>;
  /** The identifiers of the users subscribing to this ticket. */
  subscriberIds?: Maybe<Array<Scalars["String"]>>;
  /** The identifier of the team associated with the issue. */
  teamId?: Maybe<Scalars["String"]>;
  /** The issue title. */
  title?: Maybe<Scalars["String"]>;
  /** Whether the issue has been trashed. */
  trashed?: Maybe<Scalars["Boolean"]>;
};

/** Payload for an issue webhook. */
export type IssueWebhookPayload = {
  __typename?: "IssueWebhookPayload";
  /** The time at which the issue was added to a cycle. */
  addedToCycleAt?: Maybe<Scalars["String"]>;
  /** The time at which the issue was added to a project. */
  addedToProjectAt?: Maybe<Scalars["String"]>;
  /** The time at which the issue was added to a team. */
  addedToTeamAt?: Maybe<Scalars["String"]>;
  /** The time at which the entity was archived. */
  archivedAt?: Maybe<Scalars["String"]>;
  /** The user that is assigned to the issue. */
  assignee?: Maybe<UserChildWebhookPayload>;
  /** The ID of the user that is assigned to the issue. */
  assigneeId?: Maybe<Scalars["String"]>;
  /** The time at which the issue was auto-archived. */
  autoArchivedAt?: Maybe<Scalars["String"]>;
  /** The time at which the issue was auto-closed. */
  autoClosedAt?: Maybe<Scalars["String"]>;
  /** The bot actor data for this issue. */
  botActor?: Maybe<Scalars["String"]>;
  /** The time at which the issue was canceled. */
  canceledAt?: Maybe<Scalars["String"]>;
  /** The time at which the issue was completed. */
  completedAt?: Maybe<Scalars["String"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["String"];
  /** The user that created the issue. */
  creator?: Maybe<UserChildWebhookPayload>;
  /** The ID of the user that created the issue. */
  creatorId?: Maybe<Scalars["String"]>;
  /** The cycle that the issue belongs to. */
  cycle?: Maybe<CycleChildWebhookPayload>;
  /** The ID of the cycle that the issue belongs to. */
  cycleId?: Maybe<Scalars["String"]>;
  /** The agent user that the issue is delegated to. */
  delegate?: Maybe<UserChildWebhookPayload>;
  /** The ID of the agent user that the issue is delegated to. */
  delegateId?: Maybe<Scalars["String"]>;
  /** The description of the issue. */
  description?: Maybe<Scalars["String"]>;
  /** The description data of the issue. */
  descriptionData?: Maybe<Scalars["String"]>;
  /** The due date of the issue. */
  dueDate?: Maybe<Scalars["String"]>;
  /** The estimate of the complexity of the issue.. */
  estimate?: Maybe<Scalars["Float"]>;
  /** The external user that created the issue. */
  externalUserCreator?: Maybe<ExternalUserChildWebhookPayload>;
  /** The ID of the external user that created the issue. */
  externalUserCreatorId?: Maybe<Scalars["String"]>;
  /** The ID of the entity. */
  id: Scalars["String"];
  /** The identifier of the issue. */
  identifier: Scalars["String"];
  /** Integration type that created this issue, if applicable. */
  integrationSourceType?: Maybe<Scalars["String"]>;
  /** Id of the labels associated with this issue. */
  labelIds: Array<Scalars["String"]>;
  /** The labels associated with this issue. */
  labels: Array<IssueLabelChildWebhookPayload>;
  /** The ID of the last template that was applied to the issue. */
  lastAppliedTemplateId?: Maybe<Scalars["String"]>;
  /** The issue's unique number. */
  number: Scalars["Float"];
  /** The ID of the parent issue. */
  parentId?: Maybe<Scalars["String"]>;
  /** Previous identifiers of the issue if it has been moved between teams. */
  previousIdentifiers: Array<Scalars["String"]>;
  /** The priority of the issue. 0 = No priority, 1 = Urgent, 2 = High, 3 = Normal, 4 = Low. */
  priority: Scalars["Float"];
  /** The label of the issue's priority. */
  priorityLabel: Scalars["String"];
  /** The order of the item in relation to other items in the organization, when ordered by priority. */
  prioritySortOrder: Scalars["Float"];
  /** The project that the issue belongs to. */
  project?: Maybe<ProjectChildWebhookPayload>;
  /** The ID of the project that the issue belongs to. */
  projectId?: Maybe<Scalars["String"]>;
  /** The project milestone that the issue belongs to. */
  projectMilestone?: Maybe<ProjectMilestoneChildWebhookPayload>;
  /** The ID of the project milestone that the issue belongs to. */
  projectMilestoneId?: Maybe<Scalars["String"]>;
  /** The reaction data for this issue. */
  reactionData: Scalars["JSONObject"];
  /** The ID of the recurring issue template that created the issue. */
  recurringIssueTemplateId?: Maybe<Scalars["String"]>;
  /** The time at which the issue would breach its SLA. */
  slaBreachesAt?: Maybe<Scalars["String"]>;
  /** The time at which the issue would enter SLA high risk. */
  slaHighRiskAt?: Maybe<Scalars["String"]>;
  /** The time at which the issue would enter SLA medium risk. */
  slaMediumRiskAt?: Maybe<Scalars["String"]>;
  /** The time at which the issue's SLA started. */
  slaStartedAt?: Maybe<Scalars["String"]>;
  /** The type of SLA the issue is under. */
  slaType?: Maybe<Scalars["String"]>;
  /** The time until an issue will be snoozed in Triage view. */
  snoozedUntilAt?: Maybe<Scalars["String"]>;
  /** The order of the item in relation to other items in the organization. */
  sortOrder: Scalars["Float"];
  /** The ID of the source comment that the issue was created from. */
  sourceCommentId?: Maybe<Scalars["String"]>;
  /** The time at which the issue was moved into started state. */
  startedAt?: Maybe<Scalars["String"]>;
  /** The time at which the issue entered triage. */
  startedTriageAt?: Maybe<Scalars["String"]>;
  /** The issue's current workflow state. */
  state: WorkflowStateChildWebhookPayload;
  /** The ID of the issue's current workflow state. */
  stateId: Scalars["String"];
  /** The order of the item in the sub-issue list. Only set if the issue has a parent. */
  subIssueSortOrder?: Maybe<Scalars["Float"]>;
  /** The IDs of the users that are subscribed to the issue. */
  subscriberIds: Array<Scalars["String"]>;
  /** The entity this issue is synced with. */
  syncedWith?: Maybe<Scalars["JSONObject"]>;
  /** The team that the issue belongs to. */
  team?: Maybe<TeamChildWebhookPayload>;
  /** The ID of the team that the issue belongs to. */
  teamId: Scalars["String"];
  /** The issue's title. */
  title: Scalars["String"];
  /** A flag that indicates whether the issue is in the trash bin. */
  trashed?: Maybe<Scalars["Boolean"]>;
  /** The time at which the issue was triaged. */
  triagedAt?: Maybe<Scalars["String"]>;
  /** The time at which the entity was updated. */
  updatedAt: Scalars["String"];
  /** The URL of the issue. */
  url: Scalars["String"];
};

/** Certain properties of an issue, including its description. */
export type IssueWithDescriptionChildWebhookPayload = {
  __typename?: "IssueWithDescriptionChildWebhookPayload";
  /** The description of the issue. */
  description?: Maybe<Scalars["String"]>;
  /** The ID of the issue. */
  id: Scalars["String"];
  /** The identifier of the issue. */
  identifier: Scalars["String"];
  /** The ID of the team that the issue belongs to. */
  team: TeamChildWebhookPayload;
  /** The ID of the team that the issue belongs to. */
  teamId: Scalars["String"];
  /** The title of the issue. */
  title: Scalars["String"];
  /** The URL of the issue. */
  url: Scalars["String"];
};

export type JiraConfigurationInput = {
  /** The Jira personal access token. */
  accessToken: Scalars["String"];
  /** The Jira user's email address. */
  email: Scalars["String"];
  /** The Jira installation hostname. */
  hostname: Scalars["String"];
  /** Whether this integration will be setup using the manual webhook flow. */
  manualSetup?: Maybe<Scalars["Boolean"]>;
};

export type JiraLinearMappingInput = {
  /** Whether the sync for this mapping is bidirectional. */
  bidirectional?: Maybe<Scalars["Boolean"]>;
  /** Whether this mapping is the default one for issue creation. */
  default?: Maybe<Scalars["Boolean"]>;
  /** The Jira id for this project. */
  jiraProjectId: Scalars["String"];
  /** The Linear team id to map to the given project. */
  linearTeamId: Scalars["String"];
};

export type JiraPersonalSettingsInput = {
  /** The name of the Jira site currently authorized through the integration. */
  siteName?: Maybe<Scalars["String"]>;
};

export type JiraProjectDataInput = {
  /** The Jira id for this project. */
  id: Scalars["String"];
  /** The Jira key for this project, such as ENG. */
  key: Scalars["String"];
  /** The Jira name for this project, such as Engineering. */
  name: Scalars["String"];
};

export type JiraSettingsInput = {
  /** Whether this integration is for Jira Server or not. */
  isJiraServer?: Maybe<Scalars["Boolean"]>;
  /** The label of the Jira instance, for visual identification purposes only */
  label?: Maybe<Scalars["String"]>;
  /** Whether this integration is using a manual setup flow. */
  manualSetup?: Maybe<Scalars["Boolean"]>;
  /** The mapping of Jira project id => Linear team id. */
  projectMapping?: Maybe<Array<JiraLinearMappingInput>>;
  /** The Jira projects for the organization. */
  projects: Array<JiraProjectDataInput>;
  /** Whether the user needs to provide setup information about the webhook to complete the integration setup. Only relevant for integrations that use a manual setup flow */
  setupPending?: Maybe<Scalars["Boolean"]>;
};

export type JiraUpdateInput = {
  /** The Jira personal access token. */
  accessToken?: Maybe<Scalars["String"]>;
  /** Whether to delete the current manual webhook configuration. */
  deleteWebhook?: Maybe<Scalars["Boolean"]>;
  /** The Jira user email address associated with the personal access token. */
  email?: Maybe<Scalars["String"]>;
  /** The id of the integration to update. */
  id: Scalars["String"];
  /** Whether to refresh Jira metadata for the integration. */
  updateMetadata?: Maybe<Scalars["Boolean"]>;
  /** Whether to refresh Jira Projects for the integration. */
  updateProjects?: Maybe<Scalars["Boolean"]>;
  /** Webhook secret for a new manual configuration. */
  webhookSecret?: Maybe<Scalars["String"]>;
};

export type JoinOrganizationInput = {
  /** An optional invite link for an organization. */
  inviteLink?: Maybe<Scalars["String"]>;
  /** The identifier of the organization. */
  organizationId: Scalars["String"];
};

/** Issue label-group sorting options. */
export type LabelGroupSort = {
  /** The label-group id to sort by */
  labelGroupId: Scalars["String"];
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

/** A label notification subscription. */
export type LabelNotificationSubscription = Entity &
  Node &
  NotificationSubscription & {
    __typename?: "LabelNotificationSubscription";
    /** Whether the subscription is active or not. */
    active: Scalars["Boolean"];
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: Maybe<Scalars["DateTime"]>;
    /** The type of view to which the notification subscription context is associated with. */
    contextViewType?: Maybe<ContextViewType>;
    /** The time at which the entity was created. */
    createdAt: Scalars["DateTime"];
    /** The contextual custom view associated with the notification subscription. */
    customView?: Maybe<CustomView>;
    /** The customer associated with the notification subscription. */
    customer?: Maybe<Customer>;
    /** The contextual cycle view associated with the notification subscription. */
    cycle?: Maybe<Cycle>;
    /** The unique identifier of the entity. */
    id: Scalars["ID"];
    /** The contextual initiative view associated with the notification subscription. */
    initiative?: Maybe<Initiative>;
    /** The label subscribed to. */
    label: IssueLabel;
    /** The type of subscription. */
    notificationSubscriptionTypes: Array<Scalars["String"]>;
    /** The contextual project view associated with the notification subscription. */
    project?: Maybe<Project>;
    /** The user that subscribed to receive notifications. */
    subscriber: User;
    /** The team associated with the notification subscription. */
    team?: Maybe<Team>;
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars["DateTime"];
    /** The user view associated with the notification subscription. */
    user?: Maybe<User>;
    /** The type of user view to which the notification subscription context is associated with. */
    userContextViewType?: Maybe<UserContextViewType>;
  };

/** Issue label sorting options. */
export type LabelSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

export type LabelsMergeInput = {
  /** The identifiers of the labels to merge. */
  fromLabelIds: Array<Scalars["String"]>;
  /** The identifier of the target label. */
  toLabelId: Scalars["String"];
};

export type LaunchDarklySettingsInput = {
  /** The environment of the LaunchDarkly integration. */
  environment: Scalars["String"];
  /** The project key of the LaunchDarkly integration. */
  projectKey: Scalars["String"];
};

/** [ALPHA] Issue link count sorting options. */
export type LinkCountSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

export type LogoutResponse = {
  __typename?: "LogoutResponse";
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** Issue manual sorting options. */
export type ManualSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

/** Issue project milestone options. */
export type MilestoneSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

export type Mutation = {
  __typename?: "Mutation";
  /** Creates an agent activity. */
  agentActivityCreate: AgentActivityPayload;
  /** [Internal] Creates a prompt agent activity from Linear user input. */
  agentActivityCreatePrompt: AgentActivityPayload;
  /** Updates the externalUrl of an agent session, which is an agent-hosted page associated with this session. */
  agentSessionUpdateExternalUrl: AgentSessionPayload;
  /** Creates an integration api key for Airbyte to connect with Linear. */
  airbyteIntegrationConnect: IntegrationPayload;
  /** [INTERNAL] Creates a new API key. */
  apiKeyCreate: ApiKeyPayload;
  /** [INTERNAL] Deletes an API key. */
  apiKeyDelete: DeletePayload;
  /** [INTERNAL] Updates an API key's allowed teams. */
  apiKeyUpdate: ApiKeyPayload;
  /** Creates a new attachment, or updates existing if the same `url` and `issueId` is used. */
  attachmentCreate: AttachmentPayload;
  /** Deletes an issue attachment. */
  attachmentDelete: DeletePayload;
  /** Link an existing Discord message to an issue. */
  attachmentLinkDiscord: AttachmentPayload;
  /** Link an existing Front conversation to an issue. */
  attachmentLinkFront: FrontAttachmentPayload;
  /** Link a GitHub issue to a Linear issue. */
  attachmentLinkGitHubIssue: AttachmentPayload;
  /** Link a GitHub pull request to an issue. */
  attachmentLinkGitHubPR: AttachmentPayload;
  /** Link an existing GitLab MR to an issue. */
  attachmentLinkGitLabMR: AttachmentPayload;
  /** Link an existing Intercom conversation to an issue. */
  attachmentLinkIntercom: AttachmentPayload;
  /** Link an existing Jira issue to an issue. */
  attachmentLinkJiraIssue: AttachmentPayload;
  /** Link an existing Salesforce case to an issue. */
  attachmentLinkSalesforce: AttachmentPayload;
  /** Link an existing Slack message to an issue. */
  attachmentLinkSlack: AttachmentPayload;
  /** Link any url to an issue. */
  attachmentLinkURL: AttachmentPayload;
  /** Link an existing Zendesk ticket to an issue. */
  attachmentLinkZendesk: AttachmentPayload;
  /** Begin syncing the thread for an existing Slack message attachment with a comment thread on its issue. */
  attachmentSyncToSlack: AttachmentPayload;
  /** Updates an existing issue attachment. */
  attachmentUpdate: AttachmentPayload;
  /** Creates a new comment. */
  commentCreate: CommentPayload;
  /** Deletes a comment. */
  commentDelete: DeletePayload;
  /** Resolves a comment. */
  commentResolve: CommentPayload;
  /** Unresolves a comment. */
  commentUnresolve: CommentPayload;
  /** Updates a comment. */
  commentUpdate: CommentPayload;
  /** Saves user message. */
  contactCreate: ContactPayload;
  /** [INTERNAL] Saves sales pricing inquiry to Front. */
  contactSalesCreate: ContactPayload;
  /** Create CSV export report for the organization. */
  createCsvExportReport: CreateCsvExportReportPayload;
  /** Create a notification to remind a user about an initiative update. */
  createInitiativeUpdateReminder: InitiativeUpdateReminderPayload;
  /** Creates an organization from onboarding. */
  createOrganizationFromOnboarding: CreateOrJoinOrganizationResponse;
  /** Create a notification to remind a user about a project update. */
  createProjectUpdateReminder: ProjectUpdateReminderPayload;
  /** Creates a new custom view. */
  customViewCreate: CustomViewPayload;
  /** Deletes a custom view. */
  customViewDelete: DeletePayload;
  /** Updates a custom view. */
  customViewUpdate: CustomViewPayload;
  /** Creates a new customer. */
  customerCreate: CustomerPayload;
  /** Deletes a customer. */
  customerDelete: DeletePayload;
  /** Merges two customers. */
  customerMerge: CustomerPayload;
  /** Archives a customer need. */
  customerNeedArchive: CustomerNeedArchivePayload;
  /** Creates a new customer need. */
  customerNeedCreate: CustomerNeedPayload;
  /** Creates a new customer need out of an attachment */
  customerNeedCreateFromAttachment: CustomerNeedPayload;
  /** Deletes a customer need. */
  customerNeedDelete: DeletePayload;
  /** Unarchives a customer need. */
  customerNeedUnarchive: CustomerNeedArchivePayload;
  /** Updates a customer need */
  customerNeedUpdate: CustomerNeedUpdatePayload;
  /** Creates a new customer status. */
  customerStatusCreate: CustomerStatusPayload;
  /** Deletes a customer status. */
  customerStatusDelete: DeletePayload;
  /** Updates a customer status. */
  customerStatusUpdate: CustomerStatusPayload;
  /** Creates a new customer tier. */
  customerTierCreate: CustomerTierPayload;
  /** Deletes a customer tier. */
  customerTierDelete: DeletePayload;
  /** Updates a customer tier. */
  customerTierUpdate: CustomerTierPayload;
  /** Updates a customer */
  customerUpdate: CustomerPayload;
  /** Upserts a customer, creating it if it doesn't exists, updating it otherwise. Matches against an existing customer with `id` or `externalId` */
  customerUpsert: CustomerPayload;
  /** Archives a cycle. */
  cycleArchive: CycleArchivePayload;
  /** Creates a new cycle. */
  cycleCreate: CyclePayload;
  /** Shifts all cycles starts and ends by a certain number of days, starting from the provided cycle onwards. */
  cycleShiftAll: CyclePayload;
  /** Shifts all cycles starts and ends by a certain number of days, starting from the provided cycle onwards. */
  cycleStartUpcomingCycleToday: CyclePayload;
  /** Updates a cycle. */
  cycleUpdate: CyclePayload;
  /** Creates a new document. */
  documentCreate: DocumentPayload;
  /** Deletes (trashes) a document. */
  documentDelete: DocumentArchivePayload;
  /** Restores a document. */
  documentUnarchive: DocumentArchivePayload;
  /** Updates a document. */
  documentUpdate: DocumentPayload;
  /** Creates a new email intake address. */
  emailIntakeAddressCreate: EmailIntakeAddressPayload;
  /** Deletes an email intake address object. */
  emailIntakeAddressDelete: DeletePayload;
  /** Rotates an existing email intake address. */
  emailIntakeAddressRotate: EmailIntakeAddressPayload;
  /** Updates an existing email intake address. */
  emailIntakeAddressUpdate: EmailIntakeAddressPayload;
  /** Authenticates a user account via email and authentication token. */
  emailTokenUserAccountAuth: AuthResolverResponse;
  /** Unsubscribes the user from one type of email. */
  emailUnsubscribe: EmailUnsubscribePayload;
  /** Finds or creates a new user account by email and sends an email with token. */
  emailUserAccountAuthChallenge: EmailUserAccountAuthChallengeResponse;
  /** Creates a custom emoji. */
  emojiCreate: EmojiPayload;
  /** Deletes an emoji. */
  emojiDelete: DeletePayload;
  /** Creates a new entity link. */
  entityExternalLinkCreate: EntityExternalLinkPayload;
  /** Deletes an entity link. */
  entityExternalLinkDelete: DeletePayload;
  /** Updates an entity link. */
  entityExternalLinkUpdate: EntityExternalLinkPayload;
  /** Creates a new favorite (project, cycle etc). */
  favoriteCreate: FavoritePayload;
  /** Deletes a favorite reference. */
  favoriteDelete: DeletePayload;
  /** Updates a favorite. */
  favoriteUpdate: FavoritePayload;
  /** XHR request payload to upload an images, video and other attachments directly to Linear's cloud storage. */
  fileUpload: UploadPayload;
  /** Creates a new automation state. */
  gitAutomationStateCreate: GitAutomationStatePayload;
  /** Archives an automation state. */
  gitAutomationStateDelete: DeletePayload;
  /** Updates an existing state. */
  gitAutomationStateUpdate: GitAutomationStatePayload;
  /** Creates a Git target branch automation. */
  gitAutomationTargetBranchCreate: GitAutomationTargetBranchPayload;
  /** Archives a Git target branch automation. */
  gitAutomationTargetBranchDelete: DeletePayload;
  /** Updates an existing Git target branch automation. */
  gitAutomationTargetBranchUpdate: GitAutomationTargetBranchPayload;
  /** Authenticate user account through Google OAuth. This is the 2nd step of OAuth flow. */
  googleUserAccountAuth: AuthResolverResponse;
  /** Upload an image from an URL to Linear. */
  imageUploadFromUrl: ImageUploadFromUrlPayload;
  /** XHR request payload to upload a file for import, directly to Linear's cloud storage. */
  importFileUpload: UploadPayload;
  /** Archives a initiative. */
  initiativeArchive: InitiativeArchivePayload;
  /** Creates a new initiative. */
  initiativeCreate: InitiativePayload;
  /** Deletes (trashes) an initiative. */
  initiativeDelete: DeletePayload;
  /** Creates a new initiative relation. */
  initiativeRelationCreate: InitiativeRelationPayload;
  /** Deletes an initiative relation. */
  initiativeRelationDelete: DeletePayload;
  /** Updates an initiative relation. */
  initiativeRelationUpdate: DeletePayload;
  /** Creates a new initiativeToProject join. */
  initiativeToProjectCreate: InitiativeToProjectPayload;
  /** Deletes a initiativeToProject. */
  initiativeToProjectDelete: DeletePayload;
  /** Updates a initiativeToProject. */
  initiativeToProjectUpdate: InitiativeToProjectPayload;
  /** Unarchives a initiative. */
  initiativeUnarchive: InitiativeArchivePayload;
  /** Updates a initiative. */
  initiativeUpdate: InitiativePayload;
  /** Archives an initiative update. */
  initiativeUpdateArchive: InitiativeUpdateArchivePayload;
  /** Creates a initiative update. */
  initiativeUpdateCreate: InitiativeUpdatePayload;
  /** Unarchives an initiative update. */
  initiativeUpdateUnarchive: InitiativeUpdateArchivePayload;
  /** Updates an update. */
  initiativeUpdateUpdate: InitiativeUpdatePayload;
  /** Archives an integration. */
  integrationArchive: DeletePayload;
  /** Connect a Slack channel to Asks. */
  integrationAsksConnectChannel: AsksChannelConnectPayload;
  /** [INTERNAL] Refreshes the customer data attributes from the specified integration service. */
  integrationCustomerDataAttributesRefresh: IntegrationPayload;
  /** Deletes an integration. */
  integrationDelete: DeletePayload;
  /** Integrates the organization with Discord. */
  integrationDiscord: IntegrationPayload;
  /** Integrates the organization with Figma. */
  integrationFigma: IntegrationPayload;
  /** Integrates the organization with Front. */
  integrationFront: IntegrationPayload;
  /** Connects the organization with a GitHub Enterprise Server. */
  integrationGitHubEnterpriseServerConnect: GitHubEnterpriseServerPayload;
  /** Connect your GitHub account to Linear. */
  integrationGitHubPersonal: IntegrationPayload;
  /** Generates a webhook for the GitHub commit integration. */
  integrationGithubCommitCreate: GitHubCommitIntegrationPayload;
  /** Connects the organization with the GitHub App. */
  integrationGithubConnect: IntegrationPayload;
  /** Connects the organization with the GitHub Import App. */
  integrationGithubImportConnect: IntegrationPayload;
  /** Refreshes the data for a GitHub import integration. */
  integrationGithubImportRefresh: IntegrationPayload;
  /** Connects the organization with a GitLab Access Token. */
  integrationGitlabConnect: GitLabIntegrationCreatePayload;
  /** [Internal] Connects the Google Calendar to the user to this Linear account via OAuth2. */
  integrationGoogleCalendarPersonalConnect: IntegrationPayload;
  /** Integrates the organization with Google Sheets. */
  integrationGoogleSheets: IntegrationPayload;
  /** Integrates the organization with Intercom. */
  integrationIntercom: IntegrationPayload;
  /** Disconnects the organization from Intercom. */
  integrationIntercomDelete: IntegrationPayload;
  /**
   * [DEPRECATED] Updates settings on the Intercom integration.
   * @deprecated This mutation is deprecated, please use `integrationSettingsUpdate` instead
   */
  integrationIntercomSettingsUpdate: IntegrationPayload;
  /** Connect your Jira account to Linear. */
  integrationJiraPersonal: IntegrationPayload;
  /** [INTERNAL] Updates a Jira Integration. */
  integrationJiraUpdate: IntegrationPayload;
  /** [INTERNAL] Integrates the organization with LaunchDarkly. */
  integrationLaunchDarklyConnect: IntegrationPayload;
  /** [INTERNAL] Integrates your personal account with LaunchDarkly. */
  integrationLaunchDarklyPersonalConnect: IntegrationPayload;
  /**
   * Enables Loom integration for the organization.
   * @deprecated Not available.
   */
  integrationLoom: IntegrationPayload;
  /** [INTERNAL] Integrates the organization with Opsgenie. */
  integrationOpsgenieConnect: IntegrationPayload;
  /** [INTERNAL] Refresh Opsgenie schedule mappings. */
  integrationOpsgenieRefreshScheduleMappings: IntegrationPayload;
  /** [INTERNAL] Integrates the organization with PagerDuty. */
  integrationPagerDutyConnect: IntegrationPayload;
  /** [INTERNAL] Refresh PagerDuty schedule mappings. */
  integrationPagerDutyRefreshScheduleMappings: IntegrationPayload;
  /** Requests a currently unavailable integration. */
  integrationRequest: IntegrationRequestPayload;
  /** Integrates the organization with Salesforce. */
  integrationSalesforce: IntegrationPayload;
  /** [INTERNAL] Refreshes the Salesforce integration metadata. */
  integrationSalesforceMetadataRefresh: IntegrationPayload;
  /** Integrates the organization with Sentry. */
  integrationSentryConnect: IntegrationPayload;
  /**
   * [INTERNAL] Updates the integration settings.
   * @deprecated Use integrationUpdate instead.
   */
  integrationSettingsUpdate: IntegrationPayload;
  /** Integrates the organization with Slack. */
  integrationSlack: IntegrationPayload;
  /** Integrates the organization with the Slack Asks app. */
  integrationSlackAsks: IntegrationPayload;
  /** Slack integration for custom view notifications. */
  integrationSlackCustomViewNotifications: SlackChannelConnectPayload;
  /** Integrates a Slack Asks channel with a Customer. */
  integrationSlackCustomerChannelLink: SuccessPayload;
  /** Imports custom emojis from your Slack workspace. */
  integrationSlackImportEmojis: IntegrationPayload;
  /** [Internal] Slack integration for initiative notifications. */
  integrationSlackInitiativePost: SlackChannelConnectPayload;
  /** Updates the Slack team's name in Linear for an existing Slack or Asks integration. */
  integrationSlackOrAsksUpdateSlackTeamName: IntegrationSlackWorkspaceNamePayload;
  /** [Internal] Slack integration for organization level initiative update notifications. */
  integrationSlackOrgInitiativeUpdatesPost: SlackChannelConnectPayload;
  /** Slack integration for organization level project update notifications. */
  integrationSlackOrgProjectUpdatesPost: SlackChannelConnectPayload;
  /** Integrates your personal notifications with Slack. */
  integrationSlackPersonal: IntegrationPayload;
  /** Slack integration for team notifications. */
  integrationSlackPost: SlackChannelConnectPayload;
  /** Slack integration for project notifications. */
  integrationSlackProjectPost: SlackChannelConnectPayload;
  /** Creates a new integrationTemplate join. */
  integrationTemplateCreate: IntegrationTemplatePayload;
  /** Deletes a integrationTemplate. */
  integrationTemplateDelete: DeletePayload;
  /** [INTERNAL] Updates the integration. */
  integrationUpdate: IntegrationPayload;
  /** Integrates the organization with Zendesk. */
  integrationZendesk: IntegrationPayload;
  /** Creates new settings for one or more integrations. */
  integrationsSettingsCreate: IntegrationsSettingsPayload;
  /** Updates settings related to integrations for a project or a team. */
  integrationsSettingsUpdate: IntegrationsSettingsPayload;
  /** Adds a label to an issue. */
  issueAddLabel: IssuePayload;
  /** Archives an issue. */
  issueArchive: IssueArchivePayload;
  /** Creates a list of issues in one transaction. */
  issueBatchCreate: IssueBatchPayload;
  /** Updates multiple issues at once. */
  issueBatchUpdate: IssueBatchPayload;
  /** Creates a new issue. */
  issueCreate: IssuePayload;
  /** Deletes (trashes) an issue. */
  issueDelete: IssueArchivePayload;
  /** [INTERNAL] Updates an issue description from the Front app to handle Front attachments correctly. */
  issueDescriptionUpdateFromFront: IssuePayload;
  /** Kicks off an Asana import job. */
  issueImportCreateAsana: IssueImportPayload;
  /** Kicks off a Jira import job from a CSV. */
  issueImportCreateCSVJira: IssueImportPayload;
  /** Kicks off a Shortcut (formerly Clubhouse) import job. */
  issueImportCreateClubhouse: IssueImportPayload;
  /** Kicks off a GitHub import job. */
  issueImportCreateGithub: IssueImportPayload;
  /** Kicks off a Jira import job. */
  issueImportCreateJira: IssueImportPayload;
  /** [INTERNAL] Kicks off a Linear to Linear import job. */
  issueImportCreateLinearV2: IssueImportPayload;
  /** Deletes an import job. */
  issueImportDelete: IssueImportDeletePayload;
  /** Kicks off import processing. */
  issueImportProcess: IssueImportPayload;
  /** Updates the mapping for the issue import. */
  issueImportUpdate: IssueImportPayload;
  /** Creates a new label. */
  issueLabelCreate: IssueLabelPayload;
  /** Deletes an issue label. */
  issueLabelDelete: DeletePayload;
  /** Converts a workspace label to team labels for teams that have issues using the workspace label. */
  issueLabelMoveToTeamLabels: IssueLabelMoveToTeamLabelsPayload;
  /** Updates an label. */
  issueLabelUpdate: IssueLabelPayload;
  /** Merges multiple issue labels into a single label. */
  issueLabelsMerge: IssueLabelPayload;
  /** Creates a new issue relation. */
  issueRelationCreate: IssueRelationPayload;
  /** Deletes an issue relation. */
  issueRelationDelete: DeletePayload;
  /** Updates an issue relation. */
  issueRelationUpdate: IssueRelationPayload;
  /** Adds an issue reminder. Will cause a notification to be sent when the issue reminder time is reached. */
  issueReminder: IssuePayload;
  /** Removes a label from an issue. */
  issueRemoveLabel: IssuePayload;
  /** Subscribes a user to an issue. */
  issueSubscribe: IssuePayload;
  /** Unarchives an issue. */
  issueUnarchive: IssueArchivePayload;
  /** Unsubscribes a user from an issue. */
  issueUnsubscribe: IssuePayload;
  /** Updates an issue. */
  issueUpdate: IssuePayload;
  /** [INTERNAL] Connects the organization with a Jira Personal Access Token. */
  jiraIntegrationConnect: IntegrationPayload;
  /** Join an organization from onboarding. */
  joinOrganizationFromOnboarding: CreateOrJoinOrganizationResponse;
  /** Leave an organization. */
  leaveOrganization: CreateOrJoinOrganizationResponse;
  /** Logout the client. */
  logout: LogoutResponse;
  /** Logout all of user's sessions including the active one. */
  logoutAllSessions: LogoutResponse;
  /** Logout all of user's sessions excluding the current one. */
  logoutOtherSessions: LogoutResponse;
  /** Logout an individual session with its ID. */
  logoutSession: LogoutResponse;
  /** Archives a notification. */
  notificationArchive: NotificationArchivePayload;
  /** Archives a notification and all related notifications. */
  notificationArchiveAll: NotificationBatchActionPayload;
  /** Subscribes to or unsubscribes from a notification category for a given notification channel for the user */
  notificationCategoryChannelSubscriptionUpdate: UserSettingsPayload;
  /** Marks notification and all related notifications as read. */
  notificationMarkReadAll: NotificationBatchActionPayload;
  /** Marks notification and all related notifications as unread. */
  notificationMarkUnreadAll: NotificationBatchActionPayload;
  /** Snoozes a notification and all related notifications. */
  notificationSnoozeAll: NotificationBatchActionPayload;
  /** Creates a new notification subscription for a cycle, custom view, label, project or team. */
  notificationSubscriptionCreate: NotificationSubscriptionPayload;
  /**
   * Deletes a notification subscription reference.
   * @deprecated Update `notificationSubscription.active` to `false` instead.
   */
  notificationSubscriptionDelete: DeletePayload;
  /** Updates a notification subscription. */
  notificationSubscriptionUpdate: NotificationSubscriptionPayload;
  /** Unarchives a notification. */
  notificationUnarchive: NotificationArchivePayload;
  /** Unsnoozes a notification and all related notifications. */
  notificationUnsnoozeAll: NotificationBatchActionPayload;
  /** Updates a notification. */
  notificationUpdate: NotificationPayload;
  /** Cancels the deletion of an organization. Administrator privileges required. */
  organizationCancelDelete: OrganizationCancelDeletePayload;
  /** Delete's an organization. Administrator privileges required. */
  organizationDelete: OrganizationDeletePayload;
  /** Get an organization's delete confirmation token. Administrator privileges required. */
  organizationDeleteChallenge: OrganizationDeletePayload;
  /** [INTERNAL] Verifies a domain claim. */
  organizationDomainClaim: OrganizationDomainSimplePayload;
  /** [INTERNAL] Adds a domain to be allowed for an organization. */
  organizationDomainCreate: OrganizationDomainPayload;
  /** Deletes a domain. */
  organizationDomainDelete: DeletePayload;
  /** [INTERNAL] Updates an organization domain settings. */
  organizationDomainUpdate: OrganizationDomainPayload;
  /** [INTERNAL] Verifies a domain to be added to an organization. */
  organizationDomainVerify: OrganizationDomainPayload;
  /** Creates a new organization invite. */
  organizationInviteCreate: OrganizationInvitePayload;
  /** Deletes an organization invite. */
  organizationInviteDelete: DeletePayload;
  /** Updates an organization invite. */
  organizationInviteUpdate: OrganizationInvitePayload;
  /**
   * [DEPRECATED] Starts a trial for the organization. Administrator privileges required.
   * @deprecated Use organizationStartTrialForPlan
   */
  organizationStartTrial: OrganizationStartTrialPayload;
  /** Starts a trial for the organization on the specified plan type. Administrator privileges required. */
  organizationStartTrialForPlan: OrganizationStartTrialPayload;
  /** Updates the user's organization. */
  organizationUpdate: OrganizationPayload;
  /** [INTERNAL] Finish passkey login process. */
  passkeyLoginFinish: AuthResolverResponse;
  /** [INTERNAL] Starts passkey login process. */
  passkeyLoginStart: PasskeyLoginStartResponse;
  /** Adds a label to a project. */
  projectAddLabel: ProjectPayload;
  /**
   * Archives a project.
   * @deprecated Deprecated in favor of projectDelete.
   */
  projectArchive: ProjectArchivePayload;
  /** Creates a new project. */
  projectCreate: ProjectPayload;
  /** Deletes (trashes) a project. */
  projectDelete: ProjectArchivePayload;
  /** Creates a new project label. */
  projectLabelCreate: ProjectLabelPayload;
  /** Deletes a project label. */
  projectLabelDelete: DeletePayload;
  /** Updates a project label. */
  projectLabelUpdate: ProjectLabelPayload;
  /** Merges multiple project labels into a single label. */
  projectLabelsMerge: ProjectLabelPayload;
  /** Creates a new project milestone. */
  projectMilestoneCreate: ProjectMilestonePayload;
  /** Deletes a project milestone. */
  projectMilestoneDelete: DeletePayload;
  /** [Internal] Moves a project milestone to another project, can be called to undo a prior move. */
  projectMilestoneMove: ProjectMilestoneMovePayload;
  /** Updates a project milestone. */
  projectMilestoneUpdate: ProjectMilestonePayload;
  /** [INTERNAL] Updates all projects currently assigned to to a project status to a new project status. */
  projectReassignStatus: SuccessPayload;
  /** Creates a new project relation. */
  projectRelationCreate: ProjectRelationPayload;
  /** Deletes a project relation. */
  projectRelationDelete: DeletePayload;
  /** Updates a project relation. */
  projectRelationUpdate: ProjectRelationPayload;
  /** Removes a label from a project. */
  projectRemoveLabel: ProjectPayload;
  /** Archives a project status. */
  projectStatusArchive: ProjectStatusArchivePayload;
  /** Creates a new project status. */
  projectStatusCreate: ProjectStatusPayload;
  /** Unarchives a project status. */
  projectStatusUnarchive: ProjectStatusArchivePayload;
  /** Updates a project status. */
  projectStatusUpdate: ProjectStatusPayload;
  /** Unarchives a project. */
  projectUnarchive: ProjectArchivePayload;
  /** Updates a project. */
  projectUpdate: ProjectPayload;
  /** Archives a project update. */
  projectUpdateArchive: ProjectUpdateArchivePayload;
  /** Creates a new project update. */
  projectUpdateCreate: ProjectUpdatePayload;
  /**
   * Deletes a project update.
   * @deprecated Use `projectUpdateArchive` instead.
   */
  projectUpdateDelete: DeletePayload;
  /** Unarchives a project update. */
  projectUpdateUnarchive: ProjectUpdateArchivePayload;
  /** Updates a project update. */
  projectUpdateUpdate: ProjectUpdatePayload;
  /** Creates a push subscription. */
  pushSubscriptionCreate: PushSubscriptionPayload;
  /** Deletes a push subscription. */
  pushSubscriptionDelete: PushSubscriptionPayload;
  /** Creates a new reaction. */
  reactionCreate: ReactionPayload;
  /** Deletes a reaction. */
  reactionDelete: DeletePayload;
  /** Manually update Google Sheets data. */
  refreshGoogleSheetsData: IntegrationPayload;
  /** Re-send an organization invite. */
  resendOrganizationInvite: DeletePayload;
  /** Re-send an organization invite tied to an email address. */
  resendOrganizationInviteByEmail: DeletePayload;
  /**
   * Archives a roadmap.
   * @deprecated Roadmaps are deprecated, use initiatives instead.
   */
  roadmapArchive: RoadmapArchivePayload;
  /**
   * Creates a new roadmap.
   * @deprecated Roadmaps are deprecated, use initiatives instead.
   */
  roadmapCreate: RoadmapPayload;
  /**
   * Deletes a roadmap.
   * @deprecated Roadmaps are deprecated, use initiatives instead.
   */
  roadmapDelete: DeletePayload;
  /** Creates a new roadmapToProject join. */
  roadmapToProjectCreate: RoadmapToProjectPayload;
  /** Deletes a roadmapToProject. */
  roadmapToProjectDelete: DeletePayload;
  /** Updates a roadmapToProject. */
  roadmapToProjectUpdate: RoadmapToProjectPayload;
  /**
   * Unarchives a roadmap.
   * @deprecated Roadmaps are deprecated, use initiatives instead.
   */
  roadmapUnarchive: RoadmapArchivePayload;
  /**
   * Updates a roadmap.
   * @deprecated Roadmaps are deprecated, use initiatives instead.
   */
  roadmapUpdate: RoadmapPayload;
  /** Authenticates a user account via email and authentication token for SAML. */
  samlTokenUserAccountAuth: AuthResolverResponse;
  /** Creates a new team. The user who creates the team will automatically be added as a member to the newly created team. */
  teamCreate: TeamPayload;
  /** Deletes team's cycles data */
  teamCyclesDelete: TeamPayload;
  /** Deletes a team. */
  teamDelete: DeletePayload;
  /** Deletes a previously used team key. */
  teamKeyDelete: DeletePayload;
  /** Creates a new team membership. */
  teamMembershipCreate: TeamMembershipPayload;
  /** Deletes a team membership. */
  teamMembershipDelete: DeletePayload;
  /** Updates a team membership. */
  teamMembershipUpdate: TeamMembershipPayload;
  /** Unarchives a team and cancels deletion. */
  teamUnarchive: TeamArchivePayload;
  /** Updates a team. */
  teamUpdate: TeamPayload;
  /** Creates a new template. */
  templateCreate: TemplatePayload;
  /** Deletes a template. */
  templateDelete: DeletePayload;
  /** Updates an existing template. */
  templateUpdate: TemplatePayload;
  /** Creates a new time schedule. */
  timeScheduleCreate: TimeSchedulePayload;
  /** Deletes a time schedule. */
  timeScheduleDelete: DeletePayload;
  /** Refresh the integration schedule information. */
  timeScheduleRefreshIntegrationSchedule: TimeSchedulePayload;
  /** Updates a time schedule. */
  timeScheduleUpdate: TimeSchedulePayload;
  /** Upsert an external time schedule. */
  timeScheduleUpsertExternal: TimeSchedulePayload;
  /** Creates a new triage responsibility. */
  triageResponsibilityCreate: TriageResponsibilityPayload;
  /** Deletes a triage responsibility. */
  triageResponsibilityDelete: DeletePayload;
  /** Updates an existing triage responsibility. */
  triageResponsibilityUpdate: TriageResponsibilityPayload;
  /** [Internal] Updates existing Slack integration scopes. */
  updateIntegrationSlackScopes: IntegrationPayload;
  /** [INTERNAL] Updates the summary of an issue. */
  updateIssueSummary: IssuePayload;
  /** Makes user a regular user. Can only be called by an admin. */
  userDemoteAdmin: UserAdminPayload;
  /** Makes user a guest. Can only be called by an admin. */
  userDemoteMember: UserAdminPayload;
  /** Connects the Discord user to this Linear account via OAuth2. */
  userDiscordConnect: UserPayload;
  /** Disconnects the external user from this Linear account. */
  userExternalUserDisconnect: UserPayload;
  /** Updates a user's settings flag. */
  userFlagUpdate: UserSettingsFlagPayload;
  /** Makes user an admin. Can only be called by an admin. */
  userPromoteAdmin: UserAdminPayload;
  /** Makes user a regular user. Can only be called by an admin. */
  userPromoteMember: UserAdminPayload;
  /** Resets user's setting flags. */
  userSettingsFlagsReset: UserSettingsFlagsResetPayload;
  /** Updates the user's settings. */
  userSettingsUpdate: UserSettingsPayload;
  /** Suspends a user. Can only be called by an admin. */
  userSuspend: UserAdminPayload;
  /** Un-suspends a user. Can only be called by an admin. */
  userUnsuspend: UserAdminPayload;
  /** Updates a user. Only available to organization admins and the user themselves. */
  userUpdate: UserPayload;
  /** Creates a new ViewPreferences object. */
  viewPreferencesCreate: ViewPreferencesPayload;
  /** Deletes a ViewPreferences. */
  viewPreferencesDelete: DeletePayload;
  /** Updates an existing ViewPreferences object. */
  viewPreferencesUpdate: ViewPreferencesPayload;
  /** Creates a new webhook. */
  webhookCreate: WebhookPayload;
  /** Deletes a Webhook. */
  webhookDelete: DeletePayload;
  /** Updates an existing Webhook. */
  webhookUpdate: WebhookPayload;
  /** Archives a state. Only states with issues that have all been archived can be archived. */
  workflowStateArchive: WorkflowStateArchivePayload;
  /** Creates a new state, adding it to the workflow of a team. */
  workflowStateCreate: WorkflowStatePayload;
  /** Updates a state. */
  workflowStateUpdate: WorkflowStatePayload;
};

export type MutationAgentActivityCreateArgs = {
  input: AgentActivityCreateInput;
};

export type MutationAgentActivityCreatePromptArgs = {
  input: AgentActivityCreatePromptInput;
};

export type MutationAgentSessionUpdateExternalUrlArgs = {
  id: Scalars["String"];
  input: AgentSessionUpdateExternalUrlInput;
};

export type MutationAirbyteIntegrationConnectArgs = {
  input: AirbyteConfigurationInput;
};

export type MutationApiKeyCreateArgs = {
  input: ApiKeyCreateInput;
};

export type MutationApiKeyDeleteArgs = {
  id: Scalars["String"];
};

export type MutationApiKeyUpdateArgs = {
  id: Scalars["String"];
  input: ApiKeyUpdateInput;
};

export type MutationAttachmentCreateArgs = {
  input: AttachmentCreateInput;
};

export type MutationAttachmentDeleteArgs = {
  id: Scalars["String"];
};

export type MutationAttachmentLinkDiscordArgs = {
  channelId: Scalars["String"];
  createAsUser?: Maybe<Scalars["String"]>;
  displayIconUrl?: Maybe<Scalars["String"]>;
  id?: Maybe<Scalars["String"]>;
  issueId: Scalars["String"];
  messageId: Scalars["String"];
  title?: Maybe<Scalars["String"]>;
  url: Scalars["String"];
};

export type MutationAttachmentLinkFrontArgs = {
  conversationId: Scalars["String"];
  createAsUser?: Maybe<Scalars["String"]>;
  displayIconUrl?: Maybe<Scalars["String"]>;
  id?: Maybe<Scalars["String"]>;
  issueId: Scalars["String"];
  title?: Maybe<Scalars["String"]>;
};

export type MutationAttachmentLinkGitHubIssueArgs = {
  createAsUser?: Maybe<Scalars["String"]>;
  displayIconUrl?: Maybe<Scalars["String"]>;
  id?: Maybe<Scalars["String"]>;
  issueId: Scalars["String"];
  title?: Maybe<Scalars["String"]>;
  url: Scalars["String"];
};

export type MutationAttachmentLinkGitHubPrArgs = {
  createAsUser?: Maybe<Scalars["String"]>;
  displayIconUrl?: Maybe<Scalars["String"]>;
  id?: Maybe<Scalars["String"]>;
  issueId: Scalars["String"];
  linkKind?: Maybe<GitLinkKind>;
  title?: Maybe<Scalars["String"]>;
  url: Scalars["String"];
};

export type MutationAttachmentLinkGitLabMrArgs = {
  createAsUser?: Maybe<Scalars["String"]>;
  displayIconUrl?: Maybe<Scalars["String"]>;
  id?: Maybe<Scalars["String"]>;
  issueId: Scalars["String"];
  number: Scalars["Float"];
  projectPathWithNamespace: Scalars["String"];
  title?: Maybe<Scalars["String"]>;
  url: Scalars["String"];
};

export type MutationAttachmentLinkIntercomArgs = {
  conversationId: Scalars["String"];
  createAsUser?: Maybe<Scalars["String"]>;
  displayIconUrl?: Maybe<Scalars["String"]>;
  id?: Maybe<Scalars["String"]>;
  issueId: Scalars["String"];
  partId?: Maybe<Scalars["String"]>;
  title?: Maybe<Scalars["String"]>;
};

export type MutationAttachmentLinkJiraIssueArgs = {
  createAsUser?: Maybe<Scalars["String"]>;
  displayIconUrl?: Maybe<Scalars["String"]>;
  id?: Maybe<Scalars["String"]>;
  issueId: Scalars["String"];
  jiraIssueId: Scalars["String"];
  title?: Maybe<Scalars["String"]>;
  url?: Maybe<Scalars["String"]>;
};

export type MutationAttachmentLinkSalesforceArgs = {
  createAsUser?: Maybe<Scalars["String"]>;
  displayIconUrl?: Maybe<Scalars["String"]>;
  id?: Maybe<Scalars["String"]>;
  issueId: Scalars["String"];
  title?: Maybe<Scalars["String"]>;
  url: Scalars["String"];
};

export type MutationAttachmentLinkSlackArgs = {
  createAsUser?: Maybe<Scalars["String"]>;
  displayIconUrl?: Maybe<Scalars["String"]>;
  id?: Maybe<Scalars["String"]>;
  issueId: Scalars["String"];
  syncToCommentThread?: Maybe<Scalars["Boolean"]>;
  title?: Maybe<Scalars["String"]>;
  url: Scalars["String"];
};

export type MutationAttachmentLinkUrlArgs = {
  createAsUser?: Maybe<Scalars["String"]>;
  displayIconUrl?: Maybe<Scalars["String"]>;
  id?: Maybe<Scalars["String"]>;
  issueId: Scalars["String"];
  title?: Maybe<Scalars["String"]>;
  url: Scalars["String"];
};

export type MutationAttachmentLinkZendeskArgs = {
  createAsUser?: Maybe<Scalars["String"]>;
  displayIconUrl?: Maybe<Scalars["String"]>;
  id?: Maybe<Scalars["String"]>;
  issueId: Scalars["String"];
  ticketId: Scalars["String"];
  title?: Maybe<Scalars["String"]>;
  url?: Maybe<Scalars["String"]>;
};

export type MutationAttachmentSyncToSlackArgs = {
  id: Scalars["String"];
};

export type MutationAttachmentUpdateArgs = {
  id: Scalars["String"];
  input: AttachmentUpdateInput;
};

export type MutationCommentCreateArgs = {
  input: CommentCreateInput;
};

export type MutationCommentDeleteArgs = {
  id: Scalars["String"];
};

export type MutationCommentResolveArgs = {
  id: Scalars["String"];
  resolvingCommentId?: Maybe<Scalars["String"]>;
};

export type MutationCommentUnresolveArgs = {
  id: Scalars["String"];
};

export type MutationCommentUpdateArgs = {
  id: Scalars["String"];
  input: CommentUpdateInput;
};

export type MutationContactCreateArgs = {
  input: ContactCreateInput;
};

export type MutationContactSalesCreateArgs = {
  input: ContactSalesCreateInput;
};

export type MutationCreateCsvExportReportArgs = {
  includePrivateTeamIds?: Maybe<Array<Scalars["String"]>>;
};

export type MutationCreateInitiativeUpdateReminderArgs = {
  initiativeId: Scalars["String"];
  userId?: Maybe<Scalars["String"]>;
};

export type MutationCreateOrganizationFromOnboardingArgs = {
  input: CreateOrganizationInput;
  survey?: Maybe<OnboardingCustomerSurvey>;
};

export type MutationCreateProjectUpdateReminderArgs = {
  projectId: Scalars["String"];
  userId?: Maybe<Scalars["String"]>;
};

export type MutationCustomViewCreateArgs = {
  input: CustomViewCreateInput;
};

export type MutationCustomViewDeleteArgs = {
  id: Scalars["String"];
};

export type MutationCustomViewUpdateArgs = {
  id: Scalars["String"];
  input: CustomViewUpdateInput;
};

export type MutationCustomerCreateArgs = {
  input: CustomerCreateInput;
};

export type MutationCustomerDeleteArgs = {
  id: Scalars["String"];
};

export type MutationCustomerMergeArgs = {
  sourceCustomerId: Scalars["String"];
  targetCustomerId: Scalars["String"];
};

export type MutationCustomerNeedArchiveArgs = {
  id: Scalars["String"];
};

export type MutationCustomerNeedCreateArgs = {
  input: CustomerNeedCreateInput;
};

export type MutationCustomerNeedCreateFromAttachmentArgs = {
  input: CustomerNeedCreateFromAttachmentInput;
};

export type MutationCustomerNeedDeleteArgs = {
  id: Scalars["String"];
  keepAttachment?: Maybe<Scalars["Boolean"]>;
};

export type MutationCustomerNeedUnarchiveArgs = {
  id: Scalars["String"];
};

export type MutationCustomerNeedUpdateArgs = {
  id: Scalars["String"];
  input: CustomerNeedUpdateInput;
};

export type MutationCustomerStatusCreateArgs = {
  input: CustomerStatusCreateInput;
};

export type MutationCustomerStatusDeleteArgs = {
  id: Scalars["String"];
};

export type MutationCustomerStatusUpdateArgs = {
  id: Scalars["String"];
  input: CustomerStatusUpdateInput;
};

export type MutationCustomerTierCreateArgs = {
  input: CustomerTierCreateInput;
};

export type MutationCustomerTierDeleteArgs = {
  id: Scalars["String"];
};

export type MutationCustomerTierUpdateArgs = {
  id: Scalars["String"];
  input: CustomerTierUpdateInput;
};

export type MutationCustomerUpdateArgs = {
  id: Scalars["String"];
  input: CustomerUpdateInput;
};

export type MutationCustomerUpsertArgs = {
  input: CustomerUpsertInput;
};

export type MutationCycleArchiveArgs = {
  id: Scalars["String"];
};

export type MutationCycleCreateArgs = {
  input: CycleCreateInput;
};

export type MutationCycleShiftAllArgs = {
  input: CycleShiftAllInput;
};

export type MutationCycleStartUpcomingCycleTodayArgs = {
  id: Scalars["String"];
};

export type MutationCycleUpdateArgs = {
  id: Scalars["String"];
  input: CycleUpdateInput;
};

export type MutationDocumentCreateArgs = {
  input: DocumentCreateInput;
};

export type MutationDocumentDeleteArgs = {
  id: Scalars["String"];
};

export type MutationDocumentUnarchiveArgs = {
  id: Scalars["String"];
};

export type MutationDocumentUpdateArgs = {
  id: Scalars["String"];
  input: DocumentUpdateInput;
};

export type MutationEmailIntakeAddressCreateArgs = {
  input: EmailIntakeAddressCreateInput;
};

export type MutationEmailIntakeAddressDeleteArgs = {
  id: Scalars["String"];
};

export type MutationEmailIntakeAddressRotateArgs = {
  id: Scalars["String"];
};

export type MutationEmailIntakeAddressUpdateArgs = {
  id: Scalars["String"];
  input: EmailIntakeAddressUpdateInput;
};

export type MutationEmailTokenUserAccountAuthArgs = {
  input: TokenUserAccountAuthInput;
};

export type MutationEmailUnsubscribeArgs = {
  input: EmailUnsubscribeInput;
};

export type MutationEmailUserAccountAuthChallengeArgs = {
  input: EmailUserAccountAuthChallengeInput;
};

export type MutationEmojiCreateArgs = {
  input: EmojiCreateInput;
};

export type MutationEmojiDeleteArgs = {
  id: Scalars["String"];
};

export type MutationEntityExternalLinkCreateArgs = {
  input: EntityExternalLinkCreateInput;
};

export type MutationEntityExternalLinkDeleteArgs = {
  id: Scalars["String"];
};

export type MutationEntityExternalLinkUpdateArgs = {
  id: Scalars["String"];
  input: EntityExternalLinkUpdateInput;
};

export type MutationFavoriteCreateArgs = {
  input: FavoriteCreateInput;
};

export type MutationFavoriteDeleteArgs = {
  id: Scalars["String"];
};

export type MutationFavoriteUpdateArgs = {
  id: Scalars["String"];
  input: FavoriteUpdateInput;
};

export type MutationFileUploadArgs = {
  contentType: Scalars["String"];
  filename: Scalars["String"];
  makePublic?: Maybe<Scalars["Boolean"]>;
  metaData?: Maybe<Scalars["JSON"]>;
  size: Scalars["Int"];
};

export type MutationGitAutomationStateCreateArgs = {
  input: GitAutomationStateCreateInput;
};

export type MutationGitAutomationStateDeleteArgs = {
  id: Scalars["String"];
};

export type MutationGitAutomationStateUpdateArgs = {
  id: Scalars["String"];
  input: GitAutomationStateUpdateInput;
};

export type MutationGitAutomationTargetBranchCreateArgs = {
  input: GitAutomationTargetBranchCreateInput;
};

export type MutationGitAutomationTargetBranchDeleteArgs = {
  id: Scalars["String"];
};

export type MutationGitAutomationTargetBranchUpdateArgs = {
  id: Scalars["String"];
  input: GitAutomationTargetBranchUpdateInput;
};

export type MutationGoogleUserAccountAuthArgs = {
  input: GoogleUserAccountAuthInput;
};

export type MutationImageUploadFromUrlArgs = {
  url: Scalars["String"];
};

export type MutationImportFileUploadArgs = {
  contentType: Scalars["String"];
  filename: Scalars["String"];
  metaData?: Maybe<Scalars["JSON"]>;
  size: Scalars["Int"];
};

export type MutationInitiativeArchiveArgs = {
  id: Scalars["String"];
};

export type MutationInitiativeCreateArgs = {
  input: InitiativeCreateInput;
};

export type MutationInitiativeDeleteArgs = {
  id: Scalars["String"];
};

export type MutationInitiativeRelationCreateArgs = {
  input: InitiativeRelationCreateInput;
};

export type MutationInitiativeRelationDeleteArgs = {
  id: Scalars["String"];
};

export type MutationInitiativeRelationUpdateArgs = {
  id: Scalars["String"];
  input: InitiativeRelationUpdateInput;
};

export type MutationInitiativeToProjectCreateArgs = {
  input: InitiativeToProjectCreateInput;
};

export type MutationInitiativeToProjectDeleteArgs = {
  id: Scalars["String"];
};

export type MutationInitiativeToProjectUpdateArgs = {
  id: Scalars["String"];
  input: InitiativeToProjectUpdateInput;
};

export type MutationInitiativeUnarchiveArgs = {
  id: Scalars["String"];
};

export type MutationInitiativeUpdateArgs = {
  id: Scalars["String"];
  input: InitiativeUpdateInput;
};

export type MutationInitiativeUpdateArchiveArgs = {
  id: Scalars["String"];
};

export type MutationInitiativeUpdateCreateArgs = {
  input: InitiativeUpdateCreateInput;
};

export type MutationInitiativeUpdateUnarchiveArgs = {
  id: Scalars["String"];
};

export type MutationInitiativeUpdateUpdateArgs = {
  id: Scalars["String"];
  input: InitiativeUpdateUpdateInput;
};

export type MutationIntegrationArchiveArgs = {
  id: Scalars["String"];
};

export type MutationIntegrationAsksConnectChannelArgs = {
  code: Scalars["String"];
  redirectUri: Scalars["String"];
};

export type MutationIntegrationCustomerDataAttributesRefreshArgs = {
  input: IntegrationCustomerDataAttributesRefreshInput;
};

export type MutationIntegrationDeleteArgs = {
  id: Scalars["String"];
  skipInstallationDeletion?: Maybe<Scalars["Boolean"]>;
};

export type MutationIntegrationDiscordArgs = {
  code: Scalars["String"];
  redirectUri: Scalars["String"];
};

export type MutationIntegrationFigmaArgs = {
  code: Scalars["String"];
  redirectUri: Scalars["String"];
};

export type MutationIntegrationFrontArgs = {
  code: Scalars["String"];
  redirectUri: Scalars["String"];
};

export type MutationIntegrationGitHubEnterpriseServerConnectArgs = {
  githubUrl: Scalars["String"];
  organizationName: Scalars["String"];
};

export type MutationIntegrationGitHubPersonalArgs = {
  code: Scalars["String"];
  codeAccess?: Maybe<Scalars["Boolean"]>;
};

export type MutationIntegrationGithubConnectArgs = {
  code: Scalars["String"];
  codeAccess?: Maybe<Scalars["Boolean"]>;
  installationId: Scalars["String"];
};

export type MutationIntegrationGithubImportConnectArgs = {
  code: Scalars["String"];
  installationId: Scalars["String"];
};

export type MutationIntegrationGithubImportRefreshArgs = {
  id: Scalars["String"];
};

export type MutationIntegrationGitlabConnectArgs = {
  accessToken: Scalars["String"];
  gitlabUrl: Scalars["String"];
};

export type MutationIntegrationGoogleCalendarPersonalConnectArgs = {
  code: Scalars["String"];
};

export type MutationIntegrationGoogleSheetsArgs = {
  code: Scalars["String"];
};

export type MutationIntegrationIntercomArgs = {
  code: Scalars["String"];
  domainUrl?: Maybe<Scalars["String"]>;
  redirectUri: Scalars["String"];
};

export type MutationIntegrationIntercomSettingsUpdateArgs = {
  input: IntercomSettingsInput;
};

export type MutationIntegrationJiraPersonalArgs = {
  accessToken?: Maybe<Scalars["String"]>;
  code?: Maybe<Scalars["String"]>;
};

export type MutationIntegrationJiraUpdateArgs = {
  input: JiraUpdateInput;
};

export type MutationIntegrationLaunchDarklyConnectArgs = {
  code: Scalars["String"];
  environment: Scalars["String"];
  projectKey: Scalars["String"];
};

export type MutationIntegrationLaunchDarklyPersonalConnectArgs = {
  code: Scalars["String"];
};

export type MutationIntegrationOpsgenieConnectArgs = {
  apiKey: Scalars["String"];
};

export type MutationIntegrationPagerDutyConnectArgs = {
  code: Scalars["String"];
  redirectUri: Scalars["String"];
};

export type MutationIntegrationRequestArgs = {
  input: IntegrationRequestInput;
};

export type MutationIntegrationSalesforceArgs = {
  code: Scalars["String"];
  redirectUri: Scalars["String"];
  subdomain: Scalars["String"];
};

export type MutationIntegrationSalesforceMetadataRefreshArgs = {
  id: Scalars["String"];
};

export type MutationIntegrationSentryConnectArgs = {
  code: Scalars["String"];
  installationId: Scalars["String"];
  organizationSlug: Scalars["String"];
};

export type MutationIntegrationSettingsUpdateArgs = {
  id: Scalars["String"];
  input: IntegrationSettingsInput;
};

export type MutationIntegrationSlackArgs = {
  code: Scalars["String"];
  redirectUri: Scalars["String"];
  shouldUseV2Auth?: Maybe<Scalars["Boolean"]>;
};

export type MutationIntegrationSlackAsksArgs = {
  code: Scalars["String"];
  redirectUri: Scalars["String"];
};

export type MutationIntegrationSlackCustomViewNotificationsArgs = {
  code: Scalars["String"];
  customViewId: Scalars["String"];
  redirectUri: Scalars["String"];
};

export type MutationIntegrationSlackCustomerChannelLinkArgs = {
  code: Scalars["String"];
  customerId: Scalars["String"];
  redirectUri: Scalars["String"];
};

export type MutationIntegrationSlackImportEmojisArgs = {
  code: Scalars["String"];
  redirectUri: Scalars["String"];
};

export type MutationIntegrationSlackInitiativePostArgs = {
  code: Scalars["String"];
  initiativeId: Scalars["String"];
  redirectUri: Scalars["String"];
};

export type MutationIntegrationSlackOrAsksUpdateSlackTeamNameArgs = {
  integrationId: Scalars["String"];
};

export type MutationIntegrationSlackOrgInitiativeUpdatesPostArgs = {
  code: Scalars["String"];
  redirectUri: Scalars["String"];
};

export type MutationIntegrationSlackOrgProjectUpdatesPostArgs = {
  code: Scalars["String"];
  redirectUri: Scalars["String"];
};

export type MutationIntegrationSlackPersonalArgs = {
  code: Scalars["String"];
  redirectUri: Scalars["String"];
};

export type MutationIntegrationSlackPostArgs = {
  code: Scalars["String"];
  redirectUri: Scalars["String"];
  shouldUseV2Auth?: Maybe<Scalars["Boolean"]>;
  teamId: Scalars["String"];
};

export type MutationIntegrationSlackProjectPostArgs = {
  code: Scalars["String"];
  projectId: Scalars["String"];
  redirectUri: Scalars["String"];
  service: Scalars["String"];
};

export type MutationIntegrationTemplateCreateArgs = {
  input: IntegrationTemplateCreateInput;
};

export type MutationIntegrationTemplateDeleteArgs = {
  id: Scalars["String"];
};

export type MutationIntegrationUpdateArgs = {
  id: Scalars["String"];
  input: IntegrationUpdateInput;
};

export type MutationIntegrationZendeskArgs = {
  code: Scalars["String"];
  redirectUri: Scalars["String"];
  scope: Scalars["String"];
  subdomain: Scalars["String"];
};

export type MutationIntegrationsSettingsCreateArgs = {
  input: IntegrationsSettingsCreateInput;
};

export type MutationIntegrationsSettingsUpdateArgs = {
  id: Scalars["String"];
  input: IntegrationsSettingsUpdateInput;
};

export type MutationIssueAddLabelArgs = {
  id: Scalars["String"];
  labelId: Scalars["String"];
};

export type MutationIssueArchiveArgs = {
  id: Scalars["String"];
  trash?: Maybe<Scalars["Boolean"]>;
};

export type MutationIssueBatchCreateArgs = {
  input: IssueBatchCreateInput;
};

export type MutationIssueBatchUpdateArgs = {
  ids: Array<Scalars["UUID"]>;
  input: IssueUpdateInput;
};

export type MutationIssueCreateArgs = {
  input: IssueCreateInput;
};

export type MutationIssueDeleteArgs = {
  id: Scalars["String"];
  permanentlyDelete?: Maybe<Scalars["Boolean"]>;
};

export type MutationIssueDescriptionUpdateFromFrontArgs = {
  description: Scalars["String"];
  id: Scalars["String"];
};

export type MutationIssueImportCreateAsanaArgs = {
  asanaTeamName: Scalars["String"];
  asanaToken: Scalars["String"];
  id?: Maybe<Scalars["String"]>;
  includeClosedIssues?: Maybe<Scalars["Boolean"]>;
  instantProcess?: Maybe<Scalars["Boolean"]>;
  teamId?: Maybe<Scalars["String"]>;
  teamName?: Maybe<Scalars["String"]>;
};

export type MutationIssueImportCreateCsvJiraArgs = {
  csvUrl: Scalars["String"];
  jiraEmail?: Maybe<Scalars["String"]>;
  jiraHostname?: Maybe<Scalars["String"]>;
  jiraToken?: Maybe<Scalars["String"]>;
  teamId?: Maybe<Scalars["String"]>;
  teamName?: Maybe<Scalars["String"]>;
};

export type MutationIssueImportCreateClubhouseArgs = {
  clubhouseGroupName: Scalars["String"];
  clubhouseToken: Scalars["String"];
  id?: Maybe<Scalars["String"]>;
  includeClosedIssues?: Maybe<Scalars["Boolean"]>;
  instantProcess?: Maybe<Scalars["Boolean"]>;
  teamId?: Maybe<Scalars["String"]>;
  teamName?: Maybe<Scalars["String"]>;
};

export type MutationIssueImportCreateGithubArgs = {
  githubLabels?: Maybe<Array<Scalars["String"]>>;
  githubRepoIds?: Maybe<Array<Scalars["Int"]>>;
  includeClosedIssues?: Maybe<Scalars["Boolean"]>;
  instantProcess?: Maybe<Scalars["Boolean"]>;
  teamId?: Maybe<Scalars["String"]>;
  teamName?: Maybe<Scalars["String"]>;
};

export type MutationIssueImportCreateJiraArgs = {
  id?: Maybe<Scalars["String"]>;
  includeClosedIssues?: Maybe<Scalars["Boolean"]>;
  instantProcess?: Maybe<Scalars["Boolean"]>;
  jiraEmail: Scalars["String"];
  jiraHostname: Scalars["String"];
  jiraProject: Scalars["String"];
  jiraToken: Scalars["String"];
  jql?: Maybe<Scalars["String"]>;
  teamId?: Maybe<Scalars["String"]>;
  teamName?: Maybe<Scalars["String"]>;
};

export type MutationIssueImportCreateLinearV2Args = {
  id?: Maybe<Scalars["String"]>;
  linearSourceOrganizationId: Scalars["String"];
};

export type MutationIssueImportDeleteArgs = {
  issueImportId: Scalars["String"];
};

export type MutationIssueImportProcessArgs = {
  issueImportId: Scalars["String"];
  mapping: Scalars["JSONObject"];
};

export type MutationIssueImportUpdateArgs = {
  id: Scalars["String"];
  input: IssueImportUpdateInput;
};

export type MutationIssueLabelCreateArgs = {
  input: IssueLabelCreateInput;
  replaceTeamLabels?: Maybe<Scalars["Boolean"]>;
};

export type MutationIssueLabelDeleteArgs = {
  id: Scalars["String"];
};

export type MutationIssueLabelMoveToTeamLabelsArgs = {
  input: IssueLabelMoveToTeamLabelsInput;
};

export type MutationIssueLabelUpdateArgs = {
  id: Scalars["String"];
  input: IssueLabelUpdateInput;
  replaceTeamLabels?: Maybe<Scalars["Boolean"]>;
};

export type MutationIssueLabelsMergeArgs = {
  input: LabelsMergeInput;
};

export type MutationIssueRelationCreateArgs = {
  input: IssueRelationCreateInput;
  overrideCreatedAt?: Maybe<Scalars["DateTime"]>;
};

export type MutationIssueRelationDeleteArgs = {
  id: Scalars["String"];
};

export type MutationIssueRelationUpdateArgs = {
  id: Scalars["String"];
  input: IssueRelationUpdateInput;
};

export type MutationIssueReminderArgs = {
  id: Scalars["String"];
  reminderAt: Scalars["DateTime"];
};

export type MutationIssueRemoveLabelArgs = {
  id: Scalars["String"];
  labelId: Scalars["String"];
};

export type MutationIssueSubscribeArgs = {
  id: Scalars["String"];
  userId?: Maybe<Scalars["String"]>;
};

export type MutationIssueUnarchiveArgs = {
  id: Scalars["String"];
};

export type MutationIssueUnsubscribeArgs = {
  id: Scalars["String"];
  userId?: Maybe<Scalars["String"]>;
};

export type MutationIssueUpdateArgs = {
  id: Scalars["String"];
  input: IssueUpdateInput;
};

export type MutationJiraIntegrationConnectArgs = {
  input: JiraConfigurationInput;
};

export type MutationJoinOrganizationFromOnboardingArgs = {
  input: JoinOrganizationInput;
};

export type MutationLeaveOrganizationArgs = {
  organizationId: Scalars["String"];
};

export type MutationLogoutArgs = {
  reason?: Maybe<Scalars["String"]>;
};

export type MutationLogoutAllSessionsArgs = {
  reason?: Maybe<Scalars["String"]>;
};

export type MutationLogoutOtherSessionsArgs = {
  reason?: Maybe<Scalars["String"]>;
};

export type MutationLogoutSessionArgs = {
  sessionId: Scalars["String"];
};

export type MutationNotificationArchiveArgs = {
  id: Scalars["String"];
};

export type MutationNotificationArchiveAllArgs = {
  input: NotificationEntityInput;
};

export type MutationNotificationCategoryChannelSubscriptionUpdateArgs = {
  category: NotificationCategory;
  channel: NotificationChannel;
  subscribe: Scalars["Boolean"];
};

export type MutationNotificationMarkReadAllArgs = {
  input: NotificationEntityInput;
  readAt: Scalars["DateTime"];
};

export type MutationNotificationMarkUnreadAllArgs = {
  input: NotificationEntityInput;
};

export type MutationNotificationSnoozeAllArgs = {
  input: NotificationEntityInput;
  snoozedUntilAt: Scalars["DateTime"];
};

export type MutationNotificationSubscriptionCreateArgs = {
  input: NotificationSubscriptionCreateInput;
};

export type MutationNotificationSubscriptionDeleteArgs = {
  id: Scalars["String"];
};

export type MutationNotificationSubscriptionUpdateArgs = {
  id: Scalars["String"];
  input: NotificationSubscriptionUpdateInput;
};

export type MutationNotificationUnarchiveArgs = {
  id: Scalars["String"];
};

export type MutationNotificationUnsnoozeAllArgs = {
  input: NotificationEntityInput;
  unsnoozedAt: Scalars["DateTime"];
};

export type MutationNotificationUpdateArgs = {
  id: Scalars["String"];
  input: NotificationUpdateInput;
};

export type MutationOrganizationDeleteArgs = {
  input: DeleteOrganizationInput;
};

export type MutationOrganizationDomainClaimArgs = {
  id: Scalars["String"];
};

export type MutationOrganizationDomainCreateArgs = {
  input: OrganizationDomainCreateInput;
  triggerEmailVerification?: Maybe<Scalars["Boolean"]>;
};

export type MutationOrganizationDomainDeleteArgs = {
  id: Scalars["String"];
};

export type MutationOrganizationDomainUpdateArgs = {
  id: Scalars["String"];
  input: OrganizationDomainUpdateInput;
};

export type MutationOrganizationDomainVerifyArgs = {
  input: OrganizationDomainVerificationInput;
};

export type MutationOrganizationInviteCreateArgs = {
  input: OrganizationInviteCreateInput;
};

export type MutationOrganizationInviteDeleteArgs = {
  id: Scalars["String"];
};

export type MutationOrganizationInviteUpdateArgs = {
  id: Scalars["String"];
  input: OrganizationInviteUpdateInput;
};

export type MutationOrganizationStartTrialForPlanArgs = {
  input: OrganizationStartTrialInput;
};

export type MutationOrganizationUpdateArgs = {
  input: OrganizationUpdateInput;
};

export type MutationPasskeyLoginFinishArgs = {
  authId: Scalars["String"];
  response: Scalars["JSONObject"];
};

export type MutationPasskeyLoginStartArgs = {
  authId: Scalars["String"];
};

export type MutationProjectAddLabelArgs = {
  id: Scalars["String"];
  labelId: Scalars["String"];
};

export type MutationProjectArchiveArgs = {
  id: Scalars["String"];
  trash?: Maybe<Scalars["Boolean"]>;
};

export type MutationProjectCreateArgs = {
  connectSlackChannel?: Maybe<Scalars["Boolean"]>;
  input: ProjectCreateInput;
};

export type MutationProjectDeleteArgs = {
  id: Scalars["String"];
};

export type MutationProjectLabelCreateArgs = {
  input: ProjectLabelCreateInput;
};

export type MutationProjectLabelDeleteArgs = {
  id: Scalars["String"];
};

export type MutationProjectLabelUpdateArgs = {
  id: Scalars["String"];
  input: ProjectLabelUpdateInput;
};

export type MutationProjectLabelsMergeArgs = {
  input: LabelsMergeInput;
};

export type MutationProjectMilestoneCreateArgs = {
  input: ProjectMilestoneCreateInput;
};

export type MutationProjectMilestoneDeleteArgs = {
  id: Scalars["String"];
};

export type MutationProjectMilestoneMoveArgs = {
  id: Scalars["String"];
  input: ProjectMilestoneMoveInput;
};

export type MutationProjectMilestoneUpdateArgs = {
  id: Scalars["String"];
  input: ProjectMilestoneUpdateInput;
};

export type MutationProjectReassignStatusArgs = {
  newProjectStatusId: Scalars["String"];
  originalProjectStatusId: Scalars["String"];
};

export type MutationProjectRelationCreateArgs = {
  input: ProjectRelationCreateInput;
};

export type MutationProjectRelationDeleteArgs = {
  id: Scalars["String"];
};

export type MutationProjectRelationUpdateArgs = {
  id: Scalars["String"];
  input: ProjectRelationUpdateInput;
};

export type MutationProjectRemoveLabelArgs = {
  id: Scalars["String"];
  labelId: Scalars["String"];
};

export type MutationProjectStatusArchiveArgs = {
  id: Scalars["String"];
};

export type MutationProjectStatusCreateArgs = {
  input: ProjectStatusCreateInput;
};

export type MutationProjectStatusUnarchiveArgs = {
  id: Scalars["String"];
};

export type MutationProjectStatusUpdateArgs = {
  id: Scalars["String"];
  input: ProjectStatusUpdateInput;
};

export type MutationProjectUnarchiveArgs = {
  id: Scalars["String"];
};

export type MutationProjectUpdateArgs = {
  id: Scalars["String"];
  input: ProjectUpdateInput;
};

export type MutationProjectUpdateArchiveArgs = {
  id: Scalars["String"];
};

export type MutationProjectUpdateCreateArgs = {
  input: ProjectUpdateCreateInput;
};

export type MutationProjectUpdateDeleteArgs = {
  id: Scalars["String"];
};

export type MutationProjectUpdateUnarchiveArgs = {
  id: Scalars["String"];
};

export type MutationProjectUpdateUpdateArgs = {
  id: Scalars["String"];
  input: ProjectUpdateUpdateInput;
};

export type MutationPushSubscriptionCreateArgs = {
  input: PushSubscriptionCreateInput;
};

export type MutationPushSubscriptionDeleteArgs = {
  id: Scalars["String"];
};

export type MutationReactionCreateArgs = {
  input: ReactionCreateInput;
};

export type MutationReactionDeleteArgs = {
  id: Scalars["String"];
};

export type MutationRefreshGoogleSheetsDataArgs = {
  id: Scalars["String"];
  type?: Maybe<Scalars["String"]>;
};

export type MutationResendOrganizationInviteArgs = {
  id: Scalars["String"];
};

export type MutationResendOrganizationInviteByEmailArgs = {
  email: Scalars["String"];
};

export type MutationRoadmapArchiveArgs = {
  id: Scalars["String"];
};

export type MutationRoadmapCreateArgs = {
  input: RoadmapCreateInput;
};

export type MutationRoadmapDeleteArgs = {
  id: Scalars["String"];
};

export type MutationRoadmapToProjectCreateArgs = {
  input: RoadmapToProjectCreateInput;
};

export type MutationRoadmapToProjectDeleteArgs = {
  id: Scalars["String"];
};

export type MutationRoadmapToProjectUpdateArgs = {
  id: Scalars["String"];
  input: RoadmapToProjectUpdateInput;
};

export type MutationRoadmapUnarchiveArgs = {
  id: Scalars["String"];
};

export type MutationRoadmapUpdateArgs = {
  id: Scalars["String"];
  input: RoadmapUpdateInput;
};

export type MutationSamlTokenUserAccountAuthArgs = {
  input: TokenUserAccountAuthInput;
};

export type MutationTeamCreateArgs = {
  copySettingsFromTeamId?: Maybe<Scalars["String"]>;
  input: TeamCreateInput;
};

export type MutationTeamCyclesDeleteArgs = {
  id: Scalars["String"];
};

export type MutationTeamDeleteArgs = {
  id: Scalars["String"];
};

export type MutationTeamKeyDeleteArgs = {
  id: Scalars["String"];
};

export type MutationTeamMembershipCreateArgs = {
  input: TeamMembershipCreateInput;
};

export type MutationTeamMembershipDeleteArgs = {
  alsoLeaveParentTeams?: Maybe<Scalars["Boolean"]>;
  id: Scalars["String"];
};

export type MutationTeamMembershipUpdateArgs = {
  id: Scalars["String"];
  input: TeamMembershipUpdateInput;
};

export type MutationTeamUnarchiveArgs = {
  id: Scalars["String"];
};

export type MutationTeamUpdateArgs = {
  id: Scalars["String"];
  input: TeamUpdateInput;
  mapping?: Maybe<InheritanceEntityMapping>;
};

export type MutationTemplateCreateArgs = {
  input: TemplateCreateInput;
};

export type MutationTemplateDeleteArgs = {
  id: Scalars["String"];
};

export type MutationTemplateUpdateArgs = {
  id: Scalars["String"];
  input: TemplateUpdateInput;
};

export type MutationTimeScheduleCreateArgs = {
  input: TimeScheduleCreateInput;
};

export type MutationTimeScheduleDeleteArgs = {
  id: Scalars["String"];
};

export type MutationTimeScheduleRefreshIntegrationScheduleArgs = {
  id: Scalars["String"];
};

export type MutationTimeScheduleUpdateArgs = {
  id: Scalars["String"];
  input: TimeScheduleUpdateInput;
};

export type MutationTimeScheduleUpsertExternalArgs = {
  externalId: Scalars["String"];
  input: TimeScheduleUpdateInput;
};

export type MutationTriageResponsibilityCreateArgs = {
  input: TriageResponsibilityCreateInput;
};

export type MutationTriageResponsibilityDeleteArgs = {
  id: Scalars["String"];
};

export type MutationTriageResponsibilityUpdateArgs = {
  id: Scalars["String"];
  input: TriageResponsibilityUpdateInput;
};

export type MutationUpdateIntegrationSlackScopesArgs = {
  code: Scalars["String"];
  integrationId: Scalars["String"];
  redirectUri: Scalars["String"];
};

export type MutationUpdateIssueSummaryArgs = {
  id: Scalars["String"];
};

export type MutationUserDemoteAdminArgs = {
  id: Scalars["String"];
};

export type MutationUserDemoteMemberArgs = {
  id: Scalars["String"];
};

export type MutationUserDiscordConnectArgs = {
  code: Scalars["String"];
  redirectUri: Scalars["String"];
};

export type MutationUserExternalUserDisconnectArgs = {
  service: Scalars["String"];
};

export type MutationUserFlagUpdateArgs = {
  flag: UserFlagType;
  operation: UserFlagUpdateOperation;
};

export type MutationUserPromoteAdminArgs = {
  id: Scalars["String"];
};

export type MutationUserPromoteMemberArgs = {
  id: Scalars["String"];
};

export type MutationUserSettingsFlagsResetArgs = {
  flags?: Maybe<Array<UserFlagType>>;
};

export type MutationUserSettingsUpdateArgs = {
  id: Scalars["String"];
  input: UserSettingsUpdateInput;
};

export type MutationUserSuspendArgs = {
  id: Scalars["String"];
};

export type MutationUserUnsuspendArgs = {
  id: Scalars["String"];
};

export type MutationUserUpdateArgs = {
  id: Scalars["String"];
  input: UserUpdateInput;
};

export type MutationViewPreferencesCreateArgs = {
  input: ViewPreferencesCreateInput;
};

export type MutationViewPreferencesDeleteArgs = {
  id: Scalars["String"];
};

export type MutationViewPreferencesUpdateArgs = {
  id: Scalars["String"];
  input: ViewPreferencesUpdateInput;
};

export type MutationWebhookCreateArgs = {
  input: WebhookCreateInput;
};

export type MutationWebhookDeleteArgs = {
  id: Scalars["String"];
};

export type MutationWebhookUpdateArgs = {
  id: Scalars["String"];
  input: WebhookUpdateInput;
};

export type MutationWorkflowStateArchiveArgs = {
  id: Scalars["String"];
};

export type MutationWorkflowStateCreateArgs = {
  input: WorkflowStateCreateInput;
};

export type MutationWorkflowStateUpdateArgs = {
  id: Scalars["String"];
  input: WorkflowStateUpdateInput;
};

/** Customer name sorting options. */
export type NameSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

export type Node = {
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
};

/** A notification sent to a user. */
export type Notification = {
  /** The user that caused the notification. */
  actor?: Maybe<User>;
  /** [Internal] Notification actor initials if avatar is not available. */
  actorAvatarColor: Scalars["String"];
  /** [Internal] Notification avatar URL. */
  actorAvatarUrl?: Maybe<Scalars["String"]>;
  /** [Internal] Notification actor initials if avatar is not available. */
  actorInitials?: Maybe<Scalars["String"]>;
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The bot that caused the notification. */
  botActor?: Maybe<ActorBot>;
  /** The category of the notification. */
  category: NotificationCategory;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /**
   * The time at when an email reminder for this notification was sent to the user. Null, if no email
   *     reminder has been sent.
   */
  emailedAt?: Maybe<Scalars["DateTime"]>;
  /** The external user that caused the notification. */
  externalUserActor?: Maybe<ExternalUser>;
  /** [Internal] Notifications with the same grouping key will be grouped together in the UI. */
  groupingKey: Scalars["String"];
  /** [Internal] Priority of the notification with the same grouping key. Higher number means higher priority. If priority is the same, notifications should be sorted by `createdAt`. */
  groupingPriority: Scalars["Float"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** [Internal] Inbox URL for the notification. */
  inboxUrl: Scalars["String"];
  /** [Internal] If notification actor was Linear. */
  isLinearActor: Scalars["Boolean"];
  /** [Internal] Issue's status type for issue notifications. */
  issueStatusType?: Maybe<Scalars["String"]>;
  /** [Internal] Project update health for new updates. */
  projectUpdateHealth?: Maybe<Scalars["String"]>;
  /** The time at when the user marked the notification as read. Null, if the the user hasn't read the notification */
  readAt?: Maybe<Scalars["DateTime"]>;
  /** The time until a notification will be snoozed. After that it will appear in the inbox again. */
  snoozedUntilAt?: Maybe<Scalars["DateTime"]>;
  /** [Internal] Notification subtitle. */
  subtitle: Scalars["String"];
  /** [Internal] Notification title. */
  title: Scalars["String"];
  /** Notification type. */
  type: Scalars["String"];
  /** The time at which a notification was unsnoozed.. */
  unsnoozedAt?: Maybe<Scalars["DateTime"]>;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** [Internal] URL to the target of the notification. */
  url: Scalars["String"];
  /** The user that received the notification. */
  user: User;
};

/** A generic payload return from entity archive mutations. */
export type NotificationArchivePayload = ArchivePayload & {
  __typename?: "NotificationArchivePayload";
  /** The archived/unarchived entity. Null if entity was deleted. */
  entity?: Maybe<Notification>;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type NotificationBatchActionPayload = {
  __typename?: "NotificationBatchActionPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** The notifications that were updated. */
  notifications: Array<Notification>;
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** The categories of notifications a user can subscribe to. */
export enum NotificationCategory {
  AppsAndIntegrations = "appsAndIntegrations",
  Assignments = "assignments",
  CommentsAndReplies = "commentsAndReplies",
  Customers = "customers",
  DocumentChanges = "documentChanges",
  Feed = "feed",
  Mentions = "mentions",
  PostsAndUpdates = "postsAndUpdates",
  Reactions = "reactions",
  Reminders = "reminders",
  Reviews = "reviews",
  StatusChanges = "statusChanges",
  Subscriptions = "subscriptions",
  System = "system",
  Triage = "triage",
}

/** A user's notification category preferences. */
export type NotificationCategoryPreferences = {
  __typename?: "NotificationCategoryPreferences";
  /** The preferences for notifications about apps and integrations. */
  appsAndIntegrations: NotificationChannelPreferences;
  /** The preferences for notifications about assignments. */
  assignments: NotificationChannelPreferences;
  /** The preferences for notifications about comments and replies. */
  commentsAndReplies: NotificationChannelPreferences;
  /** The preferences for customer notifications. */
  customers: NotificationChannelPreferences;
  /** The preferences for notifications about document changes. */
  documentChanges: NotificationChannelPreferences;
  /** The preferences for feed summary notifications. */
  feed: NotificationChannelPreferences;
  /** The preferences for notifications about mentions. */
  mentions: NotificationChannelPreferences;
  /** The preferences for notifications about posts and updates. */
  postsAndUpdates: NotificationChannelPreferences;
  /** The preferences for notifications about reactions. */
  reactions: NotificationChannelPreferences;
  /** The preferences for notifications about reminders. */
  reminders: NotificationChannelPreferences;
  /** The preferences for notifications about reviews. */
  reviews: NotificationChannelPreferences;
  /** The preferences for notifications about status changes. */
  statusChanges: NotificationChannelPreferences;
  /** The preferences for notifications about subscriptions. */
  subscriptions: NotificationChannelPreferences;
  /** The preferences for system notifications. */
  system: NotificationChannelPreferences;
  /** The preferences for triage notifications. */
  triage: NotificationChannelPreferences;
};

export type NotificationCategoryPreferencesInput = {
  /** The preferences for notifications about apps and integrations. */
  appsAndIntegrations?: Maybe<PartialNotificationChannelPreferencesInput>;
  /** The preferences for notifications about assignments. */
  assignments?: Maybe<PartialNotificationChannelPreferencesInput>;
  /** The preferences for notifications about comments and replies. */
  commentsAndReplies?: Maybe<PartialNotificationChannelPreferencesInput>;
  /** The preferences for notifications about customers. */
  customers?: Maybe<PartialNotificationChannelPreferencesInput>;
  /** The preferences for notifications about document changes. */
  documentChanges?: Maybe<PartialNotificationChannelPreferencesInput>;
  /** The preferences for notifications about feed summaries. */
  feed?: Maybe<PartialNotificationChannelPreferencesInput>;
  /** The preferences for notifications about mentions. */
  mentions?: Maybe<PartialNotificationChannelPreferencesInput>;
  /** The preferences for notifications about posts and updates. */
  postsAndUpdates?: Maybe<PartialNotificationChannelPreferencesInput>;
  /** The preferences for notifications about reactions. */
  reactions?: Maybe<PartialNotificationChannelPreferencesInput>;
  /** The preferences for notifications about reminders. */
  reminders?: Maybe<PartialNotificationChannelPreferencesInput>;
  /** The preferences for notifications about reviews. */
  reviews?: Maybe<PartialNotificationChannelPreferencesInput>;
  /** The preferences for notifications about status changes. */
  statusChanges?: Maybe<PartialNotificationChannelPreferencesInput>;
  /** The preferences for notifications about subscriptions. */
  subscriptions?: Maybe<PartialNotificationChannelPreferencesInput>;
  /** The preferences for notifications about triage. */
  triage?: Maybe<PartialNotificationChannelPreferencesInput>;
};

/** The delivery channels a user can receive notifications in. */
export enum NotificationChannel {
  Desktop = "desktop",
  Email = "email",
  Mobile = "mobile",
  Slack = "slack",
}

/** A user's notification channel preferences, indicating if a channel is enabled or not */
export type NotificationChannelPreferences = {
  __typename?: "NotificationChannelPreferences";
  /** Whether notifications are currently enabled for desktop. */
  desktop: Scalars["Boolean"];
  /** Whether notifications are currently enabled for email. */
  email: Scalars["Boolean"];
  /** Whether notifications are currently enabled for mobile. */
  mobile: Scalars["Boolean"];
  /** Whether notifications are currently enabled for Slack. */
  slack: Scalars["Boolean"];
};

export type NotificationConnection = {
  __typename?: "NotificationConnection";
  edges: Array<NotificationEdge>;
  nodes: Array<Notification>;
  pageInfo: PageInfo;
};

/** A user's notification delivery preferences. */
export type NotificationDeliveryPreferences = {
  __typename?: "NotificationDeliveryPreferences";
  /** The delivery preferences for the mobile channel. */
  mobile?: Maybe<NotificationDeliveryPreferencesChannel>;
};

/** A user's notification delivery preferences. */
export type NotificationDeliveryPreferencesChannel = {
  __typename?: "NotificationDeliveryPreferencesChannel";
  /**
   * [DEPRECATED] Whether notifications are enabled for this channel. Use notificationChannelPreferences instead.
   * @deprecated This field has been replaced by notificationChannelPreferences
   */
  notificationsDisabled?: Maybe<Scalars["Boolean"]>;
  /** The schedule for notifications on this channel. */
  schedule?: Maybe<NotificationDeliveryPreferencesSchedule>;
};

export type NotificationDeliveryPreferencesChannelInput = {
  /** The schedule for notifications on this channel. */
  schedule?: Maybe<NotificationDeliveryPreferencesScheduleInput>;
};

/** A user's notification delivery schedule for a particular day. */
export type NotificationDeliveryPreferencesDay = {
  __typename?: "NotificationDeliveryPreferencesDay";
  /** The time notifications end. */
  end?: Maybe<Scalars["String"]>;
  /** The time notifications start. */
  start?: Maybe<Scalars["String"]>;
};

export type NotificationDeliveryPreferencesDayInput = {
  /** The time notifications end. */
  end?: Maybe<Scalars["String"]>;
  /** The time notifications start. */
  start?: Maybe<Scalars["String"]>;
};

export type NotificationDeliveryPreferencesInput = {
  /** The delivery preferences for the mobile channel. */
  mobile?: Maybe<NotificationDeliveryPreferencesChannelInput>;
};

/** A user's notification delivery schedule for a particular day. */
export type NotificationDeliveryPreferencesSchedule = {
  __typename?: "NotificationDeliveryPreferencesSchedule";
  /** Whether the schedule is disabled. */
  disabled?: Maybe<Scalars["Boolean"]>;
  /** Delivery preferences for Friday. */
  friday: NotificationDeliveryPreferencesDay;
  /** Delivery preferences for Monday. */
  monday: NotificationDeliveryPreferencesDay;
  /** Delivery preferences for Saturday. */
  saturday: NotificationDeliveryPreferencesDay;
  /** Delivery preferences for Sunday. */
  sunday: NotificationDeliveryPreferencesDay;
  /** Delivery preferences for Thursday. */
  thursday: NotificationDeliveryPreferencesDay;
  /** Delivery preferences for Tuesday. */
  tuesday: NotificationDeliveryPreferencesDay;
  /** Delivery preferences for Wednesday. */
  wednesday: NotificationDeliveryPreferencesDay;
};

export type NotificationDeliveryPreferencesScheduleInput = {
  /** Whether the schedule is disabled. */
  disabled?: Maybe<Scalars["Boolean"]>;
  /** Delivery preferences for Friday. */
  friday: NotificationDeliveryPreferencesDayInput;
  /** Delivery preferences for Monday. */
  monday: NotificationDeliveryPreferencesDayInput;
  /** Delivery preferences for Saturday. */
  saturday: NotificationDeliveryPreferencesDayInput;
  /** Delivery preferences for Sunday. */
  sunday: NotificationDeliveryPreferencesDayInput;
  /** Delivery preferences for Thursday. */
  thursday: NotificationDeliveryPreferencesDayInput;
  /** Delivery preferences for Tuesday. */
  tuesday: NotificationDeliveryPreferencesDayInput;
  /** Delivery preferences for Wednesday. */
  wednesday: NotificationDeliveryPreferencesDayInput;
};

export type NotificationEdge = {
  __typename?: "NotificationEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: Notification;
};

/** Describes the type and id of the entity to target for notifications. */
export type NotificationEntityInput = {
  /** The id of the notification. */
  id?: Maybe<Scalars["String"]>;
  /** The id of the initiative related to the notification. */
  initiativeId?: Maybe<Scalars["String"]>;
  /** The id of the initiative update related to the notification. */
  initiativeUpdateId?: Maybe<Scalars["String"]>;
  /** The id of the issue related to the notification. */
  issueId?: Maybe<Scalars["String"]>;
  /** The id of the OAuth client approval related to the notification. */
  oauthClientApprovalId?: Maybe<Scalars["String"]>;
  /** [DEPRECATED] The id of the project related to the notification. */
  projectId?: Maybe<Scalars["String"]>;
  /** The id of the project update related to the notification. */
  projectUpdateId?: Maybe<Scalars["String"]>;
};

/** Notification filtering options. */
export type NotificationFilter = {
  /** Compound filters, all of which need to be matched by the notification. */
  and?: Maybe<Array<NotificationFilter>>;
  /** Comparator for the archived at date. */
  archivedAt?: Maybe<DateComparator>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Compound filters, one of which need to be matched by the notification. */
  or?: Maybe<Array<NotificationFilter>>;
  /** Comparator for the notification type. */
  type?: Maybe<StringComparator>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

export type NotificationPayload = {
  __typename?: "NotificationPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** The notification that was created or updated. */
  notification: Notification;
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** Notification subscriptions for models. */
export type NotificationSubscription = {
  /** Whether the subscription is active or not. */
  active: Scalars["Boolean"];
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The type of view to which the notification subscription context is associated with. */
  contextViewType?: Maybe<ContextViewType>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The contextual custom view associated with the notification subscription. */
  customView?: Maybe<CustomView>;
  /** The customer associated with the notification subscription. */
  customer?: Maybe<Customer>;
  /** The contextual cycle view associated with the notification subscription. */
  cycle?: Maybe<Cycle>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The contextual initiative view associated with the notification subscription. */
  initiative?: Maybe<Initiative>;
  /** The contextual label view associated with the notification subscription. */
  label?: Maybe<IssueLabel>;
  /** The contextual project view associated with the notification subscription. */
  project?: Maybe<Project>;
  /** The user that subscribed to receive notifications. */
  subscriber: User;
  /** The team associated with the notification subscription. */
  team?: Maybe<Team>;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** The user view associated with the notification subscription. */
  user?: Maybe<User>;
  /** The type of user view to which the notification subscription context is associated with. */
  userContextViewType?: Maybe<UserContextViewType>;
};

export type NotificationSubscriptionConnection = {
  __typename?: "NotificationSubscriptionConnection";
  edges: Array<NotificationSubscriptionEdge>;
  nodes: Array<NotificationSubscription>;
  pageInfo: PageInfo;
};

export type NotificationSubscriptionCreateInput = {
  /** Whether the subscription is active. */
  active?: Maybe<Scalars["Boolean"]>;
  /** The type of view to which the notification subscription context is associated with. */
  contextViewType?: Maybe<ContextViewType>;
  /** The identifier of the custom view to subscribe to. */
  customViewId?: Maybe<Scalars["String"]>;
  /** The identifier of the customer to subscribe to. */
  customerId?: Maybe<Scalars["String"]>;
  /** The identifier of the cycle to subscribe to. */
  cycleId?: Maybe<Scalars["String"]>;
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The identifier of the initiative to subscribe to. */
  initiativeId?: Maybe<Scalars["String"]>;
  /** The identifier of the label to subscribe to. */
  labelId?: Maybe<Scalars["String"]>;
  /** The types of notifications of the subscription. */
  notificationSubscriptionTypes?: Maybe<Array<Scalars["String"]>>;
  /** The identifier of the project to subscribe to. */
  projectId?: Maybe<Scalars["String"]>;
  /** The identifier of the team to subscribe to. */
  teamId?: Maybe<Scalars["String"]>;
  /** The type of user view to which the notification subscription context is associated with. */
  userContextViewType?: Maybe<UserContextViewType>;
  /** The identifier of the user to subscribe to. */
  userId?: Maybe<Scalars["String"]>;
};

export type NotificationSubscriptionEdge = {
  __typename?: "NotificationSubscriptionEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: NotificationSubscription;
};

export type NotificationSubscriptionPayload = {
  __typename?: "NotificationSubscriptionPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** The notification subscription that was created or updated. */
  notificationSubscription: NotificationSubscription;
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type NotificationSubscriptionUpdateInput = {
  /** Whether the subscription is active. */
  active?: Maybe<Scalars["Boolean"]>;
  /** The types of notifications of the subscription. */
  notificationSubscriptionTypes?: Maybe<Array<Scalars["String"]>>;
};

export type NotificationUpdateInput = {
  /** The id of the project update related to the notification. */
  initiativeUpdateId?: Maybe<Scalars["String"]>;
  /** The id of the project update related to the notification. */
  projectUpdateId?: Maybe<Scalars["String"]>;
  /** The time when notification was marked as read. */
  readAt?: Maybe<Scalars["DateTime"]>;
  /** The time until a notification will be snoozed. After that it will appear in the inbox again. */
  snoozedUntilAt?: Maybe<Scalars["DateTime"]>;
};

export type NotificationWebhookPayload =
  | IssueAssignedToYouNotificationWebhookPayload
  | IssueCommentMentionNotificationWebhookPayload
  | IssueCommentReactionNotificationWebhookPayload
  | IssueEmojiReactionNotificationWebhookPayload
  | IssueMentionNotificationWebhookPayload
  | IssueNewCommentNotificationWebhookPayload
  | IssueStatusChangedNotificationWebhookPayload
  | IssueUnassignedFromYouNotificationWebhookPayload
  | OtherNotificationWebhookPayload;

export type NotionSettingsInput = {
  /** The ID of the Notion workspace being connected. */
  workspaceId: Scalars["String"];
  /** The name of the Notion workspace being connected. */
  workspaceName: Scalars["String"];
};

/** Comment filtering options. */
export type NullableCommentFilter = {
  /** Compound filters, all of which need to be matched by the comment. */
  and?: Maybe<Array<NullableCommentFilter>>;
  /** Comparator for the comment's body. */
  body?: Maybe<StringComparator>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Filters that the comment's document content must satisfy. */
  documentContent?: Maybe<NullableDocumentContentFilter>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Filters that the comment's issue must satisfy. */
  issue?: Maybe<NullableIssueFilter>;
  /** Filters that the comment's customer needs must satisfy. */
  needs?: Maybe<CustomerNeedCollectionFilter>;
  /** Filter based on the existence of the relation. */
  null?: Maybe<Scalars["Boolean"]>;
  /** Compound filters, one of which need to be matched by the comment. */
  or?: Maybe<Array<NullableCommentFilter>>;
  /** Filters that the comment parent must satisfy. */
  parent?: Maybe<NullableCommentFilter>;
  /** Filters that the comment's project update must satisfy. */
  projectUpdate?: Maybe<NullableProjectUpdateFilter>;
  /** Filters that the comment's reactions must satisfy. */
  reactions?: Maybe<ReactionCollectionFilter>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
  /** Filters that the comment's creator must satisfy. */
  user?: Maybe<UserFilter>;
};

/** Customer filtering options. */
export type NullableCustomerFilter = {
  /** Compound filters, all of which need to be matched by the customer. */
  and?: Maybe<Array<NullableCustomerFilter>>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Comparator for the customer's domains. */
  domains?: Maybe<StringArrayComparator>;
  /** Comparator for the customer's external IDs. */
  externalIds?: Maybe<StringArrayComparator>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Comparator for the customer name. */
  name?: Maybe<StringComparator>;
  /** Filters that the customer's needs must satisfy. */
  needs?: Maybe<CustomerNeedCollectionFilter>;
  /** Filter based on the existence of the relation. */
  null?: Maybe<Scalars["Boolean"]>;
  /** Compound filters, one of which need to be matched by the customer. */
  or?: Maybe<Array<NullableCustomerFilter>>;
  /** Filters that the customer owner must satisfy. */
  owner?: Maybe<NullableUserFilter>;
  /** Comparator for the customer generated revenue. */
  revenue?: Maybe<NumberComparator>;
  /** Comparator for the customer size. */
  size?: Maybe<NumberComparator>;
  /** Comparator for the customer slack channel ID. */
  slackChannelId?: Maybe<StringComparator>;
  /** Filters that the customer's status must satisfy. */
  status?: Maybe<CustomerStatusFilter>;
  /** Filters that the customer's tier must satisfy. */
  tier?: Maybe<CustomerTierFilter>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

/** Cycle filtering options. */
export type NullableCycleFilter = {
  /** Compound filters, all of which need to be matched by the cycle. */
  and?: Maybe<Array<NullableCycleFilter>>;
  /** Comparator for the cycle completed at date. */
  completedAt?: Maybe<DateComparator>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Comparator for the cycle ends at date. */
  endsAt?: Maybe<DateComparator>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Comparator for the filtering active cycle. */
  isActive?: Maybe<BooleanComparator>;
  /** Comparator for the filtering future cycles. */
  isFuture?: Maybe<BooleanComparator>;
  /** Comparator for filtering for whether the cycle is currently in cooldown. */
  isInCooldown?: Maybe<BooleanComparator>;
  /** Comparator for the filtering next cycle. */
  isNext?: Maybe<BooleanComparator>;
  /** Comparator for the filtering past cycles. */
  isPast?: Maybe<BooleanComparator>;
  /** Comparator for the filtering previous cycle. */
  isPrevious?: Maybe<BooleanComparator>;
  /** Filters that the cycles issues must satisfy. */
  issues?: Maybe<IssueCollectionFilter>;
  /** Comparator for the cycle name. */
  name?: Maybe<StringComparator>;
  /** Filter based on the existence of the relation. */
  null?: Maybe<Scalars["Boolean"]>;
  /** Comparator for the cycle number. */
  number?: Maybe<NumberComparator>;
  /** Compound filters, one of which need to be matched by the cycle. */
  or?: Maybe<Array<NullableCycleFilter>>;
  /** Comparator for the cycle start date. */
  startsAt?: Maybe<DateComparator>;
  /** Filters that the cycles team must satisfy. */
  team?: Maybe<TeamFilter>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

/** Comparator for optional dates. */
export type NullableDateComparator = {
  /** Equals constraint. */
  eq?: Maybe<Scalars["DateTimeOrDuration"]>;
  /** Greater-than constraint. Matches any values that are greater than the given value. */
  gt?: Maybe<Scalars["DateTimeOrDuration"]>;
  /** Greater-than-or-equal constraint. Matches any values that are greater than or equal to the given value. */
  gte?: Maybe<Scalars["DateTimeOrDuration"]>;
  /** In-array constraint. */
  in?: Maybe<Array<Scalars["DateTimeOrDuration"]>>;
  /** Less-than constraint. Matches any values that are less than the given value. */
  lt?: Maybe<Scalars["DateTimeOrDuration"]>;
  /** Less-than-or-equal constraint. Matches any values that are less than or equal to the given value. */
  lte?: Maybe<Scalars["DateTimeOrDuration"]>;
  /** Not-equals constraint. */
  neq?: Maybe<Scalars["DateTimeOrDuration"]>;
  /** Not-in-array constraint. */
  nin?: Maybe<Array<Scalars["DateTimeOrDuration"]>>;
  /** Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values. */
  null?: Maybe<Scalars["Boolean"]>;
};

/** Document content filtering options. */
export type NullableDocumentContentFilter = {
  /** Compound filters, all of which need to be matched by the user. */
  and?: Maybe<Array<NullableDocumentContentFilter>>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Filters that the document content document must satisfy. */
  document?: Maybe<DocumentFilter>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Filter based on the existence of the relation. */
  null?: Maybe<Scalars["Boolean"]>;
  /** Compound filters, one of which need to be matched by the user. */
  or?: Maybe<Array<NullableDocumentContentFilter>>;
  /** Filters that the document content project must satisfy. */
  project?: Maybe<ProjectFilter>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

/** Nullable comparator for optional durations. */
export type NullableDurationComparator = {
  /** Equals constraint. */
  eq?: Maybe<Scalars["Duration"]>;
  /** Greater-than constraint. Matches any values that are greater than the given value. */
  gt?: Maybe<Scalars["Duration"]>;
  /** Greater-than-or-equal constraint. Matches any values that are greater than or equal to the given value. */
  gte?: Maybe<Scalars["Duration"]>;
  /** In-array constraint. */
  in?: Maybe<Array<Scalars["Duration"]>>;
  /** Less-than constraint. Matches any values that are less than the given value. */
  lt?: Maybe<Scalars["Duration"]>;
  /** Less-than-or-equal constraint. Matches any values that are less than or equal to the given value. */
  lte?: Maybe<Scalars["Duration"]>;
  /** Not-equals constraint. */
  neq?: Maybe<Scalars["Duration"]>;
  /** Not-in-array constraint. */
  nin?: Maybe<Array<Scalars["Duration"]>>;
  /** Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values. */
  null?: Maybe<Scalars["Boolean"]>;
};

/** Issue filtering options. */
export type NullableIssueFilter = {
  /** Comparator for the issues added to cycle at date. */
  addedToCycleAt?: Maybe<NullableDateComparator>;
  /** Comparator for the period when issue was added to a cycle. */
  addedToCyclePeriod?: Maybe<CyclePeriodComparator>;
  /** [Internal] Age (created -> now) comparator, defined if the issue is still open. */
  ageTime?: Maybe<NullableDurationComparator>;
  /** Compound filters, all of which need to be matched by the issue. */
  and?: Maybe<Array<NullableIssueFilter>>;
  /** Comparator for the issues archived at date. */
  archivedAt?: Maybe<NullableDateComparator>;
  /** Filters that the issues assignee must satisfy. */
  assignee?: Maybe<NullableUserFilter>;
  /** Filters that the issues attachments must satisfy. */
  attachments?: Maybe<AttachmentCollectionFilter>;
  /** Comparator for the issues auto archived at date. */
  autoArchivedAt?: Maybe<NullableDateComparator>;
  /** Comparator for the issues auto closed at date. */
  autoClosedAt?: Maybe<NullableDateComparator>;
  /** Comparator for the issues canceled at date. */
  canceledAt?: Maybe<NullableDateComparator>;
  /** Filters that the child issues must satisfy. */
  children?: Maybe<IssueCollectionFilter>;
  /** Filters that the issues comments must satisfy. */
  comments?: Maybe<CommentCollectionFilter>;
  /** Comparator for the issues completed at date. */
  completedAt?: Maybe<NullableDateComparator>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Filters that the issues creator must satisfy. */
  creator?: Maybe<NullableUserFilter>;
  /** Count of customers */
  customerCount?: Maybe<NumberComparator>;
  /** Count of important customers */
  customerImportantCount?: Maybe<NumberComparator>;
  /** Filters that the issues cycle must satisfy. */
  cycle?: Maybe<NullableCycleFilter>;
  /** [Internal] Cycle time (started -> completed) comparator. */
  cycleTime?: Maybe<NullableDurationComparator>;
  /** Filters that the issue's delegated agent must satisfy. */
  delegate?: Maybe<NullableUserFilter>;
  /** Comparator for the issues description. */
  description?: Maybe<NullableStringComparator>;
  /** Comparator for the issues due date. */
  dueDate?: Maybe<NullableTimelessDateComparator>;
  /** Comparator for the issues estimate. */
  estimate?: Maybe<EstimateComparator>;
  /** Comparator for filtering issues which are blocked. */
  hasBlockedByRelations?: Maybe<RelationExistsComparator>;
  /** Comparator for filtering issues which are blocking. */
  hasBlockingRelations?: Maybe<RelationExistsComparator>;
  /** Comparator for filtering issues which are duplicates. */
  hasDuplicateRelations?: Maybe<RelationExistsComparator>;
  /** Comparator for filtering issues with relations. */
  hasRelatedRelations?: Maybe<RelationExistsComparator>;
  /** [Internal] Comparator for filtering issues which have suggested assignees. */
  hasSuggestedAssignees?: Maybe<RelationExistsComparator>;
  /** [Internal] Comparator for filtering issues which have suggested labels. */
  hasSuggestedLabels?: Maybe<RelationExistsComparator>;
  /** [Internal] Comparator for filtering issues which have suggested projects. */
  hasSuggestedProjects?: Maybe<RelationExistsComparator>;
  /** [Internal] Comparator for filtering issues which have suggested related issues. */
  hasSuggestedRelatedIssues?: Maybe<RelationExistsComparator>;
  /** [Internal] Comparator for filtering issues which have suggested similar issues. */
  hasSuggestedSimilarIssues?: Maybe<RelationExistsComparator>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Filters that issue labels must satisfy. */
  labels?: Maybe<IssueLabelCollectionFilter>;
  /** Filters that the last applied template must satisfy. */
  lastAppliedTemplate?: Maybe<NullableTemplateFilter>;
  /** [Internal] Lead time (created -> completed) comparator. */
  leadTime?: Maybe<NullableDurationComparator>;
  /** Filters that the issue's customer needs must satisfy. */
  needs?: Maybe<CustomerNeedCollectionFilter>;
  /** Filter based on the existence of the relation. */
  null?: Maybe<Scalars["Boolean"]>;
  /** Comparator for the issues number. */
  number?: Maybe<NumberComparator>;
  /** Compound filters, one of which need to be matched by the issue. */
  or?: Maybe<Array<NullableIssueFilter>>;
  /** Filters that the issue parent must satisfy. */
  parent?: Maybe<NullableIssueFilter>;
  /** Comparator for the issues priority. */
  priority?: Maybe<NullableNumberComparator>;
  /** Filters that the issues project must satisfy. */
  project?: Maybe<NullableProjectFilter>;
  /** Filters that the issues project milestone must satisfy. */
  projectMilestone?: Maybe<NullableProjectMilestoneFilter>;
  /** Filters that the issues reactions must satisfy. */
  reactions?: Maybe<ReactionCollectionFilter>;
  /** [ALPHA] Filters that the recurring issue template must satisfy. */
  recurringIssueTemplate?: Maybe<NullableTemplateFilter>;
  /** [Internal] Comparator for the issues content. */
  searchableContent?: Maybe<ContentComparator>;
  /** Comparator for the issues sla status. */
  slaStatus?: Maybe<SlaStatusComparator>;
  /** Filters that the issues snoozer must satisfy. */
  snoozedBy?: Maybe<NullableUserFilter>;
  /** Comparator for the issues snoozed until date. */
  snoozedUntilAt?: Maybe<NullableDateComparator>;
  /** Filters that the source must satisfy. */
  sourceMetadata?: Maybe<SourceMetadataComparator>;
  /** Comparator for the issues started at date. */
  startedAt?: Maybe<NullableDateComparator>;
  /** Filters that the issues state must satisfy. */
  state?: Maybe<WorkflowStateFilter>;
  /** Filters that issue subscribers must satisfy. */
  subscribers?: Maybe<UserCollectionFilter>;
  /** Filters that the issues team must satisfy. */
  team?: Maybe<TeamFilter>;
  /** Comparator for the issues title. */
  title?: Maybe<StringComparator>;
  /** [Internal] Triage time (entered triaged -> triaged) comparator. */
  triageTime?: Maybe<NullableDurationComparator>;
  /** Comparator for the issues triaged at date. */
  triagedAt?: Maybe<NullableDateComparator>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

/** Comparator for optional numbers. */
export type NullableNumberComparator = {
  /** Equals constraint. */
  eq?: Maybe<Scalars["Float"]>;
  /** Greater-than constraint. Matches any values that are greater than the given value. */
  gt?: Maybe<Scalars["Float"]>;
  /** Greater-than-or-equal constraint. Matches any values that are greater than or equal to the given value. */
  gte?: Maybe<Scalars["Float"]>;
  /** In-array constraint. */
  in?: Maybe<Array<Scalars["Float"]>>;
  /** Less-than constraint. Matches any values that are less than the given value. */
  lt?: Maybe<Scalars["Float"]>;
  /** Less-than-or-equal constraint. Matches any values that are less than or equal to the given value. */
  lte?: Maybe<Scalars["Float"]>;
  /** Not-equals constraint. */
  neq?: Maybe<Scalars["Float"]>;
  /** Not-in-array constraint. */
  nin?: Maybe<Array<Scalars["Float"]>>;
  /** Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values. */
  null?: Maybe<Scalars["Boolean"]>;
};

/** Project filtering options. */
export type NullableProjectFilter = {
  /** Filters that the project's team must satisfy. */
  accessibleTeams?: Maybe<TeamCollectionFilter>;
  /** [ALPHA] Comparator for the project activity type: buzzin, active, some, none */
  activityType?: Maybe<StringComparator>;
  /** Compound filters, all of which need to be matched by the project. */
  and?: Maybe<Array<NullableProjectFilter>>;
  /** Comparator for the project cancelation date. */
  canceledAt?: Maybe<NullableDateComparator>;
  /** Comparator for the project completion date. */
  completedAt?: Maybe<NullableDateComparator>;
  /** Filters that the project's completed milestones must satisfy. */
  completedProjectMilestones?: Maybe<ProjectMilestoneCollectionFilter>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Filters that the projects creator must satisfy. */
  creator?: Maybe<UserFilter>;
  /** Count of customers */
  customerCount?: Maybe<NumberComparator>;
  /** Count of important customers */
  customerImportantCount?: Maybe<NumberComparator>;
  /** Comparator for filtering projects which are blocked. */
  hasBlockedByRelations?: Maybe<RelationExistsComparator>;
  /** Comparator for filtering projects which are blocking. */
  hasBlockingRelations?: Maybe<RelationExistsComparator>;
  /** [Deprecated] Comparator for filtering projects which this is depended on by. */
  hasDependedOnByRelations?: Maybe<RelationExistsComparator>;
  /** [Deprecated]Comparator for filtering projects which this depends on. */
  hasDependsOnRelations?: Maybe<RelationExistsComparator>;
  /** Comparator for filtering projects with relations. */
  hasRelatedRelations?: Maybe<RelationExistsComparator>;
  /** Comparator for filtering projects with violated dependencies. */
  hasViolatedRelations?: Maybe<RelationExistsComparator>;
  /** Comparator for the project health: onTrack, atRisk, offTrack */
  health?: Maybe<StringComparator>;
  /** Comparator for the project health (with age): onTrack, atRisk, offTrack, outdated, noUpdate */
  healthWithAge?: Maybe<StringComparator>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Filters that the projects initiatives must satisfy. */
  initiatives?: Maybe<InitiativeCollectionFilter>;
  /** Filters that the projects issues must satisfy. */
  issues?: Maybe<IssueCollectionFilter>;
  /** Filters that project labels must satisfy. */
  labels?: Maybe<ProjectLabelCollectionFilter>;
  /** Filters that the last applied template must satisfy. */
  lastAppliedTemplate?: Maybe<NullableTemplateFilter>;
  /** Filters that the projects lead must satisfy. */
  lead?: Maybe<NullableUserFilter>;
  /** Filters that the projects members must satisfy. */
  members?: Maybe<UserCollectionFilter>;
  /** Comparator for the project name. */
  name?: Maybe<StringComparator>;
  /** Filters that the project's customer needs must satisfy. */
  needs?: Maybe<CustomerNeedCollectionFilter>;
  /** Filters that the project's next milestone must satisfy. */
  nextProjectMilestone?: Maybe<ProjectMilestoneFilter>;
  /** Filter based on the existence of the relation. */
  null?: Maybe<Scalars["Boolean"]>;
  /** Compound filters, one of which need to be matched by the project. */
  or?: Maybe<Array<NullableProjectFilter>>;
  /** Comparator for the projects priority. */
  priority?: Maybe<NullableNumberComparator>;
  /** Filters that the project's milestones must satisfy. */
  projectMilestones?: Maybe<ProjectMilestoneCollectionFilter>;
  /** Comparator for the project updates. */
  projectUpdates?: Maybe<ProjectUpdatesCollectionFilter>;
  /** Filters that the projects roadmaps must satisfy. */
  roadmaps?: Maybe<RoadmapCollectionFilter>;
  /** [Internal] Comparator for the project's content. */
  searchableContent?: Maybe<ContentComparator>;
  /** Comparator for the project slug ID. */
  slugId?: Maybe<StringComparator>;
  /** Comparator for the project start date. */
  startDate?: Maybe<NullableDateComparator>;
  /** [DEPRECATED] Comparator for the project state. */
  state?: Maybe<StringComparator>;
  /** Filters that the project's status must satisfy. */
  status?: Maybe<ProjectStatusFilter>;
  /** Comparator for the project target date. */
  targetDate?: Maybe<NullableDateComparator>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

/** Project milestone filtering options. */
export type NullableProjectMilestoneFilter = {
  /** Compound filters, all of which need to be matched by the project milestone. */
  and?: Maybe<Array<NullableProjectMilestoneFilter>>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Comparator for the project milestone name. */
  name?: Maybe<NullableStringComparator>;
  /** Filter based on the existence of the relation. */
  null?: Maybe<Scalars["Boolean"]>;
  /** Compound filters, one of which need to be matched by the project milestone. */
  or?: Maybe<Array<NullableProjectMilestoneFilter>>;
  /** Comparator for the project milestone target date. */
  targetDate?: Maybe<NullableDateComparator>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

/** Nullable project update filtering options. */
export type NullableProjectUpdateFilter = {
  /** Compound filters, all of which need to be matched by the project update. */
  and?: Maybe<Array<NullableProjectUpdateFilter>>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Filter based on the existence of the relation. */
  null?: Maybe<Scalars["Boolean"]>;
  /** Compound filters, one of which need to be matched by the project update. */
  or?: Maybe<Array<NullableProjectUpdateFilter>>;
  /** Filters that the project update project must satisfy. */
  project?: Maybe<ProjectFilter>;
  /** Filters that the project updates reactions must satisfy. */
  reactions?: Maybe<ReactionCollectionFilter>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
  /** Filters that the project update creator must satisfy. */
  user?: Maybe<UserFilter>;
};

/** Comparator for optional strings. */
export type NullableStringComparator = {
  /** Contains constraint. Matches any values that contain the given string. */
  contains?: Maybe<Scalars["String"]>;
  /** Contains case insensitive constraint. Matches any values that contain the given string case insensitive. */
  containsIgnoreCase?: Maybe<Scalars["String"]>;
  /** Contains case and accent insensitive constraint. Matches any values that contain the given string case and accent insensitive. */
  containsIgnoreCaseAndAccent?: Maybe<Scalars["String"]>;
  /** Ends with constraint. Matches any values that end with the given string. */
  endsWith?: Maybe<Scalars["String"]>;
  /** Equals constraint. */
  eq?: Maybe<Scalars["String"]>;
  /** Equals case insensitive. Matches any values that matches the given string case insensitive. */
  eqIgnoreCase?: Maybe<Scalars["String"]>;
  /** In-array constraint. */
  in?: Maybe<Array<Scalars["String"]>>;
  /** Not-equals constraint. */
  neq?: Maybe<Scalars["String"]>;
  /** Not-equals case insensitive. Matches any values that don't match the given string case insensitive. */
  neqIgnoreCase?: Maybe<Scalars["String"]>;
  /** Not-in-array constraint. */
  nin?: Maybe<Array<Scalars["String"]>>;
  /** Doesn't contain constraint. Matches any values that don't contain the given string. */
  notContains?: Maybe<Scalars["String"]>;
  /** Doesn't contain case insensitive constraint. Matches any values that don't contain the given string case insensitive. */
  notContainsIgnoreCase?: Maybe<Scalars["String"]>;
  /** Doesn't end with constraint. Matches any values that don't end with the given string. */
  notEndsWith?: Maybe<Scalars["String"]>;
  /** Doesn't start with constraint. Matches any values that don't start with the given string. */
  notStartsWith?: Maybe<Scalars["String"]>;
  /** Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values. */
  null?: Maybe<Scalars["Boolean"]>;
  /** Starts with constraint. Matches any values that start with the given string. */
  startsWith?: Maybe<Scalars["String"]>;
  /** Starts with case insensitive constraint. Matches any values that start with the given string. */
  startsWithIgnoreCase?: Maybe<Scalars["String"]>;
};

/** Team filtering options. */
export type NullableTeamFilter = {
  /** Compound filters, all of which need to be matched by the team. */
  and?: Maybe<Array<NullableTeamFilter>>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Comparator for the team description. */
  description?: Maybe<NullableStringComparator>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Filters that the teams issues must satisfy. */
  issues?: Maybe<IssueCollectionFilter>;
  /** Comparator for the team key. */
  key?: Maybe<StringComparator>;
  /** Comparator for the team name. */
  name?: Maybe<StringComparator>;
  /** Filter based on the existence of the relation. */
  null?: Maybe<Scalars["Boolean"]>;
  /** Compound filters, one of which need to be matched by the team. */
  or?: Maybe<Array<NullableTeamFilter>>;
  /** Filters that the teams parent must satisfy. */
  parent?: Maybe<NullableTeamFilter>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

/** Template filtering options. */
export type NullableTemplateFilter = {
  /** Compound filters, all of which need to be matched by the template. */
  and?: Maybe<Array<NullableTemplateFilter>>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Comparator for the template's name. */
  name?: Maybe<StringComparator>;
  /** Filter based on the existence of the relation. */
  null?: Maybe<Scalars["Boolean"]>;
  /** Compound filters, one of which need to be matched by the template. */
  or?: Maybe<Array<NullableTemplateFilter>>;
  /** Comparator for the template's type. */
  type?: Maybe<StringComparator>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

/** Comparator for optional timeless dates. */
export type NullableTimelessDateComparator = {
  /** Equals constraint. */
  eq?: Maybe<Scalars["TimelessDateOrDuration"]>;
  /** Greater-than constraint. Matches any values that are greater than the given value. */
  gt?: Maybe<Scalars["TimelessDateOrDuration"]>;
  /** Greater-than-or-equal constraint. Matches any values that are greater than or equal to the given value. */
  gte?: Maybe<Scalars["TimelessDateOrDuration"]>;
  /** In-array constraint. */
  in?: Maybe<Array<Scalars["TimelessDateOrDuration"]>>;
  /** Less-than constraint. Matches any values that are less than the given value. */
  lt?: Maybe<Scalars["TimelessDateOrDuration"]>;
  /** Less-than-or-equal constraint. Matches any values that are less than or equal to the given value. */
  lte?: Maybe<Scalars["TimelessDateOrDuration"]>;
  /** Not-equals constraint. */
  neq?: Maybe<Scalars["TimelessDateOrDuration"]>;
  /** Not-in-array constraint. */
  nin?: Maybe<Array<Scalars["TimelessDateOrDuration"]>>;
  /** Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values. */
  null?: Maybe<Scalars["Boolean"]>;
};

/** User filtering options. */
export type NullableUserFilter = {
  /** Comparator for the user's activity status. */
  active?: Maybe<BooleanComparator>;
  /** Comparator for the user's admin status. */
  admin?: Maybe<BooleanComparator>;
  /** Compound filters, all of which need to be matched by the user. */
  and?: Maybe<Array<NullableUserFilter>>;
  /** Comparator for the user's app status. */
  app?: Maybe<BooleanComparator>;
  /** Filters that the users assigned issues must satisfy. */
  assignedIssues?: Maybe<IssueCollectionFilter>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Comparator for the user's display name. */
  displayName?: Maybe<StringComparator>;
  /** Comparator for the user's email. */
  email?: Maybe<StringComparator>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Comparator for the user's invited status. */
  invited?: Maybe<BooleanComparator>;
  /** Filter based on the currently authenticated user. Set to true to filter for the authenticated user, false for any other user. */
  isMe?: Maybe<BooleanComparator>;
  /** Comparator for the user's name. */
  name?: Maybe<StringComparator>;
  /** Filter based on the existence of the relation. */
  null?: Maybe<Scalars["Boolean"]>;
  /** Compound filters, one of which need to be matched by the user. */
  or?: Maybe<Array<NullableUserFilter>>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

/** Comparator for numbers. */
export type NumberComparator = {
  /** Equals constraint. */
  eq?: Maybe<Scalars["Float"]>;
  /** Greater-than constraint. Matches any values that are greater than the given value. */
  gt?: Maybe<Scalars["Float"]>;
  /** Greater-than-or-equal constraint. Matches any values that are greater than or equal to the given value. */
  gte?: Maybe<Scalars["Float"]>;
  /** In-array constraint. */
  in?: Maybe<Array<Scalars["Float"]>>;
  /** Less-than constraint. Matches any values that are less than the given value. */
  lt?: Maybe<Scalars["Float"]>;
  /** Less-than-or-equal constraint. Matches any values that are less than or equal to the given value. */
  lte?: Maybe<Scalars["Float"]>;
  /** Not-equals constraint. */
  neq?: Maybe<Scalars["Float"]>;
  /** Not-in-array constraint. */
  nin?: Maybe<Array<Scalars["Float"]>>;
};

/** Payload for OAuth app webhook events. */
export type OAuthAppWebhookPayload = {
  __typename?: "OAuthAppWebhookPayload";
  /** The type of action that triggered the webhook. */
  action: Scalars["String"];
  /** The time the payload was created. */
  createdAt: Scalars["DateTime"];
  /** Id of the OAuth client that was revoked. */
  oauthClientId: Scalars["String"];
  /** ID of the organization for which the webhook belongs to. */
  organizationId: Scalars["String"];
  /** The type of resource. */
  type: Scalars["String"];
};

/** The different requests statuses possible for an OAuth client approval request. */
export enum OAuthClientApprovalStatus {
  Approved = "approved",
  Denied = "denied",
  Requested = "requested",
}

/** Request to install OAuth clients on organizations and the response to the request. */
export type OauthClientApproval = Node & {
  __typename?: "OauthClientApproval";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The reason the request for the OAuth client approval was denied. */
  denyReason?: Maybe<Scalars["String"]>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The uuid of the OAuth client being requested for installation. */
  oauthClientId: Scalars["String"];
  /** The reason the person wants to install this OAuth client. */
  requestReason?: Maybe<Scalars["String"]>;
  /** The person who requested installing the OAuth client. */
  requesterId: Scalars["String"];
  /** The person who responded to the request to install the OAuth client. */
  responderId?: Maybe<Scalars["String"]>;
  /** The scopes the app has requested. */
  scopes: Array<Scalars["String"]>;
  /** The status for the OAuth client approval request. */
  status: OAuthClientApprovalStatus;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

/** An oauth client approval related notification. */
export type OauthClientApprovalNotification = Entity &
  Node &
  Notification & {
    __typename?: "OauthClientApprovalNotification";
    /** The user that caused the notification. */
    actor?: Maybe<User>;
    /** [Internal] Notification actor initials if avatar is not available. */
    actorAvatarColor: Scalars["String"];
    /** [Internal] Notification avatar URL. */
    actorAvatarUrl?: Maybe<Scalars["String"]>;
    /** [Internal] Notification actor initials if avatar is not available. */
    actorInitials?: Maybe<Scalars["String"]>;
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: Maybe<Scalars["DateTime"]>;
    /** The bot that caused the notification. */
    botActor?: Maybe<ActorBot>;
    /** The category of the notification. */
    category: NotificationCategory;
    /** The time at which the entity was created. */
    createdAt: Scalars["DateTime"];
    /**
     * The time at when an email reminder for this notification was sent to the user. Null, if no email
     *     reminder has been sent.
     */
    emailedAt?: Maybe<Scalars["DateTime"]>;
    /** The external user that caused the notification. */
    externalUserActor?: Maybe<ExternalUser>;
    /** [Internal] Notifications with the same grouping key will be grouped together in the UI. */
    groupingKey: Scalars["String"];
    /** [Internal] Priority of the notification with the same grouping key. Higher number means higher priority. If priority is the same, notifications should be sorted by `createdAt`. */
    groupingPriority: Scalars["Float"];
    /** The unique identifier of the entity. */
    id: Scalars["ID"];
    /** [Internal] Inbox URL for the notification. */
    inboxUrl: Scalars["String"];
    /** [Internal] If notification actor was Linear. */
    isLinearActor: Scalars["Boolean"];
    /** [Internal] Issue's status type for issue notifications. */
    issueStatusType?: Maybe<Scalars["String"]>;
    /** The OAuth client approval request related to the notification. */
    oauthClientApproval: OauthClientApproval;
    /** Related OAuth client approval request ID. */
    oauthClientApprovalId: Scalars["String"];
    /** [Internal] Project update health for new updates. */
    projectUpdateHealth?: Maybe<Scalars["String"]>;
    /** The time at when the user marked the notification as read. Null, if the the user hasn't read the notification */
    readAt?: Maybe<Scalars["DateTime"]>;
    /** The time until a notification will be snoozed. After that it will appear in the inbox again. */
    snoozedUntilAt?: Maybe<Scalars["DateTime"]>;
    /** [Internal] Notification subtitle. */
    subtitle: Scalars["String"];
    /** [Internal] Notification title. */
    title: Scalars["String"];
    /** Notification type. */
    type: Scalars["String"];
    /** The time at which a notification was unsnoozed.. */
    unsnoozedAt?: Maybe<Scalars["DateTime"]>;
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars["DateTime"];
    /** [Internal] URL to the target of the notification. */
    url: Scalars["String"];
    /** The user that received the notification. */
    user: User;
  };

/** Certain properties of an OAuth client. */
export type OauthClientChildWebhookPayload = {
  __typename?: "OauthClientChildWebhookPayload";
  /** The ID of the OAuth client. */
  id: Scalars["String"];
  /** The name of the OAuth client. */
  name: Scalars["String"];
};

export type OnboardingCustomerSurvey = {
  companyRole?: Maybe<Scalars["String"]>;
  companySize?: Maybe<Scalars["String"]>;
};

export type OpsgenieInput = {
  /** The date when the Opsgenie API failed with an unauthorized error. */
  apiFailedWithUnauthorizedErrorAt?: Maybe<Scalars["DateTime"]>;
};

/** An organization. Organizations are root-level objects that contain user accounts and teams. */
export type Organization = Node & {
  __typename?: "Organization";
  /** [INTERNAL] Whether the organization has enabled the AI add-on. */
  aiAddonEnabled: Scalars["Boolean"];
  /** Whether member users are allowed to send invites. */
  allowMembersToInvite?: Maybe<Scalars["Boolean"]>;
  /** Allowed authentication providers, empty array means all are allowed. */
  allowedAuthServices: Array<Scalars["String"]>;
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** Number of issues in the organization. */
  createdIssueCount: Scalars["Int"];
  /** Number of customers in the organization. */
  customerCount: Scalars["Int"];
  /** Configuration settings for the Customers feature. */
  customersConfiguration: Scalars["JSONObject"];
  /** Whether the organization is using Customers. */
  customersEnabled: Scalars["Boolean"];
  /** Default schedule for how often feed summaries are generated. */
  defaultFeedSummarySchedule?: Maybe<FeedSummarySchedule>;
  /** The time at which deletion of the organization was requested. */
  deletionRequestedAt?: Maybe<Scalars["DateTime"]>;
  /** [Internal] Facets associated with the organization. */
  facets: Array<Facet>;
  /** Whether the organization has enabled the feed feature. */
  feedEnabled: Scalars["Boolean"];
  /** The month at which the fiscal year starts. Defaults to January (0). */
  fiscalYearStartMonth: Scalars["Float"];
  /** How git branches are formatted. If null, default formatting will be used. */
  gitBranchFormat?: Maybe<Scalars["String"]>;
  /** Whether the Git integration linkback messages should be sent to private repositories. */
  gitLinkbackMessagesEnabled: Scalars["Boolean"];
  /** Whether the Git integration linkback messages should be sent to public repositories. */
  gitPublicLinkbackMessagesEnabled: Scalars["Boolean"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The n-weekly frequency at which to prompt for initiative updates. When not set, reminders are off. */
  initiativeUpdateReminderFrequencyInWeeks?: Maybe<Scalars["Float"]>;
  /** The day at which to prompt for initiative updates. */
  initiativeUpdateRemindersDay: Day;
  /** The hour at which to prompt for initiative updates. */
  initiativeUpdateRemindersHour: Scalars["Float"];
  /** Integrations associated with the organization. */
  integrations: IntegrationConnection;
  /** IP restriction configurations. */
  ipRestrictions?: Maybe<Array<OrganizationIpRestriction>>;
  /** Labels associated with the organization. */
  labels: IssueLabelConnection;
  /** The organization's logo URL. */
  logoUrl?: Maybe<Scalars["String"]>;
  /** The organization's name. */
  name: Scalars["String"];
  /** Rolling 30-day total upload volume for the organization, in megabytes. */
  periodUploadVolume: Scalars["Float"];
  /** Previously used URL keys for the organization (last 3 are kept and redirected). */
  previousUrlKeys: Array<Scalars["String"]>;
  /** Project labels associated with the organization. */
  projectLabels: ProjectLabelConnection;
  /** The organization's project statuses. */
  projectStatuses: Array<ProjectStatus>;
  /** The n-weekly frequency at which to prompt for project updates. When not set, reminders are off. */
  projectUpdateReminderFrequencyInWeeks?: Maybe<Scalars["Float"]>;
  /** The day at which to prompt for project updates. */
  projectUpdateRemindersDay: Day;
  /** The hour at which to prompt for project updates. */
  projectUpdateRemindersHour: Scalars["Float"];
  /**
   * [DEPRECATED] The frequency at which to prompt for project updates.
   * @deprecated Use organization.projectUpdatesReminderFrequencyInWeeks instead
   */
  projectUpdatesReminderFrequency: ProjectUpdateReminderFrequency;
  /** The feature release channel the organization belongs to. */
  releaseChannel: ReleaseChannel;
  /** Whether workspace label creation, update, and deletion is restricted to admins. */
  restrictLabelManagementToAdmins?: Maybe<Scalars["Boolean"]>;
  /** Whether team creation is restricted to admins. */
  restrictTeamCreationToAdmins?: Maybe<Scalars["Boolean"]>;
  /** Whether the organization is using a roadmap. */
  roadmapEnabled: Scalars["Boolean"];
  /** Whether SAML authentication is enabled for organization. */
  samlEnabled: Scalars["Boolean"];
  /** [INTERNAL] SAML settings. */
  samlSettings?: Maybe<Scalars["JSONObject"]>;
  /** Whether SCIM provisioning is enabled for organization. */
  scimEnabled: Scalars["Boolean"];
  /** [INTERNAL] SCIM settings. */
  scimSettings?: Maybe<Scalars["JSONObject"]>;
  /**
   * [DEPRECATED] Which day count to use for SLA calculations.
   * @deprecated No longer in use
   */
  slaDayCount: SLADayCountType;
  /** The organization's subscription to a paid plan. */
  subscription?: Maybe<PaidSubscription>;
  /** Teams associated with the organization. */
  teams: TeamConnection;
  /** Templates associated with the organization. */
  templates: TemplateConnection;
  /** [ALPHA] Theme settings for the organization. */
  themeSettings?: Maybe<Scalars["JSONObject"]>;
  /** The time at which the trial will end. */
  trialEndsAt?: Maybe<Scalars["DateTime"]>;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** The organization's unique URL key. */
  urlKey: Scalars["String"];
  /** Number of active users in the organization. */
  userCount: Scalars["Int"];
  /** Users associated with the organization. */
  users: UserConnection;
  /** [Internal] The list of working days. Sunday is 0, Monday is 1, etc. */
  workingDays: Array<Scalars["Float"]>;
};

/** An organization. Organizations are root-level objects that contain user accounts and teams. */
export type OrganizationIntegrationsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** An organization. Organizations are root-level objects that contain user accounts and teams. */
export type OrganizationLabelsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueLabelFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** An organization. Organizations are root-level objects that contain user accounts and teams. */
export type OrganizationProjectLabelsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<ProjectLabelFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** An organization. Organizations are root-level objects that contain user accounts and teams. */
export type OrganizationTeamsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<TeamFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** An organization. Organizations are root-level objects that contain user accounts and teams. */
export type OrganizationTemplatesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<NullableTemplateFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** An organization. Organizations are root-level objects that contain user accounts and teams. */
export type OrganizationUsersArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  includeDisabled?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type OrganizationAcceptedOrExpiredInviteDetailsPayload = {
  __typename?: "OrganizationAcceptedOrExpiredInviteDetailsPayload";
  /** The status of the invite. */
  status: OrganizationInviteStatus;
};

export type OrganizationCancelDeletePayload = {
  __typename?: "OrganizationCancelDeletePayload";
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type OrganizationDeletePayload = {
  __typename?: "OrganizationDeletePayload";
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** Defines the use of a domain by an organization. */
export type OrganizationDomain = Node & {
  __typename?: "OrganizationDomain";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** What type of auth is the domain used for. */
  authType: OrganizationDomainAuthType;
  /** Whether the domains was claimed by the organization through DNS verification. */
  claimed?: Maybe<Scalars["Boolean"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The user who added the domain. */
  creator?: Maybe<User>;
  /** Prevent users with this domain to create new workspaces. */
  disableOrganizationCreation?: Maybe<Scalars["Boolean"]>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The identity provider the domain belongs to. */
  identityProvider?: Maybe<IdentityProvider>;
  /** Domain name. */
  name: Scalars["String"];
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** E-mail used to verify this domain. */
  verificationEmail?: Maybe<Scalars["String"]>;
  /** Is this domain verified. */
  verified: Scalars["Boolean"];
};

/** What type of auth is the domain used for. */
export enum OrganizationDomainAuthType {
  General = "general",
  Saml = "saml",
}

/** [INTERNAL] Domain claim request response. */
export type OrganizationDomainClaimPayload = {
  __typename?: "OrganizationDomainClaimPayload";
  /** String to put into DNS for verification. */
  verificationString: Scalars["String"];
};

export type OrganizationDomainCreateInput = {
  /** The authentication type this domain is for. */
  authType?: Maybe<Scalars["String"]>;
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The identity provider to which to add the domain. */
  identityProviderId?: Maybe<Scalars["String"]>;
  /** The domain name to add. */
  name: Scalars["String"];
  /** The email address to which to send the verification code. */
  verificationEmail?: Maybe<Scalars["String"]>;
};

/** [INTERNAL] Organization domain operation response. */
export type OrganizationDomainPayload = {
  __typename?: "OrganizationDomainPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** The organization domain that was created or updated. */
  organizationDomain: OrganizationDomain;
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** [INTERNAL] Organization domain operation response. */
export type OrganizationDomainSimplePayload = {
  __typename?: "OrganizationDomainSimplePayload";
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type OrganizationDomainUpdateInput = {
  /** Prevent users with this domain to create new workspaces. Only allowed to set on claimed domains! */
  disableOrganizationCreation?: Maybe<Scalars["Boolean"]>;
};

export type OrganizationDomainVerificationInput = {
  /** The identifier in UUID v4 format of the domain being verified. */
  organizationDomainId: Scalars["String"];
  /** The verification code sent via email. */
  verificationCode: Scalars["String"];
};

export type OrganizationExistsPayload = {
  __typename?: "OrganizationExistsPayload";
  /** Whether the organization exists. */
  exists: Scalars["Boolean"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** An invitation to the organization that has been sent via email. */
export type OrganizationInvite = Node & {
  __typename?: "OrganizationInvite";
  /** The time at which the invite was accepted. Null, if the invite hasn't been accepted. */
  acceptedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The invitees email address. */
  email: Scalars["String"];
  /** The time at which the invite will be expiring. Null, if the invite shouldn't expire. */
  expiresAt?: Maybe<Scalars["DateTime"]>;
  /** The invite was sent to external address. */
  external: Scalars["Boolean"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The user who has accepted the invite. Null, if the invite hasn't been accepted. */
  invitee?: Maybe<User>;
  /** The user who created the invitation. */
  inviter: User;
  /** Extra metadata associated with the organization invite. */
  metadata?: Maybe<Scalars["JSONObject"]>;
  /** The organization that the invite is associated with. */
  organization: Organization;
  /** The user role that the invitee will receive upon accepting the invite. */
  role: UserRoleType;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

export type OrganizationInviteConnection = {
  __typename?: "OrganizationInviteConnection";
  edges: Array<OrganizationInviteEdge>;
  nodes: Array<OrganizationInvite>;
  pageInfo: PageInfo;
};

export type OrganizationInviteCreateInput = {
  /** The email of the invitee. */
  email: Scalars["String"];
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** [INTERNAL] Optional metadata about the invite. */
  metadata?: Maybe<Scalars["JSONObject"]>;
  /** What user role the invite should grant. */
  role?: Maybe<UserRoleType>;
  /** The teams that the user has been invited to. */
  teamIds?: Maybe<Array<Scalars["String"]>>;
};

export type OrganizationInviteDetailsPayload =
  | OrganizationAcceptedOrExpiredInviteDetailsPayload
  | OrganizationInviteFullDetailsPayload;

export type OrganizationInviteEdge = {
  __typename?: "OrganizationInviteEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: OrganizationInvite;
};

export type OrganizationInviteFullDetailsPayload = {
  __typename?: "OrganizationInviteFullDetailsPayload";
  /** Whether the invite has already been accepted. */
  accepted: Scalars["Boolean"];
  /** Allowed authentication providers, empty array means all are allowed. */
  allowedAuthServices: Array<Scalars["String"]>;
  /** When the invite was created. */
  createdAt: Scalars["DateTime"];
  /** The email of the invitee. */
  email: Scalars["String"];
  /** Whether the invite has expired. */
  expired: Scalars["Boolean"];
  /** The name of the inviter. */
  inviter: Scalars["String"];
  /** ID of the workspace the invite is for. */
  organizationId: Scalars["String"];
  /** URL of the workspace logo the invite is for. */
  organizationLogoUrl?: Maybe<Scalars["String"]>;
  /** Name of the workspace the invite is for. */
  organizationName: Scalars["String"];
  /** What user role the invite should grant. */
  role: UserRoleType;
  /** The status of the invite. */
  status: OrganizationInviteStatus;
};

export type OrganizationInvitePayload = {
  __typename?: "OrganizationInvitePayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** The organization invite that was created or updated. */
  organizationInvite: OrganizationInvite;
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** The different statuses possible for an organization invite. */
export enum OrganizationInviteStatus {
  Accepted = "accepted",
  Expired = "expired",
  Pending = "pending",
}

export type OrganizationInviteUpdateInput = {
  /** The teams that the user has been invited to. */
  teamIds: Array<Scalars["String"]>;
};

export type OrganizationIpRestriction = {
  __typename?: "OrganizationIpRestriction";
  /** Optional restriction description. */
  description?: Maybe<Scalars["String"]>;
  /** Whether the restriction is enabled. */
  enabled: Scalars["Boolean"];
  /** IP range in CIDR format. */
  range: Scalars["String"];
  /** Restriction type. */
  type: Scalars["String"];
};

/** [INTERNAL] Organization IP restriction configuration. */
export type OrganizationIpRestrictionInput = {
  /** Optional restriction description. */
  description?: Maybe<Scalars["String"]>;
  /** Whether the restriction is enabled. */
  enabled: Scalars["Boolean"];
  /** IP range in CIDR format. */
  range: Scalars["String"];
  /** Restriction type. */
  type: Scalars["String"];
};

export type OrganizationMeta = {
  __typename?: "OrganizationMeta";
  /** Allowed authentication providers, empty array means all are allowed. */
  allowedAuthServices: Array<Scalars["String"]>;
  /** The region the organization is hosted in. */
  region: Scalars["String"];
};

export type OrganizationPayload = {
  __typename?: "OrganizationPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** The organization that was created or updated. */
  organization?: Maybe<Organization>;
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type OrganizationStartTrialInput = {
  /** The plan type to trial. */
  planType: Scalars["String"];
};

export type OrganizationStartTrialPayload = {
  __typename?: "OrganizationStartTrialPayload";
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type OrganizationUpdateInput = {
  /** [INTERNAL] Whether the organization has enabled the AI add-on. */
  aiAddonEnabled?: Maybe<Scalars["Boolean"]>;
  /** [INTERNAL] Whether the organization has opted in to AI telemetry. */
  aiTelemetryEnabled?: Maybe<Scalars["Boolean"]>;
  /** Whether member users are allowed to send invites. */
  allowMembersToInvite?: Maybe<Scalars["Boolean"]>;
  /** List of services that are allowed to be used for login. */
  allowedAuthServices?: Maybe<Array<Scalars["String"]>>;
  /** [INTERNAL] Configuration settings for the Customers feature. */
  customersConfiguration?: Maybe<Scalars["JSONObject"]>;
  /** [INTERNAL] Whether the organization is using customers. */
  customersEnabled?: Maybe<Scalars["Boolean"]>;
  /** Default schedule for how often feed summaries are generated. */
  defaultFeedSummarySchedule?: Maybe<FeedSummarySchedule>;
  /** Whether the organization has enabled the feed feature. */
  feedEnabled?: Maybe<Scalars["Boolean"]>;
  /** The month at which the fiscal year starts. */
  fiscalYearStartMonth?: Maybe<Scalars["Float"]>;
  /** How git branches are formatted. If null, default formatting will be used. */
  gitBranchFormat?: Maybe<Scalars["String"]>;
  /** Whether the Git integration linkback messages should be sent for private repositories. */
  gitLinkbackMessagesEnabled?: Maybe<Scalars["Boolean"]>;
  /** Whether the Git integration linkback messages should be sent for public repositories. */
  gitPublicLinkbackMessagesEnabled?: Maybe<Scalars["Boolean"]>;
  /** [ALPHA] The n-weekly frequency at which to prompt for initiative updates. */
  initiativeUpdateReminderFrequencyInWeeks?: Maybe<Scalars["Float"]>;
  /** [ALPHA] The day at which initiative updates are sent. */
  initiativeUpdateRemindersDay?: Maybe<Day>;
  /** [ALPHA] The hour at which initiative updates are sent. */
  initiativeUpdateRemindersHour?: Maybe<Scalars["Float"]>;
  /** IP restriction configurations controlling allowed access the workspace. */
  ipRestrictions?: Maybe<Array<OrganizationIpRestrictionInput>>;
  /** The logo of the organization. */
  logoUrl?: Maybe<Scalars["String"]>;
  /** The name of the organization. */
  name?: Maybe<Scalars["String"]>;
  /** Whether the organization has opted for having to approve all OAuth applications for install. */
  oauthAppReview?: Maybe<Scalars["Boolean"]>;
  /** [INTERNAL] Whether the organization has enabled the member API keys. */
  personalApiKeysEnabled?: Maybe<Scalars["Boolean"]>;
  /** The n-weekly frequency at which to prompt for project updates. */
  projectUpdateReminderFrequencyInWeeks?: Maybe<Scalars["Float"]>;
  /** The day at which project updates are sent. */
  projectUpdateRemindersDay?: Maybe<Day>;
  /** The hour at which project updates are sent. */
  projectUpdateRemindersHour?: Maybe<Scalars["Float"]>;
  /** Whether the organization has opted for reduced customer support attachment information. */
  reducedPersonalInformation?: Maybe<Scalars["Boolean"]>;
  /** Whether agent invocation is restricted to full workspace members. */
  restrictAgentInvocationToMembers?: Maybe<Scalars["Boolean"]>;
  /** Whether label creation is restricted to admins. */
  restrictLabelManagementToAdmins?: Maybe<Scalars["Boolean"]>;
  /** Whether team creation is restricted to admins. */
  restrictTeamCreationToAdmins?: Maybe<Scalars["Boolean"]>;
  /** Whether the organization is using roadmap. */
  roadmapEnabled?: Maybe<Scalars["Boolean"]>;
  /** Internal. Whether SLAs have been enabled for the organization. */
  slaEnabled?: Maybe<Scalars["Boolean"]>;
  /** [ALPHA] Theme settings for the organization. */
  themeSettings?: Maybe<Scalars["JSONObject"]>;
  /** The URL key of the organization. */
  urlKey?: Maybe<Scalars["String"]>;
  /** [Internal] The list of working days. Sunday is 0, Monday is 1, etc. */
  workingDays?: Maybe<Array<Scalars["Float"]>>;
};

/** A generic type of notification. */
export enum OtherNotificationType {
  CustomerAddedAsOwner = "customerAddedAsOwner",
  CustomerNeedCreated = "customerNeedCreated",
  CustomerNeedMarkedAsImportant = "customerNeedMarkedAsImportant",
  CustomerNeedResolved = "customerNeedResolved",
  DocumentCommentMention = "documentCommentMention",
  DocumentCommentReaction = "documentCommentReaction",
  DocumentContentChange = "documentContentChange",
  DocumentDeleted = "documentDeleted",
  DocumentMention = "documentMention",
  DocumentMoved = "documentMoved",
  DocumentNewComment = "documentNewComment",
  DocumentReminder = "documentReminder",
  DocumentRestored = "documentRestored",
  DocumentSubscribed = "documentSubscribed",
  DocumentThreadResolved = "documentThreadResolved",
  DocumentUnsubscribed = "documentUnsubscribed",
  FeedSummaryGenerated = "feedSummaryGenerated",
  InitiativeAddedAsOwner = "initiativeAddedAsOwner",
  InitiativeCommentMention = "initiativeCommentMention",
  InitiativeCommentReaction = "initiativeCommentReaction",
  InitiativeDescriptionContentChange = "initiativeDescriptionContentChange",
  InitiativeMention = "initiativeMention",
  InitiativeNewComment = "initiativeNewComment",
  InitiativeReminder = "initiativeReminder",
  InitiativeThreadResolved = "initiativeThreadResolved",
  InitiativeUpdateCommentMention = "initiativeUpdateCommentMention",
  InitiativeUpdateCommentReaction = "initiativeUpdateCommentReaction",
  InitiativeUpdateCreated = "initiativeUpdateCreated",
  InitiativeUpdateMention = "initiativeUpdateMention",
  InitiativeUpdateNewComment = "initiativeUpdateNewComment",
  InitiativeUpdatePrompt = "initiativeUpdatePrompt",
  InitiativeUpdateReaction = "initiativeUpdateReaction",
  IssueAddedToTriage = "issueAddedToTriage",
  IssueAddedToView = "issueAddedToView",
  IssueBlocking = "issueBlocking",
  IssueCreated = "issueCreated",
  IssueDue = "issueDue",
  IssuePriorityUrgent = "issuePriorityUrgent",
  IssueReminder = "issueReminder",
  IssueReopened = "issueReopened",
  IssueSlaBreached = "issueSlaBreached",
  IssueSlaHighRisk = "issueSlaHighRisk",
  IssueStatusChangedAll = "issueStatusChangedAll",
  IssueSubscribed = "issueSubscribed",
  IssueThreadResolved = "issueThreadResolved",
  IssueUnblocked = "issueUnblocked",
  IssueUnsubscribed = "issueUnsubscribed",
  OauthClientApprovalCreated = "oauthClientApprovalCreated",
  ProjectAddedAsLead = "projectAddedAsLead",
  ProjectAddedAsMember = "projectAddedAsMember",
  ProjectCommentMention = "projectCommentMention",
  ProjectCommentReaction = "projectCommentReaction",
  ProjectDescriptionContentChange = "projectDescriptionContentChange",
  ProjectMention = "projectMention",
  ProjectMilestoneCommentMention = "projectMilestoneCommentMention",
  ProjectMilestoneCommentReaction = "projectMilestoneCommentReaction",
  ProjectMilestoneDescriptionContentChange = "projectMilestoneDescriptionContentChange",
  ProjectMilestoneMention = "projectMilestoneMention",
  ProjectMilestoneNewComment = "projectMilestoneNewComment",
  ProjectMilestoneThreadResolved = "projectMilestoneThreadResolved",
  ProjectNewComment = "projectNewComment",
  ProjectReminder = "projectReminder",
  ProjectThreadResolved = "projectThreadResolved",
  ProjectUpdateCommentMention = "projectUpdateCommentMention",
  ProjectUpdateCommentReaction = "projectUpdateCommentReaction",
  ProjectUpdateCreated = "projectUpdateCreated",
  ProjectUpdateMention = "projectUpdateMention",
  ProjectUpdateNewComment = "projectUpdateNewComment",
  ProjectUpdatePrompt = "projectUpdatePrompt",
  ProjectUpdateReaction = "projectUpdateReaction",
  PullRequestApproved = "pullRequestApproved",
  PullRequestChangesRequested = "pullRequestChangesRequested",
  PullRequestChecksFailed = "pullRequestChecksFailed",
  PullRequestCommentMention = "pullRequestCommentMention",
  PullRequestCommented = "pullRequestCommented",
  PullRequestMention = "pullRequestMention",
  PullRequestRemovedFromMergeQueue = "pullRequestRemovedFromMergeQueue",
  PullRequestReviewRequested = "pullRequestReviewRequested",
  PullRequestReviewRerequested = "pullRequestReviewRerequested",
  System = "system",
  TeamUpdateCommentMention = "teamUpdateCommentMention",
  TeamUpdateCommentReaction = "teamUpdateCommentReaction",
  TeamUpdateCreated = "teamUpdateCreated",
  TeamUpdateMention = "teamUpdateMention",
  TeamUpdateNewComment = "teamUpdateNewComment",
  TeamUpdateReaction = "teamUpdateReaction",
  TriageResponsibilityIssueAddedToTriage = "triageResponsibilityIssueAddedToTriage",
}

/** Generic notification payload. */
export type OtherNotificationWebhookPayload = {
  __typename?: "OtherNotificationWebhookPayload";
  /** The actor who caused the notification. */
  actor?: Maybe<UserChildWebhookPayload>;
  /** The ID of the actor who caused the notification. */
  actorId?: Maybe<Scalars["String"]>;
  /** The time at which the entity was archived. */
  archivedAt?: Maybe<Scalars["String"]>;
  /** The comment this notification belongs to. */
  comment?: Maybe<CommentChildWebhookPayload>;
  /** The ID of the comment this notification belongs to. */
  commentId?: Maybe<Scalars["String"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["String"];
  /** The document this notification belongs to. */
  document?: Maybe<DocumentChildWebhookPayload>;
  /** The ID of the document this notification belongs to. */
  documentId?: Maybe<Scalars["String"]>;
  /** The ID of the external user who caused the notification. */
  externalUserActorId?: Maybe<Scalars["String"]>;
  /** The ID of the entity. */
  id: Scalars["String"];
  /** The issue this notification belongs to. */
  issue?: Maybe<IssueWithDescriptionChildWebhookPayload>;
  /** The ID of the issue this notification belongs to. */
  issueId?: Maybe<Scalars["String"]>;
  /** The parent comment this notification belongs to. */
  parentComment?: Maybe<CommentChildWebhookPayload>;
  /** The ID of the parent comment this notification belongs to. */
  parentCommentId?: Maybe<Scalars["String"]>;
  /** The project this notification belongs to. */
  project?: Maybe<ProjectChildWebhookPayload>;
  /** The ID of the project this notification belongs to. */
  projectId?: Maybe<Scalars["String"]>;
  /** The project update this notification belongs to. */
  projectUpdate?: Maybe<ProjectUpdateChildWebhookPayload>;
  /** The ID of the project update this notification belongs to. */
  projectUpdateId?: Maybe<Scalars["String"]>;
  /** The emoji of the reaction this notification is for. */
  reactionEmoji?: Maybe<Scalars["String"]>;
  /** The type of the notification. */
  type: OtherNotificationType;
  /** The time at which the entity was updated. */
  updatedAt: Scalars["String"];
  /** The ID of the user who received the notification. */
  userId: Scalars["String"];
};

/** Customer owner sorting options. */
export type OwnerSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

export type PageInfo = {
  __typename?: "PageInfo";
  /** Cursor representing the last result in the paginated results. */
  endCursor?: Maybe<Scalars["String"]>;
  /** Indicates if there are more results when paginating forward. */
  hasNextPage: Scalars["Boolean"];
  /** Indicates if there are more results when paginating backward. */
  hasPreviousPage: Scalars["Boolean"];
  /** Cursor representing the first result in the paginated results. */
  startCursor?: Maybe<Scalars["String"]>;
};

export type PagerDutyInput = {
  /** The date when the PagerDuty API failed with an unauthorized error. */
  apiFailedWithUnauthorizedErrorAt?: Maybe<Scalars["DateTime"]>;
};

/** How to treat NULL values, whether they should appear first or last */
export enum PaginationNulls {
  First = "first",
  Last = "last",
}

/** By which field should the pagination order by */
export enum PaginationOrderBy {
  CreatedAt = "createdAt",
  UpdatedAt = "updatedAt",
}

/** Whether to sort in ascending or descending order */
export enum PaginationSortOrder {
  Ascending = "Ascending",
  Descending = "Descending",
}

/** The paid subscription of an organization. */
export type PaidSubscription = Node & {
  __typename?: "PaidSubscription";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The date the subscription is scheduled to be canceled, if any. */
  cancelAt?: Maybe<Scalars["DateTime"]>;
  /** The date the subscription was canceled, if any. */
  canceledAt?: Maybe<Scalars["DateTime"]>;
  /** The collection method for this subscription, either automatically charged or invoiced. */
  collectionMethod: Scalars["String"];
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The creator of the subscription. */
  creator?: Maybe<User>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The date the subscription will be billed next. */
  nextBillingAt?: Maybe<Scalars["DateTime"]>;
  /** The organization that the subscription is associated with. */
  organization: Organization;
  /** The subscription type of a pending change. Null if no change pending. */
  pendingChangeType?: Maybe<Scalars["String"]>;
  /** The number of seats in the subscription. */
  seats: Scalars["Float"];
  /** The maximum number of seats that will be billed in the subscription. */
  seatsMaximum?: Maybe<Scalars["Float"]>;
  /** The minimum number of seats that will be billed in the subscription. */
  seatsMinimum?: Maybe<Scalars["Float"]>;
  /** The subscription type. */
  type: Scalars["String"];
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

export type PartialNotificationChannelPreferencesInput = {
  /** Whether notifications are currently enabled for desktop. */
  desktop?: Maybe<Scalars["Boolean"]>;
  /** Whether notifications are currently enabled for email. */
  email?: Maybe<Scalars["Boolean"]>;
  /** Whether notifications are currently enabled for mobile. */
  mobile?: Maybe<Scalars["Boolean"]>;
  /** Whether notifications are currently enabled for Slack. */
  slack?: Maybe<Scalars["Boolean"]>;
};

export type PasskeyLoginStartResponse = {
  __typename?: "PasskeyLoginStartResponse";
  options: Scalars["JSONObject"];
  success: Scalars["Boolean"];
};

/** [Internal] A generic post. */
export type Post = Node & {
  __typename?: "Post";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The update content summarized for audio consumption. */
  audioSummary?: Maybe<Scalars["String"]>;
  /** The update content in markdown format. */
  body: Scalars["String"];
  /** [Internal] The content of the post as a Prosemirror document. */
  bodyData: Scalars["String"];
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The user who wrote the post. */
  creator?: Maybe<User>;
  /** The time the post was edited. */
  editedAt?: Maybe<Scalars["DateTime"]>;
  /** The log id of the ai response. */
  evalLogId?: Maybe<Scalars["String"]>;
  /** Schedule used to create a post summary. */
  feedSummaryScheduleAtCreate?: Maybe<FeedSummarySchedule>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** Emoji reaction summary, grouped by emoji type. */
  reactionData: Scalars["JSONObject"];
  /** The post's unique URL slug. */
  slugId: Scalars["String"];
  /** The team that the post is associated with. */
  team?: Maybe<Team>;
  /** The post's title. */
  title?: Maybe<Scalars["String"]>;
  /** A URL of the TTL (text-to-language) for the body. */
  ttlUrl?: Maybe<Scalars["String"]>;
  /** The type of the post. */
  type?: Maybe<PostType>;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** The user that the post is associated with. */
  user?: Maybe<User>;
  /** [Internal] The written update data used to compose the written post. */
  writtenSummaryData?: Maybe<Scalars["JSONObject"]>;
};

/** A post related notification. */
export type PostNotification = Entity &
  Node &
  Notification & {
    __typename?: "PostNotification";
    /** The user that caused the notification. */
    actor?: Maybe<User>;
    /** [Internal] Notification actor initials if avatar is not available. */
    actorAvatarColor: Scalars["String"];
    /** [Internal] Notification avatar URL. */
    actorAvatarUrl?: Maybe<Scalars["String"]>;
    /** [Internal] Notification actor initials if avatar is not available. */
    actorInitials?: Maybe<Scalars["String"]>;
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: Maybe<Scalars["DateTime"]>;
    /** The bot that caused the notification. */
    botActor?: Maybe<ActorBot>;
    /** The category of the notification. */
    category: NotificationCategory;
    /** Related comment ID. Null if the notification is not related to a comment. */
    commentId?: Maybe<Scalars["String"]>;
    /** The time at which the entity was created. */
    createdAt: Scalars["DateTime"];
    /**
     * The time at when an email reminder for this notification was sent to the user. Null, if no email
     *     reminder has been sent.
     */
    emailedAt?: Maybe<Scalars["DateTime"]>;
    /** The external user that caused the notification. */
    externalUserActor?: Maybe<ExternalUser>;
    /** [Internal] Notifications with the same grouping key will be grouped together in the UI. */
    groupingKey: Scalars["String"];
    /** [Internal] Priority of the notification with the same grouping key. Higher number means higher priority. If priority is the same, notifications should be sorted by `createdAt`. */
    groupingPriority: Scalars["Float"];
    /** The unique identifier of the entity. */
    id: Scalars["ID"];
    /** [Internal] Inbox URL for the notification. */
    inboxUrl: Scalars["String"];
    /** [Internal] If notification actor was Linear. */
    isLinearActor: Scalars["Boolean"];
    /** [Internal] Issue's status type for issue notifications. */
    issueStatusType?: Maybe<Scalars["String"]>;
    /** Related parent comment ID. Null if the notification is not related to a comment. */
    parentCommentId?: Maybe<Scalars["String"]>;
    /** Related post ID. */
    postId: Scalars["String"];
    /** [Internal] Project update health for new updates. */
    projectUpdateHealth?: Maybe<Scalars["String"]>;
    /** Name of the reaction emoji related to the notification. */
    reactionEmoji?: Maybe<Scalars["String"]>;
    /** The time at when the user marked the notification as read. Null, if the the user hasn't read the notification */
    readAt?: Maybe<Scalars["DateTime"]>;
    /** The time until a notification will be snoozed. After that it will appear in the inbox again. */
    snoozedUntilAt?: Maybe<Scalars["DateTime"]>;
    /** [Internal] Notification subtitle. */
    subtitle: Scalars["String"];
    /** [Internal] Notification title. */
    title: Scalars["String"];
    /** Notification type. */
    type: Scalars["String"];
    /** The time at which a notification was unsnoozed.. */
    unsnoozedAt?: Maybe<Scalars["DateTime"]>;
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars["DateTime"];
    /** [Internal] URL to the target of the notification. */
    url: Scalars["String"];
    /** The user that received the notification. */
    user: User;
  };

/** Type of Post */
export enum PostType {
  Summary = "summary",
  Update = "update",
}

/** Issue priority sorting options. */
export type PrioritySort = {
  /** Whether to consider no priority as the highest or lowest priority */
  noPriorityFirst?: Maybe<Scalars["Boolean"]>;
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

/** [Internal] The scope of product intelligence suggestion data for a team. */
export enum ProductIntelligenceScope {
  None = "none",
  Team = "team",
  TeamHierarchy = "teamHierarchy",
  Workspace = "workspace",
}

/** A project. */
export type Project = Node & {
  __typename?: "Project";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the project was automatically archived by the auto pruning process. */
  autoArchivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the project was moved into canceled state. */
  canceledAt?: Maybe<Scalars["DateTime"]>;
  /** The project's color. */
  color: Scalars["String"];
  /** Comments associated with the project overview. */
  comments: CommentConnection;
  /** The time at which the project was moved into completed state. */
  completedAt?: Maybe<Scalars["DateTime"]>;
  /** The number of completed issues in the project after each week. */
  completedIssueCountHistory: Array<Scalars["Float"]>;
  /** The number of completed estimation points after each week. */
  completedScopeHistory: Array<Scalars["Float"]>;
  /** The project's content in markdown format. */
  content?: Maybe<Scalars["String"]>;
  /** [Internal] The project's content as YJS state. */
  contentState?: Maybe<Scalars["String"]>;
  /** The project was created based on this issue. */
  convertedFromIssue?: Maybe<Issue>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The user who created the project. */
  creator?: Maybe<User>;
  /** [INTERNAL] The current progress of the project. */
  currentProgress: Scalars["JSONObject"];
  /** The project's description. */
  description: Scalars["String"];
  /** The content of the project description. */
  documentContent?: Maybe<DocumentContent>;
  /** Documents associated with the project. */
  documents: DocumentConnection;
  /** External links associated with the project. */
  externalLinks: EntityExternalLinkConnection;
  /** [Internal] Facets associated with the project. */
  facets: Array<Facet>;
  /** The user's favorite associated with this project. */
  favorite?: Maybe<Favorite>;
  /** The resolution of the reminder frequency. */
  frequencyResolution: FrequencyResolutionType;
  /** The health of the project. */
  health?: Maybe<ProjectUpdateHealthType>;
  /** The time at which the project health was updated. */
  healthUpdatedAt?: Maybe<Scalars["DateTime"]>;
  /** History entries associated with the project. */
  history: ProjectHistoryConnection;
  /** The icon of the project. */
  icon?: Maybe<Scalars["String"]>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The number of in progress estimation points after each week. */
  inProgressScopeHistory: Array<Scalars["Float"]>;
  /** Initiatives that this project belongs to. */
  initiatives: InitiativeConnection;
  /** Settings for all integrations associated with that project. */
  integrationsSettings?: Maybe<IntegrationsSettings>;
  /** Inverse relations associated with this project. */
  inverseRelations: ProjectRelationConnection;
  /** The total number of issues in the project after each week. */
  issueCountHistory: Array<Scalars["Float"]>;
  /** Issues associated with the project. */
  issues: IssueConnection;
  /** Id of the labels associated with this project. */
  labelIds: Array<Scalars["String"]>;
  /** Labels associated with this project. */
  labels: ProjectLabelConnection;
  /** The last template that was applied to this project. */
  lastAppliedTemplate?: Maybe<Template>;
  /** The last project update posted for this project. */
  lastUpdate?: Maybe<ProjectUpdate>;
  /** The project lead. */
  lead?: Maybe<User>;
  /** Users that are members of the project. */
  members: UserConnection;
  /** The project's name. */
  name: Scalars["String"];
  /** Customer needs associated with the project. */
  needs: CustomerNeedConnection;
  /** The priority of the project. 0 = No priority, 1 = Urgent, 2 = High, 3 = Normal, 4 = Low. */
  priority: Scalars["Int"];
  /** The priority of the project as a label. */
  priorityLabel: Scalars["String"];
  /** The sort order for the project within the organization, when ordered by priority. */
  prioritySortOrder: Scalars["Float"];
  /** The overall progress of the project. This is the (completed estimate points + 0.25 * in progress estimate points) / total estimate points. */
  progress: Scalars["Float"];
  /** [INTERNAL] The progress history of the project. */
  progressHistory: Scalars["JSONObject"];
  /** Milestones associated with the project. */
  projectMilestones: ProjectMilestoneConnection;
  /** The time until which project update reminders are paused. */
  projectUpdateRemindersPausedUntilAt?: Maybe<Scalars["DateTime"]>;
  /** Project updates associated with the project. */
  projectUpdates: ProjectUpdateConnection;
  /** Relations associated with this project. */
  relations: ProjectRelationConnection;
  /** The overall scope (total estimate points) of the project. */
  scope: Scalars["Float"];
  /** The total number of estimation points after each week. */
  scopeHistory: Array<Scalars["Float"]>;
  /**
   * Whether to send new issue comment notifications to Slack.
   * @deprecated No longer in use
   */
  slackIssueComments: Scalars["Boolean"];
  /**
   * Whether to send new issue status updates to Slack.
   * @deprecated No longer is use
   */
  slackIssueStatuses: Scalars["Boolean"];
  /**
   * Whether to send new issue notifications to Slack.
   * @deprecated No longer in use
   */
  slackNewIssue: Scalars["Boolean"];
  /** The project's unique URL slug. */
  slugId: Scalars["String"];
  /** The sort order for the project within the organization. */
  sortOrder: Scalars["Float"];
  /** The estimated start date of the project. */
  startDate?: Maybe<Scalars["TimelessDate"]>;
  /** The resolution of the project's start date. */
  startDateResolution?: Maybe<DateResolutionType>;
  /** The time at which the project was moved into started state. */
  startedAt?: Maybe<Scalars["DateTime"]>;
  /**
   * [DEPRECATED] The type of the state.
   * @deprecated Use project.status instead
   */
  state: Scalars["String"];
  /** The status that the project is associated with. */
  status: ProjectStatus;
  /** The estimated completion date of the project. */
  targetDate?: Maybe<Scalars["TimelessDate"]>;
  /** The resolution of the project's estimated completion date. */
  targetDateResolution?: Maybe<DateResolutionType>;
  /** Teams associated with this project. */
  teams: TeamConnection;
  /** A flag that indicates whether the project is in the trash bin. */
  trashed?: Maybe<Scalars["Boolean"]>;
  /** The frequency at which to prompt for updates. When not set, reminders are inherited from workspace. */
  updateReminderFrequency?: Maybe<Scalars["Float"]>;
  /** The n-weekly frequency at which to prompt for updates. When not set, reminders are inherited from workspace. */
  updateReminderFrequencyInWeeks?: Maybe<Scalars["Float"]>;
  /** The day at which to prompt for updates. */
  updateRemindersDay?: Maybe<Day>;
  /** The hour at which to prompt for updates. */
  updateRemindersHour?: Maybe<Scalars["Float"]>;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** Project URL. */
  url: Scalars["String"];
};

/** A project. */
export type ProjectCommentsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CommentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** A project. */
export type ProjectDocumentsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<DocumentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** A project. */
export type ProjectExternalLinksArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** A project. */
export type ProjectHistoryArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** A project. */
export type ProjectInitiativesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** A project. */
export type ProjectInverseRelationsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** A project. */
export type ProjectIssuesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** A project. */
export type ProjectLabelsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<ProjectLabelFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** A project. */
export type ProjectMembersArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<UserFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  includeDisabled?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** A project. */
export type ProjectNeedsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CustomerNeedFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** A project. */
export type ProjectProjectMilestonesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<ProjectMilestoneFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** A project. */
export type ProjectProjectUpdatesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** A project. */
export type ProjectRelationsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** A project. */
export type ProjectTeamsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<TeamFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** A generic payload return from entity archive mutations. */
export type ProjectArchivePayload = ArchivePayload & {
  __typename?: "ProjectArchivePayload";
  /** The archived/unarchived entity. Null if entity was deleted. */
  entity?: Maybe<Project>;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** Project attachment */
export type ProjectAttachment = Node & {
  __typename?: "ProjectAttachment";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The creator of the attachment. */
  creator?: Maybe<User>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** Custom metadata related to the attachment. */
  metadata: Scalars["JSONObject"];
  /** Information about the external source which created the attachment. */
  source?: Maybe<Scalars["JSONObject"]>;
  /** An accessor helper to source.type, defines the source type of the attachment. */
  sourceType?: Maybe<Scalars["String"]>;
  /** Optional subtitle of the attachment */
  subtitle?: Maybe<Scalars["String"]>;
  /** Title of the attachment. */
  title: Scalars["String"];
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** URL of the attachment. */
  url: Scalars["String"];
};

/** Certain properties of a project. */
export type ProjectChildWebhookPayload = {
  __typename?: "ProjectChildWebhookPayload";
  /** The ID of the project. */
  id: Scalars["String"];
  /** The name of the project. */
  name: Scalars["String"];
  /** The URL of the project. */
  url: Scalars["String"];
};

/** Project filtering options. */
export type ProjectCollectionFilter = {
  /** Filters that the project's team must satisfy. */
  accessibleTeams?: Maybe<TeamCollectionFilter>;
  /** [ALPHA] Comparator for the project activity type: buzzin, active, some, none */
  activityType?: Maybe<StringComparator>;
  /** Compound filters, all of which need to be matched by the project. */
  and?: Maybe<Array<ProjectCollectionFilter>>;
  /** Comparator for the project cancelation date. */
  canceledAt?: Maybe<NullableDateComparator>;
  /** Comparator for the project completion date. */
  completedAt?: Maybe<NullableDateComparator>;
  /** Filters that the project's completed milestones must satisfy. */
  completedProjectMilestones?: Maybe<ProjectMilestoneCollectionFilter>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Filters that the projects creator must satisfy. */
  creator?: Maybe<UserFilter>;
  /** Count of customers */
  customerCount?: Maybe<NumberComparator>;
  /** Count of important customers */
  customerImportantCount?: Maybe<NumberComparator>;
  /** Filters that needs to be matched by all projects. */
  every?: Maybe<ProjectFilter>;
  /** Comparator for filtering projects which are blocked. */
  hasBlockedByRelations?: Maybe<RelationExistsComparator>;
  /** Comparator for filtering projects which are blocking. */
  hasBlockingRelations?: Maybe<RelationExistsComparator>;
  /** [Deprecated] Comparator for filtering projects which this is depended on by. */
  hasDependedOnByRelations?: Maybe<RelationExistsComparator>;
  /** [Deprecated]Comparator for filtering projects which this depends on. */
  hasDependsOnRelations?: Maybe<RelationExistsComparator>;
  /** Comparator for filtering projects with relations. */
  hasRelatedRelations?: Maybe<RelationExistsComparator>;
  /** Comparator for filtering projects with violated dependencies. */
  hasViolatedRelations?: Maybe<RelationExistsComparator>;
  /** Comparator for the project health: onTrack, atRisk, offTrack */
  health?: Maybe<StringComparator>;
  /** Comparator for the project health (with age): onTrack, atRisk, offTrack, outdated, noUpdate */
  healthWithAge?: Maybe<StringComparator>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Filters that the projects initiatives must satisfy. */
  initiatives?: Maybe<InitiativeCollectionFilter>;
  /** Filters that the projects issues must satisfy. */
  issues?: Maybe<IssueCollectionFilter>;
  /** Filters that project labels must satisfy. */
  labels?: Maybe<ProjectLabelCollectionFilter>;
  /** Filters that the last applied template must satisfy. */
  lastAppliedTemplate?: Maybe<NullableTemplateFilter>;
  /** Filters that the projects lead must satisfy. */
  lead?: Maybe<NullableUserFilter>;
  /** Comparator for the collection length. */
  length?: Maybe<NumberComparator>;
  /** Filters that the projects members must satisfy. */
  members?: Maybe<UserCollectionFilter>;
  /** Comparator for the project name. */
  name?: Maybe<StringComparator>;
  /** Filters that the project's customer needs must satisfy. */
  needs?: Maybe<CustomerNeedCollectionFilter>;
  /** Filters that the project's next milestone must satisfy. */
  nextProjectMilestone?: Maybe<ProjectMilestoneFilter>;
  /** Compound filters, one of which need to be matched by the project. */
  or?: Maybe<Array<ProjectCollectionFilter>>;
  /** Comparator for the projects priority. */
  priority?: Maybe<NullableNumberComparator>;
  /** Filters that the project's milestones must satisfy. */
  projectMilestones?: Maybe<ProjectMilestoneCollectionFilter>;
  /** Comparator for the project updates. */
  projectUpdates?: Maybe<ProjectUpdatesCollectionFilter>;
  /** Filters that the projects roadmaps must satisfy. */
  roadmaps?: Maybe<RoadmapCollectionFilter>;
  /** [Internal] Comparator for the project's content. */
  searchableContent?: Maybe<ContentComparator>;
  /** Comparator for the project slug ID. */
  slugId?: Maybe<StringComparator>;
  /** Filters that needs to be matched by some projects. */
  some?: Maybe<ProjectFilter>;
  /** Comparator for the project start date. */
  startDate?: Maybe<NullableDateComparator>;
  /** [DEPRECATED] Comparator for the project state. */
  state?: Maybe<StringComparator>;
  /** Filters that the project's status must satisfy. */
  status?: Maybe<ProjectStatusFilter>;
  /** Comparator for the project target date. */
  targetDate?: Maybe<NullableDateComparator>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

export type ProjectConnection = {
  __typename?: "ProjectConnection";
  edges: Array<ProjectEdge>;
  nodes: Array<Project>;
  pageInfo: PageInfo;
};

export type ProjectCreateInput = {
  /** The color of the project. */
  color?: Maybe<Scalars["String"]>;
  /** The project content as markdown. */
  content?: Maybe<Scalars["String"]>;
  /** The ID of the issue from which that project is created. */
  convertedFromIssueId?: Maybe<Scalars["String"]>;
  /** The description for the project. */
  description?: Maybe<Scalars["String"]>;
  /** The icon of the project. */
  icon?: Maybe<Scalars["String"]>;
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** [Internal]The identifiers of the project labels associated with this project. */
  labelIds?: Maybe<Array<Scalars["String"]>>;
  /** The ID of the last template applied to the project. */
  lastAppliedTemplateId?: Maybe<Scalars["String"]>;
  /** The identifier of the project lead. */
  leadId?: Maybe<Scalars["String"]>;
  /** The identifiers of the members of this project. */
  memberIds?: Maybe<Array<Scalars["String"]>>;
  /** The name of the project. */
  name: Scalars["String"];
  /** The priority of the project. 0 = No priority, 1 = Urgent, 2 = High, 3 = Normal, 4 = Low. */
  priority?: Maybe<Scalars["Int"]>;
  /** The sort order for the project within shared views, when ordered by priority. */
  prioritySortOrder?: Maybe<Scalars["Float"]>;
  /** The sort order for the project within shared views. */
  sortOrder?: Maybe<Scalars["Float"]>;
  /** The planned start date of the project. */
  startDate?: Maybe<Scalars["TimelessDate"]>;
  /** The resolution of the project's start date. */
  startDateResolution?: Maybe<DateResolutionType>;
  /** The ID of the project status. */
  statusId?: Maybe<Scalars["String"]>;
  /** The planned target date of the project. */
  targetDate?: Maybe<Scalars["TimelessDate"]>;
  /** The resolution of the project's estimated completion date. */
  targetDateResolution?: Maybe<DateResolutionType>;
  /** The identifiers of the teams this project is associated with. */
  teamIds: Array<Scalars["String"]>;
};

/** Project creation date sorting options. */
export type ProjectCreatedAtSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

export type ProjectEdge = {
  __typename?: "ProjectEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: Project;
};

/** Project filtering options. */
export type ProjectFilter = {
  /** Filters that the project's team must satisfy. */
  accessibleTeams?: Maybe<TeamCollectionFilter>;
  /** [ALPHA] Comparator for the project activity type: buzzin, active, some, none */
  activityType?: Maybe<StringComparator>;
  /** Compound filters, all of which need to be matched by the project. */
  and?: Maybe<Array<ProjectFilter>>;
  /** Comparator for the project cancelation date. */
  canceledAt?: Maybe<NullableDateComparator>;
  /** Comparator for the project completion date. */
  completedAt?: Maybe<NullableDateComparator>;
  /** Filters that the project's completed milestones must satisfy. */
  completedProjectMilestones?: Maybe<ProjectMilestoneCollectionFilter>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Filters that the projects creator must satisfy. */
  creator?: Maybe<UserFilter>;
  /** Count of customers */
  customerCount?: Maybe<NumberComparator>;
  /** Count of important customers */
  customerImportantCount?: Maybe<NumberComparator>;
  /** Comparator for filtering projects which are blocked. */
  hasBlockedByRelations?: Maybe<RelationExistsComparator>;
  /** Comparator for filtering projects which are blocking. */
  hasBlockingRelations?: Maybe<RelationExistsComparator>;
  /** [Deprecated] Comparator for filtering projects which this is depended on by. */
  hasDependedOnByRelations?: Maybe<RelationExistsComparator>;
  /** [Deprecated]Comparator for filtering projects which this depends on. */
  hasDependsOnRelations?: Maybe<RelationExistsComparator>;
  /** Comparator for filtering projects with relations. */
  hasRelatedRelations?: Maybe<RelationExistsComparator>;
  /** Comparator for filtering projects with violated dependencies. */
  hasViolatedRelations?: Maybe<RelationExistsComparator>;
  /** Comparator for the project health: onTrack, atRisk, offTrack */
  health?: Maybe<StringComparator>;
  /** Comparator for the project health (with age): onTrack, atRisk, offTrack, outdated, noUpdate */
  healthWithAge?: Maybe<StringComparator>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Filters that the projects initiatives must satisfy. */
  initiatives?: Maybe<InitiativeCollectionFilter>;
  /** Filters that the projects issues must satisfy. */
  issues?: Maybe<IssueCollectionFilter>;
  /** Filters that project labels must satisfy. */
  labels?: Maybe<ProjectLabelCollectionFilter>;
  /** Filters that the last applied template must satisfy. */
  lastAppliedTemplate?: Maybe<NullableTemplateFilter>;
  /** Filters that the projects lead must satisfy. */
  lead?: Maybe<NullableUserFilter>;
  /** Filters that the projects members must satisfy. */
  members?: Maybe<UserCollectionFilter>;
  /** Comparator for the project name. */
  name?: Maybe<StringComparator>;
  /** Filters that the project's customer needs must satisfy. */
  needs?: Maybe<CustomerNeedCollectionFilter>;
  /** Filters that the project's next milestone must satisfy. */
  nextProjectMilestone?: Maybe<ProjectMilestoneFilter>;
  /** Compound filters, one of which need to be matched by the project. */
  or?: Maybe<Array<ProjectFilter>>;
  /** Comparator for the projects priority. */
  priority?: Maybe<NullableNumberComparator>;
  /** Filters that the project's milestones must satisfy. */
  projectMilestones?: Maybe<ProjectMilestoneCollectionFilter>;
  /** Comparator for the project updates. */
  projectUpdates?: Maybe<ProjectUpdatesCollectionFilter>;
  /** Filters that the projects roadmaps must satisfy. */
  roadmaps?: Maybe<RoadmapCollectionFilter>;
  /** [Internal] Comparator for the project's content. */
  searchableContent?: Maybe<ContentComparator>;
  /** Comparator for the project slug ID. */
  slugId?: Maybe<StringComparator>;
  /** Comparator for the project start date. */
  startDate?: Maybe<NullableDateComparator>;
  /** [DEPRECATED] Comparator for the project state. */
  state?: Maybe<StringComparator>;
  /** Filters that the project's status must satisfy. */
  status?: Maybe<ProjectStatusFilter>;
  /** Comparator for the project target date. */
  targetDate?: Maybe<NullableDateComparator>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

export type ProjectFilterSuggestionPayload = {
  __typename?: "ProjectFilterSuggestionPayload";
  /** The json filter that is suggested. */
  filter?: Maybe<Scalars["JSONObject"]>;
  /** The log id of the prompt, that created this filter. */
  logId?: Maybe<Scalars["String"]>;
};

/** Project health sorting options. */
export type ProjectHealthSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

/** An history associated with a project. */
export type ProjectHistory = Node & {
  __typename?: "ProjectHistory";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The events that happened while recording that history. */
  entries: Scalars["JSONObject"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The project that the history is associated with. */
  project: Project;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

export type ProjectHistoryConnection = {
  __typename?: "ProjectHistoryConnection";
  edges: Array<ProjectHistoryEdge>;
  nodes: Array<ProjectHistory>;
  pageInfo: PageInfo;
};

export type ProjectHistoryEdge = {
  __typename?: "ProjectHistoryEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: ProjectHistory;
};

/** Labels that can be associated with projects. */
export type ProjectLabel = Node & {
  __typename?: "ProjectLabel";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** Children of the label. */
  children: ProjectLabelConnection;
  /** The label's color as a HEX string. */
  color: Scalars["String"];
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The user who created the label. */
  creator?: Maybe<User>;
  /** The label's description. */
  description?: Maybe<Scalars["String"]>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** Whether the label is a group. */
  isGroup: Scalars["Boolean"];
  /** The date when the label was last applied to an issue or project. */
  lastAppliedAt?: Maybe<Scalars["DateTime"]>;
  /** The label's name. */
  name: Scalars["String"];
  organization: Organization;
  /** The parent label. */
  parent?: Maybe<ProjectLabel>;
  /** Projects associated with the label. */
  projects: ProjectConnection;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

/** Labels that can be associated with projects. */
export type ProjectLabelChildrenArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<ProjectLabelFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** Labels that can be associated with projects. */
export type ProjectLabelProjectsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<ProjectFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
  sort?: Maybe<Array<ProjectSortInput>>;
};

/** Project label filtering options. */
export type ProjectLabelCollectionFilter = {
  /** Compound filters, all of which need to be matched by the label. */
  and?: Maybe<Array<ProjectLabelCollectionFilter>>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Filters that the project labels creator must satisfy. */
  creator?: Maybe<NullableUserFilter>;
  /** Filters that needs to be matched by all project labels. */
  every?: Maybe<ProjectLabelFilter>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Comparator for whether the label is a group label. */
  isGroup?: Maybe<BooleanComparator>;
  /** Comparator for the collection length. */
  length?: Maybe<NumberComparator>;
  /** Comparator for the name. */
  name?: Maybe<StringComparator>;
  /** Filter based on the existence of the relation. */
  null?: Maybe<Scalars["Boolean"]>;
  /** Compound filters, one of which need to be matched by the label. */
  or?: Maybe<Array<ProjectLabelCollectionFilter>>;
  /** Filters that the project label's parent label must satisfy. */
  parent?: Maybe<ProjectLabelFilter>;
  /** Filters that needs to be matched by some project labels. */
  some?: Maybe<ProjectLabelCollectionFilter>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

export type ProjectLabelConnection = {
  __typename?: "ProjectLabelConnection";
  edges: Array<ProjectLabelEdge>;
  nodes: Array<ProjectLabel>;
  pageInfo: PageInfo;
};

export type ProjectLabelCreateInput = {
  /** The color of the label. */
  color?: Maybe<Scalars["String"]>;
  /** The description of the label. */
  description?: Maybe<Scalars["String"]>;
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** Whether the label is a group. */
  isGroup?: Maybe<Scalars["Boolean"]>;
  /** The name of the label. */
  name: Scalars["String"];
  /** The identifier of the parent label. */
  parentId?: Maybe<Scalars["String"]>;
};

export type ProjectLabelEdge = {
  __typename?: "ProjectLabelEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: ProjectLabel;
};

/** Project label filtering options. */
export type ProjectLabelFilter = {
  /** Compound filters, all of which need to be matched by the label. */
  and?: Maybe<Array<ProjectLabelFilter>>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Filters that the project labels creator must satisfy. */
  creator?: Maybe<NullableUserFilter>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Comparator for whether the label is a group label. */
  isGroup?: Maybe<BooleanComparator>;
  /** Comparator for the name. */
  name?: Maybe<StringComparator>;
  /** Compound filters, one of which need to be matched by the label. */
  or?: Maybe<Array<ProjectLabelFilter>>;
  /** Filters that the project label's parent label must satisfy. */
  parent?: Maybe<ProjectLabelFilter>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

export type ProjectLabelPayload = {
  __typename?: "ProjectLabelPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** The label that was created or updated. */
  projectLabel: ProjectLabel;
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type ProjectLabelUpdateInput = {
  /** The color of the label. */
  color?: Maybe<Scalars["String"]>;
  /** The description of the label. */
  description?: Maybe<Scalars["String"]>;
  /** Whether the label is a group. */
  isGroup?: Maybe<Scalars["Boolean"]>;
  /** The name of the label. */
  name?: Maybe<Scalars["String"]>;
  /** The identifier of the parent label. */
  parentId?: Maybe<Scalars["String"]>;
};

/** Project lead sorting options. */
export type ProjectLeadSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

/** Project manual order sorting options. */
export type ProjectManualSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

/** A milestone for a project. */
export type ProjectMilestone = Node & {
  __typename?: "ProjectMilestone";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** [Internal] The current progress of the project milestone. */
  currentProgress: Scalars["JSONObject"];
  /** The project milestone's description in markdown format. */
  description?: Maybe<Scalars["String"]>;
  /** [Internal] The project milestone's description as YJS state. */
  descriptionState?: Maybe<Scalars["String"]>;
  /** The content of the project milestone description. */
  documentContent?: Maybe<DocumentContent>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** Issues associated with the project milestone. */
  issues: IssueConnection;
  /** The name of the project milestone. */
  name: Scalars["String"];
  /** The progress % of the project milestone. */
  progress: Scalars["Float"];
  /** [Internal] The progress history of the project milestone. */
  progressHistory: Scalars["JSONObject"];
  /** The project of the milestone. */
  project: Project;
  /** The order of the milestone in relation to other milestones within a project. */
  sortOrder: Scalars["Float"];
  /** The status of the project milestone. */
  status: ProjectMilestoneStatus;
  /** The planned completion date of the milestone. */
  targetDate?: Maybe<Scalars["TimelessDate"]>;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

/** A milestone for a project. */
export type ProjectMilestoneIssuesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** Certain properties of a project milestone. */
export type ProjectMilestoneChildWebhookPayload = {
  __typename?: "ProjectMilestoneChildWebhookPayload";
  /** The ID of the project milestone. */
  id: Scalars["String"];
  /** The name of the project milestone. */
  name: Scalars["String"];
  /** The target date of the project milestone. */
  targetDate: Scalars["String"];
};

/** Milestone collection filtering options. */
export type ProjectMilestoneCollectionFilter = {
  /** Compound filters, all of which need to be matched by the milestone. */
  and?: Maybe<Array<ProjectMilestoneCollectionFilter>>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Filters that needs to be matched by all milestones. */
  every?: Maybe<ProjectMilestoneFilter>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Comparator for the collection length. */
  length?: Maybe<NumberComparator>;
  /** Comparator for the project milestone name. */
  name?: Maybe<NullableStringComparator>;
  /** Compound filters, one of which need to be matched by the milestone. */
  or?: Maybe<Array<ProjectMilestoneCollectionFilter>>;
  /** Filters that needs to be matched by some milestones. */
  some?: Maybe<ProjectMilestoneFilter>;
  /** Comparator for the project milestone target date. */
  targetDate?: Maybe<NullableDateComparator>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

export type ProjectMilestoneConnection = {
  __typename?: "ProjectMilestoneConnection";
  edges: Array<ProjectMilestoneEdge>;
  nodes: Array<ProjectMilestone>;
  pageInfo: PageInfo;
};

export type ProjectMilestoneCreateInput = {
  /** The description of the project milestone in markdown format. */
  description?: Maybe<Scalars["String"]>;
  /** [Internal] The description of the project milestone as a Prosemirror document. */
  descriptionData?: Maybe<Scalars["JSONObject"]>;
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The name of the project milestone. */
  name: Scalars["String"];
  /** Related project for the project milestone. */
  projectId: Scalars["String"];
  /** The sort order for the project milestone within a project. */
  sortOrder?: Maybe<Scalars["Float"]>;
  /** The planned target date of the project milestone. */
  targetDate?: Maybe<Scalars["TimelessDate"]>;
};

export type ProjectMilestoneEdge = {
  __typename?: "ProjectMilestoneEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: ProjectMilestone;
};

/** Project milestone filtering options. */
export type ProjectMilestoneFilter = {
  /** Compound filters, all of which need to be matched by the project milestone. */
  and?: Maybe<Array<ProjectMilestoneFilter>>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Comparator for the project milestone name. */
  name?: Maybe<NullableStringComparator>;
  /** Compound filters, one of which need to be matched by the project milestone. */
  or?: Maybe<Array<ProjectMilestoneFilter>>;
  /** Comparator for the project milestone target date. */
  targetDate?: Maybe<NullableDateComparator>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

export type ProjectMilestoneMoveInput = {
  /** Whether to add each milestone issue's team to the project. This is needed when there is a mismatch between a project's teams and the milestone's issues' teams. Either this or newIssueTeamId is required in that situation to resolve constraints. */
  addIssueTeamToProject?: Maybe<Scalars["Boolean"]>;
  /** The team id to move the attached issues to. This is needed when there is a mismatch between a project's teams and the milestone's issues' teams. Either this or addIssueTeamToProject is required in that situation to resolve constraints. */
  newIssueTeamId?: Maybe<Scalars["String"]>;
  /** The identifier of the project to move the milestone to. */
  projectId: Scalars["String"];
  /** A list of issue id to team ids, used for undoing a previous milestone move where the specified issues were moved from the specified teams. */
  undoIssueTeamIds?: Maybe<Array<ProjectMilestoneMoveIssueToTeamInput>>;
  /** A mapping of project id to a previous set of team ids, used for undoing a previous milestone move where the specified teams were added to the project. */
  undoProjectTeamIds?: Maybe<ProjectMilestoneMoveProjectTeamsInput>;
};

export type ProjectMilestoneMoveIssueToTeam = {
  __typename?: "ProjectMilestoneMoveIssueToTeam";
  /** The issue id in this relationship, you can use * as wildcard if all issues are being moved to the same team */
  issueId: Scalars["String"];
  /** The team id in this relationship */
  teamId: Scalars["String"];
};

/** [Internal] Used for ProjectMilestoneMoveInput to describe a mapping between an issue and its team. */
export type ProjectMilestoneMoveIssueToTeamInput = {
  /** The issue id in this relationship, you can use * as wildcard if all issues are being moved to the same team */
  issueId: Scalars["String"];
  /** The team id in this relationship */
  teamId: Scalars["String"];
};

export type ProjectMilestoneMovePayload = {
  __typename?: "ProjectMilestoneMovePayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** A snapshot of the issues that were moved to new teams, if the user selected to do it, containing an array of mappings between an issue and its previous team. Store on the client to use for undoing a previous milestone move. */
  previousIssueTeamIds?: Maybe<Array<ProjectMilestoneMoveIssueToTeam>>;
  /** A snapshot of the project that had new teams added to it, if the user selected to do it, containing an array of mappings between a project and its previous teams. Store on the client to use for undoing a previous milestone move. */
  previousProjectTeamIds?: Maybe<ProjectMilestoneMoveProjectTeams>;
  /** The project milestone that was created or updated. */
  projectMilestone: ProjectMilestone;
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type ProjectMilestoneMoveProjectTeams = {
  __typename?: "ProjectMilestoneMoveProjectTeams";
  /** The project id */
  projectId: Scalars["String"];
  /** The team ids for the project */
  teamIds: Array<Scalars["String"]>;
};

/** [Internal] Used for ProjectMilestoneMoveInput to describe a snapshot of a project and its team ids */
export type ProjectMilestoneMoveProjectTeamsInput = {
  /** The project id */
  projectId: Scalars["String"];
  /** The team ids for the project */
  teamIds: Array<Scalars["String"]>;
};

export type ProjectMilestonePayload = {
  __typename?: "ProjectMilestonePayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** The project milestone that was created or updated. */
  projectMilestone: ProjectMilestone;
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** The status of a project milestone. */
export enum ProjectMilestoneStatus {
  Done = "done",
  Next = "next",
  Overdue = "overdue",
  Unstarted = "unstarted",
}

export type ProjectMilestoneUpdateInput = {
  /** The description of the project milestone in markdown format. */
  description?: Maybe<Scalars["String"]>;
  /** [Internal] The description of the project milestone as a Prosemirror document. */
  descriptionData?: Maybe<Scalars["JSONObject"]>;
  /** The name of the project milestone. */
  name?: Maybe<Scalars["String"]>;
  /** Related project for the project milestone. */
  projectId?: Maybe<Scalars["String"]>;
  /** The sort order for the project milestone within a project. */
  sortOrder?: Maybe<Scalars["Float"]>;
  /** The planned target date of the project milestone. */
  targetDate?: Maybe<Scalars["TimelessDate"]>;
};

/** Project name sorting options. */
export type ProjectNameSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

/** A project related notification. */
export type ProjectNotification = Entity &
  Node &
  Notification & {
    __typename?: "ProjectNotification";
    /** The user that caused the notification. */
    actor?: Maybe<User>;
    /** [Internal] Notification actor initials if avatar is not available. */
    actorAvatarColor: Scalars["String"];
    /** [Internal] Notification avatar URL. */
    actorAvatarUrl?: Maybe<Scalars["String"]>;
    /** [Internal] Notification actor initials if avatar is not available. */
    actorInitials?: Maybe<Scalars["String"]>;
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: Maybe<Scalars["DateTime"]>;
    /** The bot that caused the notification. */
    botActor?: Maybe<ActorBot>;
    /** The category of the notification. */
    category: NotificationCategory;
    /** The comment related to the notification. */
    comment?: Maybe<Comment>;
    /** Related comment ID. Null if the notification is not related to a comment. */
    commentId?: Maybe<Scalars["String"]>;
    /** The time at which the entity was created. */
    createdAt: Scalars["DateTime"];
    /** The document related to the notification. */
    document?: Maybe<Document>;
    /**
     * The time at when an email reminder for this notification was sent to the user. Null, if no email
     *     reminder has been sent.
     */
    emailedAt?: Maybe<Scalars["DateTime"]>;
    /** The external user that caused the notification. */
    externalUserActor?: Maybe<ExternalUser>;
    /** [Internal] Notifications with the same grouping key will be grouped together in the UI. */
    groupingKey: Scalars["String"];
    /** [Internal] Priority of the notification with the same grouping key. Higher number means higher priority. If priority is the same, notifications should be sorted by `createdAt`. */
    groupingPriority: Scalars["Float"];
    /** The unique identifier of the entity. */
    id: Scalars["ID"];
    /** [Internal] Inbox URL for the notification. */
    inboxUrl: Scalars["String"];
    /** [Internal] If notification actor was Linear. */
    isLinearActor: Scalars["Boolean"];
    /** [Internal] Issue's status type for issue notifications. */
    issueStatusType?: Maybe<Scalars["String"]>;
    /** The parent comment related to the notification, if a notification is a reply comment notification. */
    parentComment?: Maybe<Comment>;
    /** Related parent comment ID. Null if the notification is not related to a comment. */
    parentCommentId?: Maybe<Scalars["String"]>;
    /** The project related to the notification. */
    project: Project;
    /** Related project ID. */
    projectId: Scalars["String"];
    /** Related project milestone ID. */
    projectMilestoneId?: Maybe<Scalars["String"]>;
    /** The project update related to the notification. */
    projectUpdate?: Maybe<ProjectUpdate>;
    /** [Internal] Project update health for new updates. */
    projectUpdateHealth?: Maybe<Scalars["String"]>;
    /** Related project update ID. */
    projectUpdateId?: Maybe<Scalars["String"]>;
    /** Name of the reaction emoji related to the notification. */
    reactionEmoji?: Maybe<Scalars["String"]>;
    /** The time at when the user marked the notification as read. Null, if the the user hasn't read the notification */
    readAt?: Maybe<Scalars["DateTime"]>;
    /** The time until a notification will be snoozed. After that it will appear in the inbox again. */
    snoozedUntilAt?: Maybe<Scalars["DateTime"]>;
    /** [Internal] Notification subtitle. */
    subtitle: Scalars["String"];
    /** [Internal] Notification title. */
    title: Scalars["String"];
    /** Notification type. */
    type: Scalars["String"];
    /** The time at which a notification was unsnoozed.. */
    unsnoozedAt?: Maybe<Scalars["DateTime"]>;
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars["DateTime"];
    /** [Internal] URL to the target of the notification. */
    url: Scalars["String"];
    /** The user that received the notification. */
    user: User;
  };

/** A project notification subscription. */
export type ProjectNotificationSubscription = Entity &
  Node &
  NotificationSubscription & {
    __typename?: "ProjectNotificationSubscription";
    /** Whether the subscription is active or not. */
    active: Scalars["Boolean"];
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: Maybe<Scalars["DateTime"]>;
    /** The type of view to which the notification subscription context is associated with. */
    contextViewType?: Maybe<ContextViewType>;
    /** The time at which the entity was created. */
    createdAt: Scalars["DateTime"];
    /** The contextual custom view associated with the notification subscription. */
    customView?: Maybe<CustomView>;
    /** The customer associated with the notification subscription. */
    customer?: Maybe<Customer>;
    /** The contextual cycle view associated with the notification subscription. */
    cycle?: Maybe<Cycle>;
    /** The unique identifier of the entity. */
    id: Scalars["ID"];
    /** The contextual initiative view associated with the notification subscription. */
    initiative?: Maybe<Initiative>;
    /** The contextual label view associated with the notification subscription. */
    label?: Maybe<IssueLabel>;
    /** The type of subscription. */
    notificationSubscriptionTypes: Array<Scalars["String"]>;
    /** The project subscribed to. */
    project: Project;
    /** The user that subscribed to receive notifications. */
    subscriber: User;
    /** The team associated with the notification subscription. */
    team?: Maybe<Team>;
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars["DateTime"];
    /** The user view associated with the notification subscription. */
    user?: Maybe<User>;
    /** The type of user view to which the notification subscription context is associated with. */
    userContextViewType?: Maybe<UserContextViewType>;
  };

export type ProjectPayload = {
  __typename?: "ProjectPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** The project that was created or updated. */
  project?: Maybe<Project>;
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** Project priority sorting options. */
export type ProjectPrioritySort = {
  /** Whether to consider no priority as the highest or lowest priority */
  noPriorityFirst?: Maybe<Scalars["Boolean"]>;
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

/** A relation between two projects. */
export type ProjectRelation = Node & {
  __typename?: "ProjectRelation";
  /** The type of anchor on the project end of the relation. */
  anchorType: Scalars["String"];
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The project whose relationship is being described. */
  project: Project;
  /** The milestone within the project whose relationship is being described. */
  projectMilestone?: Maybe<ProjectMilestone>;
  /** The type of anchor on the relatedProject end of the relation. */
  relatedAnchorType: Scalars["String"];
  /** The related project. */
  relatedProject: Project;
  /** The milestone within the related project whose relationship is being described. */
  relatedProjectMilestone?: Maybe<ProjectMilestone>;
  /** The relationship of the project with the related project. */
  type: Scalars["String"];
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** The last user who created or modified the relation. */
  user?: Maybe<User>;
};

export type ProjectRelationConnection = {
  __typename?: "ProjectRelationConnection";
  edges: Array<ProjectRelationEdge>;
  nodes: Array<ProjectRelation>;
  pageInfo: PageInfo;
};

export type ProjectRelationCreateInput = {
  /** The type of the anchor for the project. */
  anchorType: Scalars["String"];
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The identifier of the project that is related to another project. */
  projectId: Scalars["String"];
  /** The identifier of the project milestone. */
  projectMilestoneId?: Maybe<Scalars["String"]>;
  /** The type of the anchor for the related project. */
  relatedAnchorType: Scalars["String"];
  /** The identifier of the related project. */
  relatedProjectId: Scalars["String"];
  /** The identifier of the related project milestone. */
  relatedProjectMilestoneId?: Maybe<Scalars["String"]>;
  /** The type of relation of the project to the related project. */
  type: Scalars["String"];
};

export type ProjectRelationEdge = {
  __typename?: "ProjectRelationEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: ProjectRelation;
};

export type ProjectRelationPayload = {
  __typename?: "ProjectRelationPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** The project relation that was created or updated. */
  projectRelation: ProjectRelation;
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type ProjectRelationUpdateInput = {
  /** The type of the anchor for the project. */
  anchorType?: Maybe<Scalars["String"]>;
  /** The identifier of the project that is related to another project. */
  projectId?: Maybe<Scalars["String"]>;
  /** The identifier of the project milestone. */
  projectMilestoneId?: Maybe<Scalars["String"]>;
  /** The type of the anchor for the related project. */
  relatedAnchorType?: Maybe<Scalars["String"]>;
  /** The identifier of the related project. */
  relatedProjectId?: Maybe<Scalars["String"]>;
  /** The identifier of the related project milestone. */
  relatedProjectMilestoneId?: Maybe<Scalars["String"]>;
  /** The type of relation of the project to the related project. */
  type?: Maybe<Scalars["String"]>;
};

export type ProjectSearchPayload = {
  __typename?: "ProjectSearchPayload";
  /** Archived entities matching the search term along with all their dependencies. */
  archivePayload: ArchiveResponse;
  edges: Array<ProjectSearchResultEdge>;
  nodes: Array<ProjectSearchResult>;
  pageInfo: PageInfo;
  /** Total number of results for query without filters applied. */
  totalCount: Scalars["Float"];
};

export type ProjectSearchResult = Node & {
  __typename?: "ProjectSearchResult";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the project was automatically archived by the auto pruning process. */
  autoArchivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the project was moved into canceled state. */
  canceledAt?: Maybe<Scalars["DateTime"]>;
  /** The project's color. */
  color: Scalars["String"];
  /** Comments associated with the project overview. */
  comments: CommentConnection;
  /** The time at which the project was moved into completed state. */
  completedAt?: Maybe<Scalars["DateTime"]>;
  /** The number of completed issues in the project after each week. */
  completedIssueCountHistory: Array<Scalars["Float"]>;
  /** The number of completed estimation points after each week. */
  completedScopeHistory: Array<Scalars["Float"]>;
  /** The project's content in markdown format. */
  content?: Maybe<Scalars["String"]>;
  /** [Internal] The project's content as YJS state. */
  contentState?: Maybe<Scalars["String"]>;
  /** The project was created based on this issue. */
  convertedFromIssue?: Maybe<Issue>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The user who created the project. */
  creator?: Maybe<User>;
  /** [INTERNAL] The current progress of the project. */
  currentProgress: Scalars["JSONObject"];
  /** The project's description. */
  description: Scalars["String"];
  /** The content of the project description. */
  documentContent?: Maybe<DocumentContent>;
  /** Documents associated with the project. */
  documents: DocumentConnection;
  /** External links associated with the project. */
  externalLinks: EntityExternalLinkConnection;
  /** [Internal] Facets associated with the project. */
  facets: Array<Facet>;
  /** The user's favorite associated with this project. */
  favorite?: Maybe<Favorite>;
  /** The resolution of the reminder frequency. */
  frequencyResolution: FrequencyResolutionType;
  /** The health of the project. */
  health?: Maybe<ProjectUpdateHealthType>;
  /** The time at which the project health was updated. */
  healthUpdatedAt?: Maybe<Scalars["DateTime"]>;
  /** History entries associated with the project. */
  history: ProjectHistoryConnection;
  /** The icon of the project. */
  icon?: Maybe<Scalars["String"]>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The number of in progress estimation points after each week. */
  inProgressScopeHistory: Array<Scalars["Float"]>;
  /** Initiatives that this project belongs to. */
  initiatives: InitiativeConnection;
  /** Settings for all integrations associated with that project. */
  integrationsSettings?: Maybe<IntegrationsSettings>;
  /** Inverse relations associated with this project. */
  inverseRelations: ProjectRelationConnection;
  /** The total number of issues in the project after each week. */
  issueCountHistory: Array<Scalars["Float"]>;
  /** Issues associated with the project. */
  issues: IssueConnection;
  /** Id of the labels associated with this project. */
  labelIds: Array<Scalars["String"]>;
  /** Labels associated with this project. */
  labels: ProjectLabelConnection;
  /** The last template that was applied to this project. */
  lastAppliedTemplate?: Maybe<Template>;
  /** The last project update posted for this project. */
  lastUpdate?: Maybe<ProjectUpdate>;
  /** The project lead. */
  lead?: Maybe<User>;
  /** Users that are members of the project. */
  members: UserConnection;
  /** Metadata related to search result. */
  metadata: Scalars["JSONObject"];
  /** The project's name. */
  name: Scalars["String"];
  /** Customer needs associated with the project. */
  needs: CustomerNeedConnection;
  /** The priority of the project. 0 = No priority, 1 = Urgent, 2 = High, 3 = Normal, 4 = Low. */
  priority: Scalars["Int"];
  /** The priority of the project as a label. */
  priorityLabel: Scalars["String"];
  /** The sort order for the project within the organization, when ordered by priority. */
  prioritySortOrder: Scalars["Float"];
  /** The overall progress of the project. This is the (completed estimate points + 0.25 * in progress estimate points) / total estimate points. */
  progress: Scalars["Float"];
  /** [INTERNAL] The progress history of the project. */
  progressHistory: Scalars["JSONObject"];
  /** Milestones associated with the project. */
  projectMilestones: ProjectMilestoneConnection;
  /** The time until which project update reminders are paused. */
  projectUpdateRemindersPausedUntilAt?: Maybe<Scalars["DateTime"]>;
  /** Project updates associated with the project. */
  projectUpdates: ProjectUpdateConnection;
  /** Relations associated with this project. */
  relations: ProjectRelationConnection;
  /** The overall scope (total estimate points) of the project. */
  scope: Scalars["Float"];
  /** The total number of estimation points after each week. */
  scopeHistory: Array<Scalars["Float"]>;
  /**
   * Whether to send new issue comment notifications to Slack.
   * @deprecated No longer in use
   */
  slackIssueComments: Scalars["Boolean"];
  /**
   * Whether to send new issue status updates to Slack.
   * @deprecated No longer is use
   */
  slackIssueStatuses: Scalars["Boolean"];
  /**
   * Whether to send new issue notifications to Slack.
   * @deprecated No longer in use
   */
  slackNewIssue: Scalars["Boolean"];
  /** The project's unique URL slug. */
  slugId: Scalars["String"];
  /** The sort order for the project within the organization. */
  sortOrder: Scalars["Float"];
  /** The estimated start date of the project. */
  startDate?: Maybe<Scalars["TimelessDate"]>;
  /** The resolution of the project's start date. */
  startDateResolution?: Maybe<DateResolutionType>;
  /** The time at which the project was moved into started state. */
  startedAt?: Maybe<Scalars["DateTime"]>;
  /**
   * [DEPRECATED] The type of the state.
   * @deprecated Use project.status instead
   */
  state: Scalars["String"];
  /** The status that the project is associated with. */
  status: ProjectStatus;
  /** The estimated completion date of the project. */
  targetDate?: Maybe<Scalars["TimelessDate"]>;
  /** The resolution of the project's estimated completion date. */
  targetDateResolution?: Maybe<DateResolutionType>;
  /** Teams associated with this project. */
  teams: TeamConnection;
  /** A flag that indicates whether the project is in the trash bin. */
  trashed?: Maybe<Scalars["Boolean"]>;
  /** The frequency at which to prompt for updates. When not set, reminders are inherited from workspace. */
  updateReminderFrequency?: Maybe<Scalars["Float"]>;
  /** The n-weekly frequency at which to prompt for updates. When not set, reminders are inherited from workspace. */
  updateReminderFrequencyInWeeks?: Maybe<Scalars["Float"]>;
  /** The day at which to prompt for updates. */
  updateRemindersDay?: Maybe<Day>;
  /** The hour at which to prompt for updates. */
  updateRemindersHour?: Maybe<Scalars["Float"]>;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** Project URL. */
  url: Scalars["String"];
};

export type ProjectSearchResultCommentsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CommentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type ProjectSearchResultDocumentsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<DocumentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type ProjectSearchResultExternalLinksArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type ProjectSearchResultHistoryArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type ProjectSearchResultInitiativesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type ProjectSearchResultInverseRelationsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type ProjectSearchResultIssuesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type ProjectSearchResultLabelsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<ProjectLabelFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type ProjectSearchResultMembersArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<UserFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  includeDisabled?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type ProjectSearchResultNeedsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CustomerNeedFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type ProjectSearchResultProjectMilestonesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<ProjectMilestoneFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type ProjectSearchResultProjectUpdatesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type ProjectSearchResultRelationsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type ProjectSearchResultTeamsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<TeamFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type ProjectSearchResultEdge = {
  __typename?: "ProjectSearchResultEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: ProjectSearchResult;
};

/** Issue project sorting options. */
export type ProjectSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

/** Project sorting options. */
export type ProjectSortInput = {
  /** Sort by project creation date */
  createdAt?: Maybe<ProjectCreatedAtSort>;
  /** Sort by project health status. */
  health?: Maybe<ProjectHealthSort>;
  /** Sort by project lead name. */
  lead?: Maybe<ProjectLeadSort>;
  /** Sort by manual order */
  manual?: Maybe<ProjectManualSort>;
  /** Sort by project name */
  name?: Maybe<ProjectNameSort>;
  /** Sort by project priority */
  priority?: Maybe<ProjectPrioritySort>;
  /** Sort by project start date */
  startDate?: Maybe<StartDateSort>;
  /** Sort by project status */
  status?: Maybe<ProjectStatusSort>;
  /** Sort by project target date */
  targetDate?: Maybe<TargetDateSort>;
  /** Sort by project update date */
  updatedAt?: Maybe<ProjectUpdatedAtSort>;
};

/** A project status. */
export type ProjectStatus = Node & {
  __typename?: "ProjectStatus";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The UI color of the status as a HEX string. */
  color: Scalars["String"];
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** Description of the status. */
  description?: Maybe<Scalars["String"]>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** Whether or not a project can be in this status indefinitely. */
  indefinite: Scalars["Boolean"];
  /** The name of the status. */
  name: Scalars["String"];
  /** The position of the status in the workspace's project flow. */
  position: Scalars["Float"];
  /** The type of the project status. */
  type: ProjectStatusType;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

/** A generic payload return from entity archive mutations. */
export type ProjectStatusArchivePayload = ArchivePayload & {
  __typename?: "ProjectStatusArchivePayload";
  /** The archived/unarchived entity. Null if entity was deleted. */
  entity?: Maybe<ProjectStatus>;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** Certain properties of a project status. */
export type ProjectStatusChildWebhookPayload = {
  __typename?: "ProjectStatusChildWebhookPayload";
  /** The color of the project status. */
  color: Scalars["String"];
  /** The ID of the project status. */
  id: Scalars["String"];
  /** The name of the project status. */
  name: Scalars["String"];
  /** The type of the project status. */
  type: Scalars["String"];
};

export type ProjectStatusConnection = {
  __typename?: "ProjectStatusConnection";
  edges: Array<ProjectStatusEdge>;
  nodes: Array<ProjectStatus>;
  pageInfo: PageInfo;
};

export type ProjectStatusCountPayload = {
  __typename?: "ProjectStatusCountPayload";
  /** Total number of projects using this project status that are not visible to the user because they are in an archived team. */
  archivedTeamCount: Scalars["Float"];
  /** Total number of projects using this project status. */
  count: Scalars["Float"];
  /** Total number of projects using this project status that are not visible to the user because they are in a private team. */
  privateCount: Scalars["Float"];
};

export type ProjectStatusCreateInput = {
  /** The UI color of the status as a HEX string. */
  color: Scalars["String"];
  /** Description of the status. */
  description?: Maybe<Scalars["String"]>;
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** Whether or not a project can be in this status indefinitely. */
  indefinite?: Maybe<Scalars["Boolean"]>;
  /** The name of the status. */
  name: Scalars["String"];
  /** The position of the status in the workspace's project flow. */
  position: Scalars["Float"];
  /** The type of the project status. */
  type: ProjectStatusType;
};

export type ProjectStatusEdge = {
  __typename?: "ProjectStatusEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: ProjectStatus;
};

/** Project status filtering options. */
export type ProjectStatusFilter = {
  /** Compound filters, all of which need to be matched by the project status. */
  and?: Maybe<Array<ProjectStatusFilter>>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Comparator for the project status description. */
  description?: Maybe<StringComparator>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Comparator for the project status name. */
  name?: Maybe<StringComparator>;
  /** Compound filters, one of which needs to be matched by the project status. */
  or?: Maybe<Array<ProjectStatusFilter>>;
  /** Comparator for the project status position. */
  position?: Maybe<NumberComparator>;
  /** Filters that the project status projects must satisfy. */
  projects?: Maybe<ProjectCollectionFilter>;
  /** Comparator for the project status type. */
  type?: Maybe<StringComparator>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

export type ProjectStatusPayload = {
  __typename?: "ProjectStatusPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** The project status that was created or updated. */
  status: ProjectStatus;
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** Project status sorting options. */
export type ProjectStatusSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

/** A type of project status. */
export enum ProjectStatusType {
  Backlog = "backlog",
  Canceled = "canceled",
  Completed = "completed",
  Paused = "paused",
  Planned = "planned",
  Started = "started",
}

export type ProjectStatusUpdateInput = {
  /** The UI color of the status as a HEX string. */
  color?: Maybe<Scalars["String"]>;
  /** Description of the status. */
  description?: Maybe<Scalars["String"]>;
  /** Whether or not a project can be in this status indefinitely. */
  indefinite?: Maybe<Scalars["Boolean"]>;
  /** The name of the status. */
  name?: Maybe<Scalars["String"]>;
  /** The position of the status in the workspace's project flow. */
  position?: Maybe<Scalars["Float"]>;
  /** The type of the project status. */
  type?: Maybe<ProjectStatusType>;
};

/** Different tabs available inside a project. */
export enum ProjectTab {
  Customers = "customers",
  Documents = "documents",
  Issues = "issues",
  Updates = "updates",
}

/** An update associated with a project. */
export type ProjectUpdate = Node & {
  __typename?: "ProjectUpdate";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The update content in markdown format. */
  body: Scalars["String"];
  /** [Internal] The content of the update as a Prosemirror document. */
  bodyData: Scalars["String"];
  /** Comments associated with the project update. */
  comments: CommentConnection;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The diff between the current update and the previous one. */
  diff?: Maybe<Scalars["JSONObject"]>;
  /** The diff between the current update and the previous one, formatted as markdown. */
  diffMarkdown?: Maybe<Scalars["String"]>;
  /** The time the update was edited. */
  editedAt?: Maybe<Scalars["DateTime"]>;
  /** The health of the project at the time of the update. */
  health: ProjectUpdateHealthType;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** [Internal] Serialized JSON representing current state of the project properties when posting the project update. */
  infoSnapshot?: Maybe<Scalars["JSONObject"]>;
  /** Whether project update diff should be hidden. */
  isDiffHidden: Scalars["Boolean"];
  /** Whether the project update is stale. */
  isStale: Scalars["Boolean"];
  /** The project that the update is associated with. */
  project: Project;
  /** Emoji reaction summary, grouped by emoji type. */
  reactionData: Scalars["JSONObject"];
  /** Reactions associated with the project update. */
  reactions: Array<Reaction>;
  /** The update's unique URL slug. */
  slugId: Scalars["String"];
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** The URL to the project update. */
  url: Scalars["String"];
  /** The user who wrote the update. */
  user: User;
};

/** An update associated with a project. */
export type ProjectUpdateCommentsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CommentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** A generic payload return from entity archive mutations. */
export type ProjectUpdateArchivePayload = ArchivePayload & {
  __typename?: "ProjectUpdateArchivePayload";
  /** The archived/unarchived entity. Null if entity was deleted. */
  entity?: Maybe<ProjectUpdate>;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** Certain properties of a project update. */
export type ProjectUpdateChildWebhookPayload = {
  __typename?: "ProjectUpdateChildWebhookPayload";
  /** The body of the project update. */
  body: Scalars["String"];
  /** The ID of the project update. */
  id: Scalars["String"];
  /** The project that the project update belongs to. */
  project: ProjectChildWebhookPayload;
  /** The ID of the user who wrote the project update. */
  userId: Scalars["String"];
};

export type ProjectUpdateConnection = {
  __typename?: "ProjectUpdateConnection";
  edges: Array<ProjectUpdateEdge>;
  nodes: Array<ProjectUpdate>;
  pageInfo: PageInfo;
};

export type ProjectUpdateCreateInput = {
  /** The content of the project update in markdown format. */
  body?: Maybe<Scalars["String"]>;
  /** [Internal] The content of the project update as a Prosemirror document. */
  bodyData?: Maybe<Scalars["JSON"]>;
  /** The health of the project at the time of the update. */
  health?: Maybe<ProjectUpdateHealthType>;
  /** The identifier. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** Whether the diff between the current update and the previous one should be hidden. */
  isDiffHidden?: Maybe<Scalars["Boolean"]>;
  /** The project to associate the project update with. */
  projectId: Scalars["String"];
};

export type ProjectUpdateEdge = {
  __typename?: "ProjectUpdateEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: ProjectUpdate;
};

/** Options for filtering project updates. */
export type ProjectUpdateFilter = {
  /** Compound filters, all of which need to be matched by the ProjectUpdate. */
  and?: Maybe<Array<ProjectUpdateFilter>>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Compound filters, one of which need to be matched by the ProjectUpdate. */
  or?: Maybe<Array<ProjectUpdateFilter>>;
  /** Filters that the project update project must satisfy. */
  project?: Maybe<ProjectFilter>;
  /** Filters that the project updates reactions must satisfy. */
  reactions?: Maybe<ReactionCollectionFilter>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
  /** Filters that the project update creator must satisfy. */
  user?: Maybe<UserFilter>;
};

/** The health type when the project update is created. */
export enum ProjectUpdateHealthType {
  AtRisk = "atRisk",
  OffTrack = "offTrack",
  OnTrack = "onTrack",
}

export type ProjectUpdateInput = {
  /** The date when the project was canceled. */
  canceledAt?: Maybe<Scalars["DateTime"]>;
  /** The color of the project. */
  color?: Maybe<Scalars["String"]>;
  /** The date when the project was completed. */
  completedAt?: Maybe<Scalars["DateTime"]>;
  /** The project content as markdown. */
  content?: Maybe<Scalars["String"]>;
  /** The ID of the issue from which that project is created. */
  convertedFromIssueId?: Maybe<Scalars["String"]>;
  /** The description for the project. */
  description?: Maybe<Scalars["String"]>;
  /** The frequency resolution. */
  frequencyResolution?: Maybe<FrequencyResolutionType>;
  /** The icon of the project. */
  icon?: Maybe<Scalars["String"]>;
  /** The identifiers of the project labels associated with this project. */
  labelIds?: Maybe<Array<Scalars["String"]>>;
  /** The ID of the last template applied to the project. */
  lastAppliedTemplateId?: Maybe<Scalars["String"]>;
  /** The identifier of the project lead. */
  leadId?: Maybe<Scalars["String"]>;
  /** The identifiers of the members of this project. */
  memberIds?: Maybe<Array<Scalars["String"]>>;
  /** The name of the project. */
  name?: Maybe<Scalars["String"]>;
  /** The priority of the project. 0 = No priority, 1 = Urgent, 2 = High, 3 = Normal, 4 = Low. */
  priority?: Maybe<Scalars["Int"]>;
  /** The sort order for the project within shared views, when ordered by priority. */
  prioritySortOrder?: Maybe<Scalars["Float"]>;
  /** The time until which project update reminders are paused. */
  projectUpdateRemindersPausedUntilAt?: Maybe<Scalars["DateTime"]>;
  /** Whether to send new issue comment notifications to Slack. */
  slackIssueComments?: Maybe<Scalars["Boolean"]>;
  /** Whether to send issue status update notifications to Slack. */
  slackIssueStatuses?: Maybe<Scalars["Boolean"]>;
  /** Whether to send new issue notifications to Slack. */
  slackNewIssue?: Maybe<Scalars["Boolean"]>;
  /** The sort order for the project in shared views. */
  sortOrder?: Maybe<Scalars["Float"]>;
  /** The planned start date of the project. */
  startDate?: Maybe<Scalars["TimelessDate"]>;
  /** The resolution of the project's start date. */
  startDateResolution?: Maybe<DateResolutionType>;
  /** The ID of the project status. */
  statusId?: Maybe<Scalars["String"]>;
  /** The planned target date of the project. */
  targetDate?: Maybe<Scalars["TimelessDate"]>;
  /** The resolution of the project's estimated completion date. */
  targetDateResolution?: Maybe<DateResolutionType>;
  /** The identifiers of the teams this project is associated with. */
  teamIds?: Maybe<Array<Scalars["String"]>>;
  /** Whether the project has been trashed. */
  trashed?: Maybe<Scalars["Boolean"]>;
  /** The frequency at which to prompt for updates. When not set, reminders are inherited from workspace. */
  updateReminderFrequency?: Maybe<Scalars["Float"]>;
  /** The n-weekly frequency at which to prompt for updates. When not set, reminders are inherited from workspace. */
  updateReminderFrequencyInWeeks?: Maybe<Scalars["Float"]>;
  /** The day at which to prompt for updates. */
  updateRemindersDay?: Maybe<Day>;
  /** The hour at which to prompt for updates. */
  updateRemindersHour?: Maybe<Scalars["Int"]>;
};

export type ProjectUpdatePayload = {
  __typename?: "ProjectUpdatePayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** The project update that was created or updated. */
  projectUpdate: ProjectUpdate;
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** The frequency at which to send project update reminders. */
export enum ProjectUpdateReminderFrequency {
  Month = "month",
  Never = "never",
  TwoWeeks = "twoWeeks",
  Week = "week",
}

export type ProjectUpdateReminderPayload = {
  __typename?: "ProjectUpdateReminderPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type ProjectUpdateUpdateInput = {
  /** The content of the project update in markdown format. */
  body?: Maybe<Scalars["String"]>;
  /** The content of the project update as a Prosemirror document. */
  bodyData?: Maybe<Scalars["JSON"]>;
  /** The health of the project at the time of the update. */
  health?: Maybe<ProjectUpdateHealthType>;
  /** Whether the diff between the current update and the previous one should be hidden. */
  isDiffHidden?: Maybe<Scalars["Boolean"]>;
};

/** Payload for a project update webhook. */
export type ProjectUpdateWebhookPayload = {
  __typename?: "ProjectUpdateWebhookPayload";
  /** The time at which the entity was archived. */
  archivedAt?: Maybe<Scalars["String"]>;
  /** The body of the project update. */
  body: Scalars["String"];
  /** The body data of the project update. */
  bodyData: Scalars["String"];
  /** The time at which the entity was created. */
  createdAt: Scalars["String"];
  /** The edited at timestamp of the project update. */
  editedAt: Scalars["String"];
  /** The health of the project update. */
  health: Scalars["String"];
  /** The ID of the entity. */
  id: Scalars["String"];
  /** The project that the project update belongs to. */
  project: ProjectChildWebhookPayload;
  /** The project id of the project update. */
  projectId: Scalars["String"];
  /** The reaction data for this project update. */
  reactionData: Scalars["JSONObject"];
  /** The slug id of the project update. */
  slugId: Scalars["String"];
  /** The time at which the entity was updated. */
  updatedAt: Scalars["String"];
  /** The URL of the project update. */
  url?: Maybe<Scalars["String"]>;
  /** The user who wrote the project update. */
  user: UserChildWebhookPayload;
  /** The user id of the project update. */
  userId: Scalars["String"];
};

/** Project update date sorting options. */
export type ProjectUpdatedAtSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

/** Collection filtering options for filtering projects by project updates. */
export type ProjectUpdatesCollectionFilter = {
  /** Compound filters, all of which need to be matched by the project update. */
  and?: Maybe<Array<ProjectUpdatesCollectionFilter>>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Filters that needs to be matched by all updates. */
  every?: Maybe<ProjectUpdatesFilter>;
  /** Comparator for the project update health. */
  health?: Maybe<StringComparator>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Comparator for the collection length. */
  length?: Maybe<NumberComparator>;
  /** Compound filters, one of which need to be matched by the update. */
  or?: Maybe<Array<ProjectUpdatesCollectionFilter>>;
  /** Filters that needs to be matched by some updates. */
  some?: Maybe<ProjectUpdatesFilter>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

/** Options for filtering projects by project updates. */
export type ProjectUpdatesFilter = {
  /** Compound filters, all of which need to be matched by the project updates. */
  and?: Maybe<Array<ProjectUpdatesFilter>>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Comparator for the project update health. */
  health?: Maybe<StringComparator>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Compound filters, one of which need to be matched by the project updates. */
  or?: Maybe<Array<ProjectUpdatesFilter>>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

/** Payload for a project webhook. */
export type ProjectWebhookPayload = {
  __typename?: "ProjectWebhookPayload";
  /** The time at which the entity was archived. */
  archivedAt?: Maybe<Scalars["String"]>;
  /** The auto archived at timestamp of the project. */
  autoArchivedAt?: Maybe<Scalars["String"]>;
  /** The canceled at timestamp of the project. */
  canceledAt?: Maybe<Scalars["String"]>;
  /** The project's color. */
  color: Scalars["String"];
  /** The completed at timestamp of the project. */
  completedAt?: Maybe<Scalars["String"]>;
  /** The number of completed issues in the project after each week. */
  completedIssueCountHistory: Array<Scalars["Float"]>;
  /** The number of completed estimation points after each week. */
  completedScopeHistory: Array<Scalars["Float"]>;
  /** The content of the project. */
  content?: Maybe<Scalars["String"]>;
  /** The ID of the issue that was converted to the project. */
  convertedFromIssueId?: Maybe<Scalars["String"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["String"];
  /** The ID of the user who created the project. */
  creatorId?: Maybe<Scalars["String"]>;
  /** The project's description. */
  description: Scalars["String"];
  /** The document content ID of the project. */
  documentContentId?: Maybe<Scalars["String"]>;
  /** The health of the project. */
  health?: Maybe<Scalars["String"]>;
  /** The time at which the project health was updated. */
  healthUpdatedAt?: Maybe<Scalars["String"]>;
  /** The icon of the project. */
  icon?: Maybe<Scalars["String"]>;
  /** The ID of the entity. */
  id: Scalars["String"];
  /** The number of in progress estimation points after each week. */
  inProgressScopeHistory: Array<Scalars["Float"]>;
  /** The initiatives associated with the project. */
  initiatives?: Maybe<Array<InitiativeChildWebhookPayload>>;
  /** The total number of issues in the project after each week. */
  issueCountHistory: Array<Scalars["Float"]>;
  /** IDs of the labels associated with this project. */
  labelIds: Array<Scalars["String"]>;
  /** The ID of the last template that was applied to the project. */
  lastAppliedTemplateId?: Maybe<Scalars["String"]>;
  /** The ID of the last update posted for this project. */
  lastUpdateId?: Maybe<Scalars["String"]>;
  /** The project lead. */
  lead?: Maybe<UserChildWebhookPayload>;
  /** The ID of the project lead. */
  leadId?: Maybe<Scalars["String"]>;
  /** IDs of the members of the project. */
  memberIds: Array<Scalars["String"]>;
  /** The milestones associated with the project. */
  milestones?: Maybe<Array<ProjectMilestoneChildWebhookPayload>>;
  /** The project's name. */
  name: Scalars["String"];
  /** The priority of the project. 0 = No priority, 1 = Urgent, 2 = High, 3 = Normal, 4 = Low. */
  priority: Scalars["Float"];
  /** The sort order for the project within the organization, when ordered by priority. */
  prioritySortOrder: Scalars["Float"];
  /** The time at which the project update reminders were paused until. */
  projectUpdateRemindersPausedUntilAt?: Maybe<Scalars["String"]>;
  /** The total number of estimation points after each week. */
  scopeHistory: Array<Scalars["Float"]>;
  /** The project's unique URL slug. */
  slugId: Scalars["String"];
  /** The sort order for the project within the organization. */
  sortOrder: Scalars["Float"];
  /** The estimated start date of the project. */
  startDate?: Maybe<Scalars["String"]>;
  /** The resolution of the project's estimated start date. */
  startDateResolution?: Maybe<Scalars["String"]>;
  /** The time at which the project was moved into started state. */
  startedAt?: Maybe<Scalars["String"]>;
  /** The project status. */
  status?: Maybe<ProjectStatusChildWebhookPayload>;
  /** The ID of the project status. */
  statusId: Scalars["String"];
  /** The target date of the project. */
  targetDate?: Maybe<Scalars["String"]>;
  /** The resolution of the project's target date. */
  targetDateResolution?: Maybe<Scalars["String"]>;
  /** IDs of the teams associated with this project. */
  teamIds: Array<Scalars["String"]>;
  /** The trashed status of the project. */
  trashed?: Maybe<Scalars["Boolean"]>;
  /** The time at which the entity was updated. */
  updatedAt: Scalars["String"];
  /** The URL of the project. */
  url: Scalars["String"];
};

/** [Internal] A pull request in a version control system. */
export type PullRequest = Node & {
  __typename?: "PullRequest";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** Merge settings for this pull request. */
  mergeSettings?: Maybe<PullRequestMergeSettings>;
  /** The number of the pull request in the version control system. */
  number: Scalars["Float"];
  /** The source branch of the pull request. */
  sourceBranch: Scalars["String"];
  /** The status of the pull request. */
  status: PullRequestStatus;
  /** The target branch of the pull request. */
  targetBranch: Scalars["String"];
  /** The title of the pull request. */
  title: Scalars["String"];
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** The URL of the pull request in the version control system. */
  url: Scalars["String"];
};

/** The method used to merge a pull request. */
export enum PullRequestMergeMethod {
  Merge = "MERGE",
  Rebase = "REBASE",
  Squash = "SQUASH",
}

/** [Internal] Merge settings for a pull request */
export type PullRequestMergeSettings = {
  __typename?: "PullRequestMergeSettings";
  /** Whether auto-merge is allowed for the PR's repository. */
  autoMergeAllowed: Scalars["Boolean"];
  /** Whether the branch will be deleted when the pull request is merged. */
  deleteBranchOnMerge: Scalars["Boolean"];
  /** Whether merge queue is enabled for this repository. */
  isMergeQueueEnabled: Scalars["Boolean"];
  /** Whether merge commits are allowed for pull requests PR's repository. */
  mergeCommitAllowed: Scalars["Boolean"];
  /** The method used to merge a pull request. */
  mergeQueueMergeMethod?: Maybe<PullRequestMergeMethod>;
  /** Whether rebase merge is allowed for pull requests PR's repository. */
  rebaseMergeAllowed: Scalars["Boolean"];
  /** Whether squash merge is allowed for this pull request's repository. */
  squashMergeAllowed: Scalars["Boolean"];
};

/** A pull request related notification. */
export type PullRequestNotification = Entity &
  Node &
  Notification & {
    __typename?: "PullRequestNotification";
    /** The user that caused the notification. */
    actor?: Maybe<User>;
    /** [Internal] Notification actor initials if avatar is not available. */
    actorAvatarColor: Scalars["String"];
    /** [Internal] Notification avatar URL. */
    actorAvatarUrl?: Maybe<Scalars["String"]>;
    /** [Internal] Notification actor initials if avatar is not available. */
    actorInitials?: Maybe<Scalars["String"]>;
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: Maybe<Scalars["DateTime"]>;
    /** The bot that caused the notification. */
    botActor?: Maybe<ActorBot>;
    /** The category of the notification. */
    category: NotificationCategory;
    /** Related comment ID. Null if the notification is not related to a comment. */
    commentId?: Maybe<Scalars["String"]>;
    /** The time at which the entity was created. */
    createdAt: Scalars["DateTime"];
    /**
     * The time at when an email reminder for this notification was sent to the user. Null, if no email
     *     reminder has been sent.
     */
    emailedAt?: Maybe<Scalars["DateTime"]>;
    /** The external user that caused the notification. */
    externalUserActor?: Maybe<ExternalUser>;
    /** [Internal] Notifications with the same grouping key will be grouped together in the UI. */
    groupingKey: Scalars["String"];
    /** [Internal] Priority of the notification with the same grouping key. Higher number means higher priority. If priority is the same, notifications should be sorted by `createdAt`. */
    groupingPriority: Scalars["Float"];
    /** The unique identifier of the entity. */
    id: Scalars["ID"];
    /** [Internal] Inbox URL for the notification. */
    inboxUrl: Scalars["String"];
    /** [Internal] If notification actor was Linear. */
    isLinearActor: Scalars["Boolean"];
    /** [Internal] Issue's status type for issue notifications. */
    issueStatusType?: Maybe<Scalars["String"]>;
    /** Related parent comment ID. Null if the notification is not related to a comment. */
    parentCommentId?: Maybe<Scalars["String"]>;
    /** [Internal] Project update health for new updates. */
    projectUpdateHealth?: Maybe<Scalars["String"]>;
    /** The pull request related to the notification. */
    pullRequest: PullRequest;
    /** Related pull request. */
    pullRequestId: Scalars["String"];
    /** Name of the reaction emoji related to the notification. */
    reactionEmoji?: Maybe<Scalars["String"]>;
    /** The time at when the user marked the notification as read. Null, if the the user hasn't read the notification */
    readAt?: Maybe<Scalars["DateTime"]>;
    /** The time until a notification will be snoozed. After that it will appear in the inbox again. */
    snoozedUntilAt?: Maybe<Scalars["DateTime"]>;
    /** [Internal] Notification subtitle. */
    subtitle: Scalars["String"];
    /** [Internal] Notification title. */
    title: Scalars["String"];
    /** Notification type. */
    type: Scalars["String"];
    /** The time at which a notification was unsnoozed.. */
    unsnoozedAt?: Maybe<Scalars["DateTime"]>;
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars["DateTime"];
    /** [Internal] URL to the target of the notification. */
    url: Scalars["String"];
    /** The user that received the notification. */
    user: User;
  };

export enum PullRequestReviewTool {
  Graphite = "graphite",
  Source = "source",
}

/** The status of a pull request. */
export enum PullRequestStatus {
  Approved = "approved",
  Closed = "closed",
  Draft = "draft",
  InReview = "inReview",
  Merged = "merged",
  Open = "open",
}

/** A user's web or mobile push notification subscription. */
export type PushSubscription = Node & {
  __typename?: "PushSubscription";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

export type PushSubscriptionCreateInput = {
  /** The data of the subscription in stringified JSON format. */
  data: Scalars["String"];
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** Whether this is a subscription payload for Google Cloud Messaging or Apple Push Notification service. */
  type?: Maybe<PushSubscriptionType>;
};

export type PushSubscriptionPayload = {
  __typename?: "PushSubscriptionPayload";
  /** The push subscription that was created or updated. */
  entity: PushSubscription;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type PushSubscriptionTestPayload = {
  __typename?: "PushSubscriptionTestPayload";
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** The different push subscription types. */
export enum PushSubscriptionType {
  Apple = "apple",
  AppleDevelopment = "appleDevelopment",
  Firebase = "firebase",
  Web = "web",
}

export type Query = {
  __typename?: "Query";
  _dummy: Scalars["String"];
  /** All teams you the user can administrate. Administrable teams are teams whose settings the user can change, but to whose issues the user doesn't necessarily have access to. */
  administrableTeams: TeamConnection;
  /** All agent activities. */
  agentActivities: AgentActivityConnection;
  /** A specific agent activity. */
  agentActivity: AgentActivity;
  /** A specific agent session. */
  agentSession: AgentSession;
  /** All agent sessions. */
  agentSessions: AgentSessionConnection;
  /** All API keys for the user. */
  apiKeys: ApiKeyConnection;
  /** Get basic information for an application. */
  applicationInfo: Application;
  /** [INTERNAL] Get basic information for a list of applications. */
  applicationInfoByIds: Array<Application>;
  /**
   * [DEPRECATED] [INTERNAL] Get information for a list of applications with memberships
   * @deprecated Use more efficient `workspaceAuthorizedApplicationsWithAppUser` and `workspaceAuthorizedApplication` instead.
   */
  applicationInfoWithMembershipsByIds: Array<WorkspaceAuthorizedApplication>;
  /** Get information for an application and whether a user has approved it for the given scopes. */
  applicationWithAuthorization: UserAuthorizedApplication;
  /** [Internal] All archived teams of the organization. */
  archivedTeams: Array<Team>;
  /**
   * One specific issue attachment.
   * [Deprecated] 'url' can no longer be used as the 'id' parameter. Use 'attachmentsForUrl' instead
   */
  attachment: Attachment;
  /**
   * Query an issue by its associated attachment, and its id.
   * @deprecated Will be removed in near future, please use `attachmentsForURL` to get attachments and their issues instead.
   */
  attachmentIssue: Issue;
  /** [Internal] Get a list of all unique attachment sources in the workspace. */
  attachmentSources: AttachmentSourcesPayload;
  /**
   * All issue attachments.
   *
   * To get attachments for a given URL, use `attachmentsForURL` query.
   */
  attachments: AttachmentConnection;
  /** Returns issue attachments for a given `url`. */
  attachmentsForURL: AttachmentConnection;
  /** All audit log entries. */
  auditEntries: AuditEntryConnection;
  /** List of audit entry types. */
  auditEntryTypes: Array<AuditEntryType>;
  /** User's active sessions. */
  authenticationSessions: Array<AuthenticationSessionResponse>;
  /** [INTERNAL] Get all authorized applications for a user. */
  authorizedApplications: Array<AuthorizedApplication>;
  /** Fetch users belonging to this user account. */
  availableUsers: AuthResolverResponse;
  /** A specific comment. */
  comment: Comment;
  /** All comments. */
  comments: CommentConnection;
  /** One specific custom view. */
  customView: CustomView;
  /** [INTERNAL] Suggests metadata for a view based on it's filters. */
  customViewDetailsSuggestion: CustomViewSuggestionPayload;
  /** Whether a custom view has other subscribers than the current user in the organization. */
  customViewHasSubscribers: CustomViewHasSubscribersPayload;
  /** Custom views for the user. */
  customViews: CustomViewConnection;
  /** One specific customer. */
  customer: Customer;
  /** One specific customer need */
  customerNeed: CustomerNeed;
  /** All customer needs. */
  customerNeeds: CustomerNeedConnection;
  /** One specific customer status. */
  customerStatus: CustomerStatus;
  /** All customer statuses. */
  customerStatuses: CustomerStatusConnection;
  /** One specific customer tier. */
  customerTier: CustomerTier;
  /** All customer tiers. */
  customerTiers: CustomerTierConnection;
  /** All customers. */
  customers: CustomerConnection;
  /** One specific cycle. */
  cycle: Cycle;
  /** All cycles. */
  cycles: CycleConnection;
  /** One specific document. */
  document: Document;
  /** A collection of document content history entries. */
  documentContentHistory: DocumentContentHistoryPayload;
  /** All documents in the workspace. */
  documents: DocumentConnection;
  /** One specific email intake address. */
  emailIntakeAddress: EmailIntakeAddress;
  /** A specific emoji. */
  emoji: Emoji;
  /** All custom emojis. */
  emojis: EmojiConnection;
  /** One specific entity link. */
  entityExternalLink: EntityExternalLink;
  /** One specific external user. */
  externalUser: ExternalUser;
  /** All external users for the organization. */
  externalUsers: ExternalUserConnection;
  /** [INTERNAL] Webhook failure events for webhooks that belong to an OAuth application. (last 50) */
  failuresForOauthWebhooks: Array<WebhookFailureEvent>;
  /** One specific favorite. */
  favorite: Favorite;
  /** The user's favorites. */
  favorites: FavoriteConnection;
  /** [Internal] Fetch an arbitrary set of data using natural language query. Be specific about what you want including properties for each entity, sort order, filters, limit and properties. */
  fetchData: FetchDataPayload;
  /** One specific initiative. */
  initiative: Initiative;
  /** One specific initiative relation. */
  initiativeRelation: ProjectRelation;
  /** All initiative relationships. */
  initiativeRelations: InitiativeRelationConnection;
  /** One specific initiativeToProject. */
  initiativeToProject: InitiativeToProject;
  /** returns a list of initiative to project entities. */
  initiativeToProjects: InitiativeToProjectConnection;
  /** A specific  initiative update. */
  initiativeUpdate: InitiativeUpdate;
  /** All  InitiativeUpdates. */
  initiativeUpdates: InitiativeUpdateConnection;
  /** All initiatives in the workspace. */
  initiatives: InitiativeConnection;
  /** One specific integration. */
  integration: Integration;
  /** Checks if the integration has all required scopes. */
  integrationHasScopes: IntegrationHasScopesPayload;
  /** One specific integrationTemplate. */
  integrationTemplate: IntegrationTemplate;
  /** Template and integration connections. */
  integrationTemplates: IntegrationTemplateConnection;
  /** All integrations. */
  integrations: IntegrationConnection;
  /** One specific set of settings. */
  integrationsSettings: IntegrationsSettings;
  /** One specific issue. */
  issue: Issue;
  /** Find issues that are related to a given Figma file key. */
  issueFigmaFileKeySearch: IssueConnection;
  /** Suggests filters for an issue view based on a text prompt. */
  issueFilterSuggestion: IssueFilterSuggestionPayload;
  /** Checks a CSV file validity against a specific import service. */
  issueImportCheckCSV: IssueImportCheckPayload;
  /** Checks whether it will be possible to setup sync for this project or repository at the end of import */
  issueImportCheckSync: IssueImportSyncCheckPayload;
  /** Checks whether a custom JQL query is valid and can be used to filter issues of a Jira import */
  issueImportJqlCheck: IssueImportJqlCheckPayload;
  /** One specific label. */
  issueLabel: IssueLabel;
  /** All issue labels. */
  issueLabels: IssueLabelConnection;
  /** Issue priority values and corresponding labels. */
  issuePriorityValues: Array<IssuePriorityValue>;
  /** One specific issue relation. */
  issueRelation: IssueRelation;
  /** All issue relationships. */
  issueRelations: IssueRelationConnection;
  /** [DEPRECATED] Search issues. This endpoint is deprecated and will be removed in the future – use `searchIssues` instead. */
  issueSearch: IssueConnection;
  /** Suggests issue title based on a customer request. */
  issueTitleSuggestionFromCustomerRequest: IssueTitleSuggestionFromCustomerRequestPayload;
  /** Find issue based on the VCS branch name. */
  issueVcsBranchSearch?: Maybe<Issue>;
  /** All issues. */
  issues: IssueConnection;
  /** One specific notification. */
  notification: Notification;
  /** One specific notification subscription. */
  notificationSubscription: NotificationSubscription;
  /** The user's notification subscriptions. */
  notificationSubscriptions: NotificationSubscriptionConnection;
  /** All notifications. */
  notifications: NotificationConnection;
  /** [Internal] A number of unread notifications. */
  notificationsUnreadCount: Scalars["Int"];
  /** The user's organization. */
  organization: Organization;
  /** [INTERNAL] Checks whether the domain can be claimed. */
  organizationDomainClaimRequest: OrganizationDomainClaimPayload;
  /** Does the organization exist. */
  organizationExists: OrganizationExistsPayload;
  /** One specific organization invite. */
  organizationInvite: OrganizationInvite;
  /** One specific organization invite. */
  organizationInviteDetails: OrganizationInviteDetailsPayload;
  /** All invites for the organization. */
  organizationInvites: OrganizationInviteConnection;
  /** [INTERNAL] Get organization metadata by urlKey or organization id. */
  organizationMeta?: Maybe<OrganizationMeta>;
  /** One specific project. */
  project: Project;
  /** Suggests filters for a project view based on a text prompt. */
  projectFilterSuggestion: ProjectFilterSuggestionPayload;
  /** One specific label. */
  projectLabel: ProjectLabel;
  /** All project labels. */
  projectLabels: ProjectLabelConnection;
  /** One specific project milestone. */
  projectMilestone: ProjectMilestone;
  /** All milestones for the project. */
  projectMilestones: ProjectMilestoneConnection;
  /** One specific project relation. */
  projectRelation: ProjectRelation;
  /** All project relationships. */
  projectRelations: ProjectRelationConnection;
  /** One specific project status. */
  projectStatus: ProjectStatus;
  /** [INTERNAL] Count of projects using this project status across the organization. */
  projectStatusProjectCount: ProjectStatusCountPayload;
  /** All project statuses. */
  projectStatuses: ProjectStatusConnection;
  /** A specific project update. */
  projectUpdate: ProjectUpdate;
  /** All project updates. */
  projectUpdates: ProjectUpdateConnection;
  /** All projects. */
  projects: ProjectConnection;
  /** Sends a test push message. */
  pushSubscriptionTest: PushSubscriptionTestPayload;
  /** The status of the rate limiter. */
  rateLimitStatus: RateLimitPayload;
  /**
   * One specific roadmap.
   * @deprecated Roadmaps are deprecated, use initiatives instead.
   */
  roadmap: Roadmap;
  /**
   * One specific roadmapToProject.
   * @deprecated RoadmapToProject is deprecated, use InitiativeToProject instead.
   */
  roadmapToProject: RoadmapToProject;
  /** @deprecated RoadmapToProject is deprecated, use InitiativeToProject instead. */
  roadmapToProjects: RoadmapToProjectConnection;
  /**
   * All roadmaps in the workspace.
   * @deprecated Roadmaps are deprecated, use initiatives instead.
   */
  roadmaps: RoadmapConnection;
  /** Search documents. */
  searchDocuments: DocumentSearchPayload;
  /** Search issues. */
  searchIssues: IssueSearchPayload;
  /** Search projects. */
  searchProjects: ProjectSearchPayload;
  /**
   * [INTERNAL] Search for various resources using natural language.
   * @deprecated Use specific search endpoints like searchIssues, searchProjects, searchDocuments instead.
   */
  semanticSearch: SemanticSearchPayload;
  /** Fetch SSO login URL for the email provided. */
  ssoUrlFromEmail: SsoUrlFromEmailResponse;
  /** [Internal] AI summary of the latest project updates for the given projects */
  summarizeProjectUpdates: SummaryPayload;
  /** One specific team. */
  team: Team;
  /** One specific team membership. */
  teamMembership: TeamMembership;
  /** All team memberships. */
  teamMemberships: TeamMembershipConnection;
  /** All teams whose issues can be accessed by the user. This might be different from `administrableTeams`, which also includes teams whose settings can be changed by the user. */
  teams: TeamConnection;
  /** A specific template. */
  template: Template;
  /** All templates from all users. */
  templates: Array<Template>;
  /** Returns all templates that are associated with the integration type. */
  templatesForIntegration: Array<Template>;
  /** A specific time schedule. */
  timeSchedule: TimeSchedule;
  /** All time schedules. */
  timeSchedules: TimeScheduleConnection;
  /** All triage responsibilities. */
  triageResponsibilities: TriageResponsibilityConnection;
  /** A specific triage responsibility. */
  triageResponsibility: TriageResponsibility;
  /** One specific user. */
  user: User;
  /** The user's settings. */
  userSettings: UserSettings;
  /** All users for the organization. */
  users: UserConnection;
  /** Verify that we received the correct response from the GitHub Enterprise Server. */
  verifyGitHubEnterpriseServerInstallation: GitHubEnterpriseServerInstallVerificationPayload;
  /** The currently authenticated user. */
  viewer: User;
  /** A specific webhook. */
  webhook: Webhook;
  /** All webhooks. */
  webhooks: WebhookConnection;
  /** One specific state. */
  workflowState: WorkflowState;
  /** All issue workflow states. */
  workflowStates: WorkflowStateConnection;
  /** [INTERNAL] Get a specific non-internal authorized application (with limited fields) for a workspace */
  workspaceAuthorizedApplication: WorkspaceAuthorizedApplicationWithMemberships;
  /**
   * [DEPRECATED] [INTERNAL] Get non-internal authorized applications (with limited fields) for a workspace
   * @deprecated Use more efficient `workspaceAuthorizedApplicationsWithAppUser` and `workspaceAuthorizedApplication` instead.
   */
  workspaceAuthorizedApplications: Array<WorkspaceAuthorizedApplication>;
  /** [INTERNAL] Get non-internal authorized applications for a workspace, including each application's app user. */
  workspaceAuthorizedApplicationsWithAppUser: Array<WorkspaceAuthorizedApplicationWithAppUser>;
};

export type QueryAdministrableTeamsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<TeamFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryAgentActivitiesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<AgentActivityFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryAgentActivityArgs = {
  id: Scalars["String"];
};

export type QueryAgentSessionArgs = {
  id: Scalars["String"];
};

export type QueryAgentSessionsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryApiKeysArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryApplicationInfoArgs = {
  clientId: Scalars["String"];
};

export type QueryApplicationInfoByIdsArgs = {
  ids: Array<Scalars["String"]>;
};

export type QueryApplicationInfoWithMembershipsByIdsArgs = {
  clientIds: Array<Scalars["String"]>;
};

export type QueryApplicationWithAuthorizationArgs = {
  actor?: Maybe<Scalars["String"]>;
  clientId: Scalars["String"];
  redirectUri?: Maybe<Scalars["String"]>;
  scope: Array<Scalars["String"]>;
};

export type QueryAttachmentArgs = {
  id: Scalars["String"];
};

export type QueryAttachmentIssueArgs = {
  id: Scalars["String"];
};

export type QueryAttachmentSourcesArgs = {
  teamId?: Maybe<Scalars["String"]>;
};

export type QueryAttachmentsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<AttachmentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryAttachmentsForUrlArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
  url: Scalars["String"];
};

export type QueryAuditEntriesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<AuditEntryFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryCommentArgs = {
  hash?: Maybe<Scalars["String"]>;
  id?: Maybe<Scalars["String"]>;
};

export type QueryCommentsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CommentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryCustomViewArgs = {
  id: Scalars["String"];
};

export type QueryCustomViewDetailsSuggestionArgs = {
  filter: Scalars["JSONObject"];
  modelName?: Maybe<Scalars["String"]>;
};

export type QueryCustomViewHasSubscribersArgs = {
  id: Scalars["String"];
};

export type QueryCustomViewsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CustomViewFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
  sort?: Maybe<Array<CustomViewSortInput>>;
};

export type QueryCustomerArgs = {
  id: Scalars["String"];
};

export type QueryCustomerNeedArgs = {
  hash?: Maybe<Scalars["String"]>;
  id?: Maybe<Scalars["String"]>;
};

export type QueryCustomerNeedsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CustomerNeedFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryCustomerStatusArgs = {
  id: Scalars["String"];
};

export type QueryCustomerStatusesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryCustomerTierArgs = {
  id: Scalars["String"];
};

export type QueryCustomerTiersArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryCustomersArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CustomerFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
  sorts?: Maybe<Array<CustomerSortInput>>;
};

export type QueryCycleArgs = {
  id: Scalars["String"];
};

export type QueryCyclesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CycleFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryDocumentArgs = {
  id: Scalars["String"];
};

export type QueryDocumentContentHistoryArgs = {
  id: Scalars["String"];
};

export type QueryDocumentsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<DocumentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryEmailIntakeAddressArgs = {
  id: Scalars["String"];
};

export type QueryEmojiArgs = {
  id: Scalars["String"];
};

export type QueryEmojisArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryEntityExternalLinkArgs = {
  id: Scalars["String"];
};

export type QueryExternalUserArgs = {
  id: Scalars["String"];
};

export type QueryExternalUsersArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryFailuresForOauthWebhooksArgs = {
  oauthClientId: Scalars["String"];
};

export type QueryFavoriteArgs = {
  id: Scalars["String"];
};

export type QueryFavoritesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryFetchDataArgs = {
  query: Scalars["String"];
};

export type QueryInitiativeArgs = {
  id: Scalars["String"];
};

export type QueryInitiativeRelationArgs = {
  id: Scalars["String"];
};

export type QueryInitiativeRelationsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryInitiativeToProjectArgs = {
  id: Scalars["String"];
};

export type QueryInitiativeToProjectsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryInitiativeUpdateArgs = {
  id: Scalars["String"];
};

export type QueryInitiativeUpdatesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<InitiativeUpdateFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryInitiativesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<InitiativeFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
  sort?: Maybe<Array<InitiativeSortInput>>;
};

export type QueryIntegrationArgs = {
  id: Scalars["String"];
};

export type QueryIntegrationHasScopesArgs = {
  integrationId: Scalars["String"];
  scopes: Array<Scalars["String"]>;
};

export type QueryIntegrationTemplateArgs = {
  id: Scalars["String"];
};

export type QueryIntegrationTemplatesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryIntegrationsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryIntegrationsSettingsArgs = {
  id: Scalars["String"];
};

export type QueryIssueArgs = {
  id: Scalars["String"];
};

export type QueryIssueFigmaFileKeySearchArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  fileKey: Scalars["String"];
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryIssueFilterSuggestionArgs = {
  projectId?: Maybe<Scalars["String"]>;
  prompt: Scalars["String"];
};

export type QueryIssueImportCheckCsvArgs = {
  csvUrl: Scalars["String"];
  service: Scalars["String"];
};

export type QueryIssueImportCheckSyncArgs = {
  issueImportId: Scalars["String"];
};

export type QueryIssueImportJqlCheckArgs = {
  jiraEmail: Scalars["String"];
  jiraHostname: Scalars["String"];
  jiraProject: Scalars["String"];
  jiraToken: Scalars["String"];
  jql: Scalars["String"];
};

export type QueryIssueLabelArgs = {
  id: Scalars["String"];
};

export type QueryIssueLabelsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueLabelFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryIssueRelationArgs = {
  id: Scalars["String"];
};

export type QueryIssueRelationsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryIssueSearchArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
  query?: Maybe<Scalars["String"]>;
};

export type QueryIssueTitleSuggestionFromCustomerRequestArgs = {
  request: Scalars["String"];
};

export type QueryIssueVcsBranchSearchArgs = {
  branchName: Scalars["String"];
};

export type QueryIssuesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
  sort?: Maybe<Array<IssueSortInput>>;
};

export type QueryNotificationArgs = {
  id: Scalars["String"];
};

export type QueryNotificationSubscriptionArgs = {
  id: Scalars["String"];
};

export type QueryNotificationSubscriptionsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryNotificationsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<NotificationFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryOrganizationDomainClaimRequestArgs = {
  id: Scalars["String"];
};

export type QueryOrganizationExistsArgs = {
  urlKey: Scalars["String"];
};

export type QueryOrganizationInviteArgs = {
  id: Scalars["String"];
};

export type QueryOrganizationInviteDetailsArgs = {
  id: Scalars["String"];
};

export type QueryOrganizationInvitesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryOrganizationMetaArgs = {
  urlKey: Scalars["String"];
};

export type QueryProjectArgs = {
  id: Scalars["String"];
};

export type QueryProjectFilterSuggestionArgs = {
  prompt: Scalars["String"];
};

export type QueryProjectLabelArgs = {
  id: Scalars["String"];
};

export type QueryProjectLabelsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<ProjectLabelFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryProjectMilestoneArgs = {
  id: Scalars["String"];
};

export type QueryProjectMilestonesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<ProjectMilestoneFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryProjectRelationArgs = {
  id: Scalars["String"];
};

export type QueryProjectRelationsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryProjectStatusArgs = {
  id: Scalars["String"];
};

export type QueryProjectStatusProjectCountArgs = {
  id: Scalars["String"];
};

export type QueryProjectStatusesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryProjectUpdateArgs = {
  id: Scalars["String"];
};

export type QueryProjectUpdatesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<ProjectUpdateFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryProjectsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<ProjectFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
  sort?: Maybe<Array<ProjectSortInput>>;
};

export type QueryPushSubscriptionTestArgs = {
  sendStrategy?: Maybe<SendStrategy>;
  targetMobile?: Maybe<Scalars["Boolean"]>;
};

export type QueryRoadmapArgs = {
  id: Scalars["String"];
};

export type QueryRoadmapToProjectArgs = {
  id: Scalars["String"];
};

export type QueryRoadmapToProjectsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryRoadmapsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QuerySearchDocumentsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  includeComments?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
  teamId?: Maybe<Scalars["String"]>;
  term: Scalars["String"];
};

export type QuerySearchIssuesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  includeComments?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
  teamId?: Maybe<Scalars["String"]>;
  term: Scalars["String"];
};

export type QuerySearchProjectsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  includeComments?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
  teamId?: Maybe<Scalars["String"]>;
  term: Scalars["String"];
};

export type QuerySemanticSearchArgs = {
  includeArchived?: Maybe<Scalars["Boolean"]>;
  maxResults?: Maybe<Scalars["Int"]>;
  query: Scalars["String"];
  types?: Maybe<Array<SemanticSearchResultType>>;
};

export type QuerySsoUrlFromEmailArgs = {
  email: Scalars["String"];
  isDesktop?: Maybe<Scalars["Boolean"]>;
};

export type QuerySummarizeProjectUpdatesArgs = {
  ids: Array<Scalars["String"]>;
};

export type QueryTeamArgs = {
  id: Scalars["String"];
};

export type QueryTeamMembershipArgs = {
  id: Scalars["String"];
};

export type QueryTeamMembershipsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryTeamsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<TeamFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryTemplateArgs = {
  id: Scalars["String"];
};

export type QueryTemplatesForIntegrationArgs = {
  integrationType: Scalars["String"];
};

export type QueryTimeScheduleArgs = {
  id: Scalars["String"];
};

export type QueryTimeSchedulesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryTriageResponsibilitiesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryTriageResponsibilityArgs = {
  id: Scalars["String"];
};

export type QueryUserArgs = {
  id: Scalars["String"];
};

export type QueryUsersArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<UserFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  includeDisabled?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
  sort?: Maybe<Array<UserSortInput>>;
};

export type QueryVerifyGitHubEnterpriseServerInstallationArgs = {
  integrationId: Scalars["String"];
};

export type QueryWebhookArgs = {
  id: Scalars["String"];
};

export type QueryWebhooksArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryWorkflowStateArgs = {
  id: Scalars["String"];
};

export type QueryWorkflowStatesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<WorkflowStateFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryWorkspaceAuthorizedApplicationArgs = {
  clientId: Scalars["String"];
};

export type QueryWorkspaceAuthorizedApplicationsWithAppUserArgs = {
  clientIds?: Maybe<Array<Scalars["String"]>>;
};

export type RateLimitPayload = {
  __typename?: "RateLimitPayload";
  /** The identifier we rate limit on. */
  identifier?: Maybe<Scalars["String"]>;
  /** The kind of rate limit selected for this request. */
  kind: Scalars["String"];
  /** The state of the rate limit. */
  limits: Array<RateLimitResultPayload>;
};

export type RateLimitResultPayload = {
  __typename?: "RateLimitResultPayload";
  /** The total allowed quantity for this type of limit. */
  allowedAmount: Scalars["Float"];
  /** The period in which the rate limit is fully replenished in ms. */
  period: Scalars["Float"];
  /** The remaining quantity for this type of limit after this request. */
  remainingAmount: Scalars["Float"];
  /** The requested quantity for this type of limit. */
  requestedAmount: Scalars["Float"];
  /** The timestamp after the rate limit is fully replenished as a UNIX timestamp. */
  reset: Scalars["Float"];
  /** What is being rate limited. */
  type: Scalars["String"];
};

/** A reaction associated with a comment or a project update. */
export type Reaction = Node & {
  __typename?: "Reaction";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The comment that the reaction is associated with. */
  comment?: Maybe<Comment>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** Name of the reaction's emoji. */
  emoji: Scalars["String"];
  /** The external user that created the reaction. */
  externalUser?: Maybe<ExternalUser>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The initiative update that the reaction is associated with. */
  initiativeUpdate?: Maybe<InitiativeUpdate>;
  /** The issue that the reaction is associated with. */
  issue?: Maybe<Issue>;
  /** The post that the reaction is associated with. */
  post?: Maybe<Post>;
  /** The project update that the reaction is associated with. */
  projectUpdate?: Maybe<ProjectUpdate>;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** The user that created the reaction. */
  user?: Maybe<User>;
};

/** Reaction filtering options. */
export type ReactionCollectionFilter = {
  /** Compound filters, all of which need to be matched by the reaction. */
  and?: Maybe<Array<ReactionCollectionFilter>>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Comparator for the reactions custom emoji. */
  customEmojiId?: Maybe<IdComparator>;
  /** Comparator for the reactions emoji. */
  emoji?: Maybe<StringComparator>;
  /** Filters that needs to be matched by all reactions. */
  every?: Maybe<ReactionFilter>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Comparator for the collection length. */
  length?: Maybe<NumberComparator>;
  /** Compound filters, one of which need to be matched by the reaction. */
  or?: Maybe<Array<ReactionCollectionFilter>>;
  /** Filters that needs to be matched by some reactions. */
  some?: Maybe<ReactionFilter>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

export type ReactionCreateInput = {
  /** The comment to associate the reaction with. */
  commentId?: Maybe<Scalars["String"]>;
  /** The emoji the user reacted with. */
  emoji: Scalars["String"];
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The update to associate the reaction with. */
  initiativeUpdateId?: Maybe<Scalars["String"]>;
  /** The issue to associate the reaction with. */
  issueId?: Maybe<Scalars["String"]>;
  /** [Internal] The post to associate the reaction with. */
  postId?: Maybe<Scalars["String"]>;
  /** The project update to associate the reaction with. */
  projectUpdateId?: Maybe<Scalars["String"]>;
  /** [Internal] The pull request comment to associate the reaction with. */
  pullRequestCommentId?: Maybe<Scalars["String"]>;
  /** [Internal] The pull request to associate the reaction with. */
  pullRequestId?: Maybe<Scalars["String"]>;
};

/** Reaction filtering options. */
export type ReactionFilter = {
  /** Compound filters, all of which need to be matched by the reaction. */
  and?: Maybe<Array<ReactionFilter>>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Comparator for the reactions custom emoji. */
  customEmojiId?: Maybe<IdComparator>;
  /** Comparator for the reactions emoji. */
  emoji?: Maybe<StringComparator>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Compound filters, one of which need to be matched by the reaction. */
  or?: Maybe<Array<ReactionFilter>>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

export type ReactionPayload = {
  __typename?: "ReactionPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  reaction: Reaction;
  success: Scalars["Boolean"];
};

/** Payload for a reaction webhook. */
export type ReactionWebhookPayload = {
  __typename?: "ReactionWebhookPayload";
  /** The time at which the entity was archived. */
  archivedAt?: Maybe<Scalars["String"]>;
  /** The comment the reaction is associated with. */
  comment?: Maybe<CommentChildWebhookPayload>;
  /** The ID of the comment that the reaction is associated with. */
  commentId?: Maybe<Scalars["String"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["String"];
  /** Name of the reaction's emoji. */
  emoji: Scalars["String"];
  /** The ID of the external user that created the reaction. */
  externalUserId?: Maybe<Scalars["String"]>;
  /** The ID of the entity. */
  id: Scalars["String"];
  /** The ID of the initiative update that the reaction is associated with. */
  initiativeUpdateId?: Maybe<Scalars["String"]>;
  /** The issue the reaction is associated with. */
  issue?: Maybe<IssueChildWebhookPayload>;
  /** The ID of the issue that the reaction is associated with. */
  issueId?: Maybe<Scalars["String"]>;
  /** The ID of the post that the reaction is associated with. */
  postId?: Maybe<Scalars["String"]>;
  /** The project update the reaction is associated with. */
  projectUpdate?: Maybe<ProjectUpdateChildWebhookPayload>;
  /** The ID of the project update that the reaction is associated with. */
  projectUpdateId?: Maybe<Scalars["String"]>;
  /** The time at which the entity was updated. */
  updatedAt: Scalars["String"];
  /** The user that created the reaction. */
  user?: Maybe<UserChildWebhookPayload>;
  /** The ID of the user that created the reaction. */
  userId?: Maybe<Scalars["String"]>;
};

/** Comparator for relation existence. */
export type RelationExistsComparator = {
  /** Equals constraint. */
  eq?: Maybe<Scalars["Boolean"]>;
  /** Not equals constraint. */
  neq?: Maybe<Scalars["Boolean"]>;
};

/** Features release channel. */
export enum ReleaseChannel {
  Beta = "beta",
  Development = "development",
  Internal = "internal",
  PreRelease = "preRelease",
  Public = "public",
}

/** Customer revenue sorting options. */
export type RevenueSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

/** [Deprecated] A roadmap for projects. */
export type Roadmap = Node & {
  __typename?: "Roadmap";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The roadmap's color. */
  color?: Maybe<Scalars["String"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The user who created the roadmap. */
  creator: User;
  /** The description of the roadmap. */
  description?: Maybe<Scalars["String"]>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The name of the roadmap. */
  name: Scalars["String"];
  /** The organization of the roadmap. */
  organization: Organization;
  /** The user who owns the roadmap. */
  owner?: Maybe<User>;
  /** Projects associated with the roadmap. */
  projects: ProjectConnection;
  /** The roadmap's unique URL slug. */
  slugId: Scalars["String"];
  /** The sort order of the roadmap within the organization. */
  sortOrder: Scalars["Float"];
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** The canonical url for the roadmap. */
  url: Scalars["String"];
};

/** [Deprecated] A roadmap for projects. */
export type RoadmapProjectsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<ProjectFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** A generic payload return from entity archive mutations. */
export type RoadmapArchivePayload = ArchivePayload & {
  __typename?: "RoadmapArchivePayload";
  /** The archived/unarchived entity. Null if entity was deleted. */
  entity?: Maybe<Roadmap>;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** Roadmap collection filtering options. */
export type RoadmapCollectionFilter = {
  /** Compound filters, all of which need to be matched by the roadmap. */
  and?: Maybe<Array<RoadmapCollectionFilter>>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Filters that the roadmap creator must satisfy. */
  creator?: Maybe<UserFilter>;
  /** Filters that needs to be matched by all roadmaps. */
  every?: Maybe<RoadmapFilter>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Comparator for the collection length. */
  length?: Maybe<NumberComparator>;
  /** Comparator for the roadmap name. */
  name?: Maybe<StringComparator>;
  /** Compound filters, one of which need to be matched by the roadmap. */
  or?: Maybe<Array<RoadmapCollectionFilter>>;
  /** Comparator for the roadmap slug ID. */
  slugId?: Maybe<StringComparator>;
  /** Filters that needs to be matched by some roadmaps. */
  some?: Maybe<RoadmapFilter>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

export type RoadmapConnection = {
  __typename?: "RoadmapConnection";
  edges: Array<RoadmapEdge>;
  nodes: Array<Roadmap>;
  pageInfo: PageInfo;
};

export type RoadmapCreateInput = {
  /** The roadmap's color. */
  color?: Maybe<Scalars["String"]>;
  /** The description of the roadmap. */
  description?: Maybe<Scalars["String"]>;
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The name of the roadmap. */
  name: Scalars["String"];
  /** The owner of the roadmap. */
  ownerId?: Maybe<Scalars["String"]>;
  /** The sort order of the roadmap within the organization. */
  sortOrder?: Maybe<Scalars["Float"]>;
};

export type RoadmapEdge = {
  __typename?: "RoadmapEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: Roadmap;
};

/** Roadmap filtering options. */
export type RoadmapFilter = {
  /** Compound filters, all of which need to be matched by the roadmap. */
  and?: Maybe<Array<RoadmapFilter>>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Filters that the roadmap creator must satisfy. */
  creator?: Maybe<UserFilter>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Comparator for the roadmap name. */
  name?: Maybe<StringComparator>;
  /** Compound filters, one of which need to be matched by the roadmap. */
  or?: Maybe<Array<RoadmapFilter>>;
  /** Comparator for the roadmap slug ID. */
  slugId?: Maybe<StringComparator>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

export type RoadmapPayload = {
  __typename?: "RoadmapPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** The roadmap that was created or updated. */
  roadmap: Roadmap;
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** [Deprecated] Join table between projects and roadmaps. */
export type RoadmapToProject = Node & {
  __typename?: "RoadmapToProject";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The project that the roadmap is associated with. */
  project: Project;
  /** The roadmap that the project is associated with. */
  roadmap: Roadmap;
  /** The sort order of the project within the roadmap. */
  sortOrder: Scalars["String"];
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

export type RoadmapToProjectConnection = {
  __typename?: "RoadmapToProjectConnection";
  edges: Array<RoadmapToProjectEdge>;
  nodes: Array<RoadmapToProject>;
  pageInfo: PageInfo;
};

export type RoadmapToProjectCreateInput = {
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The identifier of the project. */
  projectId: Scalars["String"];
  /** The identifier of the roadmap. */
  roadmapId: Scalars["String"];
  /** The sort order for the project within its organization. */
  sortOrder?: Maybe<Scalars["Float"]>;
};

export type RoadmapToProjectEdge = {
  __typename?: "RoadmapToProjectEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: RoadmapToProject;
};

export type RoadmapToProjectPayload = {
  __typename?: "RoadmapToProjectPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** The roadmapToProject that was created or updated. */
  roadmapToProject: RoadmapToProject;
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type RoadmapToProjectUpdateInput = {
  /** The sort order for the project within its organization. */
  sortOrder?: Maybe<Scalars["Float"]>;
};

export type RoadmapUpdateInput = {
  /** The roadmap's color. */
  color?: Maybe<Scalars["String"]>;
  /** The description of the roadmap. */
  description?: Maybe<Scalars["String"]>;
  /** The name of the roadmap. */
  name?: Maybe<Scalars["String"]>;
  /** The owner of the roadmap. */
  ownerId?: Maybe<Scalars["String"]>;
  /** The sort order of the roadmap within the organization. */
  sortOrder?: Maybe<Scalars["Float"]>;
};

/** Issue root-issue sorting options. */
export type RootIssueSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
  /** The sort to apply to the root issues */
  sort: IssueSortInput;
};

export enum SLADayCountType {
  All = "all",
  OnlyBusinessDays = "onlyBusinessDays",
}

export type SalesforceSettingsInput = {
  /** Whether a ticket should be automatically reopened when its linked Linear issue is cancelled. */
  automateTicketReopeningOnCancellation?: Maybe<Scalars["Boolean"]>;
  /** Whether a ticket should be automatically reopened when a comment is posted on its linked Linear issue */
  automateTicketReopeningOnComment?: Maybe<Scalars["Boolean"]>;
  /** Whether a ticket should be automatically reopened when its linked Linear issue is completed. */
  automateTicketReopeningOnCompletion?: Maybe<Scalars["Boolean"]>;
  /** Whether a ticket should be automatically reopened when its linked Linear project is cancelled. */
  automateTicketReopeningOnProjectCancellation?: Maybe<Scalars["Boolean"]>;
  /** Whether a ticket should be automatically reopened when its linked Linear project is completed. */
  automateTicketReopeningOnProjectCompletion?: Maybe<Scalars["Boolean"]>;
  /** The Salesforce team to use when a template doesn't specify a team. */
  defaultTeam?: Maybe<Scalars["String"]>;
  /** [ALPHA] Whether customer and customer requests should not be automatically created when conversations are linked to a Linear issue. */
  disableCustomerRequestsAutoCreation?: Maybe<Scalars["Boolean"]>;
  /** The Salesforce case status to use to reopen cases. */
  reopenCaseStatus?: Maybe<Scalars["String"]>;
  /** Whether to restrict visibility of the integration to issues that have been either created from Salesforce or linked to Salesforce. */
  restrictVisibility?: Maybe<Scalars["Boolean"]>;
  /** Whether an internal message should be added when someone comments on an issue. */
  sendNoteOnComment?: Maybe<Scalars["Boolean"]>;
  /** Whether an internal message should be added when a Linear issue changes status (for status types except completed or canceled). */
  sendNoteOnStatusChange?: Maybe<Scalars["Boolean"]>;
  /** The Salesforce subdomain. */
  subdomain?: Maybe<Scalars["String"]>;
  /** The Salesforce instance URL. */
  url?: Maybe<Scalars["String"]>;
};

/** [INTERNAL] Payload returned by semantic search. */
export type SemanticSearchPayload = {
  __typename?: "SemanticSearchPayload";
  enabled: Scalars["Boolean"];
  results: Array<SemanticSearchResult>;
};

/** [INTERNAL] A semantic search result reference. */
export type SemanticSearchResult = Node & {
  __typename?: "SemanticSearchResult";
  /** The document related to the semantic search result. */
  document?: Maybe<Document>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The initiative related to the semantic search result. */
  initiative?: Maybe<Initiative>;
  /** The issue related to the semantic search result. */
  issue?: Maybe<Issue>;
  /** The project related to the semantic search result. */
  project?: Maybe<Project>;
  /** The type of the semantic search result. */
  type: SemanticSearchResultType;
};

/** [INTERNAL] The type of the semantic search result. */
export enum SemanticSearchResultType {
  Document = "document",
  Initiative = "initiative",
  Issue = "issue",
  Project = "project",
}

export enum SendStrategy {
  Desktop = "desktop",
  DesktopAndPush = "desktopAndPush",
  DesktopThenPush = "desktopThenPush",
  Push = "push",
}

export type SentrySettingsInput = {
  /** The ID of the Sentry organization being connected. */
  organizationId: Scalars["ID"];
  /** The slug of the Sentry organization being connected. */
  organizationSlug: Scalars["String"];
  /** Whether Sentry issues resolving completes Linear issues. */
  resolvingCompletesIssues: Scalars["Boolean"];
  /** Whether Sentry issues unresolving reopens Linear issues. */
  unresolvingReopensIssues: Scalars["Boolean"];
};

/** SES domain identity used for sending emails from a custom domain. */
export type SesDomainIdentity = Node & {
  __typename?: "SesDomainIdentity";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** Whether the domain is fully verified and can be used for sending emails. */
  canSendFromCustomDomain: Scalars["Boolean"];
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The user who created the SES domain identity. */
  creator?: Maybe<User>;
  /** The DNS records for the SES domain identity. */
  dnsRecords: Array<SesDomainIdentityDnsRecord>;
  /** The domain of the SES domain identity. */
  domain: Scalars["String"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The organization of the SES domain identity. */
  organization: Organization;
  /** The AWS region of the SES domain identity. */
  region: Scalars["String"];
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

/** A DNS record for a SES domain identity. */
export type SesDomainIdentityDnsRecord = {
  __typename?: "SesDomainIdentityDnsRecord";
  /** The content of the DNS record. */
  content: Scalars["String"];
  /** Whether the DNS record is verified in the domain's DNS configuration. */
  isVerified: Scalars["Boolean"];
  /** The name of the DNS record. */
  name: Scalars["String"];
  /** The type of the DNS record. */
  type: Scalars["String"];
};

/** Customer size sorting options. */
export type SizeSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

export enum SlaStatus {
  Breached = "Breached",
  Completed = "Completed",
  Failed = "Failed",
  HighRisk = "HighRisk",
  LowRisk = "LowRisk",
  MediumRisk = "MediumRisk",
}

/** Comparator for sla status. */
export type SlaStatusComparator = {
  /** Equals constraint. */
  eq?: Maybe<SlaStatus>;
  /** In-array constraint. */
  in?: Maybe<Array<SlaStatus>>;
  /** Not-equals constraint. */
  neq?: Maybe<SlaStatus>;
  /** Not-in-array constraint. */
  nin?: Maybe<Array<SlaStatus>>;
  /** Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values. */
  null?: Maybe<Scalars["Boolean"]>;
};

/** Issue SLA status sorting options. */
export type SlaStatusSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

export type SlackAsksSettingsInput = {
  /** The user role type that is allowed to manage Asks settings. */
  canAdministrate: UserRoleType;
  /** Enterprise id of the connected Slack enterprise */
  enterpriseId?: Maybe<Scalars["String"]>;
  /** Enterprise name of the connected Slack enterprise */
  enterpriseName?: Maybe<Scalars["String"]>;
  /** Whether to show unfurl previews in Slack */
  shouldUnfurl?: Maybe<Scalars["Boolean"]>;
  /** The mapping of Slack channel ID => Slack channel name for connected channels. */
  slackChannelMapping?: Maybe<Array<SlackChannelNameMappingInput>>;
  /** Slack workspace id */
  teamId?: Maybe<Scalars["String"]>;
  /** Slack workspace name */
  teamName?: Maybe<Scalars["String"]>;
};

/** Tuple for mapping Slack channel IDs to names. */
export type SlackAsksTeamSettings = {
  __typename?: "SlackAsksTeamSettings";
  /** Whether the default Asks template is enabled in the given channel for this team. */
  hasDefaultAsk: Scalars["Boolean"];
  /** The Linear team ID. */
  id: Scalars["String"];
};

export type SlackAsksTeamSettingsInput = {
  /** Whether the default Asks template is enabled in the given channel for this team. */
  hasDefaultAsk: Scalars["Boolean"];
  /** The Linear team ID. */
  id: Scalars["String"];
};

export type SlackChannelConnectPayload = {
  __typename?: "SlackChannelConnectPayload";
  /** Whether the bot needs to be manually added to the channel. */
  addBot: Scalars["Boolean"];
  /** The integration that was created or updated. */
  integration?: Maybe<Integration>;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether it's recommended to connect main Slack integration. */
  nudgeToConnectMainSlackIntegration?: Maybe<Scalars["Boolean"]>;
  /** Whether it's recommended to update main Slack integration. */
  nudgeToUpdateMainSlackIntegration?: Maybe<Scalars["Boolean"]>;
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** Object for mapping Slack channel IDs to names and other settings. */
export type SlackChannelNameMapping = {
  __typename?: "SlackChannelNameMapping";
  /** Whether or not to use AI to generate titles for Asks created in this channel. */
  aiTitles?: Maybe<Scalars["Boolean"]>;
  /** Whether or not @-mentioning the bot should automatically create an Ask with the message. */
  autoCreateOnBotMention?: Maybe<Scalars["Boolean"]>;
  /** Whether or not using the :ticket: emoji in this channel should automatically create Asks. */
  autoCreateOnEmoji?: Maybe<Scalars["Boolean"]>;
  /** Whether or not top-level messages in this channel should automatically create Asks. */
  autoCreateOnMessage?: Maybe<Scalars["Boolean"]>;
  /** The optional template ID to use for Asks auto-created in this channel. If not set, auto-created Asks won't use any template. */
  autoCreateTemplateId?: Maybe<Scalars["String"]>;
  /** Whether or not the Linear Asks bot has been added to this Slack channel. */
  botAdded?: Maybe<Scalars["Boolean"]>;
  /** The Slack channel ID. */
  id: Scalars["String"];
  /** Whether or not the Slack channel is private. */
  isPrivate?: Maybe<Scalars["Boolean"]>;
  /** Whether or not the Slack channel is shared with an external org. */
  isShared?: Maybe<Scalars["Boolean"]>;
  /** The Slack channel name. */
  name: Scalars["String"];
  /** Whether or not synced Slack threads should be updated with a message when their Ask is accepted from triage. */
  postAcceptedFromTriageUpdates?: Maybe<Scalars["Boolean"]>;
  /** Whether or not synced Slack threads should be updated with a message and emoji when their Ask is canceled. */
  postCancellationUpdates?: Maybe<Scalars["Boolean"]>;
  /** Whether or not synced Slack threads should be updated with a message and emoji when their Ask is completed. */
  postCompletionUpdates?: Maybe<Scalars["Boolean"]>;
  /** Which teams are connected to the channel and settings for those teams. */
  teams: Array<SlackAsksTeamSettings>;
};

export type SlackChannelNameMappingInput = {
  /** Whether or not to use AI to generate titles for Asks created in this channel. */
  aiTitles?: Maybe<Scalars["Boolean"]>;
  /** Whether or not @-mentioning the bot should automatically create an Ask with the message. */
  autoCreateOnBotMention?: Maybe<Scalars["Boolean"]>;
  /** Whether or not using the :ticket: emoji in this channel should automatically create Asks. */
  autoCreateOnEmoji?: Maybe<Scalars["Boolean"]>;
  /** Whether or not top-level messages in this channel should automatically create Asks. */
  autoCreateOnMessage?: Maybe<Scalars["Boolean"]>;
  /** The optional template ID to use for Asks auto-created in this channel. If not set, auto-created Asks won't use any template. */
  autoCreateTemplateId?: Maybe<Scalars["String"]>;
  /** Whether or not the Linear Asks bot has been added to this Slack channel. */
  botAdded?: Maybe<Scalars["Boolean"]>;
  /** The Slack channel ID. */
  id: Scalars["String"];
  /** Whether or not the Slack channel is private. */
  isPrivate?: Maybe<Scalars["Boolean"]>;
  /** Whether or not the Slack channel is shared with an external org. */
  isShared?: Maybe<Scalars["Boolean"]>;
  /** The Slack channel name. */
  name: Scalars["String"];
  /** Whether or not synced Slack threads should be updated with a message when their Ask is accepted from triage. */
  postAcceptedFromTriageUpdates?: Maybe<Scalars["Boolean"]>;
  /** Whether or not synced Slack threads should be updated with a message and emoji when their Ask is canceled. */
  postCancellationUpdates?: Maybe<Scalars["Boolean"]>;
  /** Whether or not synced Slack threads should be updated with a message and emoji when their Ask is completed. */
  postCompletionUpdates?: Maybe<Scalars["Boolean"]>;
  /** Which teams are connected to the channel and settings for those teams. */
  teams: Array<SlackAsksTeamSettingsInput>;
};

export enum SlackChannelType {
  DirectMessage = "DirectMessage",
  MultiPersonDirectMessage = "MultiPersonDirectMessage",
  Private = "Private",
  Public = "Public",
}

export type SlackPostSettingsInput = {
  channel: Scalars["String"];
  channelId: Scalars["String"];
  channelType?: Maybe<SlackChannelType>;
  configurationUrl: Scalars["String"];
  /** Slack workspace id */
  teamId?: Maybe<Scalars["String"]>;
};

export type SlackSettingsInput = {
  /** Enterprise id of the connected Slack enterprise */
  enterpriseId?: Maybe<Scalars["String"]>;
  /** Enterprise name of the connected Slack enterprise */
  enterpriseName?: Maybe<Scalars["String"]>;
  /** Whether Linear should automatically respond with issue unfurls when an issue identifier is mentioned in a Slack message. */
  linkOnIssueIdMention: Scalars["Boolean"];
  /** Whether to show unfurl previews in Slack */
  shouldUnfurl?: Maybe<Scalars["Boolean"]>;
  /** Slack workspace id */
  teamId?: Maybe<Scalars["String"]>;
  /** Slack workspace name */
  teamName?: Maybe<Scalars["String"]>;
};

/** Comparator for issue source type. */
export type SourceMetadataComparator = {
  /** Equals constraint. */
  eq?: Maybe<Scalars["String"]>;
  /** In-array constraint. */
  in?: Maybe<Array<Scalars["String"]>>;
  /** Not-equals constraint. */
  neq?: Maybe<Scalars["String"]>;
  /** Not-in-array constraint. */
  nin?: Maybe<Array<Scalars["String"]>>;
  /** Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values. */
  null?: Maybe<Scalars["Boolean"]>;
  /** Compound filters, all of which need to be matched by the sub type. */
  subType?: Maybe<SubTypeComparator>;
};

/** Comparator for `sourceType` field. */
export type SourceTypeComparator = {
  /** Contains constraint. Matches any values that contain the given string. */
  contains?: Maybe<Scalars["String"]>;
  /** Contains case insensitive constraint. Matches any values that contain the given string case insensitive. */
  containsIgnoreCase?: Maybe<Scalars["String"]>;
  /** Contains case and accent insensitive constraint. Matches any values that contain the given string case and accent insensitive. */
  containsIgnoreCaseAndAccent?: Maybe<Scalars["String"]>;
  /** Ends with constraint. Matches any values that end with the given string. */
  endsWith?: Maybe<Scalars["String"]>;
  /** Equals constraint. */
  eq?: Maybe<Scalars["String"]>;
  /** Equals case insensitive. Matches any values that matches the given string case insensitive. */
  eqIgnoreCase?: Maybe<Scalars["String"]>;
  /** In-array constraint. */
  in?: Maybe<Array<Scalars["String"]>>;
  /** Not-equals constraint. */
  neq?: Maybe<Scalars["String"]>;
  /** Not-equals case insensitive. Matches any values that don't match the given string case insensitive. */
  neqIgnoreCase?: Maybe<Scalars["String"]>;
  /** Not-in-array constraint. */
  nin?: Maybe<Array<Scalars["String"]>>;
  /** Doesn't contain constraint. Matches any values that don't contain the given string. */
  notContains?: Maybe<Scalars["String"]>;
  /** Doesn't contain case insensitive constraint. Matches any values that don't contain the given string case insensitive. */
  notContainsIgnoreCase?: Maybe<Scalars["String"]>;
  /** Doesn't end with constraint. Matches any values that don't end with the given string. */
  notEndsWith?: Maybe<Scalars["String"]>;
  /** Doesn't start with constraint. Matches any values that don't start with the given string. */
  notStartsWith?: Maybe<Scalars["String"]>;
  /** Starts with constraint. Matches any values that start with the given string. */
  startsWith?: Maybe<Scalars["String"]>;
  /** Starts with case insensitive constraint. Matches any values that start with the given string. */
  startsWithIgnoreCase?: Maybe<Scalars["String"]>;
};

export type SsoUrlFromEmailResponse = {
  __typename?: "SsoUrlFromEmailResponse";
  /** SAML SSO sign-in URL. */
  samlSsoUrl: Scalars["String"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** Project start date sorting options. */
export type StartDateSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

/** Comparator for strings. */
export type StringArrayComparator = {
  /** Compound filters, all of which need to be matched. */
  every?: Maybe<StringItemComparator>;
  /** Length of the array. Matches any values that have the given length. */
  length?: Maybe<NumberComparator>;
  /** Compound filters, one of which needs to be matched. */
  some?: Maybe<StringItemComparator>;
};

/** Comparator for strings. */
export type StringComparator = {
  /** Contains constraint. Matches any values that contain the given string. */
  contains?: Maybe<Scalars["String"]>;
  /** Contains case insensitive constraint. Matches any values that contain the given string case insensitive. */
  containsIgnoreCase?: Maybe<Scalars["String"]>;
  /** Contains case and accent insensitive constraint. Matches any values that contain the given string case and accent insensitive. */
  containsIgnoreCaseAndAccent?: Maybe<Scalars["String"]>;
  /** Ends with constraint. Matches any values that end with the given string. */
  endsWith?: Maybe<Scalars["String"]>;
  /** Equals constraint. */
  eq?: Maybe<Scalars["String"]>;
  /** Equals case insensitive. Matches any values that matches the given string case insensitive. */
  eqIgnoreCase?: Maybe<Scalars["String"]>;
  /** In-array constraint. */
  in?: Maybe<Array<Scalars["String"]>>;
  /** Not-equals constraint. */
  neq?: Maybe<Scalars["String"]>;
  /** Not-equals case insensitive. Matches any values that don't match the given string case insensitive. */
  neqIgnoreCase?: Maybe<Scalars["String"]>;
  /** Not-in-array constraint. */
  nin?: Maybe<Array<Scalars["String"]>>;
  /** Doesn't contain constraint. Matches any values that don't contain the given string. */
  notContains?: Maybe<Scalars["String"]>;
  /** Doesn't contain case insensitive constraint. Matches any values that don't contain the given string case insensitive. */
  notContainsIgnoreCase?: Maybe<Scalars["String"]>;
  /** Doesn't end with constraint. Matches any values that don't end with the given string. */
  notEndsWith?: Maybe<Scalars["String"]>;
  /** Doesn't start with constraint. Matches any values that don't start with the given string. */
  notStartsWith?: Maybe<Scalars["String"]>;
  /** Starts with constraint. Matches any values that start with the given string. */
  startsWith?: Maybe<Scalars["String"]>;
  /** Starts with case insensitive constraint. Matches any values that start with the given string. */
  startsWithIgnoreCase?: Maybe<Scalars["String"]>;
};

/** Comparator for strings in arrays. */
export type StringItemComparator = {
  /** Contains constraint. Matches any values that contain the given string. */
  contains?: Maybe<Scalars["String"]>;
  /** Contains case insensitive constraint. Matches any values that contain the given string case insensitive. */
  containsIgnoreCase?: Maybe<Scalars["String"]>;
  /** Contains case and accent insensitive constraint. Matches any values that contain the given string case and accent insensitive. */
  containsIgnoreCaseAndAccent?: Maybe<Scalars["String"]>;
  /** Ends with constraint. Matches any values that end with the given string. */
  endsWith?: Maybe<Scalars["String"]>;
  /** Equals constraint. */
  eq?: Maybe<Scalars["String"]>;
  /** Equals case insensitive. Matches any values that matches the given string case insensitive. */
  eqIgnoreCase?: Maybe<Scalars["String"]>;
  /** In-array constraint. */
  in?: Maybe<Array<Scalars["String"]>>;
  /** Not-equals constraint. */
  neq?: Maybe<Scalars["String"]>;
  /** Not-equals case insensitive. Matches any values that don't match the given string case insensitive. */
  neqIgnoreCase?: Maybe<Scalars["String"]>;
  /** Not-in-array constraint. */
  nin?: Maybe<Array<Scalars["String"]>>;
  /** Doesn't contain constraint. Matches any values that don't contain the given string. */
  notContains?: Maybe<Scalars["String"]>;
  /** Doesn't contain case insensitive constraint. Matches any values that don't contain the given string case insensitive. */
  notContainsIgnoreCase?: Maybe<Scalars["String"]>;
  /** Doesn't end with constraint. Matches any values that don't end with the given string. */
  notEndsWith?: Maybe<Scalars["String"]>;
  /** Doesn't start with constraint. Matches any values that don't start with the given string. */
  notStartsWith?: Maybe<Scalars["String"]>;
  /** Starts with constraint. Matches any values that start with the given string. */
  startsWith?: Maybe<Scalars["String"]>;
  /** Starts with case insensitive constraint. Matches any values that start with the given string. */
  startsWithIgnoreCase?: Maybe<Scalars["String"]>;
};

/** Comparator for source type. */
export type SubTypeComparator = {
  /** Equals constraint. */
  eq?: Maybe<Scalars["String"]>;
  /** In-array constraint. */
  in?: Maybe<Array<Scalars["String"]>>;
  /** Not-equals constraint. */
  neq?: Maybe<Scalars["String"]>;
  /** Not-in-array constraint. */
  nin?: Maybe<Array<Scalars["String"]>>;
  /** Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values. */
  null?: Maybe<Scalars["Boolean"]>;
};

export type SuccessPayload = {
  __typename?: "SuccessPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type SummaryPayload = {
  __typename?: "SummaryPayload";
  /** Summary for project updates. */
  summary: Scalars["String"];
};

/** A comment thread that is synced with an external source. */
export type SyncedExternalThread = {
  __typename?: "SyncedExternalThread";
  /** The display name of the thread. */
  displayName?: Maybe<Scalars["String"]>;
  id?: Maybe<Scalars["ID"]>;
  /** Whether this thread is syncing with the external service. */
  isConnected: Scalars["Boolean"];
  /** Whether the current user has the corresponding personal integration connected for the external service. */
  isPersonalIntegrationConnected: Scalars["Boolean"];
  /** Whether a connected personal integration is required to comment in this thread. */
  isPersonalIntegrationRequired: Scalars["Boolean"];
  /** The display name of the source. */
  name?: Maybe<Scalars["String"]>;
  /** The sub type of the external source. */
  subType?: Maybe<Scalars["String"]>;
  /** The type of the external source. */
  type: Scalars["String"];
  /** The external url of the thread. */
  url?: Maybe<Scalars["String"]>;
};

/** Project target date sorting options. */
export type TargetDateSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

/** An organizational unit that contains issues. */
export type Team = Node & {
  __typename?: "Team";
  /** Team's currently active cycle. */
  activeCycle?: Maybe<Cycle>;
  /** Whether to enable resolved thread AI summaries. */
  aiThreadSummariesEnabled: Scalars["Boolean"];
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** Period after which automatically closed and completed issues are automatically archived in months. */
  autoArchivePeriod: Scalars["Float"];
  /** Whether child issues should automatically close when their parent issue is closed */
  autoCloseChildIssues?: Maybe<Scalars["Boolean"]>;
  /** Whether parent issues should automatically close when all child issues are closed */
  autoCloseParentIssues?: Maybe<Scalars["Boolean"]>;
  /** Period after which issues are automatically closed in months. Null/undefined means disabled. */
  autoClosePeriod?: Maybe<Scalars["Float"]>;
  /** The canceled workflow state which auto closed issues will be set to. Defaults to the first canceled state. */
  autoCloseStateId?: Maybe<Scalars["String"]>;
  /** [Internal] The team's sub-teams. */
  children: Array<Team>;
  /** The team's color. */
  color?: Maybe<Scalars["String"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** [Internal] The current progress of the team. */
  currentProgress: Scalars["JSONObject"];
  /** Calendar feed URL (iCal) for cycles. */
  cycleCalenderUrl: Scalars["String"];
  /** The cooldown time after each cycle in weeks. */
  cycleCooldownTime: Scalars["Float"];
  /** The duration of a cycle in weeks. */
  cycleDuration: Scalars["Float"];
  /** Auto assign completed issues to current cycle. */
  cycleIssueAutoAssignCompleted: Scalars["Boolean"];
  /** Auto assign started issues to current cycle. */
  cycleIssueAutoAssignStarted: Scalars["Boolean"];
  /** Auto assign issues to current cycle if in active status. */
  cycleLockToActive: Scalars["Boolean"];
  /** The day of the week that a new cycle starts. */
  cycleStartDay: Scalars["Float"];
  /** Cycles associated with the team. */
  cycles: CycleConnection;
  /** Whether the team uses cycles. */
  cyclesEnabled: Scalars["Boolean"];
  /** What to use as a default estimate for unestimated issues. */
  defaultIssueEstimate: Scalars["Float"];
  /** The default workflow state into which issues are set when they are opened by team members. */
  defaultIssueState?: Maybe<WorkflowState>;
  /** The default template to use for new projects created for the team. */
  defaultProjectTemplate?: Maybe<Template>;
  /** The default template to use for new issues created by members of the team. */
  defaultTemplateForMembers?: Maybe<Template>;
  /**
   * The id of the default template to use for new issues created by members of the team.
   * @deprecated Use defaultTemplateForMembers instead
   */
  defaultTemplateForMembersId?: Maybe<Scalars["String"]>;
  /** The default template to use for new issues created by non-members of the team. */
  defaultTemplateForNonMembers?: Maybe<Template>;
  /**
   * The id of the default template to use for new issues created by non-members of the team.
   * @deprecated Use defaultTemplateForNonMembers instead
   */
  defaultTemplateForNonMembersId?: Maybe<Scalars["String"]>;
  /** The team's description. */
  description?: Maybe<Scalars["String"]>;
  /** The name of the team including it's parent team name if it has one. */
  displayName: Scalars["String"];
  /**
   * The workflow state into which issues are moved when a PR has been opened as draft.
   * @deprecated Use team.gitAutomationStates instead.
   */
  draftWorkflowState?: Maybe<WorkflowState>;
  /** [Internal] Facets associated with the team. */
  facets: Array<Facet>;
  /** The Git automation states for the team. */
  gitAutomationStates: GitAutomationStateConnection;
  /** Whether to group recent issue history entries. */
  groupIssueHistory: Scalars["Boolean"];
  /** The icon of the team. */
  icon?: Maybe<Scalars["String"]>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** Whether the team should inherit its estimation settings from its parent. Only applies to sub-teams. */
  inheritIssueEstimation: Scalars["Boolean"];
  /** Whether the team should inherit its workflow statuses from its parent. Only applies to sub-teams. */
  inheritWorkflowStatuses: Scalars["Boolean"];
  /** Settings for all integrations associated with that team. */
  integrationsSettings?: Maybe<IntegrationsSettings>;
  /** Unique hash for the team to be used in invite URLs. */
  inviteHash: Scalars["String"];
  /** Number of issues in the team. */
  issueCount: Scalars["Int"];
  /** Whether to allow zeros in issues estimates. */
  issueEstimationAllowZero: Scalars["Boolean"];
  /** Whether to add additional points to the estimate scale. */
  issueEstimationExtended: Scalars["Boolean"];
  /** The issue estimation type to use. Must be one of "notUsed", "exponential", "fibonacci", "linear", "tShirt". */
  issueEstimationType: Scalars["String"];
  /**
   * [DEPRECATED] Whether issues without priority should be sorted first.
   * @deprecated This setting is no longer in use.
   */
  issueOrderingNoPriorityFirst: Scalars["Boolean"];
  /**
   * [DEPRECATED] Whether to move issues to bottom of the column when changing state.
   * @deprecated Use setIssueSortOrderOnStateChange instead.
   */
  issueSortOrderDefaultToBottom: Scalars["Boolean"];
  /** Issues associated with the team. */
  issues: IssueConnection;
  /** [Internal] Whether new users should join this team by default. */
  joinByDefault?: Maybe<Scalars["Boolean"]>;
  /** The team's unique key. The key is used in URLs. */
  key: Scalars["String"];
  /** Labels associated with the team. */
  labels: IssueLabelConnection;
  /** The workflow state into which issues are moved when they are marked as a duplicate of another issue. Defaults to the first canceled state. */
  markedAsDuplicateWorkflowState?: Maybe<WorkflowState>;
  /** Users who are members of this team. */
  members: UserConnection;
  /** [ALPHA] The membership of the given user in the team. */
  membership?: Maybe<TeamMembership>;
  /** Memberships associated with the team. For easier access of the same data, use `members` query. */
  memberships: TeamMembershipConnection;
  /**
   * The workflow state into which issues are moved when a PR has been merged.
   * @deprecated Use team.gitAutomationStates instead.
   */
  mergeWorkflowState?: Maybe<WorkflowState>;
  /**
   * The workflow state into which issues are moved when a PR is ready to be merged.
   * @deprecated Use team.gitAutomationStates instead.
   */
  mergeableWorkflowState?: Maybe<WorkflowState>;
  /** The team's name. */
  name: Scalars["String"];
  /** The organization that the team is associated with. */
  organization: Organization;
  /** [Internal] The team's parent team. */
  parent?: Maybe<Team>;
  /** [Internal] Posts associated with the team. */
  posts: Array<Post>;
  /** Whether the team is private or not. */
  private: Scalars["Boolean"];
  /** [Internal] The progress history of the team. */
  progressHistory: Scalars["JSONObject"];
  /** Projects associated with the team. */
  projects: ProjectConnection;
  /** Whether an issue needs to have a priority set before leaving triage. */
  requirePriorityToLeaveTriage: Scalars["Boolean"];
  /**
   * The workflow state into which issues are moved when a review has been requested for the PR.
   * @deprecated Use team.gitAutomationStates instead.
   */
  reviewWorkflowState?: Maybe<WorkflowState>;
  /** The SCIM group name for the team. */
  scimGroupName?: Maybe<Scalars["String"]>;
  /** Whether the team is managed by SCIM integration. */
  scimManaged: Scalars["Boolean"];
  /** Where to move issues when changing state. */
  setIssueSortOrderOnStateChange: Scalars["String"];
  /**
   * Whether to send new issue comment notifications to Slack.
   * @deprecated No longer in use
   */
  slackIssueComments: Scalars["Boolean"];
  /**
   * Whether to send new issue status updates to Slack.
   * @deprecated No longer in use
   */
  slackIssueStatuses: Scalars["Boolean"];
  /**
   * Whether to send new issue notifications to Slack.
   * @deprecated No longer is use
   */
  slackNewIssue: Scalars["Boolean"];
  /**
   * The workflow state into which issues are moved when a PR has been opened.
   * @deprecated Use team.gitAutomationStates instead.
   */
  startWorkflowState?: Maybe<WorkflowState>;
  /** The states that define the workflow associated with the team. */
  states: WorkflowStateConnection;
  /** Templates associated with the team. */
  templates: TemplateConnection;
  /** The timezone of the team. Defaults to "America/Los_Angeles" */
  timezone: Scalars["String"];
  /** Whether triage mode is enabled for the team or not. */
  triageEnabled: Scalars["Boolean"];
  /** The workflow state into which issues are set when they are opened by non-team members or integrations if triage is enabled. */
  triageIssueState?: Maybe<WorkflowState>;
  /** Team's triage responsibility. */
  triageResponsibility?: Maybe<TriageResponsibility>;
  /** How many upcoming cycles to create. */
  upcomingCycleCount: Scalars["Float"];
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** Webhooks associated with the team. */
  webhooks: WebhookConnection;
};

/** An organizational unit that contains issues. */
export type TeamCyclesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CycleFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** An organizational unit that contains issues. */
export type TeamGitAutomationStatesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** An organizational unit that contains issues. */
export type TeamIssueCountArgs = {
  includeArchived?: Maybe<Scalars["Boolean"]>;
};

/** An organizational unit that contains issues. */
export type TeamIssuesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  includeSubTeams?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** An organizational unit that contains issues. */
export type TeamLabelsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueLabelFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** An organizational unit that contains issues. */
export type TeamMembersArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<UserFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  includeDisabled?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** An organizational unit that contains issues. */
export type TeamMembershipArgs = {
  userId: Scalars["String"];
};

/** An organizational unit that contains issues. */
export type TeamMembershipsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** An organizational unit that contains issues. */
export type TeamProjectsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<ProjectFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  includeSubTeams?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
  sort?: Maybe<Array<ProjectSortInput>>;
};

/** An organizational unit that contains issues. */
export type TeamStatesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<WorkflowStateFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** An organizational unit that contains issues. */
export type TeamTemplatesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<NullableTemplateFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** An organizational unit that contains issues. */
export type TeamWebhooksArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** A generic payload return from entity archive mutations. */
export type TeamArchivePayload = ArchivePayload & {
  __typename?: "TeamArchivePayload";
  /** The archived/unarchived entity. Null if entity was deleted. */
  entity?: Maybe<Team>;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** Certain properties of a team. */
export type TeamChildWebhookPayload = {
  __typename?: "TeamChildWebhookPayload";
  /** The ID of the team. */
  id: Scalars["String"];
  /** The key of the team. */
  key: Scalars["String"];
  /** The name of the team. */
  name: Scalars["String"];
};

/** Team collection filtering options. */
export type TeamCollectionFilter = {
  /** Compound filters, all of which need to be matched by the team. */
  and?: Maybe<Array<TeamCollectionFilter>>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Filters that needs to be matched by all teams. */
  every?: Maybe<TeamFilter>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Comparator for the collection length. */
  length?: Maybe<NumberComparator>;
  /** Compound filters, one of which need to be matched by the team. */
  or?: Maybe<Array<TeamCollectionFilter>>;
  /** Filters that needs to be matched by some teams. */
  some?: Maybe<TeamFilter>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

export type TeamConnection = {
  __typename?: "TeamConnection";
  edges: Array<TeamEdge>;
  nodes: Array<Team>;
  pageInfo: PageInfo;
};

export type TeamCreateInput = {
  /** Period after which closed and completed issues are automatically archived, in months. 0 means disabled. */
  autoArchivePeriod?: Maybe<Scalars["Float"]>;
  /** Period after which issues are automatically closed, in months. */
  autoClosePeriod?: Maybe<Scalars["Float"]>;
  /** The canceled workflow state which auto closed issues will be set to. */
  autoCloseStateId?: Maybe<Scalars["String"]>;
  /** The color of the team. */
  color?: Maybe<Scalars["String"]>;
  /** The cooldown time after each cycle in weeks. */
  cycleCooldownTime?: Maybe<Scalars["Int"]>;
  /** The duration of each cycle in weeks. */
  cycleDuration?: Maybe<Scalars["Int"]>;
  /** Auto assign completed issues to current active cycle setting. */
  cycleIssueAutoAssignCompleted?: Maybe<Scalars["Boolean"]>;
  /** Auto assign started issues to current active cycle setting. */
  cycleIssueAutoAssignStarted?: Maybe<Scalars["Boolean"]>;
  /** Only allow issues issues with cycles in Active Issues. */
  cycleLockToActive?: Maybe<Scalars["Boolean"]>;
  /** The day of the week that a new cycle starts. */
  cycleStartDay?: Maybe<Scalars["Float"]>;
  /** Whether the team uses cycles. */
  cyclesEnabled?: Maybe<Scalars["Boolean"]>;
  /** What to use as an default estimate for unestimated issues. */
  defaultIssueEstimate?: Maybe<Scalars["Float"]>;
  /** The identifier of the default project template of this team. */
  defaultProjectTemplateId?: Maybe<Scalars["String"]>;
  /** The identifier of the default template for members of this team. */
  defaultTemplateForMembersId?: Maybe<Scalars["String"]>;
  /** The identifier of the default template for non-members of this team. */
  defaultTemplateForNonMembersId?: Maybe<Scalars["String"]>;
  /** The description of the team. */
  description?: Maybe<Scalars["String"]>;
  /** Whether to group recent issue history entries. */
  groupIssueHistory?: Maybe<Scalars["Boolean"]>;
  /** The icon of the team. */
  icon?: Maybe<Scalars["String"]>;
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** Whether the team should inherit estimation settings from its parent. Only applies to sub-teams. */
  inheritIssueEstimation?: Maybe<Scalars["Boolean"]>;
  /** [Internal] Whether the team should inherit its product intelligence scope from its parent. Only applies to sub-teams. */
  inheritProductIntelligenceScope?: Maybe<Scalars["Boolean"]>;
  /** [Internal] Whether the team should inherit workflow statuses from its parent. */
  inheritWorkflowStatuses?: Maybe<Scalars["Boolean"]>;
  /** Whether to allow zeros in issues estimates. */
  issueEstimationAllowZero?: Maybe<Scalars["Boolean"]>;
  /** Whether to add additional points to the estimate scale. */
  issueEstimationExtended?: Maybe<Scalars["Boolean"]>;
  /** The issue estimation type to use. Must be one of "notUsed", "exponential", "fibonacci", "linear", "tShirt". */
  issueEstimationType?: Maybe<Scalars["String"]>;
  /** The key of the team. If not given, the key will be generated based on the name of the team. */
  key?: Maybe<Scalars["String"]>;
  /** The workflow state into which issues are moved when they are marked as a duplicate of another issue. */
  markedAsDuplicateWorkflowStateId?: Maybe<Scalars["String"]>;
  /** The name of the team. */
  name: Scalars["String"];
  /** The parent team ID. */
  parentId?: Maybe<Scalars["String"]>;
  /** Internal. Whether the team is private or not. */
  private?: Maybe<Scalars["Boolean"]>;
  /** [Internal] The scope of product intelligence suggestion data for the team. */
  productIntelligenceScope?: Maybe<ProductIntelligenceScope>;
  /** Whether an issue needs to have a priority set before leaving triage. */
  requirePriorityToLeaveTriage?: Maybe<Scalars["Boolean"]>;
  /** Whether to move issues to bottom of the column when changing state. */
  setIssueSortOrderOnStateChange?: Maybe<Scalars["String"]>;
  /** The timezone of the team. */
  timezone?: Maybe<Scalars["String"]>;
  /** Whether triage mode is enabled for the team. */
  triageEnabled?: Maybe<Scalars["Boolean"]>;
  /** How many upcoming cycles to create. */
  upcomingCycleCount?: Maybe<Scalars["Float"]>;
};

export type TeamEdge = {
  __typename?: "TeamEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: Team;
};

/** Team filtering options. */
export type TeamFilter = {
  /** Compound filters, all of which need to be matched by the team. */
  and?: Maybe<Array<TeamFilter>>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Comparator for the team description. */
  description?: Maybe<NullableStringComparator>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Filters that the teams issues must satisfy. */
  issues?: Maybe<IssueCollectionFilter>;
  /** Comparator for the team key. */
  key?: Maybe<StringComparator>;
  /** Comparator for the team name. */
  name?: Maybe<StringComparator>;
  /** Compound filters, one of which need to be matched by the team. */
  or?: Maybe<Array<TeamFilter>>;
  /** Filters that the teams parent must satisfy. */
  parent?: Maybe<NullableTeamFilter>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

/** Defines the membership of a user to a team. */
export type TeamMembership = Node & {
  __typename?: "TeamMembership";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** Whether the user is the owner of the team. */
  owner: Scalars["Boolean"];
  /** The order of the item in the users team list. */
  sortOrder: Scalars["Float"];
  /** The team that the membership is associated with. */
  team: Team;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** The user that the membership is associated with. */
  user: User;
};

export type TeamMembershipConnection = {
  __typename?: "TeamMembershipConnection";
  edges: Array<TeamMembershipEdge>;
  nodes: Array<TeamMembership>;
  pageInfo: PageInfo;
};

export type TeamMembershipCreateInput = {
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** Internal. Whether the user is the owner of the team. */
  owner?: Maybe<Scalars["Boolean"]>;
  /** The position of the item in the users list. */
  sortOrder?: Maybe<Scalars["Float"]>;
  /** The identifier of the team associated with the membership. */
  teamId: Scalars["String"];
  /** The identifier of the user associated with the membership. */
  userId: Scalars["String"];
};

export type TeamMembershipEdge = {
  __typename?: "TeamMembershipEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: TeamMembership;
};

export type TeamMembershipPayload = {
  __typename?: "TeamMembershipPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
  /** The team membership that was created or updated. */
  teamMembership?: Maybe<TeamMembership>;
};

export type TeamMembershipUpdateInput = {
  /** Internal. Whether the user is the owner of the team. */
  owner?: Maybe<Scalars["Boolean"]>;
  /** The position of the item in the users list. */
  sortOrder?: Maybe<Scalars["Float"]>;
};

/** A team notification subscription. */
export type TeamNotificationSubscription = Entity &
  Node &
  NotificationSubscription & {
    __typename?: "TeamNotificationSubscription";
    /** Whether the subscription is active or not. */
    active: Scalars["Boolean"];
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: Maybe<Scalars["DateTime"]>;
    /** The type of view to which the notification subscription context is associated with. */
    contextViewType?: Maybe<ContextViewType>;
    /** The time at which the entity was created. */
    createdAt: Scalars["DateTime"];
    /** The contextual custom view associated with the notification subscription. */
    customView?: Maybe<CustomView>;
    /** The customer associated with the notification subscription. */
    customer?: Maybe<Customer>;
    /** The contextual cycle view associated with the notification subscription. */
    cycle?: Maybe<Cycle>;
    /** The unique identifier of the entity. */
    id: Scalars["ID"];
    /** The contextual initiative view associated with the notification subscription. */
    initiative?: Maybe<Initiative>;
    /** The contextual label view associated with the notification subscription. */
    label?: Maybe<IssueLabel>;
    /** The type of subscription. */
    notificationSubscriptionTypes: Array<Scalars["String"]>;
    /** The contextual project view associated with the notification subscription. */
    project?: Maybe<Project>;
    /** The user that subscribed to receive notifications. */
    subscriber: User;
    /** The team subscribed to. */
    team: Team;
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars["DateTime"];
    /** The user view associated with the notification subscription. */
    user?: Maybe<User>;
    /** The type of user view to which the notification subscription context is associated with. */
    userContextViewType?: Maybe<UserContextViewType>;
  };

export type TeamPayload = {
  __typename?: "TeamPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
  /** The team that was created or updated. */
  team?: Maybe<Team>;
};

/** Issue team sorting options. */
export type TeamSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

export type TeamUpdateInput = {
  /** Whether to enable resolved thread AI summaries. */
  aiThreadSummariesEnabled?: Maybe<Scalars["Boolean"]>;
  /** Period after which closed and completed issues are automatically archived, in months. */
  autoArchivePeriod?: Maybe<Scalars["Float"]>;
  /** [INTERNAL] Whether to automatically close all sub-issues when a parent issue in this team is closed. */
  autoCloseChildIssues?: Maybe<Scalars["Boolean"]>;
  /** [INTERNAL] Whether to automatically close a parent issue in this team if all its sub-issues are closed. */
  autoCloseParentIssues?: Maybe<Scalars["Boolean"]>;
  /** Period after which issues are automatically closed, in months. */
  autoClosePeriod?: Maybe<Scalars["Float"]>;
  /** The canceled workflow state which auto closed issues will be set to. */
  autoCloseStateId?: Maybe<Scalars["String"]>;
  /** The color of the team. */
  color?: Maybe<Scalars["String"]>;
  /** The cooldown time after each cycle in weeks. */
  cycleCooldownTime?: Maybe<Scalars["Int"]>;
  /** The duration of each cycle in weeks. */
  cycleDuration?: Maybe<Scalars["Int"]>;
  /** The date to begin cycles on. */
  cycleEnabledStartDate?: Maybe<Scalars["DateTime"]>;
  /** Auto assign completed issues to current active cycle setting. */
  cycleIssueAutoAssignCompleted?: Maybe<Scalars["Boolean"]>;
  /** Auto assign started issues to current active cycle setting. */
  cycleIssueAutoAssignStarted?: Maybe<Scalars["Boolean"]>;
  /** Only allow issues with cycles in Active Issues. */
  cycleLockToActive?: Maybe<Scalars["Boolean"]>;
  /** The day of the week that a new cycle starts. */
  cycleStartDay?: Maybe<Scalars["Float"]>;
  /** Whether the team uses cycles. */
  cyclesEnabled?: Maybe<Scalars["Boolean"]>;
  /** What to use as an default estimate for unestimated issues. */
  defaultIssueEstimate?: Maybe<Scalars["Float"]>;
  /** Default status for newly created issues. */
  defaultIssueStateId?: Maybe<Scalars["String"]>;
  /** The identifier of the default project template of this team. */
  defaultProjectTemplateId?: Maybe<Scalars["String"]>;
  /** The identifier of the default template for members of this team. */
  defaultTemplateForMembersId?: Maybe<Scalars["String"]>;
  /** The identifier of the default template for non-members of this team. */
  defaultTemplateForNonMembersId?: Maybe<Scalars["String"]>;
  /** The description of the team. */
  description?: Maybe<Scalars["String"]>;
  /** Whether to group recent issue history entries. */
  groupIssueHistory?: Maybe<Scalars["Boolean"]>;
  /** The icon of the team. */
  icon?: Maybe<Scalars["String"]>;
  /** Whether the team should inherit estimation settings from its parent. Only applies to sub-teams. */
  inheritIssueEstimation?: Maybe<Scalars["Boolean"]>;
  /** [Internal] Whether the team should inherit its product intelligence scope from its parent. Only applies to sub-teams. */
  inheritProductIntelligenceScope?: Maybe<Scalars["Boolean"]>;
  /** [Internal] Whether the team should inherit workflow statuses from its parent. */
  inheritWorkflowStatuses?: Maybe<Scalars["Boolean"]>;
  /** Whether to allow zeros in issues estimates. */
  issueEstimationAllowZero?: Maybe<Scalars["Boolean"]>;
  /** Whether to add additional points to the estimate scale. */
  issueEstimationExtended?: Maybe<Scalars["Boolean"]>;
  /** The issue estimation type to use. Must be one of "notUsed", "exponential", "fibonacci", "linear", "tShirt". */
  issueEstimationType?: Maybe<Scalars["String"]>;
  /** Whether new users should join this team by default. Mutation restricted to workspace admins! */
  joinByDefault?: Maybe<Scalars["Boolean"]>;
  /** The key of the team. */
  key?: Maybe<Scalars["String"]>;
  /** The workflow state into which issues are moved when they are marked as a duplicate of another issue. */
  markedAsDuplicateWorkflowStateId?: Maybe<Scalars["String"]>;
  /** The name of the team. */
  name?: Maybe<Scalars["String"]>;
  /** The parent team ID. */
  parentId?: Maybe<Scalars["String"]>;
  /** Whether the team is private or not. */
  private?: Maybe<Scalars["Boolean"]>;
  /** [Internal] The scope of product intelligence suggestion data for the team. */
  productIntelligenceScope?: Maybe<ProductIntelligenceScope>;
  /** Whether an issue needs to have a priority set before leaving triage. */
  requirePriorityToLeaveTriage?: Maybe<Scalars["Boolean"]>;
  /** Whether the team is managed by SCIM integration. Mutation restricted to workspace admins and only unsetting is allowed! */
  scimManaged?: Maybe<Scalars["Boolean"]>;
  /** Whether to move issues to bottom of the column when changing state. */
  setIssueSortOrderOnStateChange?: Maybe<Scalars["String"]>;
  /** Whether to send new issue comment notifications to Slack. */
  slackIssueComments?: Maybe<Scalars["Boolean"]>;
  /** Whether to send issue status update notifications to Slack. */
  slackIssueStatuses?: Maybe<Scalars["Boolean"]>;
  /** Whether to send new issue notifications to Slack. */
  slackNewIssue?: Maybe<Scalars["Boolean"]>;
  /** The timezone of the team. */
  timezone?: Maybe<Scalars["String"]>;
  /** Whether triage mode is enabled for the team. */
  triageEnabled?: Maybe<Scalars["Boolean"]>;
  /** How many upcoming cycles to create. */
  upcomingCycleCount?: Maybe<Scalars["Float"]>;
};

/** A template object used for creating entities faster. */
export type Template = Node & {
  __typename?: "Template";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The user who created the template. */
  creator?: Maybe<User>;
  /** Template description. */
  description?: Maybe<Scalars["String"]>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The original template inherited from. */
  inheritedFrom?: Maybe<Template>;
  /** The user who last updated the template. */
  lastUpdatedBy?: Maybe<User>;
  /** The name of the template. */
  name: Scalars["String"];
  /** The organization that the template is associated with. If null, the template is associated with a particular team. */
  organization: Organization;
  /** The sort order of the template. */
  sortOrder: Scalars["Float"];
  /** The team that the template is associated with. If null, the template is global to the workspace. */
  team?: Maybe<Team>;
  /** Template data. */
  templateData: Scalars["JSON"];
  /** The entity type this template is for. */
  type: Scalars["String"];
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

export type TemplateConnection = {
  __typename?: "TemplateConnection";
  edges: Array<TemplateEdge>;
  nodes: Array<Template>;
  pageInfo: PageInfo;
};

export type TemplateCreateInput = {
  /** The template description. */
  description?: Maybe<Scalars["String"]>;
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The template name. */
  name: Scalars["String"];
  /** The position of the template in the templates list. */
  sortOrder?: Maybe<Scalars["Float"]>;
  /** The identifier or key of the team associated with the template. If not given, the template will be shared across all teams. */
  teamId?: Maybe<Scalars["String"]>;
  /** The template data as JSON encoded attributes of the type of entity, such as an issue. */
  templateData: Scalars["JSON"];
  /** The template type, e.g. 'issue'. */
  type: Scalars["String"];
};

export type TemplateEdge = {
  __typename?: "TemplateEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: Template;
};

export type TemplatePayload = {
  __typename?: "TemplatePayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
  /** The template that was created or updated. */
  template: Template;
};

export type TemplateUpdateInput = {
  /** The template description. */
  description?: Maybe<Scalars["String"]>;
  /** The template name. */
  name?: Maybe<Scalars["String"]>;
  /** The position of the template in the templates list. */
  sortOrder?: Maybe<Scalars["Float"]>;
  /** The identifier or key of the team associated with the template. If set to null, the template will be shared across all teams. */
  teamId?: Maybe<Scalars["String"]>;
  /** The template data as JSON encoded attributes of the type of entity, such as an issue. */
  templateData?: Maybe<Scalars["JSON"]>;
};

/** Customer tier sorting options. */
export type TierSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

/** A time schedule. */
export type TimeSchedule = Node & {
  __typename?: "TimeSchedule";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The schedule entries. */
  entries?: Maybe<Array<TimeScheduleEntry>>;
  /** The identifier of the external schedule. */
  externalId?: Maybe<Scalars["String"]>;
  /** The URL to the external schedule. */
  externalUrl?: Maybe<Scalars["String"]>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The identifier of the Linear integration populating the schedule. */
  integration?: Maybe<Integration>;
  /** The name of the schedule. */
  name: Scalars["String"];
  /** The organization of the schedule. */
  organization: Organization;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

export type TimeScheduleConnection = {
  __typename?: "TimeScheduleConnection";
  edges: Array<TimeScheduleEdge>;
  nodes: Array<TimeSchedule>;
  pageInfo: PageInfo;
};

export type TimeScheduleCreateInput = {
  /** The schedule entries. */
  entries: Array<TimeScheduleEntryInput>;
  /** The unique identifier of the external schedule. */
  externalId?: Maybe<Scalars["String"]>;
  /** The URL to the external schedule. */
  externalUrl?: Maybe<Scalars["String"]>;
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The name of the schedule. */
  name: Scalars["String"];
};

export type TimeScheduleEdge = {
  __typename?: "TimeScheduleEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: TimeSchedule;
};

export type TimeScheduleEntry = {
  __typename?: "TimeScheduleEntry";
  /** The end date of the schedule in ISO 8601 date-time format. */
  endsAt: Scalars["DateTime"];
  /** The start date of the schedule in ISO 8601 date-time format. */
  startsAt: Scalars["DateTime"];
  /** The email, name or reference to the user on schedule. This is used in case the external user could not be mapped to a Linear user id. */
  userEmail?: Maybe<Scalars["String"]>;
  /** The Linear user id of the user on schedule. If the user cannot be mapped to a Linear user then `userEmail` can be used as a reference. */
  userId?: Maybe<Scalars["String"]>;
};

export type TimeScheduleEntryInput = {
  /** The end date of the schedule in ISO 8601 date-time format. */
  endsAt: Scalars["DateTime"];
  /** The start date of the schedule in ISO 8601 date-time format. */
  startsAt: Scalars["DateTime"];
  /** The email, name or reference to the user on schedule. This is used in case the external user could not be mapped to a Linear user id. */
  userEmail?: Maybe<Scalars["String"]>;
  /** The Linear user id of the user on schedule. If the user cannot be mapped to a Linear user then `userEmail` can be used as a reference. */
  userId?: Maybe<Scalars["String"]>;
};

export type TimeSchedulePayload = {
  __typename?: "TimeSchedulePayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
  timeSchedule: TimeSchedule;
};

export type TimeScheduleUpdateInput = {
  /** The schedule entries. */
  entries?: Maybe<Array<TimeScheduleEntryInput>>;
  /** The unique identifier of the external schedule. */
  externalId?: Maybe<Scalars["String"]>;
  /** The URL to the external schedule. */
  externalUrl?: Maybe<Scalars["String"]>;
  /** The name of the schedule. */
  name?: Maybe<Scalars["String"]>;
};

/** Issue title sorting options. */
export type TitleSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

export type TokenUserAccountAuthInput = {
  /** The email which to login via the magic login code. */
  email: Scalars["String"];
  /** An optional invite link for an organization. */
  inviteLink?: Maybe<Scalars["String"]>;
  /** The timezone of the user's browser. */
  timezone: Scalars["String"];
  /** The magic login code. */
  token: Scalars["String"];
};

/** A team's triage responsibility. */
export type TriageResponsibility = Node & {
  __typename?: "TriageResponsibility";
  /** The action to take when an issue is added to triage. */
  action: TriageResponsibilityAction;
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The user currently responsible for triage. */
  currentUser?: Maybe<User>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** Set of users used for triage responsibility. */
  manualSelection?: Maybe<TriageResponsibilityManualSelection>;
  /** The team to which the triage responsibility belongs to. */
  team: Team;
  /** The time schedule used for scheduling. */
  timeSchedule?: Maybe<TimeSchedule>;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

/** Which action should be taken after an issue is added to triage. */
export enum TriageResponsibilityAction {
  Assign = "assign",
  Notify = "notify",
}

export type TriageResponsibilityConnection = {
  __typename?: "TriageResponsibilityConnection";
  edges: Array<TriageResponsibilityEdge>;
  nodes: Array<TriageResponsibility>;
  pageInfo: PageInfo;
};

export type TriageResponsibilityCreateInput = {
  /** The action to take when an issue is added to triage. */
  action: Scalars["String"];
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The manual selection of users responsible for triage. */
  manualSelection?: Maybe<TriageResponsibilityManualSelectionInput>;
  /** The identifier of the team associated with the triage responsibility. */
  teamId: Scalars["String"];
  /** The identifier of the time schedule used for scheduling triage responsibility */
  timeScheduleId?: Maybe<Scalars["String"]>;
};

export type TriageResponsibilityEdge = {
  __typename?: "TriageResponsibilityEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: TriageResponsibility;
};

export type TriageResponsibilityManualSelection = {
  __typename?: "TriageResponsibilityManualSelection";
  /** [Internal] The index of the current userId used for the assign action when having more than one user. */
  assignmentIndex?: Maybe<Scalars["Int"]>;
  /** The set of users responsible for triage. */
  userIds: Array<Scalars["String"]>;
};

/** Manual triage responsibility using a set of users. */
export type TriageResponsibilityManualSelectionInput = {
  /** [Internal] The index of the current userId used for the assign action when having more than one user. */
  assignmentIndex?: Maybe<Scalars["Int"]>;
  /** The set of users responsible for triage. */
  userIds: Array<Scalars["String"]>;
};

export type TriageResponsibilityPayload = {
  __typename?: "TriageResponsibilityPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
  triageResponsibility: TriageResponsibility;
};

export type TriageResponsibilityUpdateInput = {
  /** The action to take when an issue is added to triage. */
  action?: Maybe<Scalars["String"]>;
  /** The manual selection of users responsible for triage. */
  manualSelection?: Maybe<TriageResponsibilityManualSelectionInput>;
  /** The identifier of the time schedule used for scheduling triage responsibility. */
  timeScheduleId?: Maybe<Scalars["String"]>;
};

/** Issue update date sorting options. */
export type UpdatedAtSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

/** Object representing Google Cloud upload policy, plus additional data. */
export type UploadFile = {
  __typename?: "UploadFile";
  /** The asset URL for the uploaded file. (assigned automatically). */
  assetUrl: Scalars["String"];
  /** The content type. */
  contentType: Scalars["String"];
  /** The filename. */
  filename: Scalars["String"];
  headers: Array<UploadFileHeader>;
  metaData?: Maybe<Scalars["JSONObject"]>;
  /** The size of the uploaded file. */
  size: Scalars["Int"];
  /** The signed URL the for the uploaded file. (assigned automatically). */
  uploadUrl: Scalars["String"];
};

export type UploadFileHeader = {
  __typename?: "UploadFileHeader";
  /** Upload file header key. */
  key: Scalars["String"];
  /** Upload file header value. */
  value: Scalars["String"];
};

export type UploadPayload = {
  __typename?: "UploadPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
  /** Object describing the file to be uploaded. */
  uploadFile?: Maybe<UploadFile>;
};

/** A user that has access to the the resources of an organization. */
export type User = Node & {
  __typename?: "User";
  /** Whether the user account is active or disabled (suspended). */
  active: Scalars["Boolean"];
  /** Whether the user is an organization administrator. */
  admin: Scalars["Boolean"];
  /** Whether the user is an app. */
  app: Scalars["Boolean"];
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** Issues assigned to the user. */
  assignedIssues: IssueConnection;
  /** The background color of the avatar for users without set avatar. */
  avatarBackgroundColor: Scalars["String"];
  /** An URL to the user's avatar image. */
  avatarUrl?: Maybe<Scalars["String"]>;
  /** [DEPRECATED] Hash for the user to be used in calendar URLs. */
  calendarHash?: Maybe<Scalars["String"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** Number of issues created. */
  createdIssueCount: Scalars["Int"];
  /** Issues created by the user. */
  createdIssues: IssueConnection;
  /** Issues delegated to this user. */
  delegatedIssues: IssueConnection;
  /** A short description of the user, either its title or bio. */
  description?: Maybe<Scalars["String"]>;
  /** Reason why is the account disabled. */
  disableReason?: Maybe<Scalars["String"]>;
  /** The user's display (nick) name. Unique within each organization. */
  displayName: Scalars["String"];
  /** The user's drafts */
  drafts: DraftConnection;
  /** The user's email address. */
  email: Scalars["String"];
  /** The user's GitHub user ID. */
  gitHubUserId?: Maybe<Scalars["String"]>;
  /** Whether the user is a guest in the workspace and limited to accessing a subset of teams. */
  guest: Scalars["Boolean"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The initials of the user. */
  initials: Scalars["String"];
  /**
   * [DEPRECATED] Unique hash for the user to be used in invite URLs.
   * @deprecated This hash is not in use anymore, this value will always be empty.
   */
  inviteHash: Scalars["String"];
  /** Whether the user is assignable. */
  isAssignable: Scalars["Boolean"];
  /** Whether the user is the currently authenticated user. */
  isMe: Scalars["Boolean"];
  /** Whether the user is mentionable. */
  isMentionable: Scalars["Boolean"];
  /** The user's issue drafts */
  issueDrafts: IssueDraftConnection;
  /** The last time the user was seen online. */
  lastSeen?: Maybe<Scalars["DateTime"]>;
  /** The user's full name. */
  name: Scalars["String"];
  /** Organization the user belongs to. */
  organization: Organization;
  /** The emoji to represent the user current status. */
  statusEmoji?: Maybe<Scalars["String"]>;
  /** The label of the user current status. */
  statusLabel?: Maybe<Scalars["String"]>;
  /** A date at which the user current status should be cleared. */
  statusUntilAt?: Maybe<Scalars["DateTime"]>;
  /** Memberships associated with the user. For easier access of the same data, use `teams` query. */
  teamMemberships: TeamMembershipConnection;
  /** Teams the user is part of. */
  teams: TeamConnection;
  /** The local timezone of the user. */
  timezone?: Maybe<Scalars["String"]>;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** User's profile URL. */
  url: Scalars["String"];
};

/** A user that has access to the the resources of an organization. */
export type UserAssignedIssuesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** A user that has access to the the resources of an organization. */
export type UserCreatedIssuesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** A user that has access to the the resources of an organization. */
export type UserDelegatedIssuesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** A user that has access to the the resources of an organization. */
export type UserDraftsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** A user that has access to the the resources of an organization. */
export type UserIssueDraftsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** A user that has access to the the resources of an organization. */
export type UserTeamMembershipsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** A user that has access to the the resources of an organization. */
export type UserTeamsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<TeamFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type UserAdminPayload = {
  __typename?: "UserAdminPayload";
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** Public information of the OAuth application, plus whether the application has been authorized for the given scopes. */
export type UserAuthorizedApplication = {
  __typename?: "UserAuthorizedApplication";
  /** Details of the app user's existing token, if any. */
  appUserAuthentication?: Maybe<AppUserAuthentication>;
  /** Error associated with the application needing to be requested for approval in the workspace. */
  approvalErrorCode?: Maybe<Scalars["String"]>;
  /** OAuth application's client ID. */
  clientId: Scalars["String"];
  /** Whether the application was created by Linear. */
  createdByLinear: Scalars["Boolean"];
  /** Information about the application. */
  description?: Maybe<Scalars["String"]>;
  /** Name of the developer. */
  developer: Scalars["String"];
  /** Url of the developer (homepage or docs). */
  developerUrl: Scalars["String"];
  /** OAuth application's ID. */
  id: Scalars["String"];
  /** Image of the application. */
  imageUrl?: Maybe<Scalars["String"]>;
  /** Whether the user has authorized the application for the given scopes. */
  isAuthorized: Scalars["Boolean"];
  /** Application name. */
  name: Scalars["String"];
  /** Whether or not webhooks are enabled for the application. */
  webhooksEnabled: Scalars["Boolean"];
};

/** Certain properties of a user. */
export type UserChildWebhookPayload = {
  __typename?: "UserChildWebhookPayload";
  /** The avatar URL of the user. */
  avatarUrl?: Maybe<Scalars["String"]>;
  /** The email of the user. */
  email: Scalars["String"];
  /** The ID of the user. */
  id: Scalars["String"];
  /** The name of the user. */
  name: Scalars["String"];
  /** The URL of the user. */
  url: Scalars["String"];
};

/** User filtering options. */
export type UserCollectionFilter = {
  /** Comparator for the user's activity status. */
  active?: Maybe<BooleanComparator>;
  /** Comparator for the user's admin status. */
  admin?: Maybe<BooleanComparator>;
  /** Compound filters, all of which need to be matched by the user. */
  and?: Maybe<Array<UserCollectionFilter>>;
  /** Comparator for the user's app status. */
  app?: Maybe<BooleanComparator>;
  /** Filters that the users assigned issues must satisfy. */
  assignedIssues?: Maybe<IssueCollectionFilter>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Comparator for the user's display name. */
  displayName?: Maybe<StringComparator>;
  /** Comparator for the user's email. */
  email?: Maybe<StringComparator>;
  /** Filters that needs to be matched by all users. */
  every?: Maybe<UserFilter>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Comparator for the user's invited status. */
  invited?: Maybe<BooleanComparator>;
  /** Filter based on the currently authenticated user. Set to true to filter for the authenticated user, false for any other user. */
  isMe?: Maybe<BooleanComparator>;
  /** Comparator for the collection length. */
  length?: Maybe<NumberComparator>;
  /** Comparator for the user's name. */
  name?: Maybe<StringComparator>;
  /** Compound filters, one of which need to be matched by the user. */
  or?: Maybe<Array<UserCollectionFilter>>;
  /** Filters that needs to be matched by some users. */
  some?: Maybe<UserFilter>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

export type UserConnection = {
  __typename?: "UserConnection";
  edges: Array<UserEdge>;
  nodes: Array<User>;
  pageInfo: PageInfo;
};

export enum UserContextViewType {
  Assigned = "assigned",
}

/** User display name sorting options. */
export type UserDisplayNameSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

export type UserEdge = {
  __typename?: "UserEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: User;
};

/** User filtering options. */
export type UserFilter = {
  /** Comparator for the user's activity status. */
  active?: Maybe<BooleanComparator>;
  /** Comparator for the user's admin status. */
  admin?: Maybe<BooleanComparator>;
  /** Compound filters, all of which need to be matched by the user. */
  and?: Maybe<Array<UserFilter>>;
  /** Comparator for the user's app status. */
  app?: Maybe<BooleanComparator>;
  /** Filters that the users assigned issues must satisfy. */
  assignedIssues?: Maybe<IssueCollectionFilter>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Comparator for the user's display name. */
  displayName?: Maybe<StringComparator>;
  /** Comparator for the user's email. */
  email?: Maybe<StringComparator>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Comparator for the user's invited status. */
  invited?: Maybe<BooleanComparator>;
  /** Filter based on the currently authenticated user. Set to true to filter for the authenticated user, false for any other user. */
  isMe?: Maybe<BooleanComparator>;
  /** Comparator for the user's name. */
  name?: Maybe<StringComparator>;
  /** Compound filters, one of which need to be matched by the user. */
  or?: Maybe<Array<UserFilter>>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

/** The types of flags that the user can have. */
export enum UserFlagType {
  All = "all",
  AnalyticsWelcomeDismissed = "analyticsWelcomeDismissed",
  CanPlaySnake = "canPlaySnake",
  CanPlayTetris = "canPlayTetris",
  CommandMenuClearShortcutTip = "commandMenuClearShortcutTip",
  CompletedOnboarding = "completedOnboarding",
  CycleWelcomeDismissed = "cycleWelcomeDismissed",
  DesktopDownloadToastDismissed = "desktopDownloadToastDismissed",
  DesktopInstalled = "desktopInstalled",
  DesktopTabsOnboardingDismissed = "desktopTabsOnboardingDismissed",
  DueDateShortcutMigration = "dueDateShortcutMigration",
  EditorSlashCommandUsed = "editorSlashCommandUsed",
  EmptyActiveIssuesDismissed = "emptyActiveIssuesDismissed",
  EmptyBacklogDismissed = "emptyBacklogDismissed",
  EmptyCustomViewsDismissed = "emptyCustomViewsDismissed",
  EmptyMyIssuesDismissed = "emptyMyIssuesDismissed",
  EmptyParagraphSlashCommandTip = "emptyParagraphSlashCommandTip",
  FigmaPluginBannerDismissed = "figmaPluginBannerDismissed",
  FigmaPromptDismissed = "figmaPromptDismissed",
  HelpIslandFeatureInsightsDismissed = "helpIslandFeatureInsightsDismissed",
  ImportBannerDismissed = "importBannerDismissed",
  InitiativesBannerDismissed = "initiativesBannerDismissed",
  InsightsHelpDismissed = "insightsHelpDismissed",
  InsightsWelcomeDismissed = "insightsWelcomeDismissed",
  IssueLabelSuggestionUsed = "issueLabelSuggestionUsed",
  IssueMovePromptCompleted = "issueMovePromptCompleted",
  JoinTeamIntroductionDismissed = "joinTeamIntroductionDismissed",
  ListSelectionTip = "listSelectionTip",
  MigrateThemePreference = "migrateThemePreference",
  MilestoneOnboardingIsSeenAndDismissed = "milestoneOnboardingIsSeenAndDismissed",
  ProjectBacklogWelcomeDismissed = "projectBacklogWelcomeDismissed",
  ProjectBoardOnboardingIsSeenAndDismissed = "projectBoardOnboardingIsSeenAndDismissed",
  ProjectUpdatesWelcomeDismissed = "projectUpdatesWelcomeDismissed",
  ProjectWelcomeDismissed = "projectWelcomeDismissed",
  PulseWelcomeDismissed = "pulseWelcomeDismissed",
  RewindBannerDismissed = "rewindBannerDismissed",
  SlackCommentReactionTipShown = "slackCommentReactionTipShown",
  TeamsPageIntroductionDismissed = "teamsPageIntroductionDismissed",
  ThreadedCommentsNudgeIsSeen = "threadedCommentsNudgeIsSeen",
  TriageWelcomeDismissed = "triageWelcomeDismissed",
  TryCyclesDismissed = "tryCyclesDismissed",
  TryGithubDismissed = "tryGithubDismissed",
  TryInvitePeopleDismissed = "tryInvitePeopleDismissed",
  TryRoadmapsDismissed = "tryRoadmapsDismissed",
  TryTriageDismissed = "tryTriageDismissed",
  UpdatedSlackThreadSyncIntegration = "updatedSlackThreadSyncIntegration",
}

/** Operations that can be applied to UserFlagType. */
export enum UserFlagUpdateOperation {
  Clear = "clear",
  Decr = "decr",
  Incr = "incr",
  Lock = "lock",
}

/** User name sorting options. */
export type UserNameSort = {
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

/** A user notification subscription. */
export type UserNotificationSubscription = Entity &
  Node &
  NotificationSubscription & {
    __typename?: "UserNotificationSubscription";
    /** Whether the subscription is active or not. */
    active: Scalars["Boolean"];
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: Maybe<Scalars["DateTime"]>;
    /** The type of view to which the notification subscription context is associated with. */
    contextViewType?: Maybe<ContextViewType>;
    /** The time at which the entity was created. */
    createdAt: Scalars["DateTime"];
    /** The contextual custom view associated with the notification subscription. */
    customView?: Maybe<CustomView>;
    /** The customer associated with the notification subscription. */
    customer?: Maybe<Customer>;
    /** The contextual cycle view associated with the notification subscription. */
    cycle?: Maybe<Cycle>;
    /** The unique identifier of the entity. */
    id: Scalars["ID"];
    /** The contextual initiative view associated with the notification subscription. */
    initiative?: Maybe<Initiative>;
    /** The contextual label view associated with the notification subscription. */
    label?: Maybe<IssueLabel>;
    /** The type of subscription. */
    notificationSubscriptionTypes: Array<Scalars["String"]>;
    /** The contextual project view associated with the notification subscription. */
    project?: Maybe<Project>;
    /** The user that subscribed to receive notifications. */
    subscriber: User;
    /** The team associated with the notification subscription. */
    team?: Maybe<Team>;
    /**
     * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars["DateTime"];
    /** The user subscribed to. */
    user: User;
    /** The type of user view to which the notification subscription context is associated with. */
    userContextViewType?: Maybe<UserContextViewType>;
  };

export type UserPayload = {
  __typename?: "UserPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
  /** The user that was created or updated. */
  user?: Maybe<User>;
};

/** The different permission roles available to users on an organization. */
export enum UserRoleType {
  Admin = "admin",
  App = "app",
  Guest = "guest",
  User = "user",
}

/** The settings of a user as a JSON object. */
export type UserSettings = Node & {
  __typename?: "UserSettings";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** Whether to auto-assign newly created issues to the current user by default. */
  autoAssignToSelf: Scalars["Boolean"];
  /** Hash for the user to be used in calendar URLs. */
  calendarHash?: Maybe<Scalars["String"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The user's notification category preferences. */
  notificationCategoryPreferences: NotificationCategoryPreferences;
  /** The user's notification channel preferences. */
  notificationChannelPreferences: NotificationChannelPreferences;
  /** The notification delivery preferences for the user. Note: notificationDisabled field is deprecated in favor of notificationChannelPreferences. */
  notificationDeliveryPreferences: NotificationDeliveryPreferences;
  /** Whether to show full user names instead of display names. */
  showFullUserNames: Scalars["Boolean"];
  /** Whether this user is subscribed to changelog email or not. */
  subscribedToChangelog: Scalars["Boolean"];
  /** Whether this user is subscribed to DPA emails or not. */
  subscribedToDPA: Scalars["Boolean"];
  /** Whether this user is subscribed to invite accepted emails or not. */
  subscribedToInviteAccepted: Scalars["Boolean"];
  /** Whether this user is subscribed to privacy and legal update emails or not. */
  subscribedToPrivacyLegalUpdates: Scalars["Boolean"];
  /**
   * The email types the user has unsubscribed from.
   * @deprecated Use individual subscription fields instead. This field's value is now outdated.
   */
  unsubscribedFrom: Array<Scalars["String"]>;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** The user associated with these settings. */
  user: User;
};

export type UserSettingsFlagPayload = {
  __typename?: "UserSettingsFlagPayload";
  /** The flag key which was updated. */
  flag?: Maybe<Scalars["String"]>;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
  /** The flag value after update. */
  value?: Maybe<Scalars["Int"]>;
};

export type UserSettingsFlagsResetPayload = {
  __typename?: "UserSettingsFlagsResetPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type UserSettingsPayload = {
  __typename?: "UserSettingsPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
  /** The user's settings. */
  userSettings: UserSettings;
};

export type UserSettingsUpdateInput = {
  /** [Internal] How often to generate a feed summary. */
  feedSummarySchedule?: Maybe<FeedSummarySchedule>;
  /** The user's notification category preferences. */
  notificationCategoryPreferences?: Maybe<NotificationCategoryPreferencesInput>;
  /** The user's notification channel preferences. */
  notificationChannelPreferences?: Maybe<PartialNotificationChannelPreferencesInput>;
  /** The user's notification delivery preferences. */
  notificationDeliveryPreferences?: Maybe<NotificationDeliveryPreferencesInput>;
  /** The user's settings. */
  settings?: Maybe<Scalars["JSONObject"]>;
  /** Whether this user is subscribed to changelog email or not. */
  subscribedToChangelog?: Maybe<Scalars["Boolean"]>;
  /** Whether this user is subscribed to DPA emails or not. */
  subscribedToDPA?: Maybe<Scalars["Boolean"]>;
  /** Whether this user is subscribed to general marketing communications or not. */
  subscribedToGeneralMarketingCommunications?: Maybe<Scalars["Boolean"]>;
  /** Whether this user is subscribed to invite accepted emails or not. */
  subscribedToInviteAccepted?: Maybe<Scalars["Boolean"]>;
  /** Whether this user is subscribed to privacy and legal update emails or not. */
  subscribedToPrivacyLegalUpdates?: Maybe<Scalars["Boolean"]>;
  /** [Internal] The user's usage warning history. */
  usageWarningHistory?: Maybe<Scalars["JSONObject"]>;
};

/** User sorting options. */
export type UserSortInput = {
  /** Sort by user display name */
  displayName?: Maybe<UserDisplayNameSort>;
  /** Sort by user name */
  name?: Maybe<UserNameSort>;
};

export type UserUpdateInput = {
  /** The avatar image URL of the user. */
  avatarUrl?: Maybe<Scalars["String"]>;
  /** The user description or a short bio. */
  description?: Maybe<Scalars["String"]>;
  /** The display name of the user. */
  displayName?: Maybe<Scalars["String"]>;
  /** The name of the user. */
  name?: Maybe<Scalars["String"]>;
  /** The emoji part of the user status. */
  statusEmoji?: Maybe<Scalars["String"]>;
  /** The label part of the user status. */
  statusLabel?: Maybe<Scalars["String"]>;
  /** When the user status should be cleared. */
  statusUntilAt?: Maybe<Scalars["DateTime"]>;
  /** The local timezone of the user. */
  timezone?: Maybe<Scalars["String"]>;
};

/** Payload for a user webhook. */
export type UserWebhookPayload = {
  __typename?: "UserWebhookPayload";
  /** Whether the user is active. */
  active: Scalars["Boolean"];
  /** Whether the user is an admin. */
  admin: Scalars["Boolean"];
  /** Whether the user is an app. */
  app: Scalars["Boolean"];
  /** The time at which the entity was archived. */
  archivedAt?: Maybe<Scalars["String"]>;
  /** The avatar URL of the user. */
  avatarUrl?: Maybe<Scalars["String"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["String"];
  /** The description of the user. */
  description?: Maybe<Scalars["String"]>;
  /** The reason the user is disabled. */
  disableReason?: Maybe<Scalars["String"]>;
  /** The display name of the user. */
  displayName: Scalars["String"];
  /** The email of the user. */
  email: Scalars["String"];
  /** Whether the user is a guest. */
  guest: Scalars["Boolean"];
  /** The ID of the entity. */
  id: Scalars["String"];
  /** The name of the user. */
  name: Scalars["String"];
  /** The local timezone of the user. */
  timezone?: Maybe<Scalars["String"]>;
  /** The time at which the entity was updated. */
  updatedAt: Scalars["String"];
  /** The URL of the user. */
  url: Scalars["String"];
};

/** View preferences. */
export type ViewPreferences = Node & {
  __typename?: "ViewPreferences";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The view preferences */
  preferences: ViewPreferencesValues;
  /** The view preference type. */
  type: Scalars["String"];
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** The view type. */
  viewType: Scalars["String"];
};

export type ViewPreferencesCreateInput = {
  /** The custom view these view preferences are associated with. */
  customViewId?: Maybe<Scalars["String"]>;
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** [Internal] The initiative these view preferences are associated with. */
  initiativeId?: Maybe<Scalars["String"]>;
  /** The default parameters for the insight on that view. */
  insights?: Maybe<Scalars["JSONObject"]>;
  /** The label these view preferences are associated with. */
  labelId?: Maybe<Scalars["String"]>;
  /** View preferences object. */
  preferences: Scalars["JSONObject"];
  /** The project these view preferences are associated with. */
  projectId?: Maybe<Scalars["String"]>;
  /** The project label these view preferences are associated with. */
  projectLabelId?: Maybe<Scalars["String"]>;
  /** The team these view preferences are associated with. */
  teamId?: Maybe<Scalars["String"]>;
  /** The type of view preferences (either user or organization level preferences). */
  type: ViewPreferencesType;
  /** The user profile these view preferences are associated with. */
  userId?: Maybe<Scalars["String"]>;
  /** The view type of the view preferences are associated with. */
  viewType: ViewType;
};

export type ViewPreferencesPayload = {
  __typename?: "ViewPreferencesPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
  /** The view preferences entity being mutated. */
  viewPreferences: ViewPreferences;
};

/** The type of view preferences (either user or organization level preferences). */
export enum ViewPreferencesType {
  Organization = "organization",
  User = "user",
}

export type ViewPreferencesUpdateInput = {
  /** The default parameters for the insight on that view. */
  insights?: Maybe<Scalars["JSONObject"]>;
  /** View preferences. */
  preferences?: Maybe<Scalars["JSONObject"]>;
};

export type ViewPreferencesValues = {
  __typename?: "ViewPreferencesValues";
  /** The issue grouping. */
  issueGrouping?: Maybe<Scalars["String"]>;
  /** Whether to show completed issues. */
  showCompletedIssues?: Maybe<Scalars["String"]>;
  /** The issue ordering. */
  viewOrdering?: Maybe<Scalars["String"]>;
};

/** The client view this custom view is targeting. */
export enum ViewType {
  ActiveIssues = "activeIssues",
  AllIssues = "allIssues",
  Archive = "archive",
  Backlog = "backlog",
  Board = "board",
  CompletedCycle = "completedCycle",
  CustomView = "customView",
  CustomViews = "customViews",
  Customer = "customer",
  Customers = "customers",
  Cycle = "cycle",
  Dashboards = "dashboards",
  EmbeddedCustomerNeeds = "embeddedCustomerNeeds",
  FeedAll = "feedAll",
  FeedCreated = "feedCreated",
  FeedFollowing = "feedFollowing",
  FeedPopular = "feedPopular",
  Inbox = "inbox",
  Initiative = "initiative",
  InitiativeOverview = "initiativeOverview",
  InitiativeOverviewSubInitiatives = "initiativeOverviewSubInitiatives",
  Initiatives = "initiatives",
  InitiativesCompleted = "initiativesCompleted",
  InitiativesPlanned = "initiativesPlanned",
  IssueIdentifiers = "issueIdentifiers",
  Label = "label",
  MyIssues = "myIssues",
  MyIssuesActivity = "myIssuesActivity",
  MyIssuesCreatedByMe = "myIssuesCreatedByMe",
  MyIssuesSubscribedTo = "myIssuesSubscribedTo",
  MyReviews = "myReviews",
  Project = "project",
  ProjectCustomerNeeds = "projectCustomerNeeds",
  ProjectDocuments = "projectDocuments",
  ProjectLabel = "projectLabel",
  Projects = "projects",
  ProjectsAll = "projectsAll",
  ProjectsBacklog = "projectsBacklog",
  ProjectsClosed = "projectsClosed",
  QuickView = "quickView",
  Reviews = "reviews",
  Roadmap = "roadmap",
  RoadmapAll = "roadmapAll",
  RoadmapBacklog = "roadmapBacklog",
  RoadmapClosed = "roadmapClosed",
  Roadmaps = "roadmaps",
  Search = "search",
  SplitSearch = "splitSearch",
  SubIssues = "subIssues",
  Teams = "teams",
  Triage = "triage",
  UserProfile = "userProfile",
  UserProfileCreatedByUser = "userProfileCreatedByUser",
  WorkspaceMembers = "workspaceMembers",
}

/** A webhook used to send HTTP notifications over data updates. */
export type Webhook = Node & {
  __typename?: "Webhook";
  /** Whether the Webhook is enabled for all public teams, including teams created after the webhook was created. */
  allPublicTeams: Scalars["Boolean"];
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The user who created the webhook. */
  creator?: Maybe<User>;
  /** Whether the Webhook is enabled. */
  enabled: Scalars["Boolean"];
  /** [INTERNAL] Webhook failure events associated with the webhook (last 50). */
  failures: Array<WebhookFailureEvent>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** Webhook label. */
  label?: Maybe<Scalars["String"]>;
  /** The resource types this webhook is subscribed to. */
  resourceTypes: Array<Scalars["String"]>;
  /** Secret token for verifying the origin on the recipient side. */
  secret?: Maybe<Scalars["String"]>;
  /** The team that the webhook is associated with. If null, the webhook is associated with all public teams of the organization or multiple teams. */
  team?: Maybe<Team>;
  /** [INTERNAL] The teams that the webhook is associated with. Used to represent a webhook that targets multiple teams, potentially in addition to all public teams of the organization. */
  teamIds?: Maybe<Array<Scalars["String"]>>;
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** Webhook URL. */
  url?: Maybe<Scalars["String"]>;
};

export type WebhookConnection = {
  __typename?: "WebhookConnection";
  edges: Array<WebhookEdge>;
  nodes: Array<Webhook>;
  pageInfo: PageInfo;
};

export type WebhookCreateInput = {
  /** Whether this webhook is enabled for all public teams. */
  allPublicTeams?: Maybe<Scalars["Boolean"]>;
  /** Whether this webhook is enabled. */
  enabled?: Maybe<Scalars["Boolean"]>;
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** Label for the webhook. */
  label?: Maybe<Scalars["String"]>;
  /** List of resources the webhook should subscribe to. */
  resourceTypes: Array<Scalars["String"]>;
  /** A secret token used to sign the webhook payload. */
  secret?: Maybe<Scalars["String"]>;
  /** The identifier or key of the team associated with the Webhook. */
  teamId?: Maybe<Scalars["String"]>;
  /** The URL that will be called on data changes. */
  url: Scalars["String"];
};

export type WebhookEdge = {
  __typename?: "WebhookEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: Webhook;
};

/** Entity representing a webhook execution failure. */
export type WebhookFailureEvent = {
  __typename?: "WebhookFailureEvent";
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The unique execution ID of the webhook push. This is retained between retries of the same push. */
  executionId: Scalars["String"];
  /** The HTTP status code returned by the recipient. */
  httpStatus?: Maybe<Scalars["Float"]>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The HTTP response body returned by the recipient or error occured. */
  responseOrError?: Maybe<Scalars["String"]>;
  /** The URL that the webhook was trying to push to. */
  url: Scalars["String"];
  /** The webhook that this failure event is associated with. */
  webhook: Webhook;
};

export type WebhookPayload = {
  __typename?: "WebhookPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
  /** The webhook entity being mutated. */
  webhook: Webhook;
};

export type WebhookUpdateInput = {
  /** Whether this webhook is enabled. */
  enabled?: Maybe<Scalars["Boolean"]>;
  /** Label for the webhook. */
  label?: Maybe<Scalars["String"]>;
  /** List of resources the webhook should subscribe to. */
  resourceTypes?: Maybe<Array<Scalars["String"]>>;
  /** A secret token used to sign the webhook payload. */
  secret?: Maybe<Scalars["String"]>;
  /** The URL that will be called on data changes. */
  url?: Maybe<Scalars["String"]>;
};

/** A state in a team workflow. */
export type WorkflowState = Node & {
  __typename?: "WorkflowState";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The state's UI color as a HEX string. */
  color: Scalars["String"];
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** Description of the state. */
  description?: Maybe<Scalars["String"]>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The state inherited from */
  inheritedFrom?: Maybe<WorkflowState>;
  /** Issues belonging in this state. */
  issues: IssueConnection;
  /** The state's name. */
  name: Scalars["String"];
  /** The position of the state in the team flow. */
  position: Scalars["Float"];
  /** The team to which this state belongs to. */
  team: Team;
  /** The type of the state. One of "triage", "backlog", "unstarted", "started", "completed", "canceled". */
  type: Scalars["String"];
  /**
   * The last time at which the entity was meaningfully updated. This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

/** A state in a team workflow. */
export type WorkflowStateIssuesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** A generic payload return from entity archive mutations. */
export type WorkflowStateArchivePayload = ArchivePayload & {
  __typename?: "WorkflowStateArchivePayload";
  /** The archived/unarchived entity. Null if entity was deleted. */
  entity?: Maybe<WorkflowState>;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** Certain properties of a workflow state. */
export type WorkflowStateChildWebhookPayload = {
  __typename?: "WorkflowStateChildWebhookPayload";
  /** The color of the workflow state. */
  color: Scalars["String"];
  /** The ID of the workflow state. */
  id: Scalars["String"];
  /** The name of the workflow state. */
  name: Scalars["String"];
  /** The type of the workflow state. */
  type: Scalars["String"];
};

export type WorkflowStateConnection = {
  __typename?: "WorkflowStateConnection";
  edges: Array<WorkflowStateEdge>;
  nodes: Array<WorkflowState>;
  pageInfo: PageInfo;
};

export type WorkflowStateCreateInput = {
  /** The color of the state. */
  color: Scalars["String"];
  /** The description of the state. */
  description?: Maybe<Scalars["String"]>;
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The name of the state. */
  name: Scalars["String"];
  /** The position of the state. */
  position?: Maybe<Scalars["Float"]>;
  /** The team associated with the state. */
  teamId: Scalars["String"];
  /** The workflow type. */
  type: Scalars["String"];
};

export type WorkflowStateEdge = {
  __typename?: "WorkflowStateEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: WorkflowState;
};

/** Workflow state filtering options. */
export type WorkflowStateFilter = {
  /** Compound filters, all of which need to be matched by the workflow state. */
  and?: Maybe<Array<WorkflowStateFilter>>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Comparator for the workflow state description. */
  description?: Maybe<StringComparator>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Filters that the workflow states issues must satisfy. */
  issues?: Maybe<IssueCollectionFilter>;
  /** Comparator for the workflow state name. */
  name?: Maybe<StringComparator>;
  /** Compound filters, one of which need to be matched by the workflow state. */
  or?: Maybe<Array<WorkflowStateFilter>>;
  /** Comparator for the workflow state position. */
  position?: Maybe<NumberComparator>;
  /** Filters that the workflow states team must satisfy. */
  team?: Maybe<TeamFilter>;
  /** Comparator for the workflow state type. */
  type?: Maybe<StringComparator>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

export type WorkflowStatePayload = {
  __typename?: "WorkflowStatePayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
  /** The state that was created or updated. */
  workflowState: WorkflowState;
};

/** Issue workflow state sorting options. */
export type WorkflowStateSort = {
  /** Whether to sort closed issues by recency */
  closedIssuesOrderedByRecency?: Maybe<Scalars["Boolean"]>;
  /** Whether nulls should be sorted first or last */
  nulls?: Maybe<PaginationNulls>;
  /** The order for the individual sort */
  order?: Maybe<PaginationSortOrder>;
};

export type WorkflowStateUpdateInput = {
  /** The color of the state. */
  color?: Maybe<Scalars["String"]>;
  /** The description of the state. */
  description?: Maybe<Scalars["String"]>;
  /** The name of the state. */
  name?: Maybe<Scalars["String"]>;
  /** The position of the state. */
  position?: Maybe<Scalars["Float"]>;
};

/** [INTERNAL] Public information of the OAuth application, plus the userIds and scopes for those users. */
export type WorkspaceAuthorizedApplication = {
  __typename?: "WorkspaceAuthorizedApplication";
  /** OAuth application's ID. */
  appId: Scalars["String"];
  /** OAuth application's client ID. */
  clientId: Scalars["String"];
  /** Description of the application. */
  description?: Maybe<Scalars["String"]>;
  /** Developer of the application. */
  developer?: Maybe<Scalars["String"]>;
  /** Developer URL of the application. */
  developerUrl?: Maybe<Scalars["String"]>;
  /** Image of the application. */
  imageUrl?: Maybe<Scalars["String"]>;
  /** UserIds and membership dates of everyone who has authorized the application with the set of scopes. */
  memberships: Array<AuthMembership>;
  /** Application name. */
  name: Scalars["String"];
  /** Scopes that are authorized for this application for a given user. */
  scope: Array<Scalars["String"]>;
  /** Total number of members that authorized the application. */
  totalMembers: Scalars["Float"];
  /** Whether or not webhooks are enabled for the application. */
  webhooksEnabled: Scalars["Boolean"];
};

/** [INTERNAL] Public information of the OAuth application, plus the app user and aggregate membership count. */
export type WorkspaceAuthorizedApplicationWithAppUser = {
  __typename?: "WorkspaceAuthorizedApplicationWithAppUser";
  /** OAuth application's ID. */
  appId: Scalars["String"];
  /** The app user associated with this client, if one exists. */
  appUser?: Maybe<AuthMembership>;
  /** OAuth application's client ID. */
  clientId: Scalars["String"];
  /** Description of the application. */
  description?: Maybe<Scalars["String"]>;
  /** Developer of the application. */
  developer?: Maybe<Scalars["String"]>;
  /** Developer URL of the application. */
  developerUrl?: Maybe<Scalars["String"]>;
  /** Image of the application. */
  imageUrl?: Maybe<Scalars["String"]>;
  /** Application name. */
  name: Scalars["String"];
  /** Scopes that are authorized for this application for a given user. */
  scope: Array<Scalars["String"]>;
  /** Total number of members (including the app user, if it exists) that authorized the application. */
  totalMembers: Scalars["Float"];
  /** Whether or not webhooks are enabled for the application. */
  webhooksEnabled: Scalars["Boolean"];
};

/** [INTERNAL] Public information of the OAuth application with its memberships */
export type WorkspaceAuthorizedApplicationWithMemberships = {
  __typename?: "WorkspaceAuthorizedApplicationWithMemberships";
  /** Details of the OAuth application */
  client: AuthorizedApplication;
  /** UserIds and membership dates of everyone who has authorized the application */
  memberships: Array<AuthMembership>;
  /** Total number of members that authorized the application. */
  totalMembers: Scalars["Float"];
};

export type ZendeskSettingsInput = {
  /** Whether a ticket should be automatically reopened when its linked Linear issue is cancelled. */
  automateTicketReopeningOnCancellation?: Maybe<Scalars["Boolean"]>;
  /** Whether a ticket should be automatically reopened when a comment is posted on its linked Linear issue */
  automateTicketReopeningOnComment?: Maybe<Scalars["Boolean"]>;
  /** Whether a ticket should be automatically reopened when its linked Linear issue is completed. */
  automateTicketReopeningOnCompletion?: Maybe<Scalars["Boolean"]>;
  /** Whether a ticket should be automatically reopened when its linked Linear project is cancelled. */
  automateTicketReopeningOnProjectCancellation?: Maybe<Scalars["Boolean"]>;
  /** Whether a ticket should be automatically reopened when its linked Linear project is completed. */
  automateTicketReopeningOnProjectCompletion?: Maybe<Scalars["Boolean"]>;
  /** The ID of the Linear bot user. */
  botUserId?: Maybe<Scalars["String"]>;
  /** [INTERNAL] Temporary flag indicating if the integration has the necessary scopes for Customers */
  canReadCustomers?: Maybe<Scalars["Boolean"]>;
  /** [ALPHA] Whether customer and customer requests should not be automatically created when conversations are linked to a Linear issue. */
  disableCustomerRequestsAutoCreation?: Maybe<Scalars["Boolean"]>;
  /** Whether an internal message should be added when someone comments on an issue. */
  sendNoteOnComment?: Maybe<Scalars["Boolean"]>;
  /** Whether an internal message should be added when a Linear issue changes status (for status types except completed or canceled). */
  sendNoteOnStatusChange?: Maybe<Scalars["Boolean"]>;
  /** The subdomain of the Zendesk organization being connected. */
  subdomain: Scalars["String"];
  /** [INTERNAL] Flag indicating if the integration supports OAuth refresh tokens */
  supportsOAuthRefresh?: Maybe<Scalars["Boolean"]>;
  /** The URL of the connected Zendesk organization. */
  url: Scalars["String"];
};

export type SesDomainIdentityDnsRecordFragment = { __typename: "SesDomainIdentityDnsRecord" } & Pick<
  SesDomainIdentityDnsRecord,
  "content" | "name" | "type" | "isVerified"
>;

export type GitAutomationTargetBranchFragment = { __typename: "GitAutomationTargetBranch" } & Pick<
  GitAutomationTargetBranch,
  "updatedAt" | "branchPattern" | "archivedAt" | "createdAt" | "id" | "isRegex"
> & { team: { __typename?: "Team" } & Pick<Team, "id"> };

type Entity_CustomViewNotificationSubscription_Fragment = { __typename: "CustomViewNotificationSubscription" } & Pick<
  CustomViewNotificationSubscription,
  "updatedAt" | "archivedAt" | "createdAt" | "id"
>;

type Entity_CustomerNeedNotification_Fragment = { __typename: "CustomerNeedNotification" } & Pick<
  CustomerNeedNotification,
  "updatedAt" | "archivedAt" | "createdAt" | "id"
>;

type Entity_CustomerNotification_Fragment = { __typename: "CustomerNotification" } & Pick<
  CustomerNotification,
  "updatedAt" | "archivedAt" | "createdAt" | "id"
>;

type Entity_CustomerNotificationSubscription_Fragment = { __typename: "CustomerNotificationSubscription" } & Pick<
  CustomerNotificationSubscription,
  "updatedAt" | "archivedAt" | "createdAt" | "id"
>;

type Entity_CycleNotificationSubscription_Fragment = { __typename: "CycleNotificationSubscription" } & Pick<
  CycleNotificationSubscription,
  "updatedAt" | "archivedAt" | "createdAt" | "id"
>;

type Entity_DocumentNotification_Fragment = { __typename: "DocumentNotification" } & Pick<
  DocumentNotification,
  "updatedAt" | "archivedAt" | "createdAt" | "id"
>;

type Entity_InitiativeNotification_Fragment = { __typename: "InitiativeNotification" } & Pick<
  InitiativeNotification,
  "updatedAt" | "archivedAt" | "createdAt" | "id"
>;

type Entity_InitiativeNotificationSubscription_Fragment = { __typename: "InitiativeNotificationSubscription" } & Pick<
  InitiativeNotificationSubscription,
  "updatedAt" | "archivedAt" | "createdAt" | "id"
>;

type Entity_IssueNotification_Fragment = { __typename: "IssueNotification" } & Pick<
  IssueNotification,
  "updatedAt" | "archivedAt" | "createdAt" | "id"
>;

type Entity_LabelNotificationSubscription_Fragment = { __typename: "LabelNotificationSubscription" } & Pick<
  LabelNotificationSubscription,
  "updatedAt" | "archivedAt" | "createdAt" | "id"
>;

type Entity_OauthClientApprovalNotification_Fragment = { __typename: "OauthClientApprovalNotification" } & Pick<
  OauthClientApprovalNotification,
  "updatedAt" | "archivedAt" | "createdAt" | "id"
>;

type Entity_PostNotification_Fragment = { __typename: "PostNotification" } & Pick<
  PostNotification,
  "updatedAt" | "archivedAt" | "createdAt" | "id"
>;

type Entity_ProjectNotification_Fragment = { __typename: "ProjectNotification" } & Pick<
  ProjectNotification,
  "updatedAt" | "archivedAt" | "createdAt" | "id"
>;

type Entity_ProjectNotificationSubscription_Fragment = { __typename: "ProjectNotificationSubscription" } & Pick<
  ProjectNotificationSubscription,
  "updatedAt" | "archivedAt" | "createdAt" | "id"
>;

type Entity_PullRequestNotification_Fragment = { __typename: "PullRequestNotification" } & Pick<
  PullRequestNotification,
  "updatedAt" | "archivedAt" | "createdAt" | "id"
>;

type Entity_TeamNotificationSubscription_Fragment = { __typename: "TeamNotificationSubscription" } & Pick<
  TeamNotificationSubscription,
  "updatedAt" | "archivedAt" | "createdAt" | "id"
>;

type Entity_UserNotificationSubscription_Fragment = { __typename: "UserNotificationSubscription" } & Pick<
  UserNotificationSubscription,
  "updatedAt" | "archivedAt" | "createdAt" | "id"
>;

export type EntityFragment =
  | Entity_CustomViewNotificationSubscription_Fragment
  | Entity_CustomerNeedNotification_Fragment
  | Entity_CustomerNotification_Fragment
  | Entity_CustomerNotificationSubscription_Fragment
  | Entity_CycleNotificationSubscription_Fragment
  | Entity_DocumentNotification_Fragment
  | Entity_InitiativeNotification_Fragment
  | Entity_InitiativeNotificationSubscription_Fragment
  | Entity_IssueNotification_Fragment
  | Entity_LabelNotificationSubscription_Fragment
  | Entity_OauthClientApprovalNotification_Fragment
  | Entity_PostNotification_Fragment
  | Entity_ProjectNotification_Fragment
  | Entity_ProjectNotificationSubscription_Fragment
  | Entity_PullRequestNotification_Fragment
  | Entity_TeamNotificationSubscription_Fragment
  | Entity_UserNotificationSubscription_Fragment;

export type ActorBotFragment = { __typename: "ActorBot" } & Pick<
  ActorBot,
  "avatarUrl" | "name" | "userDisplayName" | "subType" | "type" | "id"
>;

export type CommentFragment = { __typename: "Comment" } & Pick<
  Comment,
  | "url"
  | "reactionData"
  | "body"
  | "updatedAt"
  | "quotedText"
  | "archivedAt"
  | "createdAt"
  | "resolvedAt"
  | "editedAt"
  | "id"
> & {
    reactions: Array<{ __typename?: "Reaction" } & ReactionFragment>;
    botActor?: Maybe<{ __typename?: "ActorBot" } & ActorBotFragment>;
    resolvingComment?: Maybe<{ __typename?: "Comment" } & Pick<Comment, "id">>;
    documentContent?: Maybe<{ __typename?: "DocumentContent" } & DocumentContentFragment>;
    syncedWith?: Maybe<Array<{ __typename?: "ExternalEntityInfo" } & ExternalEntityInfoFragment>>;
    externalThread?: Maybe<{ __typename?: "SyncedExternalThread" } & SyncedExternalThreadFragment>;
    externalUser?: Maybe<{ __typename?: "ExternalUser" } & Pick<ExternalUser, "id">>;
    initiativeUpdate?: Maybe<{ __typename?: "InitiativeUpdate" } & Pick<InitiativeUpdate, "id">>;
    issue?: Maybe<{ __typename?: "Issue" } & Pick<Issue, "id">>;
    parent?: Maybe<{ __typename?: "Comment" } & Pick<Comment, "id">>;
    projectUpdate?: Maybe<{ __typename?: "ProjectUpdate" } & Pick<ProjectUpdate, "id">>;
    resolvingUser?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    user?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
  };

export type SyncedExternalThreadFragment = { __typename: "SyncedExternalThread" } & Pick<
  SyncedExternalThread,
  | "name"
  | "displayName"
  | "url"
  | "subType"
  | "type"
  | "isPersonalIntegrationRequired"
  | "isPersonalIntegrationConnected"
  | "isConnected"
  | "id"
>;

export type EmojiFragment = { __typename: "Emoji" } & Pick<
  Emoji,
  "url" | "name" | "updatedAt" | "source" | "archivedAt" | "createdAt" | "id"
> & { creator?: Maybe<{ __typename?: "User" } & Pick<User, "id">> };

export type CustomViewNotificationSubscriptionFragment = { __typename: "CustomViewNotificationSubscription" } & Pick<
  CustomViewNotificationSubscription,
  | "updatedAt"
  | "archivedAt"
  | "createdAt"
  | "notificationSubscriptionTypes"
  | "userContextViewType"
  | "contextViewType"
  | "id"
  | "active"
> & {
    cycle?: Maybe<{ __typename?: "Cycle" } & Pick<Cycle, "id">>;
    initiative?: Maybe<{ __typename?: "Initiative" } & Pick<Initiative, "id">>;
    label?: Maybe<{ __typename?: "IssueLabel" } & Pick<IssueLabel, "id">>;
    project?: Maybe<{ __typename?: "Project" } & Pick<Project, "id">>;
    customView: { __typename?: "CustomView" } & Pick<CustomView, "id">;
    customer?: Maybe<{ __typename?: "Customer" } & Pick<Customer, "id">>;
    team?: Maybe<{ __typename?: "Team" } & Pick<Team, "id">>;
    subscriber: { __typename?: "User" } & Pick<User, "id">;
    user?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
  };

export type CustomViewFragment = { __typename: "CustomView" } & Pick<
  CustomView,
  | "color"
  | "slugId"
  | "description"
  | "feedItemFilterData"
  | "initiativeFilterData"
  | "filterData"
  | "projectFilterData"
  | "filters"
  | "icon"
  | "updatedAt"
  | "modelName"
  | "name"
  | "archivedAt"
  | "createdAt"
  | "id"
  | "shared"
> & {
    viewPreferencesValues?: Maybe<{ __typename?: "ViewPreferencesValues" } & ViewPreferencesValuesFragment>;
    userViewPreferences?: Maybe<{ __typename?: "ViewPreferences" } & ViewPreferencesFragment>;
    organizationViewPreferences?: Maybe<{ __typename?: "ViewPreferences" } & ViewPreferencesFragment>;
    team?: Maybe<{ __typename?: "Team" } & Pick<Team, "id">>;
    creator: { __typename?: "User" } & Pick<User, "id">;
    updatedBy?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    owner: { __typename?: "User" } & Pick<User, "id">;
  };

export type CustomerNeedNotificationFragment = { __typename: "CustomerNeedNotification" } & Pick<
  CustomerNeedNotification,
  | "type"
  | "customerNeedId"
  | "category"
  | "updatedAt"
  | "emailedAt"
  | "readAt"
  | "unsnoozedAt"
  | "archivedAt"
  | "createdAt"
  | "snoozedUntilAt"
  | "id"
> & {
    botActor?: Maybe<{ __typename?: "ActorBot" } & ActorBotFragment>;
    customerNeed: { __typename?: "CustomerNeed" } & Pick<CustomerNeed, "id">;
    externalUserActor?: Maybe<{ __typename?: "ExternalUser" } & Pick<ExternalUser, "id">>;
    relatedIssue?: Maybe<{ __typename?: "Issue" } & Pick<Issue, "id">>;
    relatedProject?: Maybe<{ __typename?: "Project" } & Pick<Project, "id">>;
    actor?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    user: { __typename?: "User" } & Pick<User, "id">;
  };

export type CustomerNeedFragment = { __typename: "CustomerNeed" } & Pick<
  CustomerNeed,
  "url" | "updatedAt" | "body" | "archivedAt" | "createdAt" | "id" | "priority"
> & {
    attachment?: Maybe<{ __typename?: "Attachment" } & Pick<Attachment, "id">>;
    comment?: Maybe<{ __typename?: "Comment" } & Pick<Comment, "id">>;
    creator?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    customer?: Maybe<{ __typename?: "Customer" } & Pick<Customer, "id">>;
    originalIssue?: Maybe<{ __typename?: "Issue" } & Pick<Issue, "id">>;
    issue?: Maybe<{ __typename?: "Issue" } & Pick<Issue, "id">>;
    projectAttachment?: Maybe<{ __typename?: "ProjectAttachment" } & ProjectAttachmentFragment>;
    project?: Maybe<{ __typename?: "Project" } & Pick<Project, "id">>;
  };

export type CustomerNotificationSubscriptionFragment = { __typename: "CustomerNotificationSubscription" } & Pick<
  CustomerNotificationSubscription,
  | "updatedAt"
  | "archivedAt"
  | "createdAt"
  | "notificationSubscriptionTypes"
  | "userContextViewType"
  | "contextViewType"
  | "id"
  | "active"
> & {
    customView?: Maybe<{ __typename?: "CustomView" } & Pick<CustomView, "id">>;
    cycle?: Maybe<{ __typename?: "Cycle" } & Pick<Cycle, "id">>;
    initiative?: Maybe<{ __typename?: "Initiative" } & Pick<Initiative, "id">>;
    label?: Maybe<{ __typename?: "IssueLabel" } & Pick<IssueLabel, "id">>;
    project?: Maybe<{ __typename?: "Project" } & Pick<Project, "id">>;
    customer: { __typename?: "Customer" } & Pick<Customer, "id">;
    team?: Maybe<{ __typename?: "Team" } & Pick<Team, "id">>;
    subscriber: { __typename?: "User" } & Pick<User, "id">;
    user?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
  };

export type CustomerNotificationFragment = { __typename: "CustomerNotification" } & Pick<
  CustomerNotification,
  | "type"
  | "customerId"
  | "category"
  | "updatedAt"
  | "emailedAt"
  | "readAt"
  | "unsnoozedAt"
  | "archivedAt"
  | "createdAt"
  | "snoozedUntilAt"
  | "id"
> & {
    botActor?: Maybe<{ __typename?: "ActorBot" } & ActorBotFragment>;
    customer: { __typename?: "Customer" } & Pick<Customer, "id">;
    externalUserActor?: Maybe<{ __typename?: "ExternalUser" } & Pick<ExternalUser, "id">>;
    actor?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    user: { __typename?: "User" } & Pick<User, "id">;
  };

export type CustomerStatusFragment = { __typename: "CustomerStatus" } & Pick<
  CustomerStatus,
  | "description"
  | "color"
  | "displayName"
  | "updatedAt"
  | "name"
  | "position"
  | "archivedAt"
  | "createdAt"
  | "type"
  | "id"
>;

export type CustomerTierFragment = { __typename: "CustomerTier" } & Pick<
  CustomerTier,
  "description" | "color" | "displayName" | "updatedAt" | "name" | "position" | "archivedAt" | "createdAt" | "id"
>;

export type CustomerFragment = { __typename: "Customer" } & Pick<
  Customer,
  | "slackChannelId"
  | "mainSourceId"
  | "revenue"
  | "approximateNeedCount"
  | "logoUrl"
  | "name"
  | "slugId"
  | "domains"
  | "externalIds"
  | "updatedAt"
  | "size"
  | "archivedAt"
  | "createdAt"
  | "id"
> & {
    status: { __typename?: "CustomerStatus" } & Pick<CustomerStatus, "id">;
    integration?: Maybe<{ __typename?: "Integration" } & Pick<Integration, "id">>;
    tier?: Maybe<{ __typename?: "CustomerTier" } & Pick<CustomerTier, "id">>;
    owner?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
  };

export type CycleNotificationSubscriptionFragment = { __typename: "CycleNotificationSubscription" } & Pick<
  CycleNotificationSubscription,
  | "updatedAt"
  | "archivedAt"
  | "createdAt"
  | "notificationSubscriptionTypes"
  | "userContextViewType"
  | "contextViewType"
  | "id"
  | "active"
> & {
    customView?: Maybe<{ __typename?: "CustomView" } & Pick<CustomView, "id">>;
    initiative?: Maybe<{ __typename?: "Initiative" } & Pick<Initiative, "id">>;
    label?: Maybe<{ __typename?: "IssueLabel" } & Pick<IssueLabel, "id">>;
    project?: Maybe<{ __typename?: "Project" } & Pick<Project, "id">>;
    customer?: Maybe<{ __typename?: "Customer" } & Pick<Customer, "id">>;
    cycle: { __typename?: "Cycle" } & Pick<Cycle, "id">;
    team?: Maybe<{ __typename?: "Team" } & Pick<Team, "id">>;
    subscriber: { __typename?: "User" } & Pick<User, "id">;
    user?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
  };

export type DocumentContentFragment = { __typename: "DocumentContent" } & Pick<
  DocumentContent,
  "content" | "contentState" | "updatedAt" | "restoredAt" | "archivedAt" | "createdAt" | "id"
> & {
    document?: Maybe<{ __typename?: "Document" } & Pick<Document, "id">>;
    initiative?: Maybe<{ __typename?: "Initiative" } & Pick<Initiative, "id">>;
    issue?: Maybe<{ __typename?: "Issue" } & Pick<Issue, "id">>;
    projectMilestone?: Maybe<{ __typename?: "ProjectMilestone" } & Pick<ProjectMilestone, "id">>;
    project?: Maybe<{ __typename?: "Project" } & Pick<Project, "id">>;
  };

export type DocumentNotificationFragment = { __typename: "DocumentNotification" } & Pick<
  DocumentNotification,
  | "reactionEmoji"
  | "type"
  | "commentId"
  | "documentId"
  | "parentCommentId"
  | "category"
  | "updatedAt"
  | "emailedAt"
  | "readAt"
  | "unsnoozedAt"
  | "archivedAt"
  | "createdAt"
  | "snoozedUntilAt"
  | "id"
> & {
    botActor?: Maybe<{ __typename?: "ActorBot" } & ActorBotFragment>;
    externalUserActor?: Maybe<{ __typename?: "ExternalUser" } & Pick<ExternalUser, "id">>;
    actor?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    user: { __typename?: "User" } & Pick<User, "id">;
  };

export type DocumentFragment = { __typename: "Document" } & Pick<
  Document,
  | "trashed"
  | "documentContentId"
  | "url"
  | "color"
  | "title"
  | "slugId"
  | "content"
  | "icon"
  | "updatedAt"
  | "sortOrder"
  | "hiddenAt"
  | "archivedAt"
  | "createdAt"
  | "id"
> & {
    initiative?: Maybe<{ __typename?: "Initiative" } & Pick<Initiative, "id">>;
    lastAppliedTemplate?: Maybe<{ __typename?: "Template" } & Pick<Template, "id">>;
    project?: Maybe<{ __typename?: "Project" } & Pick<Project, "id">>;
    creator?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    updatedBy?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
  };

export type FacetFragment = { __typename: "Facet" } & Pick<
  Facet,
  "updatedAt" | "sourcePage" | "sortOrder" | "archivedAt" | "createdAt" | "id"
> & {
    sourceFeedUser?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    sourceInitiative?: Maybe<{ __typename?: "Initiative" } & Pick<Initiative, "id">>;
    sourceProject?: Maybe<{ __typename?: "Project" } & Pick<Project, "id">>;
    sourceTeam?: Maybe<{ __typename?: "Team" } & Pick<Team, "id">>;
    targetCustomView?: Maybe<{ __typename?: "CustomView" } & Pick<CustomView, "id">>;
  };

export type DraftFragment = { __typename: "Draft" } & Pick<
  Draft,
  "data" | "updatedAt" | "bodyData" | "archivedAt" | "createdAt" | "id" | "isAutogenerated"
> & {
    parentComment?: Maybe<{ __typename?: "Comment" } & Pick<Comment, "id">>;
    customerNeed?: Maybe<{ __typename?: "CustomerNeed" } & Pick<CustomerNeed, "id">>;
    initiative?: Maybe<{ __typename?: "Initiative" } & Pick<Initiative, "id">>;
    initiativeUpdate?: Maybe<{ __typename?: "InitiativeUpdate" } & Pick<InitiativeUpdate, "id">>;
    issue?: Maybe<{ __typename?: "Issue" } & Pick<Issue, "id">>;
    project?: Maybe<{ __typename?: "Project" } & Pick<Project, "id">>;
    projectUpdate?: Maybe<{ __typename?: "ProjectUpdate" } & Pick<ProjectUpdate, "id">>;
    team?: Maybe<{ __typename?: "Team" } & Pick<Team, "id">>;
    user: { __typename?: "User" } & Pick<User, "id">;
  };

export type CustomerNeedArchivePayloadFragment = { __typename: "CustomerNeedArchivePayload" } & Pick<
  CustomerNeedArchivePayload,
  "lastSyncId" | "success"
> & { entity?: Maybe<{ __typename?: "CustomerNeed" } & Pick<CustomerNeed, "id">> };

export type CycleArchivePayloadFragment = { __typename: "CycleArchivePayload" } & Pick<
  CycleArchivePayload,
  "lastSyncId" | "success"
> & { entity?: Maybe<{ __typename?: "Cycle" } & Pick<Cycle, "id">> };

export type DocumentArchivePayloadFragment = { __typename: "DocumentArchivePayload" } & Pick<
  DocumentArchivePayload,
  "lastSyncId" | "success"
> & { entity?: Maybe<{ __typename?: "Document" } & Pick<Document, "id">> };

export type InitiativeArchivePayloadFragment = { __typename: "InitiativeArchivePayload" } & Pick<
  InitiativeArchivePayload,
  "lastSyncId" | "success"
> & { entity?: Maybe<{ __typename?: "Initiative" } & Pick<Initiative, "id">> };

export type InitiativeUpdateArchivePayloadFragment = { __typename: "InitiativeUpdateArchivePayload" } & Pick<
  InitiativeUpdateArchivePayload,
  "lastSyncId" | "success"
> & { entity?: Maybe<{ __typename?: "InitiativeUpdate" } & Pick<InitiativeUpdate, "id">> };

export type IssueArchivePayloadFragment = { __typename: "IssueArchivePayload" } & Pick<
  IssueArchivePayload,
  "lastSyncId" | "success"
> & { entity?: Maybe<{ __typename?: "Issue" } & Pick<Issue, "id">> };

export type NotificationArchivePayloadFragment = { __typename: "NotificationArchivePayload" } & Pick<
  NotificationArchivePayload,
  "lastSyncId" | "success"
> & {
    entity?: Maybe<
      | ({ __typename?: "CustomerNeedNotification" } & Notification_CustomerNeedNotification_Fragment)
      | ({ __typename?: "CustomerNotification" } & Notification_CustomerNotification_Fragment)
      | ({ __typename?: "DocumentNotification" } & Notification_DocumentNotification_Fragment)
      | ({ __typename?: "InitiativeNotification" } & Notification_InitiativeNotification_Fragment)
      | ({ __typename?: "IssueNotification" } & Notification_IssueNotification_Fragment)
      | ({ __typename?: "OauthClientApprovalNotification" } & Notification_OauthClientApprovalNotification_Fragment)
      | ({ __typename?: "PostNotification" } & Notification_PostNotification_Fragment)
      | ({ __typename?: "ProjectNotification" } & Notification_ProjectNotification_Fragment)
      | ({ __typename?: "PullRequestNotification" } & Notification_PullRequestNotification_Fragment)
    >;
  };

export type ProjectArchivePayloadFragment = { __typename: "ProjectArchivePayload" } & Pick<
  ProjectArchivePayload,
  "lastSyncId" | "success"
> & { entity?: Maybe<{ __typename?: "Project" } & Pick<Project, "id">> };

export type ProjectStatusArchivePayloadFragment = { __typename: "ProjectStatusArchivePayload" } & Pick<
  ProjectStatusArchivePayload,
  "lastSyncId" | "success"
> & { entity?: Maybe<{ __typename?: "ProjectStatus" } & Pick<ProjectStatus, "id">> };

export type ProjectUpdateArchivePayloadFragment = { __typename: "ProjectUpdateArchivePayload" } & Pick<
  ProjectUpdateArchivePayload,
  "lastSyncId" | "success"
> & { entity?: Maybe<{ __typename?: "ProjectUpdate" } & Pick<ProjectUpdate, "id">> };

export type RoadmapArchivePayloadFragment = { __typename: "RoadmapArchivePayload" } & Pick<
  RoadmapArchivePayload,
  "lastSyncId" | "success"
> & { entity?: Maybe<{ __typename?: "Roadmap" } & Pick<Roadmap, "id">> };

export type TeamArchivePayloadFragment = { __typename: "TeamArchivePayload" } & Pick<
  TeamArchivePayload,
  "lastSyncId" | "success"
> & { entity?: Maybe<{ __typename?: "Team" } & Pick<Team, "id">> };

export type WorkflowStateArchivePayloadFragment = { __typename: "WorkflowStateArchivePayload" } & Pick<
  WorkflowStateArchivePayload,
  "lastSyncId" | "success"
> & { entity?: Maybe<{ __typename?: "WorkflowState" } & Pick<WorkflowState, "id">> };

type ArchivePayload_CustomerNeedArchivePayload_Fragment = { __typename: "CustomerNeedArchivePayload" } & Pick<
  CustomerNeedArchivePayload,
  "lastSyncId" | "success"
> &
  CustomerNeedArchivePayloadFragment;

type ArchivePayload_CycleArchivePayload_Fragment = { __typename: "CycleArchivePayload" } & Pick<
  CycleArchivePayload,
  "lastSyncId" | "success"
> &
  CycleArchivePayloadFragment;

type ArchivePayload_DeletePayload_Fragment = { __typename: "DeletePayload" } & Pick<
  DeletePayload,
  "lastSyncId" | "success"
> &
  DeletePayloadFragment;

type ArchivePayload_DocumentArchivePayload_Fragment = { __typename: "DocumentArchivePayload" } & Pick<
  DocumentArchivePayload,
  "lastSyncId" | "success"
> &
  DocumentArchivePayloadFragment;

type ArchivePayload_InitiativeArchivePayload_Fragment = { __typename: "InitiativeArchivePayload" } & Pick<
  InitiativeArchivePayload,
  "lastSyncId" | "success"
> &
  InitiativeArchivePayloadFragment;

type ArchivePayload_InitiativeUpdateArchivePayload_Fragment = { __typename: "InitiativeUpdateArchivePayload" } & Pick<
  InitiativeUpdateArchivePayload,
  "lastSyncId" | "success"
> &
  InitiativeUpdateArchivePayloadFragment;

type ArchivePayload_IssueArchivePayload_Fragment = { __typename: "IssueArchivePayload" } & Pick<
  IssueArchivePayload,
  "lastSyncId" | "success"
> &
  IssueArchivePayloadFragment;

type ArchivePayload_NotificationArchivePayload_Fragment = { __typename: "NotificationArchivePayload" } & Pick<
  NotificationArchivePayload,
  "lastSyncId" | "success"
> &
  NotificationArchivePayloadFragment;

type ArchivePayload_ProjectArchivePayload_Fragment = { __typename: "ProjectArchivePayload" } & Pick<
  ProjectArchivePayload,
  "lastSyncId" | "success"
> &
  ProjectArchivePayloadFragment;

type ArchivePayload_ProjectStatusArchivePayload_Fragment = { __typename: "ProjectStatusArchivePayload" } & Pick<
  ProjectStatusArchivePayload,
  "lastSyncId" | "success"
> &
  ProjectStatusArchivePayloadFragment;

type ArchivePayload_ProjectUpdateArchivePayload_Fragment = { __typename: "ProjectUpdateArchivePayload" } & Pick<
  ProjectUpdateArchivePayload,
  "lastSyncId" | "success"
> &
  ProjectUpdateArchivePayloadFragment;

type ArchivePayload_RoadmapArchivePayload_Fragment = { __typename: "RoadmapArchivePayload" } & Pick<
  RoadmapArchivePayload,
  "lastSyncId" | "success"
> &
  RoadmapArchivePayloadFragment;

type ArchivePayload_TeamArchivePayload_Fragment = { __typename: "TeamArchivePayload" } & Pick<
  TeamArchivePayload,
  "lastSyncId" | "success"
> &
  TeamArchivePayloadFragment;

type ArchivePayload_WorkflowStateArchivePayload_Fragment = { __typename: "WorkflowStateArchivePayload" } & Pick<
  WorkflowStateArchivePayload,
  "lastSyncId" | "success"
> &
  WorkflowStateArchivePayloadFragment;

export type ArchivePayloadFragment =
  | ArchivePayload_CustomerNeedArchivePayload_Fragment
  | ArchivePayload_CycleArchivePayload_Fragment
  | ArchivePayload_DeletePayload_Fragment
  | ArchivePayload_DocumentArchivePayload_Fragment
  | ArchivePayload_InitiativeArchivePayload_Fragment
  | ArchivePayload_InitiativeUpdateArchivePayload_Fragment
  | ArchivePayload_IssueArchivePayload_Fragment
  | ArchivePayload_NotificationArchivePayload_Fragment
  | ArchivePayload_ProjectArchivePayload_Fragment
  | ArchivePayload_ProjectStatusArchivePayload_Fragment
  | ArchivePayload_ProjectUpdateArchivePayload_Fragment
  | ArchivePayload_RoadmapArchivePayload_Fragment
  | ArchivePayload_TeamArchivePayload_Fragment
  | ArchivePayload_WorkflowStateArchivePayload_Fragment;

export type DeletePayloadFragment = { __typename: "DeletePayload" } & Pick<
  DeletePayload,
  "entityId" | "lastSyncId" | "success"
>;

export type InitiativeHistoryFragment = { __typename: "InitiativeHistory" } & Pick<
  InitiativeHistory,
  "entries" | "updatedAt" | "archivedAt" | "createdAt" | "id"
> & { initiative: { __typename?: "Initiative" } & Pick<Initiative, "id"> };

export type LabelNotificationSubscriptionFragment = { __typename: "LabelNotificationSubscription" } & Pick<
  LabelNotificationSubscription,
  | "updatedAt"
  | "archivedAt"
  | "createdAt"
  | "notificationSubscriptionTypes"
  | "userContextViewType"
  | "contextViewType"
  | "id"
  | "active"
> & {
    customView?: Maybe<{ __typename?: "CustomView" } & Pick<CustomView, "id">>;
    cycle?: Maybe<{ __typename?: "Cycle" } & Pick<Cycle, "id">>;
    initiative?: Maybe<{ __typename?: "Initiative" } & Pick<Initiative, "id">>;
    project?: Maybe<{ __typename?: "Project" } & Pick<Project, "id">>;
    customer?: Maybe<{ __typename?: "Customer" } & Pick<Customer, "id">>;
    label: { __typename?: "IssueLabel" } & Pick<IssueLabel, "id">;
    team?: Maybe<{ __typename?: "Team" } & Pick<Team, "id">>;
    subscriber: { __typename?: "User" } & Pick<User, "id">;
    user?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
  };

export type ProjectMilestoneFragment = { __typename: "ProjectMilestone" } & Pick<
  ProjectMilestone,
  | "updatedAt"
  | "name"
  | "sortOrder"
  | "targetDate"
  | "progress"
  | "description"
  | "status"
  | "archivedAt"
  | "createdAt"
  | "id"
> & {
    documentContent?: Maybe<{ __typename?: "DocumentContent" } & DocumentContentFragment>;
    project: { __typename?: "Project" } & Pick<Project, "id">;
  };

type Notification_CustomerNeedNotification_Fragment = { __typename: "CustomerNeedNotification" } & Pick<
  CustomerNeedNotification,
  | "type"
  | "category"
  | "updatedAt"
  | "emailedAt"
  | "readAt"
  | "unsnoozedAt"
  | "archivedAt"
  | "createdAt"
  | "snoozedUntilAt"
  | "id"
> & {
    botActor?: Maybe<{ __typename?: "ActorBot" } & ActorBotFragment>;
    externalUserActor?: Maybe<{ __typename?: "ExternalUser" } & Pick<ExternalUser, "id">>;
    actor?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    user: { __typename?: "User" } & Pick<User, "id">;
  } & CustomerNeedNotificationFragment;

type Notification_CustomerNotification_Fragment = { __typename: "CustomerNotification" } & Pick<
  CustomerNotification,
  | "type"
  | "category"
  | "updatedAt"
  | "emailedAt"
  | "readAt"
  | "unsnoozedAt"
  | "archivedAt"
  | "createdAt"
  | "snoozedUntilAt"
  | "id"
> & {
    botActor?: Maybe<{ __typename?: "ActorBot" } & ActorBotFragment>;
    externalUserActor?: Maybe<{ __typename?: "ExternalUser" } & Pick<ExternalUser, "id">>;
    actor?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    user: { __typename?: "User" } & Pick<User, "id">;
  } & CustomerNotificationFragment;

type Notification_DocumentNotification_Fragment = { __typename: "DocumentNotification" } & Pick<
  DocumentNotification,
  | "type"
  | "category"
  | "updatedAt"
  | "emailedAt"
  | "readAt"
  | "unsnoozedAt"
  | "archivedAt"
  | "createdAt"
  | "snoozedUntilAt"
  | "id"
> & {
    botActor?: Maybe<{ __typename?: "ActorBot" } & ActorBotFragment>;
    externalUserActor?: Maybe<{ __typename?: "ExternalUser" } & Pick<ExternalUser, "id">>;
    actor?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    user: { __typename?: "User" } & Pick<User, "id">;
  } & DocumentNotificationFragment;

type Notification_InitiativeNotification_Fragment = { __typename: "InitiativeNotification" } & Pick<
  InitiativeNotification,
  | "type"
  | "category"
  | "updatedAt"
  | "emailedAt"
  | "readAt"
  | "unsnoozedAt"
  | "archivedAt"
  | "createdAt"
  | "snoozedUntilAt"
  | "id"
> & {
    botActor?: Maybe<{ __typename?: "ActorBot" } & ActorBotFragment>;
    externalUserActor?: Maybe<{ __typename?: "ExternalUser" } & Pick<ExternalUser, "id">>;
    actor?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    user: { __typename?: "User" } & Pick<User, "id">;
  } & InitiativeNotificationFragment;

type Notification_IssueNotification_Fragment = { __typename: "IssueNotification" } & Pick<
  IssueNotification,
  | "type"
  | "category"
  | "updatedAt"
  | "emailedAt"
  | "readAt"
  | "unsnoozedAt"
  | "archivedAt"
  | "createdAt"
  | "snoozedUntilAt"
  | "id"
> & {
    botActor?: Maybe<{ __typename?: "ActorBot" } & ActorBotFragment>;
    externalUserActor?: Maybe<{ __typename?: "ExternalUser" } & Pick<ExternalUser, "id">>;
    actor?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    user: { __typename?: "User" } & Pick<User, "id">;
  } & IssueNotificationFragment;

type Notification_OauthClientApprovalNotification_Fragment = { __typename: "OauthClientApprovalNotification" } & Pick<
  OauthClientApprovalNotification,
  | "type"
  | "category"
  | "updatedAt"
  | "emailedAt"
  | "readAt"
  | "unsnoozedAt"
  | "archivedAt"
  | "createdAt"
  | "snoozedUntilAt"
  | "id"
> & {
    botActor?: Maybe<{ __typename?: "ActorBot" } & ActorBotFragment>;
    externalUserActor?: Maybe<{ __typename?: "ExternalUser" } & Pick<ExternalUser, "id">>;
    actor?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    user: { __typename?: "User" } & Pick<User, "id">;
  } & OauthClientApprovalNotificationFragment;

type Notification_PostNotification_Fragment = { __typename: "PostNotification" } & Pick<
  PostNotification,
  | "type"
  | "category"
  | "updatedAt"
  | "emailedAt"
  | "readAt"
  | "unsnoozedAt"
  | "archivedAt"
  | "createdAt"
  | "snoozedUntilAt"
  | "id"
> & {
    botActor?: Maybe<{ __typename?: "ActorBot" } & ActorBotFragment>;
    externalUserActor?: Maybe<{ __typename?: "ExternalUser" } & Pick<ExternalUser, "id">>;
    actor?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    user: { __typename?: "User" } & Pick<User, "id">;
  } & PostNotificationFragment;

type Notification_ProjectNotification_Fragment = { __typename: "ProjectNotification" } & Pick<
  ProjectNotification,
  | "type"
  | "category"
  | "updatedAt"
  | "emailedAt"
  | "readAt"
  | "unsnoozedAt"
  | "archivedAt"
  | "createdAt"
  | "snoozedUntilAt"
  | "id"
> & {
    botActor?: Maybe<{ __typename?: "ActorBot" } & ActorBotFragment>;
    externalUserActor?: Maybe<{ __typename?: "ExternalUser" } & Pick<ExternalUser, "id">>;
    actor?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    user: { __typename?: "User" } & Pick<User, "id">;
  } & ProjectNotificationFragment;

type Notification_PullRequestNotification_Fragment = { __typename: "PullRequestNotification" } & Pick<
  PullRequestNotification,
  | "type"
  | "category"
  | "updatedAt"
  | "emailedAt"
  | "readAt"
  | "unsnoozedAt"
  | "archivedAt"
  | "createdAt"
  | "snoozedUntilAt"
  | "id"
> & {
    botActor?: Maybe<{ __typename?: "ActorBot" } & ActorBotFragment>;
    externalUserActor?: Maybe<{ __typename?: "ExternalUser" } & Pick<ExternalUser, "id">>;
    actor?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    user: { __typename?: "User" } & Pick<User, "id">;
  } & PullRequestNotificationFragment;

export type NotificationFragment =
  | Notification_CustomerNeedNotification_Fragment
  | Notification_CustomerNotification_Fragment
  | Notification_DocumentNotification_Fragment
  | Notification_InitiativeNotification_Fragment
  | Notification_IssueNotification_Fragment
  | Notification_OauthClientApprovalNotification_Fragment
  | Notification_PostNotification_Fragment
  | Notification_ProjectNotification_Fragment
  | Notification_PullRequestNotification_Fragment;

export type PostNotificationFragment = { __typename: "PostNotification" } & Pick<
  PostNotification,
  | "reactionEmoji"
  | "type"
  | "commentId"
  | "parentCommentId"
  | "postId"
  | "category"
  | "updatedAt"
  | "emailedAt"
  | "readAt"
  | "unsnoozedAt"
  | "archivedAt"
  | "createdAt"
  | "snoozedUntilAt"
  | "id"
> & {
    botActor?: Maybe<{ __typename?: "ActorBot" } & ActorBotFragment>;
    externalUserActor?: Maybe<{ __typename?: "ExternalUser" } & Pick<ExternalUser, "id">>;
    actor?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    user: { __typename?: "User" } & Pick<User, "id">;
  };

export type ProjectNotificationSubscriptionFragment = { __typename: "ProjectNotificationSubscription" } & Pick<
  ProjectNotificationSubscription,
  | "updatedAt"
  | "archivedAt"
  | "createdAt"
  | "notificationSubscriptionTypes"
  | "userContextViewType"
  | "contextViewType"
  | "id"
  | "active"
> & {
    customView?: Maybe<{ __typename?: "CustomView" } & Pick<CustomView, "id">>;
    cycle?: Maybe<{ __typename?: "Cycle" } & Pick<Cycle, "id">>;
    initiative?: Maybe<{ __typename?: "Initiative" } & Pick<Initiative, "id">>;
    label?: Maybe<{ __typename?: "IssueLabel" } & Pick<IssueLabel, "id">>;
    customer?: Maybe<{ __typename?: "Customer" } & Pick<Customer, "id">>;
    project: { __typename?: "Project" } & Pick<Project, "id">;
    team?: Maybe<{ __typename?: "Team" } & Pick<Team, "id">>;
    subscriber: { __typename?: "User" } & Pick<User, "id">;
    user?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
  };

export type ProjectNotificationFragment = { __typename: "ProjectNotification" } & Pick<
  ProjectNotification,
  | "reactionEmoji"
  | "type"
  | "commentId"
  | "parentCommentId"
  | "projectId"
  | "projectMilestoneId"
  | "projectUpdateId"
  | "category"
  | "updatedAt"
  | "emailedAt"
  | "readAt"
  | "unsnoozedAt"
  | "archivedAt"
  | "createdAt"
  | "snoozedUntilAt"
  | "id"
> & {
    botActor?: Maybe<{ __typename?: "ActorBot" } & ActorBotFragment>;
    comment?: Maybe<{ __typename?: "Comment" } & Pick<Comment, "id">>;
    document?: Maybe<{ __typename?: "Document" } & Pick<Document, "id">>;
    externalUserActor?: Maybe<{ __typename?: "ExternalUser" } & Pick<ExternalUser, "id">>;
    parentComment?: Maybe<{ __typename?: "Comment" } & Pick<Comment, "id">>;
    project: { __typename?: "Project" } & Pick<Project, "id">;
    projectUpdate?: Maybe<{ __typename?: "ProjectUpdate" } & Pick<ProjectUpdate, "id">>;
    actor?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    user: { __typename?: "User" } & Pick<User, "id">;
  };

export type ProjectStatusFragment = { __typename: "ProjectStatus" } & Pick<
  ProjectStatus,
  | "description"
  | "color"
  | "updatedAt"
  | "name"
  | "position"
  | "archivedAt"
  | "createdAt"
  | "type"
  | "id"
  | "indefinite"
>;

export type ProjectFragment = { __typename: "Project" } & Pick<
  Project,
  | "trashed"
  | "labelIds"
  | "url"
  | "updateRemindersDay"
  | "targetDate"
  | "startDate"
  | "updateReminderFrequency"
  | "health"
  | "updateRemindersHour"
  | "icon"
  | "updatedAt"
  | "updateReminderFrequencyInWeeks"
  | "completedScopeHistory"
  | "completedIssueCountHistory"
  | "inProgressScopeHistory"
  | "progress"
  | "scope"
  | "priorityLabel"
  | "priority"
  | "color"
  | "content"
  | "description"
  | "name"
  | "slugId"
  | "targetDateResolution"
  | "startDateResolution"
  | "frequencyResolution"
  | "prioritySortOrder"
  | "sortOrder"
  | "archivedAt"
  | "createdAt"
  | "healthUpdatedAt"
  | "autoArchivedAt"
  | "canceledAt"
  | "completedAt"
  | "startedAt"
  | "projectUpdateRemindersPausedUntilAt"
  | "scopeHistory"
  | "issueCountHistory"
  | "id"
  | "slackIssueComments"
  | "slackNewIssue"
  | "slackIssueStatuses"
  | "state"
> & {
    integrationsSettings?: Maybe<{ __typename?: "IntegrationsSettings" } & Pick<IntegrationsSettings, "id">>;
    documentContent?: Maybe<{ __typename?: "DocumentContent" } & DocumentContentFragment>;
    lastUpdate?: Maybe<{ __typename?: "ProjectUpdate" } & Pick<ProjectUpdate, "id">>;
    lastAppliedTemplate?: Maybe<{ __typename?: "Template" } & Pick<Template, "id">>;
    lead?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    convertedFromIssue?: Maybe<{ __typename?: "Issue" } & Pick<Issue, "id">>;
    status: { __typename?: "ProjectStatus" } & Pick<ProjectStatus, "id">;
    creator?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    favorite?: Maybe<{ __typename?: "Favorite" } & Pick<Favorite, "id">>;
  };

export type PullRequestNotificationFragment = { __typename: "PullRequestNotification" } & Pick<
  PullRequestNotification,
  | "reactionEmoji"
  | "type"
  | "commentId"
  | "parentCommentId"
  | "pullRequestId"
  | "category"
  | "updatedAt"
  | "emailedAt"
  | "readAt"
  | "unsnoozedAt"
  | "archivedAt"
  | "createdAt"
  | "snoozedUntilAt"
  | "id"
> & {
    botActor?: Maybe<{ __typename?: "ActorBot" } & ActorBotFragment>;
    externalUserActor?: Maybe<{ __typename?: "ExternalUser" } & Pick<ExternalUser, "id">>;
    actor?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    user: { __typename?: "User" } & Pick<User, "id">;
  };

export type ReactionFragment = { __typename: "Reaction" } & Pick<
  Reaction,
  "emoji" | "updatedAt" | "archivedAt" | "createdAt" | "id"
> & {
    comment?: Maybe<{ __typename?: "Comment" } & Pick<Comment, "id">>;
    externalUser?: Maybe<{ __typename?: "ExternalUser" } & Pick<ExternalUser, "id">>;
    initiativeUpdate?: Maybe<{ __typename?: "InitiativeUpdate" } & Pick<InitiativeUpdate, "id">>;
    issue?: Maybe<{ __typename?: "Issue" } & Pick<Issue, "id">>;
    projectUpdate?: Maybe<{ __typename?: "ProjectUpdate" } & Pick<ProjectUpdate, "id">>;
    user?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
  };

export type IssueHistoryFragment = { __typename: "IssueHistory" } & Pick<
  IssueHistory,
  | "addedLabelIds"
  | "removedLabelIds"
  | "attachmentId"
  | "customerNeedId"
  | "toCycleId"
  | "toParentId"
  | "toConvertedProjectId"
  | "toProjectId"
  | "toStateId"
  | "fromCycleId"
  | "fromParentId"
  | "fromProjectId"
  | "fromStateId"
  | "fromTeamId"
  | "toTeamId"
  | "fromAssigneeId"
  | "toAssigneeId"
  | "actorId"
  | "updatedAt"
  | "archivedAt"
  | "createdAt"
  | "id"
  | "fromDueDate"
  | "toDueDate"
  | "fromEstimate"
  | "toEstimate"
  | "fromPriority"
  | "toPriority"
  | "fromTitle"
  | "toTitle"
  | "archived"
  | "autoArchived"
  | "autoClosed"
  | "trashed"
  | "updatedDescription"
> & {
    relationChanges?: Maybe<
      Array<{ __typename?: "IssueRelationHistoryPayload" } & IssueRelationHistoryPayloadFragment>
    >;
    actor?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    descriptionUpdatedBy?: Maybe<Array<{ __typename?: "User" } & UserFragment>>;
    actors?: Maybe<Array<{ __typename?: "User" } & UserFragment>>;
    fromDelegate?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    toDelegate?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    botActor?: Maybe<{ __typename?: "ActorBot" } & ActorBotFragment>;
    fromCycle?: Maybe<{ __typename?: "Cycle" } & Pick<Cycle, "id">>;
    toCycle?: Maybe<{ __typename?: "Cycle" } & Pick<Cycle, "id">>;
    issueImport?: Maybe<{ __typename?: "IssueImport" } & IssueImportFragment>;
    issue: { __typename?: "Issue" } & Pick<Issue, "id">;
    addedLabels?: Maybe<Array<{ __typename?: "IssueLabel" } & IssueLabelFragment>>;
    removedLabels?: Maybe<Array<{ __typename?: "IssueLabel" } & IssueLabelFragment>>;
    attachment?: Maybe<{ __typename?: "Attachment" } & Pick<Attachment, "id">>;
    toConvertedProject?: Maybe<{ __typename?: "Project" } & Pick<Project, "id">>;
    fromParent?: Maybe<{ __typename?: "Issue" } & Pick<Issue, "id">>;
    toParent?: Maybe<{ __typename?: "Issue" } & Pick<Issue, "id">>;
    fromProject?: Maybe<{ __typename?: "Project" } & Pick<Project, "id">>;
    toProject?: Maybe<{ __typename?: "Project" } & Pick<Project, "id">>;
    fromState?: Maybe<{ __typename?: "WorkflowState" } & Pick<WorkflowState, "id">>;
    toState?: Maybe<{ __typename?: "WorkflowState" } & Pick<WorkflowState, "id">>;
    fromTeam?: Maybe<{ __typename?: "Team" } & Pick<Team, "id">>;
    toTeam?: Maybe<{ __typename?: "Team" } & Pick<Team, "id">>;
    toAssignee?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    fromAssignee?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    triageResponsibilityNotifiedUsers?: Maybe<Array<{ __typename?: "User" } & UserFragment>>;
  };

export type IssueRelationFragment = { __typename: "IssueRelation" } & Pick<
  IssueRelation,
  "updatedAt" | "type" | "archivedAt" | "createdAt" | "id"
> & { issue: { __typename?: "Issue" } & Pick<Issue, "id">; relatedIssue: { __typename?: "Issue" } & Pick<Issue, "id"> };

export type ProjectRelationFragment = { __typename: "ProjectRelation" } & Pick<
  ProjectRelation,
  "updatedAt" | "type" | "archivedAt" | "createdAt" | "anchorType" | "relatedAnchorType" | "id"
> & {
    user?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    projectMilestone?: Maybe<{ __typename?: "ProjectMilestone" } & Pick<ProjectMilestone, "id">>;
    relatedProjectMilestone?: Maybe<{ __typename?: "ProjectMilestone" } & Pick<ProjectMilestone, "id">>;
    project: { __typename?: "Project" } & Pick<Project, "id">;
    relatedProject: { __typename?: "Project" } & Pick<Project, "id">;
  };

export type InitiativeRelationFragment = { __typename: "InitiativeRelation" } & Pick<
  InitiativeRelation,
  "updatedAt" | "sortOrder" | "archivedAt" | "createdAt" | "id"
> & {
    relatedInitiative: { __typename?: "Initiative" } & Pick<Initiative, "id">;
    user?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    initiative: { __typename?: "Initiative" } & Pick<Initiative, "id">;
  };

export type AgentSessionFragment = { __typename: "AgentSession" } & Pick<
  AgentSession,
  | "summary"
  | "sourceMetadata"
  | "externalLink"
  | "status"
  | "updatedAt"
  | "archivedAt"
  | "createdAt"
  | "endedAt"
  | "startedAt"
  | "type"
  | "id"
> & {
    appUser: { __typename?: "User" } & Pick<User, "id">;
    comment?: Maybe<{ __typename?: "Comment" } & Pick<Comment, "id">>;
    issue?: Maybe<{ __typename?: "Issue" } & Pick<Issue, "id">>;
    creator?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
  };

export type CycleFragment = { __typename: "Cycle" } & Pick<
  Cycle,
  | "completedAt"
  | "name"
  | "description"
  | "endsAt"
  | "updatedAt"
  | "completedScopeHistory"
  | "completedIssueCountHistory"
  | "inProgressScopeHistory"
  | "number"
  | "progress"
  | "startsAt"
  | "autoArchivedAt"
  | "archivedAt"
  | "createdAt"
  | "scopeHistory"
  | "issueCountHistory"
  | "id"
  | "isActive"
  | "isFuture"
  | "isPast"
  | "isNext"
  | "isPrevious"
> & {
    inheritedFrom?: Maybe<{ __typename?: "Cycle" } & Pick<Cycle, "id">>;
    team: { __typename?: "Team" } & Pick<Team, "id">;
  };

export type WorkflowStateFragment = { __typename: "WorkflowState" } & Pick<
  WorkflowState,
  "description" | "updatedAt" | "position" | "color" | "name" | "archivedAt" | "createdAt" | "type" | "id"
> & {
    inheritedFrom?: Maybe<{ __typename?: "WorkflowState" } & Pick<WorkflowState, "id">>;
    team: { __typename?: "Team" } & Pick<Team, "id">;
  };

export type TeamNotificationSubscriptionFragment = { __typename: "TeamNotificationSubscription" } & Pick<
  TeamNotificationSubscription,
  | "updatedAt"
  | "archivedAt"
  | "createdAt"
  | "notificationSubscriptionTypes"
  | "userContextViewType"
  | "contextViewType"
  | "id"
  | "active"
> & {
    customView?: Maybe<{ __typename?: "CustomView" } & Pick<CustomView, "id">>;
    cycle?: Maybe<{ __typename?: "Cycle" } & Pick<Cycle, "id">>;
    initiative?: Maybe<{ __typename?: "Initiative" } & Pick<Initiative, "id">>;
    label?: Maybe<{ __typename?: "IssueLabel" } & Pick<IssueLabel, "id">>;
    project?: Maybe<{ __typename?: "Project" } & Pick<Project, "id">>;
    customer?: Maybe<{ __typename?: "Customer" } & Pick<Customer, "id">>;
    team: { __typename?: "Team" } & Pick<Team, "id">;
    subscriber: { __typename?: "User" } & Pick<User, "id">;
    user?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
  };

export type TriageResponsibilityFragment = { __typename: "TriageResponsibility" } & Pick<
  TriageResponsibility,
  "action" | "updatedAt" | "archivedAt" | "createdAt" | "id"
> & {
    manualSelection?: Maybe<
      { __typename?: "TriageResponsibilityManualSelection" } & TriageResponsibilityManualSelectionFragment
    >;
    team: { __typename?: "Team" } & Pick<Team, "id">;
    timeSchedule?: Maybe<{ __typename?: "TimeSchedule" } & Pick<TimeSchedule, "id">>;
    currentUser?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
  };

export type TemplateFragment = { __typename: "Template" } & Pick<
  Template,
  "templateData" | "description" | "type" | "updatedAt" | "name" | "sortOrder" | "archivedAt" | "createdAt" | "id"
> & {
    inheritedFrom?: Maybe<{ __typename?: "Template" } & Pick<Template, "id">>;
    team?: Maybe<{ __typename?: "Team" } & Pick<Team, "id">>;
    creator?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    lastUpdatedBy?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
  };

export type TimeScheduleFragment = { __typename: "TimeSchedule" } & Pick<
  TimeSchedule,
  "externalUrl" | "externalId" | "updatedAt" | "name" | "archivedAt" | "createdAt" | "id"
> & {
    integration?: Maybe<{ __typename?: "Integration" } & Pick<Integration, "id">>;
    entries?: Maybe<Array<{ __typename?: "TimeScheduleEntry" } & TimeScheduleEntryFragment>>;
  };

export type GitAutomationStateFragment = { __typename: "GitAutomationState" } & Pick<
  GitAutomationState,
  "event" | "updatedAt" | "archivedAt" | "createdAt" | "id" | "branchPattern"
> & {
    state?: Maybe<{ __typename?: "WorkflowState" } & Pick<WorkflowState, "id">>;
    targetBranch?: Maybe<{ __typename?: "GitAutomationTargetBranch" } & GitAutomationTargetBranchFragment>;
    team: { __typename?: "Team" } & Pick<Team, "id">;
  };

export type UserNotificationSubscriptionFragment = { __typename: "UserNotificationSubscription" } & Pick<
  UserNotificationSubscription,
  | "updatedAt"
  | "archivedAt"
  | "createdAt"
  | "notificationSubscriptionTypes"
  | "userContextViewType"
  | "contextViewType"
  | "id"
  | "active"
> & {
    customView?: Maybe<{ __typename?: "CustomView" } & Pick<CustomView, "id">>;
    cycle?: Maybe<{ __typename?: "Cycle" } & Pick<Cycle, "id">>;
    initiative?: Maybe<{ __typename?: "Initiative" } & Pick<Initiative, "id">>;
    label?: Maybe<{ __typename?: "IssueLabel" } & Pick<IssueLabel, "id">>;
    project?: Maybe<{ __typename?: "Project" } & Pick<Project, "id">>;
    customer?: Maybe<{ __typename?: "Customer" } & Pick<Customer, "id">>;
    team?: Maybe<{ __typename?: "Team" } & Pick<Team, "id">>;
    user: { __typename?: "User" } & Pick<User, "id">;
    subscriber: { __typename?: "User" } & Pick<User, "id">;
  };

export type AuthUserFragment = { __typename: "AuthUser" } & Pick<
  AuthUser,
  "avatarUrl" | "displayName" | "email" | "name" | "userAccountId" | "active" | "role" | "id"
> & { organization: { __typename?: "AuthOrganization" } & AuthOrganizationFragment };

export type UserFragment = { __typename: "User" } & Pick<
  User,
  | "statusUntilAt"
  | "description"
  | "avatarUrl"
  | "createdIssueCount"
  | "disableReason"
  | "avatarBackgroundColor"
  | "statusEmoji"
  | "initials"
  | "statusLabel"
  | "updatedAt"
  | "lastSeen"
  | "timezone"
  | "archivedAt"
  | "createdAt"
  | "id"
  | "gitHubUserId"
  | "displayName"
  | "email"
  | "name"
  | "url"
  | "active"
  | "guest"
  | "app"
  | "admin"
  | "isAssignable"
  | "isMentionable"
  | "isMe"
  | "calendarHash"
  | "inviteHash"
>;

export type NotificationCategoryPreferencesFragment = { __typename: "NotificationCategoryPreferences" } & {
  customers: { __typename?: "NotificationChannelPreferences" } & NotificationChannelPreferencesFragment;
  feed: { __typename?: "NotificationChannelPreferences" } & NotificationChannelPreferencesFragment;
  appsAndIntegrations: { __typename?: "NotificationChannelPreferences" } & NotificationChannelPreferencesFragment;
  assignments: { __typename?: "NotificationChannelPreferences" } & NotificationChannelPreferencesFragment;
  commentsAndReplies: { __typename?: "NotificationChannelPreferences" } & NotificationChannelPreferencesFragment;
  documentChanges: { __typename?: "NotificationChannelPreferences" } & NotificationChannelPreferencesFragment;
  mentions: { __typename?: "NotificationChannelPreferences" } & NotificationChannelPreferencesFragment;
  postsAndUpdates: { __typename?: "NotificationChannelPreferences" } & NotificationChannelPreferencesFragment;
  reactions: { __typename?: "NotificationChannelPreferences" } & NotificationChannelPreferencesFragment;
  reminders: { __typename?: "NotificationChannelPreferences" } & NotificationChannelPreferencesFragment;
  reviews: { __typename?: "NotificationChannelPreferences" } & NotificationChannelPreferencesFragment;
  statusChanges: { __typename?: "NotificationChannelPreferences" } & NotificationChannelPreferencesFragment;
  subscriptions: { __typename?: "NotificationChannelPreferences" } & NotificationChannelPreferencesFragment;
  system: { __typename?: "NotificationChannelPreferences" } & NotificationChannelPreferencesFragment;
  triage: { __typename?: "NotificationChannelPreferences" } & NotificationChannelPreferencesFragment;
};

export type NotificationChannelPreferencesFragment = { __typename: "NotificationChannelPreferences" } & Pick<
  NotificationChannelPreferences,
  "slack" | "desktop" | "email" | "mobile"
>;

export type NotificationDeliveryPreferencesFragment = { __typename: "NotificationDeliveryPreferences" } & {
  mobile?: Maybe<
    { __typename?: "NotificationDeliveryPreferencesChannel" } & NotificationDeliveryPreferencesChannelFragment
  >;
};

export type NotificationDeliveryPreferencesChannelFragment = {
  __typename: "NotificationDeliveryPreferencesChannel";
} & Pick<NotificationDeliveryPreferencesChannel, "notificationsDisabled"> & {
    schedule?: Maybe<
      { __typename?: "NotificationDeliveryPreferencesSchedule" } & NotificationDeliveryPreferencesScheduleFragment
    >;
  };

export type NotificationDeliveryPreferencesDayFragment = { __typename: "NotificationDeliveryPreferencesDay" } & Pick<
  NotificationDeliveryPreferencesDay,
  "end" | "start"
>;

export type NotificationDeliveryPreferencesScheduleFragment = {
  __typename: "NotificationDeliveryPreferencesSchedule";
} & Pick<NotificationDeliveryPreferencesSchedule, "disabled"> & {
    friday: { __typename?: "NotificationDeliveryPreferencesDay" } & NotificationDeliveryPreferencesDayFragment;
    monday: { __typename?: "NotificationDeliveryPreferencesDay" } & NotificationDeliveryPreferencesDayFragment;
    saturday: { __typename?: "NotificationDeliveryPreferencesDay" } & NotificationDeliveryPreferencesDayFragment;
    sunday: { __typename?: "NotificationDeliveryPreferencesDay" } & NotificationDeliveryPreferencesDayFragment;
    thursday: { __typename?: "NotificationDeliveryPreferencesDay" } & NotificationDeliveryPreferencesDayFragment;
    tuesday: { __typename?: "NotificationDeliveryPreferencesDay" } & NotificationDeliveryPreferencesDayFragment;
    wednesday: { __typename?: "NotificationDeliveryPreferencesDay" } & NotificationDeliveryPreferencesDayFragment;
  };

export type PushSubscriptionFragment = { __typename: "PushSubscription" } & Pick<
  PushSubscription,
  "updatedAt" | "archivedAt" | "createdAt" | "id"
>;

export type WebhookFragment = { __typename: "Webhook" } & Pick<
  Webhook,
  | "secret"
  | "updatedAt"
  | "resourceTypes"
  | "archivedAt"
  | "createdAt"
  | "id"
  | "url"
  | "label"
  | "allPublicTeams"
  | "enabled"
> & {
    team?: Maybe<{ __typename?: "Team" } & Pick<Team, "id">>;
    creator?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
  };

export type ApiKeyFragment = { __typename: "ApiKey" } & Pick<
  ApiKey,
  "scope" | "label" | "updatedAt" | "requestedSyncGroups" | "archivedAt" | "createdAt" | "id" | "lastActiveAt"
>;

export type AgentActivityFragment = { __typename: "AgentActivity" } & Pick<
  AgentActivity,
  "signal" | "sourceMetadata" | "updatedAt" | "archivedAt" | "createdAt" | "id"
> & {
    agentSession: { __typename?: "AgentSession" } & Pick<AgentSession, "id">;
    sourceComment?: Maybe<{ __typename?: "Comment" } & Pick<Comment, "id">>;
    content:
      | ({ __typename?: "AgentActivityActionContent" } & AgentActivityActionContentFragment)
      | ({ __typename?: "AgentActivityElicitationContent" } & AgentActivityElicitationContentFragment)
      | ({ __typename?: "AgentActivityErrorContent" } & AgentActivityErrorContentFragment)
      | ({ __typename?: "AgentActivityPromptContent" } & AgentActivityPromptContentFragment)
      | ({ __typename?: "AgentActivityResponseContent" } & AgentActivityResponseContentFragment)
      | ({ __typename?: "AgentActivityThoughtContent" } & AgentActivityThoughtContentFragment);
    user: { __typename?: "User" } & Pick<User, "id">;
  };

export type EmailIntakeAddressFragment = { __typename: "EmailIntakeAddress" } & Pick<
  EmailIntakeAddress,
  | "issueCanceledAutoReply"
  | "issueCompletedAutoReply"
  | "issueCreatedAutoReply"
  | "forwardingEmailAddress"
  | "updatedAt"
  | "senderName"
  | "archivedAt"
  | "createdAt"
  | "type"
  | "id"
  | "address"
  | "repliesEnabled"
  | "customerRequestsEnabled"
  | "issueCanceledAutoReplyEnabled"
  | "issueCompletedAutoReplyEnabled"
  | "useUserNamesInReplies"
  | "enabled"
> & {
    sesDomainIdentity?: Maybe<{ __typename?: "SesDomainIdentity" } & SesDomainIdentityFragment>;
    team?: Maybe<{ __typename?: "Team" } & Pick<Team, "id">>;
    template?: Maybe<{ __typename?: "Template" } & Pick<Template, "id">>;
    creator?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
  };

export type ExternalUserFragment = { __typename: "ExternalUser" } & Pick<
  ExternalUser,
  "avatarUrl" | "displayName" | "email" | "name" | "updatedAt" | "lastSeen" | "archivedAt" | "createdAt" | "id"
>;

export type EntityExternalLinkFragment = { __typename: "EntityExternalLink" } & Pick<
  EntityExternalLink,
  "updatedAt" | "url" | "label" | "sortOrder" | "archivedAt" | "createdAt" | "id"
> & {
    initiative?: Maybe<{ __typename?: "Initiative" } & Pick<Initiative, "id">>;
    creator: { __typename?: "User" } & Pick<User, "id">;
  };

export type ProjectHistoryFragment = { __typename: "ProjectHistory" } & Pick<
  ProjectHistory,
  "entries" | "updatedAt" | "archivedAt" | "createdAt" | "id"
> & { project: { __typename?: "Project" } & Pick<Project, "id"> };

export type IdentityProviderFragment = { __typename: "IdentityProvider" } & Pick<
  IdentityProvider,
  | "ssoBinding"
  | "ssoEndpoint"
  | "priority"
  | "ssoSignAlgo"
  | "issuerEntityId"
  | "updatedAt"
  | "archivedAt"
  | "createdAt"
  | "id"
  | "samlEnabled"
  | "scimEnabled"
  | "defaultMigrated"
  | "ssoSigningCert"
>;

export type IssueImportFragment = { __typename: "IssueImport" } & Pick<
  IssueImport,
  | "progress"
  | "errorMetadata"
  | "csvFileUrl"
  | "serviceMetadata"
  | "teamName"
  | "mapping"
  | "displayName"
  | "creatorId"
  | "updatedAt"
  | "service"
  | "status"
  | "archivedAt"
  | "createdAt"
  | "id"
  | "error"
>;

export type InitiativeNotificationSubscriptionFragment = { __typename: "InitiativeNotificationSubscription" } & Pick<
  InitiativeNotificationSubscription,
  | "updatedAt"
  | "archivedAt"
  | "createdAt"
  | "notificationSubscriptionTypes"
  | "userContextViewType"
  | "contextViewType"
  | "id"
  | "active"
> & {
    customView?: Maybe<{ __typename?: "CustomView" } & Pick<CustomView, "id">>;
    cycle?: Maybe<{ __typename?: "Cycle" } & Pick<Cycle, "id">>;
    label?: Maybe<{ __typename?: "IssueLabel" } & Pick<IssueLabel, "id">>;
    project?: Maybe<{ __typename?: "Project" } & Pick<Project, "id">>;
    customer?: Maybe<{ __typename?: "Customer" } & Pick<Customer, "id">>;
    initiative: { __typename?: "Initiative" } & Pick<Initiative, "id">;
    team?: Maybe<{ __typename?: "Team" } & Pick<Team, "id">>;
    subscriber: { __typename?: "User" } & Pick<User, "id">;
    user?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
  };

export type InitiativeNotificationFragment = { __typename: "InitiativeNotification" } & Pick<
  InitiativeNotification,
  | "reactionEmoji"
  | "type"
  | "commentId"
  | "initiativeId"
  | "initiativeUpdateId"
  | "parentCommentId"
  | "category"
  | "updatedAt"
  | "emailedAt"
  | "readAt"
  | "unsnoozedAt"
  | "archivedAt"
  | "createdAt"
  | "snoozedUntilAt"
  | "id"
> & {
    botActor?: Maybe<{ __typename?: "ActorBot" } & ActorBotFragment>;
    comment?: Maybe<{ __typename?: "Comment" } & Pick<Comment, "id">>;
    document?: Maybe<{ __typename?: "Document" } & Pick<Document, "id">>;
    externalUserActor?: Maybe<{ __typename?: "ExternalUser" } & Pick<ExternalUser, "id">>;
    initiative?: Maybe<{ __typename?: "Initiative" } & Pick<Initiative, "id">>;
    initiativeUpdate?: Maybe<{ __typename?: "InitiativeUpdate" } & Pick<InitiativeUpdate, "id">>;
    parentComment?: Maybe<{ __typename?: "Comment" } & Pick<Comment, "id">>;
    actor?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    user: { __typename?: "User" } & Pick<User, "id">;
  };

export type InitiativeFragment = { __typename: "Initiative" } & Pick<
  Initiative,
  | "trashed"
  | "url"
  | "updateRemindersDay"
  | "description"
  | "targetDate"
  | "updateReminderFrequency"
  | "health"
  | "updateRemindersHour"
  | "icon"
  | "color"
  | "content"
  | "slugId"
  | "updatedAt"
  | "updateReminderFrequencyInWeeks"
  | "name"
  | "targetDateResolution"
  | "frequencyResolution"
  | "sortOrder"
  | "status"
  | "archivedAt"
  | "createdAt"
  | "healthUpdatedAt"
  | "startedAt"
  | "completedAt"
  | "id"
> & {
    parentInitiative?: Maybe<{ __typename?: "Initiative" } & Pick<Initiative, "id">>;
    integrationsSettings?: Maybe<{ __typename?: "IntegrationsSettings" } & Pick<IntegrationsSettings, "id">>;
    documentContent?: Maybe<{ __typename?: "DocumentContent" } & DocumentContentFragment>;
    lastUpdate?: Maybe<{ __typename?: "InitiativeUpdate" } & Pick<InitiativeUpdate, "id">>;
    creator?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    owner?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
  };

export type InitiativeUpdateFragment = { __typename: "InitiativeUpdate" } & Pick<
  InitiativeUpdate,
  | "reactionData"
  | "url"
  | "diffMarkdown"
  | "diff"
  | "health"
  | "updatedAt"
  | "archivedAt"
  | "createdAt"
  | "editedAt"
  | "id"
  | "body"
  | "slugId"
  | "isDiffHidden"
  | "isStale"
> & {
    reactions: Array<{ __typename?: "Reaction" } & ReactionFragment>;
    initiative: { __typename?: "Initiative" } & Pick<Initiative, "id">;
    user: { __typename?: "User" } & Pick<User, "id">;
  };

export type IntegrationFragment = { __typename: "Integration" } & Pick<
  Integration,
  "service" | "updatedAt" | "archivedAt" | "createdAt" | "id"
> & { team?: Maybe<{ __typename?: "Team" } & Pick<Team, "id">>; creator: { __typename?: "User" } & Pick<User, "id"> };

export type OrganizationInviteFragment = { __typename: "OrganizationInvite" } & Pick<
  OrganizationInvite,
  | "metadata"
  | "external"
  | "email"
  | "updatedAt"
  | "archivedAt"
  | "createdAt"
  | "acceptedAt"
  | "expiresAt"
  | "id"
  | "role"
> & {
    inviter: { __typename?: "User" } & Pick<User, "id">;
    invitee?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
  };

export type IssueNotificationFragment = { __typename: "IssueNotification" } & Pick<
  IssueNotification,
  | "reactionEmoji"
  | "type"
  | "commentId"
  | "issueId"
  | "parentCommentId"
  | "category"
  | "updatedAt"
  | "emailedAt"
  | "readAt"
  | "unsnoozedAt"
  | "archivedAt"
  | "createdAt"
  | "snoozedUntilAt"
  | "id"
> & {
    botActor?: Maybe<{ __typename?: "ActorBot" } & ActorBotFragment>;
    comment?: Maybe<{ __typename?: "Comment" } & Pick<Comment, "id">>;
    externalUserActor?: Maybe<{ __typename?: "ExternalUser" } & Pick<ExternalUser, "id">>;
    issue: { __typename?: "Issue" } & Pick<Issue, "id">;
    parentComment?: Maybe<{ __typename?: "Comment" } & Pick<Comment, "id">>;
    subscriptions?: Maybe<
      Array<
        | ({
            __typename?: "CustomViewNotificationSubscription";
          } & NotificationSubscription_CustomViewNotificationSubscription_Fragment)
        | ({
            __typename?: "CustomerNotificationSubscription";
          } & NotificationSubscription_CustomerNotificationSubscription_Fragment)
        | ({
            __typename?: "CycleNotificationSubscription";
          } & NotificationSubscription_CycleNotificationSubscription_Fragment)
        | ({
            __typename?: "InitiativeNotificationSubscription";
          } & NotificationSubscription_InitiativeNotificationSubscription_Fragment)
        | ({
            __typename?: "LabelNotificationSubscription";
          } & NotificationSubscription_LabelNotificationSubscription_Fragment)
        | ({
            __typename?: "ProjectNotificationSubscription";
          } & NotificationSubscription_ProjectNotificationSubscription_Fragment)
        | ({
            __typename?: "TeamNotificationSubscription";
          } & NotificationSubscription_TeamNotificationSubscription_Fragment)
        | ({
            __typename?: "UserNotificationSubscription";
          } & NotificationSubscription_UserNotificationSubscription_Fragment)
      >
    >;
    team: { __typename?: "Team" } & Pick<Team, "id">;
    actor?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    user: { __typename?: "User" } & Pick<User, "id">;
  };

export type IssueFragment = { __typename: "Issue" } & Pick<
  Issue,
  | "trashed"
  | "reactionData"
  | "labelIds"
  | "integrationSourceType"
  | "url"
  | "identifier"
  | "priorityLabel"
  | "previousIdentifiers"
  | "customerTicketCount"
  | "branchName"
  | "dueDate"
  | "estimate"
  | "description"
  | "title"
  | "number"
  | "updatedAt"
  | "boardOrder"
  | "prioritySortOrder"
  | "sortOrder"
  | "subIssueSortOrder"
  | "priority"
  | "archivedAt"
  | "createdAt"
  | "startedTriageAt"
  | "triagedAt"
  | "addedToCycleAt"
  | "addedToProjectAt"
  | "addedToTeamAt"
  | "autoArchivedAt"
  | "autoClosedAt"
  | "canceledAt"
  | "completedAt"
  | "startedAt"
  | "slaStartedAt"
  | "slaBreachesAt"
  | "slaHighRiskAt"
  | "slaMediumRiskAt"
  | "snoozedUntilAt"
  | "slaType"
  | "id"
> & {
    reactions: Array<{ __typename?: "Reaction" } & ReactionFragment>;
    delegate?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    botActor?: Maybe<{ __typename?: "ActorBot" } & ActorBotFragment>;
    sourceComment?: Maybe<{ __typename?: "Comment" } & Pick<Comment, "id">>;
    cycle?: Maybe<{ __typename?: "Cycle" } & Pick<Cycle, "id">>;
    syncedWith?: Maybe<Array<{ __typename?: "ExternalEntityInfo" } & ExternalEntityInfoFragment>>;
    externalUserCreator?: Maybe<{ __typename?: "ExternalUser" } & Pick<ExternalUser, "id">>;
    lastAppliedTemplate?: Maybe<{ __typename?: "Template" } & Pick<Template, "id">>;
    parent?: Maybe<{ __typename?: "Issue" } & Pick<Issue, "id">>;
    project?: Maybe<{ __typename?: "Project" } & Pick<Project, "id">>;
    projectMilestone?: Maybe<{ __typename?: "ProjectMilestone" } & Pick<ProjectMilestone, "id">>;
    recurringIssueTemplate?: Maybe<{ __typename?: "Template" } & Pick<Template, "id">>;
    team: { __typename?: "Team" } & Pick<Team, "id">;
    assignee?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    creator?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    snoozedBy?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    favorite?: Maybe<{ __typename?: "Favorite" } & Pick<Favorite, "id">>;
    state: { __typename?: "WorkflowState" } & Pick<WorkflowState, "id">;
  };

export type OauthClientApprovalNotificationFragment = { __typename: "OauthClientApprovalNotification" } & Pick<
  OauthClientApprovalNotification,
  | "type"
  | "oauthClientApprovalId"
  | "category"
  | "updatedAt"
  | "emailedAt"
  | "readAt"
  | "unsnoozedAt"
  | "archivedAt"
  | "createdAt"
  | "snoozedUntilAt"
  | "id"
> & {
    oauthClientApproval: { __typename?: "OauthClientApproval" } & OauthClientApprovalFragment;
    botActor?: Maybe<{ __typename?: "ActorBot" } & ActorBotFragment>;
    externalUserActor?: Maybe<{ __typename?: "ExternalUser" } & Pick<ExternalUser, "id">>;
    actor?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    user: { __typename?: "User" } & Pick<User, "id">;
  };

export type OrganizationFragment = { __typename: "Organization" } & Pick<
  Organization,
  | "allowedAuthServices"
  | "customersConfiguration"
  | "defaultFeedSummarySchedule"
  | "gitBranchFormat"
  | "userCount"
  | "customerCount"
  | "createdIssueCount"
  | "previousUrlKeys"
  | "periodUploadVolume"
  | "initiativeUpdateRemindersDay"
  | "projectUpdateRemindersDay"
  | "releaseChannel"
  | "initiativeUpdateRemindersHour"
  | "projectUpdateRemindersHour"
  | "updatedAt"
  | "fiscalYearStartMonth"
  | "initiativeUpdateReminderFrequencyInWeeks"
  | "projectUpdateReminderFrequencyInWeeks"
  | "logoUrl"
  | "name"
  | "urlKey"
  | "deletionRequestedAt"
  | "archivedAt"
  | "createdAt"
  | "trialEndsAt"
  | "id"
  | "samlEnabled"
  | "scimEnabled"
  | "allowMembersToInvite"
  | "restrictTeamCreationToAdmins"
  | "gitLinkbackMessagesEnabled"
  | "gitPublicLinkbackMessagesEnabled"
  | "feedEnabled"
  | "customersEnabled"
  | "roadmapEnabled"
  | "restrictLabelManagementToAdmins"
  | "projectUpdatesReminderFrequency"
  | "slaDayCount"
> & {
    ipRestrictions?: Maybe<Array<{ __typename?: "OrganizationIpRestriction" } & OrganizationIpRestrictionFragment>>;
    projectStatuses: Array<{ __typename?: "ProjectStatus" } & ProjectStatusFragment>;
    subscription?: Maybe<{ __typename?: "PaidSubscription" } & PaidSubscriptionFragment>;
  };

export type AuthOrganizationFragment = { __typename: "AuthOrganization" } & Pick<
  AuthOrganization,
  | "allowedAuthServices"
  | "previousUrlKeys"
  | "serviceId"
  | "releaseChannel"
  | "logoUrl"
  | "name"
  | "urlKey"
  | "region"
  | "deletionRequestedAt"
  | "id"
  | "samlEnabled"
  | "scimEnabled"
  | "enabled"
  | "userCount"
>;

export type TeamFragment = { __typename: "Team" } & Pick<
  Team,
  | "cycleIssueAutoAssignCompleted"
  | "cycleLockToActive"
  | "cycleIssueAutoAssignStarted"
  | "cycleCalenderUrl"
  | "upcomingCycleCount"
  | "issueCount"
  | "autoArchivePeriod"
  | "autoClosePeriod"
  | "scimGroupName"
  | "autoCloseStateId"
  | "cycleCooldownTime"
  | "cycleStartDay"
  | "cycleDuration"
  | "icon"
  | "defaultTemplateForMembersId"
  | "defaultTemplateForNonMembersId"
  | "issueEstimationType"
  | "updatedAt"
  | "displayName"
  | "color"
  | "description"
  | "name"
  | "key"
  | "archivedAt"
  | "createdAt"
  | "timezone"
  | "id"
  | "inviteHash"
  | "defaultIssueEstimate"
  | "setIssueSortOrderOnStateChange"
  | "requirePriorityToLeaveTriage"
  | "autoCloseChildIssues"
  | "autoCloseParentIssues"
  | "scimManaged"
  | "private"
  | "inheritIssueEstimation"
  | "inheritWorkflowStatuses"
  | "cyclesEnabled"
  | "issueEstimationExtended"
  | "issueEstimationAllowZero"
  | "aiThreadSummariesEnabled"
  | "groupIssueHistory"
  | "slackIssueComments"
  | "slackNewIssue"
  | "slackIssueStatuses"
  | "triageEnabled"
  | "issueOrderingNoPriorityFirst"
  | "issueSortOrderDefaultToBottom"
> & {
    integrationsSettings?: Maybe<{ __typename?: "IntegrationsSettings" } & Pick<IntegrationsSettings, "id">>;
    activeCycle?: Maybe<{ __typename?: "Cycle" } & Pick<Cycle, "id">>;
    triageResponsibility?: Maybe<{ __typename?: "TriageResponsibility" } & Pick<TriageResponsibility, "id">>;
    defaultTemplateForMembers?: Maybe<{ __typename?: "Template" } & Pick<Template, "id">>;
    defaultTemplateForNonMembers?: Maybe<{ __typename?: "Template" } & Pick<Template, "id">>;
    defaultProjectTemplate?: Maybe<{ __typename?: "Template" } & Pick<Template, "id">>;
    defaultIssueState?: Maybe<{ __typename?: "WorkflowState" } & Pick<WorkflowState, "id">>;
    mergeWorkflowState?: Maybe<{ __typename?: "WorkflowState" } & Pick<WorkflowState, "id">>;
    draftWorkflowState?: Maybe<{ __typename?: "WorkflowState" } & Pick<WorkflowState, "id">>;
    startWorkflowState?: Maybe<{ __typename?: "WorkflowState" } & Pick<WorkflowState, "id">>;
    mergeableWorkflowState?: Maybe<{ __typename?: "WorkflowState" } & Pick<WorkflowState, "id">>;
    reviewWorkflowState?: Maybe<{ __typename?: "WorkflowState" } & Pick<WorkflowState, "id">>;
    markedAsDuplicateWorkflowState?: Maybe<{ __typename?: "WorkflowState" } & Pick<WorkflowState, "id">>;
    triageIssueState?: Maybe<{ __typename?: "WorkflowState" } & Pick<WorkflowState, "id">>;
  };

export type ProjectUpdateFragment = { __typename: "ProjectUpdate" } & Pick<
  ProjectUpdate,
  | "reactionData"
  | "url"
  | "diffMarkdown"
  | "diff"
  | "health"
  | "updatedAt"
  | "archivedAt"
  | "createdAt"
  | "editedAt"
  | "id"
  | "body"
  | "slugId"
  | "isDiffHidden"
  | "isStale"
> & {
    reactions: Array<{ __typename?: "Reaction" } & ReactionFragment>;
    project: { __typename?: "Project" } & Pick<Project, "id">;
    user: { __typename?: "User" } & Pick<User, "id">;
  };

export type AuthenticationSessionResponseFragment = { __typename: "AuthenticationSessionResponse" } & Pick<
  AuthenticationSessionResponse,
  | "client"
  | "countryCodes"
  | "createdAt"
  | "updatedAt"
  | "location"
  | "ip"
  | "isCurrentSession"
  | "locationCity"
  | "locationCountryCode"
  | "locationCountry"
  | "locationRegionCode"
  | "name"
  | "operatingSystem"
  | "service"
  | "userAgent"
  | "type"
  | "browserType"
  | "lastActiveAt"
  | "id"
>;

export type BaseWebhookPayloadFragment = { __typename: "BaseWebhookPayload" } & Pick<
  BaseWebhookPayload,
  "organizationId" | "createdAt"
>;

export type CommentChildWebhookPayloadFragment = { __typename: "CommentChildWebhookPayload" } & Pick<
  CommentChildWebhookPayload,
  "id" | "documentContentId" | "initiativeUpdateId" | "issueId" | "projectUpdateId" | "userId" | "body"
>;

export type CustomerNeedChildWebhookPayloadFragment = { __typename: "CustomerNeedChildWebhookPayload" } & Pick<
  CustomerNeedChildWebhookPayload,
  "attachmentId" | "id" | "customerId" | "issueId" | "projectId"
>;

export type CustomerStatusChildWebhookPayloadFragment = { __typename: "CustomerStatusChildWebhookPayload" } & Pick<
  CustomerStatusChildWebhookPayload,
  "id" | "color" | "description" | "displayName" | "name" | "type"
>;

export type CustomerTierChildWebhookPayloadFragment = { __typename: "CustomerTierChildWebhookPayload" } & Pick<
  CustomerTierChildWebhookPayload,
  "id" | "color" | "description" | "displayName" | "name"
>;

export type CustomerChildWebhookPayloadFragment = { __typename: "CustomerChildWebhookPayload" } & Pick<
  CustomerChildWebhookPayload,
  "id" | "domains" | "externalIds" | "name"
>;

export type CycleChildWebhookPayloadFragment = { __typename: "CycleChildWebhookPayload" } & Pick<
  CycleChildWebhookPayload,
  "id" | "endsAt" | "name" | "number" | "startsAt"
>;

export type DocumentContentChildWebhookPayloadFragment = { __typename: "DocumentContentChildWebhookPayload" } & {
  document?: Maybe<{ __typename?: "DocumentChildWebhookPayload" } & DocumentChildWebhookPayloadFragment>;
  project?: Maybe<{ __typename?: "ProjectChildWebhookPayload" } & ProjectChildWebhookPayloadFragment>;
};

export type DocumentChildWebhookPayloadFragment = { __typename: "DocumentChildWebhookPayload" } & Pick<
  DocumentChildWebhookPayload,
  "id" | "initiativeId" | "projectId" | "title"
> & {
    initiative?: Maybe<{ __typename?: "InitiativeChildWebhookPayload" } & InitiativeChildWebhookPayloadFragment>;
    project?: Maybe<{ __typename?: "ProjectChildWebhookPayload" } & ProjectChildWebhookPayloadFragment>;
  };

export type ProjectMilestoneChildWebhookPayloadFragment = { __typename: "ProjectMilestoneChildWebhookPayload" } & Pick<
  ProjectMilestoneChildWebhookPayload,
  "id" | "name" | "targetDate"
>;

export type ProjectStatusChildWebhookPayloadFragment = { __typename: "ProjectStatusChildWebhookPayload" } & Pick<
  ProjectStatusChildWebhookPayload,
  "id" | "color" | "name" | "type"
>;

export type ProjectUpdateChildWebhookPayloadFragment = { __typename: "ProjectUpdateChildWebhookPayload" } & Pick<
  ProjectUpdateChildWebhookPayload,
  "id" | "userId" | "body"
> & { project: { __typename?: "ProjectChildWebhookPayload" } & ProjectChildWebhookPayloadFragment };

export type ProjectChildWebhookPayloadFragment = { __typename: "ProjectChildWebhookPayload" } & Pick<
  ProjectChildWebhookPayload,
  "id" | "url" | "name"
>;

export type TeamChildWebhookPayloadFragment = { __typename: "TeamChildWebhookPayload" } & Pick<
  TeamChildWebhookPayload,
  "id" | "key" | "name"
>;

export type UserChildWebhookPayloadFragment = { __typename: "UserChildWebhookPayload" } & Pick<
  UserChildWebhookPayload,
  "id" | "url" | "avatarUrl" | "email" | "name"
>;

export type WorkflowStateChildWebhookPayloadFragment = { __typename: "WorkflowStateChildWebhookPayload" } & Pick<
  WorkflowStateChildWebhookPayload,
  "id" | "color" | "name" | "type"
>;

export type OauthClientChildWebhookPayloadFragment = { __typename: "OauthClientChildWebhookPayload" } & Pick<
  OauthClientChildWebhookPayload,
  "id" | "name"
>;

export type ExternalUserChildWebhookPayloadFragment = { __typename: "ExternalUserChildWebhookPayload" } & Pick<
  ExternalUserChildWebhookPayload,
  "id" | "email" | "name"
>;

export type InitiativeUpdateChildWebhookPayloadFragment = { __typename: "InitiativeUpdateChildWebhookPayload" } & Pick<
  InitiativeUpdateChildWebhookPayload,
  "id" | "bodyData" | "editedAt" | "health"
>;

export type InitiativeChildWebhookPayloadFragment = { __typename: "InitiativeChildWebhookPayload" } & Pick<
  InitiativeChildWebhookPayload,
  "id" | "url" | "name"
>;

export type IntegrationChildWebhookPayloadFragment = { __typename: "IntegrationChildWebhookPayload" } & Pick<
  IntegrationChildWebhookPayload,
  "id" | "service"
>;

export type IssueLabelChildWebhookPayloadFragment = { __typename: "IssueLabelChildWebhookPayload" } & Pick<
  IssueLabelChildWebhookPayload,
  "id" | "color" | "name" | "parentId"
>;

export type IssueWithDescriptionChildWebhookPayloadFragment = {
  __typename: "IssueWithDescriptionChildWebhookPayload";
} & Pick<IssueWithDescriptionChildWebhookPayload, "id" | "teamId" | "url" | "description" | "identifier" | "title"> & {
    team: { __typename?: "TeamChildWebhookPayload" } & TeamChildWebhookPayloadFragment;
  };

export type IssueChildWebhookPayloadFragment = { __typename: "IssueChildWebhookPayload" } & Pick<
  IssueChildWebhookPayload,
  "id" | "teamId" | "url" | "identifier" | "title"
> & { team: { __typename?: "TeamChildWebhookPayload" } & TeamChildWebhookPayloadFragment };

export type ArchiveResponseFragment = { __typename: "ArchiveResponse" } & Pick<
  ArchiveResponse,
  "archive" | "totalCount" | "databaseVersion" | "includesDependencies"
>;

export type AgentActivityPromptContentFragment = { __typename: "AgentActivityPromptContent" } & Pick<
  AgentActivityPromptContent,
  "body" | "type"
>;

export type AgentActivityResponseContentFragment = { __typename: "AgentActivityResponseContent" } & Pick<
  AgentActivityResponseContent,
  "body" | "type"
>;

export type AgentActivityThoughtContentFragment = { __typename: "AgentActivityThoughtContent" } & Pick<
  AgentActivityThoughtContent,
  "body" | "type"
>;

export type AgentActivityActionContentFragment = { __typename: "AgentActivityActionContent" } & Pick<
  AgentActivityActionContent,
  "action" | "parameter" | "result" | "type"
>;

export type AgentActivityElicitationContentFragment = { __typename: "AgentActivityElicitationContent" } & Pick<
  AgentActivityElicitationContent,
  "body" | "type"
>;

export type AgentActivityErrorContentFragment = { __typename: "AgentActivityErrorContent" } & Pick<
  AgentActivityErrorContent,
  "body" | "type"
>;

export type TeamMembershipFragment = { __typename: "TeamMembership" } & Pick<
  TeamMembership,
  "updatedAt" | "sortOrder" | "archivedAt" | "createdAt" | "id" | "owner"
> & { team: { __typename?: "Team" } & Pick<Team, "id">; user: { __typename?: "User" } & Pick<User, "id"> };

export type OrganizationDomainFragment = { __typename: "OrganizationDomain" } & Pick<
  OrganizationDomain,
  | "name"
  | "verificationEmail"
  | "verified"
  | "disableOrganizationCreation"
  | "updatedAt"
  | "archivedAt"
  | "createdAt"
  | "id"
  | "authType"
  | "claimed"
> & {
    identityProvider?: Maybe<{ __typename?: "IdentityProvider" } & IdentityProviderFragment>;
    creator?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
  };

export type AuthorizingUserFragment = { __typename: "AuthorizingUser" } & Pick<AuthorizingUser, "displayName" | "name">;

export type WebhookFailureEventFragment = { __typename: "WebhookFailureEvent" } & Pick<
  WebhookFailureEvent,
  "responseOrError" | "httpStatus" | "url" | "createdAt" | "executionId" | "id"
> & { webhook: { __typename?: "Webhook" } & Pick<Webhook, "id"> };

export type OtherNotificationWebhookPayloadFragment = { __typename: "OtherNotificationWebhookPayload" } & Pick<
  OtherNotificationWebhookPayload,
  | "actorId"
  | "commentId"
  | "documentId"
  | "id"
  | "externalUserActorId"
  | "issueId"
  | "parentCommentId"
  | "projectId"
  | "projectUpdateId"
  | "userId"
  | "reactionEmoji"
  | "archivedAt"
  | "createdAt"
  | "updatedAt"
  | "type"
> & {
    actor?: Maybe<{ __typename?: "UserChildWebhookPayload" } & UserChildWebhookPayloadFragment>;
    comment?: Maybe<{ __typename?: "CommentChildWebhookPayload" } & CommentChildWebhookPayloadFragment>;
    document?: Maybe<{ __typename?: "DocumentChildWebhookPayload" } & DocumentChildWebhookPayloadFragment>;
    issue?: Maybe<
      { __typename?: "IssueWithDescriptionChildWebhookPayload" } & IssueWithDescriptionChildWebhookPayloadFragment
    >;
    parentComment?: Maybe<{ __typename?: "CommentChildWebhookPayload" } & CommentChildWebhookPayloadFragment>;
    project?: Maybe<{ __typename?: "ProjectChildWebhookPayload" } & ProjectChildWebhookPayloadFragment>;
    projectUpdate?: Maybe<
      { __typename?: "ProjectUpdateChildWebhookPayload" } & ProjectUpdateChildWebhookPayloadFragment
    >;
  };

export type ExternalEntityInfoFragment = { __typename: "ExternalEntityInfo" } & Pick<
  ExternalEntityInfo,
  "id" | "service"
> & {
    metadata?: Maybe<
      | ({ __typename?: "ExternalEntityInfoGithubMetadata" } & ExternalEntityInfoGithubMetadataFragment)
      | ({ __typename?: "ExternalEntityInfoJiraMetadata" } & ExternalEntityInfoJiraMetadataFragment)
      | ({ __typename?: "ExternalEntitySlackMetadata" } & ExternalEntitySlackMetadataFragment)
    >;
  };

export type AttachmentFragment = { __typename: "Attachment" } & Pick<
  Attachment,
  | "sourceType"
  | "subtitle"
  | "title"
  | "metadata"
  | "groupBySource"
  | "source"
  | "url"
  | "bodyData"
  | "updatedAt"
  | "archivedAt"
  | "createdAt"
  | "id"
> & {
    creator?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    issue: { __typename?: "Issue" } & Pick<Issue, "id">;
    originalIssue?: Maybe<{ __typename?: "Issue" } & Pick<Issue, "id">>;
    externalUserCreator?: Maybe<{ __typename?: "ExternalUser" } & Pick<ExternalUser, "id">>;
  };

export type IssueRelationHistoryPayloadFragment = { __typename: "IssueRelationHistoryPayload" } & Pick<
  IssueRelationHistoryPayload,
  "identifier" | "type"
>;

export type InitiativeToProjectFragment = { __typename: "InitiativeToProject" } & Pick<
  InitiativeToProject,
  "updatedAt" | "sortOrder" | "archivedAt" | "createdAt" | "id"
> & {
    initiative: { __typename?: "Initiative" } & Pick<Initiative, "id">;
    project: { __typename?: "Project" } & Pick<Project, "id">;
  };

export type IntegrationTemplateFragment = { __typename: "IntegrationTemplate" } & Pick<
  IntegrationTemplate,
  "foreignEntityId" | "updatedAt" | "archivedAt" | "createdAt" | "id"
> & {
    integration: { __typename?: "Integration" } & Pick<Integration, "id">;
    template: { __typename?: "Template" } & Pick<Template, "id">;
  };

export type IssueLabelFragment = { __typename: "IssueLabel" } & Pick<
  IssueLabel,
  "lastAppliedAt" | "color" | "description" | "name" | "updatedAt" | "archivedAt" | "createdAt" | "id" | "isGroup"
> & {
    inheritedFrom?: Maybe<{ __typename?: "IssueLabel" } & Pick<IssueLabel, "id">>;
    parent?: Maybe<{ __typename?: "IssueLabel" } & Pick<IssueLabel, "id">>;
    team?: Maybe<{ __typename?: "Team" } & Pick<Team, "id">>;
    creator?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
  };

export type ProjectLabelFragment = { __typename: "ProjectLabel" } & Pick<
  ProjectLabel,
  "lastAppliedAt" | "color" | "description" | "name" | "updatedAt" | "archivedAt" | "createdAt" | "id" | "isGroup"
> & {
    parent?: Maybe<{ __typename?: "ProjectLabel" } & Pick<ProjectLabel, "id">>;
    creator?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
  };

export type ExternalEntityInfoGithubMetadataFragment = { __typename: "ExternalEntityInfoGithubMetadata" } & Pick<
  ExternalEntityInfoGithubMetadata,
  "number" | "owner" | "repo"
>;

export type ExternalEntityInfoJiraMetadataFragment = { __typename: "ExternalEntityInfoJiraMetadata" } & Pick<
  ExternalEntityInfoJiraMetadata,
  "issueTypeId" | "projectId" | "issueKey"
>;

export type ExternalEntitySlackMetadataFragment = { __typename: "ExternalEntitySlackMetadata" } & Pick<
  ExternalEntitySlackMetadata,
  "messageUrl" | "channelId" | "channelName" | "isFromSlack"
>;

type NotificationSubscription_CustomViewNotificationSubscription_Fragment = {
  __typename: "CustomViewNotificationSubscription";
} & Pick<
  CustomViewNotificationSubscription,
  "updatedAt" | "archivedAt" | "createdAt" | "userContextViewType" | "contextViewType" | "id" | "active"
> & {
    customView: { __typename?: "CustomView" } & Pick<CustomView, "id">;
    cycle?: Maybe<{ __typename?: "Cycle" } & Pick<Cycle, "id">>;
    initiative?: Maybe<{ __typename?: "Initiative" } & Pick<Initiative, "id">>;
    label?: Maybe<{ __typename?: "IssueLabel" } & Pick<IssueLabel, "id">>;
    project?: Maybe<{ __typename?: "Project" } & Pick<Project, "id">>;
    customer?: Maybe<{ __typename?: "Customer" } & Pick<Customer, "id">>;
    team?: Maybe<{ __typename?: "Team" } & Pick<Team, "id">>;
    subscriber: { __typename?: "User" } & Pick<User, "id">;
    user?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
  };

type NotificationSubscription_CustomerNotificationSubscription_Fragment = {
  __typename: "CustomerNotificationSubscription";
} & Pick<
  CustomerNotificationSubscription,
  "updatedAt" | "archivedAt" | "createdAt" | "userContextViewType" | "contextViewType" | "id" | "active"
> & {
    customView?: Maybe<{ __typename?: "CustomView" } & Pick<CustomView, "id">>;
    cycle?: Maybe<{ __typename?: "Cycle" } & Pick<Cycle, "id">>;
    initiative?: Maybe<{ __typename?: "Initiative" } & Pick<Initiative, "id">>;
    label?: Maybe<{ __typename?: "IssueLabel" } & Pick<IssueLabel, "id">>;
    project?: Maybe<{ __typename?: "Project" } & Pick<Project, "id">>;
    customer: { __typename?: "Customer" } & Pick<Customer, "id">;
    team?: Maybe<{ __typename?: "Team" } & Pick<Team, "id">>;
    subscriber: { __typename?: "User" } & Pick<User, "id">;
    user?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
  };

type NotificationSubscription_CycleNotificationSubscription_Fragment = {
  __typename: "CycleNotificationSubscription";
} & Pick<
  CycleNotificationSubscription,
  "updatedAt" | "archivedAt" | "createdAt" | "userContextViewType" | "contextViewType" | "id" | "active"
> & {
    customView?: Maybe<{ __typename?: "CustomView" } & Pick<CustomView, "id">>;
    cycle: { __typename?: "Cycle" } & Pick<Cycle, "id">;
    initiative?: Maybe<{ __typename?: "Initiative" } & Pick<Initiative, "id">>;
    label?: Maybe<{ __typename?: "IssueLabel" } & Pick<IssueLabel, "id">>;
    project?: Maybe<{ __typename?: "Project" } & Pick<Project, "id">>;
    customer?: Maybe<{ __typename?: "Customer" } & Pick<Customer, "id">>;
    team?: Maybe<{ __typename?: "Team" } & Pick<Team, "id">>;
    subscriber: { __typename?: "User" } & Pick<User, "id">;
    user?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
  };

type NotificationSubscription_InitiativeNotificationSubscription_Fragment = {
  __typename: "InitiativeNotificationSubscription";
} & Pick<
  InitiativeNotificationSubscription,
  "updatedAt" | "archivedAt" | "createdAt" | "userContextViewType" | "contextViewType" | "id" | "active"
> & {
    customView?: Maybe<{ __typename?: "CustomView" } & Pick<CustomView, "id">>;
    cycle?: Maybe<{ __typename?: "Cycle" } & Pick<Cycle, "id">>;
    initiative: { __typename?: "Initiative" } & Pick<Initiative, "id">;
    label?: Maybe<{ __typename?: "IssueLabel" } & Pick<IssueLabel, "id">>;
    project?: Maybe<{ __typename?: "Project" } & Pick<Project, "id">>;
    customer?: Maybe<{ __typename?: "Customer" } & Pick<Customer, "id">>;
    team?: Maybe<{ __typename?: "Team" } & Pick<Team, "id">>;
    subscriber: { __typename?: "User" } & Pick<User, "id">;
    user?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
  };

type NotificationSubscription_LabelNotificationSubscription_Fragment = {
  __typename: "LabelNotificationSubscription";
} & Pick<
  LabelNotificationSubscription,
  "updatedAt" | "archivedAt" | "createdAt" | "userContextViewType" | "contextViewType" | "id" | "active"
> & {
    customView?: Maybe<{ __typename?: "CustomView" } & Pick<CustomView, "id">>;
    cycle?: Maybe<{ __typename?: "Cycle" } & Pick<Cycle, "id">>;
    initiative?: Maybe<{ __typename?: "Initiative" } & Pick<Initiative, "id">>;
    label: { __typename?: "IssueLabel" } & Pick<IssueLabel, "id">;
    project?: Maybe<{ __typename?: "Project" } & Pick<Project, "id">>;
    customer?: Maybe<{ __typename?: "Customer" } & Pick<Customer, "id">>;
    team?: Maybe<{ __typename?: "Team" } & Pick<Team, "id">>;
    subscriber: { __typename?: "User" } & Pick<User, "id">;
    user?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
  };

type NotificationSubscription_ProjectNotificationSubscription_Fragment = {
  __typename: "ProjectNotificationSubscription";
} & Pick<
  ProjectNotificationSubscription,
  "updatedAt" | "archivedAt" | "createdAt" | "userContextViewType" | "contextViewType" | "id" | "active"
> & {
    customView?: Maybe<{ __typename?: "CustomView" } & Pick<CustomView, "id">>;
    cycle?: Maybe<{ __typename?: "Cycle" } & Pick<Cycle, "id">>;
    initiative?: Maybe<{ __typename?: "Initiative" } & Pick<Initiative, "id">>;
    label?: Maybe<{ __typename?: "IssueLabel" } & Pick<IssueLabel, "id">>;
    project: { __typename?: "Project" } & Pick<Project, "id">;
    customer?: Maybe<{ __typename?: "Customer" } & Pick<Customer, "id">>;
    team?: Maybe<{ __typename?: "Team" } & Pick<Team, "id">>;
    subscriber: { __typename?: "User" } & Pick<User, "id">;
    user?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
  };

type NotificationSubscription_TeamNotificationSubscription_Fragment = {
  __typename: "TeamNotificationSubscription";
} & Pick<
  TeamNotificationSubscription,
  "updatedAt" | "archivedAt" | "createdAt" | "userContextViewType" | "contextViewType" | "id" | "active"
> & {
    customView?: Maybe<{ __typename?: "CustomView" } & Pick<CustomView, "id">>;
    cycle?: Maybe<{ __typename?: "Cycle" } & Pick<Cycle, "id">>;
    initiative?: Maybe<{ __typename?: "Initiative" } & Pick<Initiative, "id">>;
    label?: Maybe<{ __typename?: "IssueLabel" } & Pick<IssueLabel, "id">>;
    project?: Maybe<{ __typename?: "Project" } & Pick<Project, "id">>;
    customer?: Maybe<{ __typename?: "Customer" } & Pick<Customer, "id">>;
    team: { __typename?: "Team" } & Pick<Team, "id">;
    subscriber: { __typename?: "User" } & Pick<User, "id">;
    user?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
  };

type NotificationSubscription_UserNotificationSubscription_Fragment = {
  __typename: "UserNotificationSubscription";
} & Pick<
  UserNotificationSubscription,
  "updatedAt" | "archivedAt" | "createdAt" | "userContextViewType" | "contextViewType" | "id" | "active"
> & {
    customView?: Maybe<{ __typename?: "CustomView" } & Pick<CustomView, "id">>;
    cycle?: Maybe<{ __typename?: "Cycle" } & Pick<Cycle, "id">>;
    initiative?: Maybe<{ __typename?: "Initiative" } & Pick<Initiative, "id">>;
    label?: Maybe<{ __typename?: "IssueLabel" } & Pick<IssueLabel, "id">>;
    project?: Maybe<{ __typename?: "Project" } & Pick<Project, "id">>;
    customer?: Maybe<{ __typename?: "Customer" } & Pick<Customer, "id">>;
    team?: Maybe<{ __typename?: "Team" } & Pick<Team, "id">>;
    subscriber: { __typename?: "User" } & Pick<User, "id">;
    user: { __typename?: "User" } & Pick<User, "id">;
  };

export type NotificationSubscriptionFragment =
  | NotificationSubscription_CustomViewNotificationSubscription_Fragment
  | NotificationSubscription_CustomerNotificationSubscription_Fragment
  | NotificationSubscription_CycleNotificationSubscription_Fragment
  | NotificationSubscription_InitiativeNotificationSubscription_Fragment
  | NotificationSubscription_LabelNotificationSubscription_Fragment
  | NotificationSubscription_ProjectNotificationSubscription_Fragment
  | NotificationSubscription_TeamNotificationSubscription_Fragment
  | NotificationSubscription_UserNotificationSubscription_Fragment;

export type SlackChannelNameMappingFragment = { __typename: "SlackChannelNameMapping" } & Pick<
  SlackChannelNameMapping,
  | "id"
  | "name"
  | "autoCreateTemplateId"
  | "autoCreateOnBotMention"
  | "postCancellationUpdates"
  | "postCompletionUpdates"
  | "postAcceptedFromTriageUpdates"
  | "botAdded"
  | "isPrivate"
  | "isShared"
  | "aiTitles"
  | "autoCreateOnMessage"
  | "autoCreateOnEmoji"
> & { teams: Array<{ __typename?: "SlackAsksTeamSettings" } & SlackAsksTeamSettingsFragment> };

export type UploadFileFragment = { __typename: "UploadFile" } & Pick<
  UploadFile,
  "assetUrl" | "contentType" | "filename" | "uploadUrl" | "size" | "metaData"
> & { headers: Array<{ __typename?: "UploadFileHeader" } & UploadFileHeaderFragment> };

export type OAuthAppWebhookPayloadFragment = { __typename: "OAuthAppWebhookPayload" } & Pick<
  OAuthAppWebhookPayload,
  "organizationId" | "oauthClientId" | "createdAt" | "action" | "type"
>;

export type CommentWebhookPayloadFragment = { __typename: "CommentWebhookPayload" } & Pick<
  CommentWebhookPayload,
  | "resolvingCommentId"
  | "documentContentId"
  | "id"
  | "externalUserId"
  | "initiativeUpdateId"
  | "issueId"
  | "parentId"
  | "postId"
  | "projectUpdateId"
  | "userId"
  | "resolvingUserId"
  | "body"
  | "botActor"
  | "syncedWith"
  | "quotedText"
  | "reactionData"
  | "archivedAt"
  | "createdAt"
  | "updatedAt"
  | "editedAt"
  | "resolvedAt"
> & {
    documentContent?: Maybe<
      { __typename?: "DocumentContentChildWebhookPayload" } & DocumentContentChildWebhookPayloadFragment
    >;
    externalUser?: Maybe<{ __typename?: "ExternalUserChildWebhookPayload" } & ExternalUserChildWebhookPayloadFragment>;
    initiativeUpdate?: Maybe<
      { __typename?: "InitiativeUpdateChildWebhookPayload" } & InitiativeUpdateChildWebhookPayloadFragment
    >;
    issue?: Maybe<{ __typename?: "IssueChildWebhookPayload" } & IssueChildWebhookPayloadFragment>;
    parent?: Maybe<{ __typename?: "CommentChildWebhookPayload" } & CommentChildWebhookPayloadFragment>;
    projectUpdate?: Maybe<
      { __typename?: "ProjectUpdateChildWebhookPayload" } & ProjectUpdateChildWebhookPayloadFragment
    >;
    user?: Maybe<{ __typename?: "UserChildWebhookPayload" } & UserChildWebhookPayloadFragment>;
  };

export type CustomerNeedWebhookPayloadFragment = { __typename: "CustomerNeedWebhookPayload" } & Pick<
  CustomerNeedWebhookPayload,
  | "attachmentId"
  | "commentId"
  | "creatorId"
  | "customerId"
  | "id"
  | "issueId"
  | "projectAttachmentId"
  | "projectId"
  | "body"
  | "originalIssueId"
  | "priority"
  | "archivedAt"
  | "createdAt"
  | "updatedAt"
> & {
    attachment?: Maybe<{ __typename?: "AttachmentWebhookPayload" } & AttachmentWebhookPayloadFragment>;
    customer?: Maybe<{ __typename?: "CustomerChildWebhookPayload" } & CustomerChildWebhookPayloadFragment>;
    issue?: Maybe<{ __typename?: "IssueChildWebhookPayload" } & IssueChildWebhookPayloadFragment>;
    project?: Maybe<{ __typename?: "ProjectChildWebhookPayload" } & ProjectChildWebhookPayloadFragment>;
  };

export type CustomerWebhookPayloadFragment = { __typename: "CustomerWebhookPayload" } & Pick<
  CustomerWebhookPayload,
  | "slackChannelId"
  | "statusId"
  | "tierId"
  | "id"
  | "mainSourceId"
  | "ownerId"
  | "revenue"
  | "approximateNeedCount"
  | "logoUrl"
  | "slugId"
  | "domains"
  | "externalIds"
  | "name"
  | "size"
  | "archivedAt"
  | "createdAt"
  | "updatedAt"
> & {
    status?: Maybe<{ __typename?: "CustomerStatusChildWebhookPayload" } & CustomerStatusChildWebhookPayloadFragment>;
    tier?: Maybe<{ __typename?: "CustomerTierChildWebhookPayload" } & CustomerTierChildWebhookPayloadFragment>;
  };

export type CycleWebhookPayloadFragment = { __typename: "CycleWebhookPayload" } & Pick<
  CycleWebhookPayload,
  | "inheritedFromId"
  | "id"
  | "uncompletedIssuesUponCloseIds"
  | "completedAt"
  | "description"
  | "endsAt"
  | "name"
  | "completedScopeHistory"
  | "completedIssueCountHistory"
  | "inProgressScopeHistory"
  | "number"
  | "startsAt"
  | "teamId"
  | "autoArchivedAt"
  | "archivedAt"
  | "createdAt"
  | "updatedAt"
  | "scopeHistory"
  | "issueCountHistory"
>;

export type DocumentWebhookPayloadFragment = { __typename: "DocumentWebhookPayload" } & Pick<
  DocumentWebhookPayload,
  | "trashed"
  | "id"
  | "initiativeId"
  | "lastAppliedTemplateId"
  | "projectId"
  | "resourceFolderId"
  | "creatorId"
  | "updatedById"
  | "subscriberIds"
  | "color"
  | "content"
  | "description"
  | "slugId"
  | "icon"
  | "sortOrder"
  | "hiddenAt"
  | "archivedAt"
  | "createdAt"
  | "updatedAt"
  | "title"
>;

export type ProjectUpdateWebhookPayloadFragment = { __typename: "ProjectUpdateWebhookPayload" } & Pick<
  ProjectUpdateWebhookPayload,
  | "id"
  | "url"
  | "bodyData"
  | "body"
  | "editedAt"
  | "health"
  | "projectId"
  | "reactionData"
  | "slugId"
  | "archivedAt"
  | "createdAt"
  | "updatedAt"
  | "userId"
> & {
    project: { __typename?: "ProjectChildWebhookPayload" } & ProjectChildWebhookPayloadFragment;
    user: { __typename?: "UserChildWebhookPayload" } & UserChildWebhookPayloadFragment;
  };

export type ProjectWebhookPayloadFragment = { __typename: "ProjectWebhookPayload" } & Pick<
  ProjectWebhookPayload,
  | "labelIds"
  | "memberIds"
  | "teamIds"
  | "id"
  | "convertedFromIssueId"
  | "lastAppliedTemplateId"
  | "lastUpdateId"
  | "leadId"
  | "statusId"
  | "creatorId"
  | "url"
  | "autoArchivedAt"
  | "canceledAt"
  | "completedAt"
  | "content"
  | "documentContentId"
  | "startDate"
  | "health"
  | "icon"
  | "completedScopeHistory"
  | "completedIssueCountHistory"
  | "inProgressScopeHistory"
  | "priority"
  | "color"
  | "description"
  | "name"
  | "slugId"
  | "startDateResolution"
  | "targetDateResolution"
  | "prioritySortOrder"
  | "sortOrder"
  | "targetDate"
  | "archivedAt"
  | "createdAt"
  | "updatedAt"
  | "healthUpdatedAt"
  | "projectUpdateRemindersPausedUntilAt"
  | "startedAt"
  | "scopeHistory"
  | "issueCountHistory"
  | "trashed"
> & {
    initiatives?: Maybe<
      Array<{ __typename?: "InitiativeChildWebhookPayload" } & InitiativeChildWebhookPayloadFragment>
    >;
    milestones?: Maybe<
      Array<{ __typename?: "ProjectMilestoneChildWebhookPayload" } & ProjectMilestoneChildWebhookPayloadFragment>
    >;
    lead?: Maybe<{ __typename?: "UserChildWebhookPayload" } & UserChildWebhookPayloadFragment>;
    status?: Maybe<{ __typename?: "ProjectStatusChildWebhookPayload" } & ProjectStatusChildWebhookPayloadFragment>;
  };

export type ReactionWebhookPayloadFragment = { __typename: "ReactionWebhookPayload" } & Pick<
  ReactionWebhookPayload,
  | "emoji"
  | "commentId"
  | "id"
  | "externalUserId"
  | "initiativeUpdateId"
  | "issueId"
  | "postId"
  | "projectUpdateId"
  | "userId"
  | "archivedAt"
  | "createdAt"
  | "updatedAt"
> & {
    comment?: Maybe<{ __typename?: "CommentChildWebhookPayload" } & CommentChildWebhookPayloadFragment>;
    issue?: Maybe<{ __typename?: "IssueChildWebhookPayload" } & IssueChildWebhookPayloadFragment>;
    projectUpdate?: Maybe<
      { __typename?: "ProjectUpdateChildWebhookPayload" } & ProjectUpdateChildWebhookPayloadFragment
    >;
    user?: Maybe<{ __typename?: "UserChildWebhookPayload" } & UserChildWebhookPayloadFragment>;
  };

export type IssueStatusChangedNotificationWebhookPayloadFragment = {
  __typename: "IssueStatusChangedNotificationWebhookPayload";
} & Pick<
  IssueStatusChangedNotificationWebhookPayload,
  "type" | "actorId" | "id" | "externalUserActorId" | "issueId" | "userId" | "archivedAt" | "createdAt" | "updatedAt"
> & {
    actor?: Maybe<{ __typename?: "UserChildWebhookPayload" } & UserChildWebhookPayloadFragment>;
    issue: { __typename?: "IssueWithDescriptionChildWebhookPayload" } & IssueWithDescriptionChildWebhookPayloadFragment;
  };

export type UserWebhookPayloadFragment = { __typename: "UserWebhookPayload" } & Pick<
  UserWebhookPayload,
  | "id"
  | "url"
  | "avatarUrl"
  | "description"
  | "displayName"
  | "email"
  | "timezone"
  | "name"
  | "disableReason"
  | "archivedAt"
  | "createdAt"
  | "updatedAt"
  | "guest"
  | "active"
  | "admin"
  | "app"
>;

export type AgentSessionEventWebhookPayloadFragment = { __typename: "AgentSessionEventWebhookPayload" } & Pick<
  AgentSessionEventWebhookPayload,
  "oauthClientId" | "appUserId" | "organizationId" | "createdAt" | "action" | "type"
> & {
    agentActivity?: Maybe<{ __typename?: "AgentActivityWebhookPayload" } & AgentActivityWebhookPayloadFragment>;
    agentSession: { __typename?: "AgentSessionWebhookPayload" } & AgentSessionWebhookPayloadFragment;
    previousComments?: Maybe<Array<{ __typename?: "CommentChildWebhookPayload" } & CommentChildWebhookPayloadFragment>>;
  };

export type AgentActivityWebhookPayloadFragment = { __typename: "AgentActivityWebhookPayload" } & Pick<
  AgentActivityWebhookPayload,
  "signal" | "agentSessionId" | "id" | "userId" | "content" | "archivedAt" | "createdAt" | "updatedAt"
>;

export type AgentSessionWebhookPayloadFragment = { __typename: "AgentSessionWebhookPayload" } & Pick<
  AgentSessionWebhookPayload,
  | "summary"
  | "sourceMetadata"
  | "appUserId"
  | "commentId"
  | "id"
  | "issueId"
  | "organizationId"
  | "creatorId"
  | "status"
  | "archivedAt"
  | "createdAt"
  | "updatedAt"
  | "endedAt"
  | "startedAt"
  | "type"
> & {
    comment?: Maybe<{ __typename?: "CommentChildWebhookPayload" } & CommentChildWebhookPayloadFragment>;
    issue?: Maybe<
      { __typename?: "IssueWithDescriptionChildWebhookPayload" } & IssueWithDescriptionChildWebhookPayloadFragment
    >;
    creator: { __typename?: "UserChildWebhookPayload" } & UserChildWebhookPayloadFragment;
  };

export type AttachmentWebhookPayloadFragment = { __typename: "AttachmentWebhookPayload" } & Pick<
  AttachmentWebhookPayload,
  | "metadata"
  | "source"
  | "subtitle"
  | "creatorId"
  | "id"
  | "originalIssueId"
  | "issueId"
  | "externalUserCreatorId"
  | "url"
  | "sourceType"
  | "archivedAt"
  | "createdAt"
  | "updatedAt"
  | "title"
  | "groupBySource"
>;

export type AuditEntryWebhookPayloadFragment = { __typename: "AuditEntryWebhookPayload" } & Pick<
  AuditEntryWebhookPayload,
  | "requestInformation"
  | "metadata"
  | "countryCode"
  | "ip"
  | "id"
  | "organizationId"
  | "actorId"
  | "archivedAt"
  | "createdAt"
  | "updatedAt"
  | "type"
>;

export type InitiativeUpdateWebhookPayloadFragment = { __typename: "InitiativeUpdateWebhookPayload" } & Pick<
  InitiativeUpdateWebhookPayload,
  | "id"
  | "url"
  | "bodyData"
  | "body"
  | "editedAt"
  | "health"
  | "initiativeId"
  | "reactionData"
  | "slugId"
  | "archivedAt"
  | "createdAt"
  | "updatedAt"
  | "userId"
> & {
    initiative: { __typename?: "InitiativeChildWebhookPayload" } & InitiativeChildWebhookPayloadFragment;
    user: { __typename?: "UserChildWebhookPayload" } & UserChildWebhookPayloadFragment;
  };

export type InitiativeWebhookPayloadFragment = { __typename: "InitiativeWebhookPayload" } & Pick<
  InitiativeWebhookPayload,
  | "id"
  | "lastUpdateId"
  | "organizationId"
  | "creatorId"
  | "ownerId"
  | "url"
  | "color"
  | "status"
  | "updateRemindersDay"
  | "description"
  | "updateReminderFrequencyInWeeks"
  | "updateReminderFrequency"
  | "health"
  | "updateRemindersHour"
  | "icon"
  | "name"
  | "targetDateResolution"
  | "frequencyResolution"
  | "sortOrder"
  | "targetDate"
  | "archivedAt"
  | "createdAt"
  | "updatedAt"
  | "slugId"
  | "healthUpdatedAt"
  | "completedAt"
  | "startedAt"
  | "trashed"
> & {
    lastUpdate?: Maybe<
      { __typename?: "InitiativeUpdateChildWebhookPayload" } & InitiativeUpdateChildWebhookPayloadFragment
    >;
    parentInitiative?: Maybe<{ __typename?: "InitiativeChildWebhookPayload" } & InitiativeChildWebhookPayloadFragment>;
    projects?: Maybe<Array<{ __typename?: "ProjectChildWebhookPayload" } & ProjectChildWebhookPayloadFragment>>;
    subInitiatives?: Maybe<
      Array<{ __typename?: "InitiativeChildWebhookPayload" } & InitiativeChildWebhookPayloadFragment>
    >;
    creator?: Maybe<{ __typename?: "UserChildWebhookPayload" } & UserChildWebhookPayloadFragment>;
    owner?: Maybe<{ __typename?: "UserChildWebhookPayload" } & UserChildWebhookPayloadFragment>;
  };

export type IssueAssignedToYouNotificationWebhookPayloadFragment = {
  __typename: "IssueAssignedToYouNotificationWebhookPayload";
} & Pick<
  IssueAssignedToYouNotificationWebhookPayload,
  "type" | "actorId" | "id" | "externalUserActorId" | "issueId" | "userId" | "archivedAt" | "createdAt" | "updatedAt"
> & {
    actor?: Maybe<{ __typename?: "UserChildWebhookPayload" } & UserChildWebhookPayloadFragment>;
    issue: { __typename?: "IssueWithDescriptionChildWebhookPayload" } & IssueWithDescriptionChildWebhookPayloadFragment;
  };

export type IssueCommentMentionNotificationWebhookPayloadFragment = {
  __typename: "IssueCommentMentionNotificationWebhookPayload";
} & Pick<
  IssueCommentMentionNotificationWebhookPayload,
  | "type"
  | "actorId"
  | "commentId"
  | "id"
  | "externalUserActorId"
  | "issueId"
  | "parentCommentId"
  | "userId"
  | "archivedAt"
  | "createdAt"
  | "updatedAt"
> & {
    actor?: Maybe<{ __typename?: "UserChildWebhookPayload" } & UserChildWebhookPayloadFragment>;
    comment: { __typename?: "CommentChildWebhookPayload" } & CommentChildWebhookPayloadFragment;
    issue: { __typename?: "IssueWithDescriptionChildWebhookPayload" } & IssueWithDescriptionChildWebhookPayloadFragment;
    parentComment?: Maybe<{ __typename?: "CommentChildWebhookPayload" } & CommentChildWebhookPayloadFragment>;
  };

export type IssueCommentReactionNotificationWebhookPayloadFragment = {
  __typename: "IssueCommentReactionNotificationWebhookPayload";
} & Pick<
  IssueCommentReactionNotificationWebhookPayload,
  | "type"
  | "actorId"
  | "commentId"
  | "id"
  | "externalUserActorId"
  | "issueId"
  | "parentCommentId"
  | "userId"
  | "reactionEmoji"
  | "archivedAt"
  | "createdAt"
  | "updatedAt"
> & {
    actor?: Maybe<{ __typename?: "UserChildWebhookPayload" } & UserChildWebhookPayloadFragment>;
    comment: { __typename?: "CommentChildWebhookPayload" } & CommentChildWebhookPayloadFragment;
    issue: { __typename?: "IssueWithDescriptionChildWebhookPayload" } & IssueWithDescriptionChildWebhookPayloadFragment;
    parentComment?: Maybe<{ __typename?: "CommentChildWebhookPayload" } & CommentChildWebhookPayloadFragment>;
  };

export type IssueEmojiReactionNotificationWebhookPayloadFragment = {
  __typename: "IssueEmojiReactionNotificationWebhookPayload";
} & Pick<
  IssueEmojiReactionNotificationWebhookPayload,
  | "type"
  | "actorId"
  | "id"
  | "externalUserActorId"
  | "issueId"
  | "userId"
  | "reactionEmoji"
  | "archivedAt"
  | "createdAt"
  | "updatedAt"
> & {
    actor?: Maybe<{ __typename?: "UserChildWebhookPayload" } & UserChildWebhookPayloadFragment>;
    issue: { __typename?: "IssueWithDescriptionChildWebhookPayload" } & IssueWithDescriptionChildWebhookPayloadFragment;
  };

export type IssueLabelWebhookPayloadFragment = { __typename: "IssueLabelWebhookPayload" } & Pick<
  IssueLabelWebhookPayload,
  | "id"
  | "color"
  | "creatorId"
  | "description"
  | "name"
  | "inheritedFromId"
  | "parentId"
  | "teamId"
  | "archivedAt"
  | "createdAt"
  | "updatedAt"
  | "isGroup"
>;

export type IssueMentionNotificationWebhookPayloadFragment = {
  __typename: "IssueMentionNotificationWebhookPayload";
} & Pick<
  IssueMentionNotificationWebhookPayload,
  "type" | "actorId" | "id" | "externalUserActorId" | "issueId" | "userId" | "archivedAt" | "createdAt" | "updatedAt"
> & {
    actor?: Maybe<{ __typename?: "UserChildWebhookPayload" } & UserChildWebhookPayloadFragment>;
    issue: { __typename?: "IssueWithDescriptionChildWebhookPayload" } & IssueWithDescriptionChildWebhookPayloadFragment;
  };

export type IssueNewCommentNotificationWebhookPayloadFragment = {
  __typename: "IssueNewCommentNotificationWebhookPayload";
} & Pick<
  IssueNewCommentNotificationWebhookPayload,
  | "type"
  | "actorId"
  | "commentId"
  | "id"
  | "externalUserActorId"
  | "issueId"
  | "parentCommentId"
  | "userId"
  | "archivedAt"
  | "createdAt"
  | "updatedAt"
> & {
    actor?: Maybe<{ __typename?: "UserChildWebhookPayload" } & UserChildWebhookPayloadFragment>;
    comment: { __typename?: "CommentChildWebhookPayload" } & CommentChildWebhookPayloadFragment;
    issue: { __typename?: "IssueWithDescriptionChildWebhookPayload" } & IssueWithDescriptionChildWebhookPayloadFragment;
    parentComment?: Maybe<{ __typename?: "CommentChildWebhookPayload" } & CommentChildWebhookPayloadFragment>;
  };

export type IssueUnassignedFromYouNotificationWebhookPayloadFragment = {
  __typename: "IssueUnassignedFromYouNotificationWebhookPayload";
} & Pick<
  IssueUnassignedFromYouNotificationWebhookPayload,
  "type" | "actorId" | "id" | "externalUserActorId" | "issueId" | "userId" | "archivedAt" | "createdAt" | "updatedAt"
> & {
    actor?: Maybe<{ __typename?: "UserChildWebhookPayload" } & UserChildWebhookPayloadFragment>;
    issue: { __typename?: "IssueWithDescriptionChildWebhookPayload" } & IssueWithDescriptionChildWebhookPayloadFragment;
  };

export type IssueWebhookPayloadFragment = { __typename: "IssueWebhookPayload" } & Pick<
  IssueWebhookPayload,
  | "trashed"
  | "labelIds"
  | "integrationSourceType"
  | "previousIdentifiers"
  | "delegateId"
  | "cycleId"
  | "id"
  | "externalUserCreatorId"
  | "stateId"
  | "lastAppliedTemplateId"
  | "parentId"
  | "projectMilestoneId"
  | "projectId"
  | "recurringIssueTemplateId"
  | "sourceCommentId"
  | "teamId"
  | "creatorId"
  | "assigneeId"
  | "subscriberIds"
  | "url"
  | "botActor"
  | "descriptionData"
  | "description"
  | "dueDate"
  | "syncedWith"
  | "estimate"
  | "identifier"
  | "title"
  | "number"
  | "priorityLabel"
  | "prioritySortOrder"
  | "sortOrder"
  | "subIssueSortOrder"
  | "priority"
  | "reactionData"
  | "archivedAt"
  | "createdAt"
  | "updatedAt"
  | "startedTriageAt"
  | "addedToCycleAt"
  | "addedToProjectAt"
  | "addedToTeamAt"
  | "autoArchivedAt"
  | "autoClosedAt"
  | "canceledAt"
  | "completedAt"
  | "startedAt"
  | "triagedAt"
  | "slaBreachesAt"
  | "slaHighRiskAt"
  | "slaMediumRiskAt"
  | "slaStartedAt"
  | "snoozedUntilAt"
  | "slaType"
> & {
    delegate?: Maybe<{ __typename?: "UserChildWebhookPayload" } & UserChildWebhookPayloadFragment>;
    cycle?: Maybe<{ __typename?: "CycleChildWebhookPayload" } & CycleChildWebhookPayloadFragment>;
    externalUserCreator?: Maybe<
      { __typename?: "ExternalUserChildWebhookPayload" } & ExternalUserChildWebhookPayloadFragment
    >;
    state: { __typename?: "WorkflowStateChildWebhookPayload" } & WorkflowStateChildWebhookPayloadFragment;
    labels: Array<{ __typename?: "IssueLabelChildWebhookPayload" } & IssueLabelChildWebhookPayloadFragment>;
    projectMilestone?: Maybe<
      { __typename?: "ProjectMilestoneChildWebhookPayload" } & ProjectMilestoneChildWebhookPayloadFragment
    >;
    project?: Maybe<{ __typename?: "ProjectChildWebhookPayload" } & ProjectChildWebhookPayloadFragment>;
    team?: Maybe<{ __typename?: "TeamChildWebhookPayload" } & TeamChildWebhookPayloadFragment>;
    creator?: Maybe<{ __typename?: "UserChildWebhookPayload" } & UserChildWebhookPayloadFragment>;
    assignee?: Maybe<{ __typename?: "UserChildWebhookPayload" } & UserChildWebhookPayloadFragment>;
  };

export type AppUserNotificationWebhookPayloadFragment = { __typename: "AppUserNotificationWebhookPayload" } & Pick<
  AppUserNotificationWebhookPayload,
  "oauthClientId" | "appUserId" | "organizationId" | "createdAt" | "action" | "type"
>;

export type AppUserTeamAccessChangedWebhookPayloadFragment = {
  __typename: "AppUserTeamAccessChangedWebhookPayload";
} & Pick<
  AppUserTeamAccessChangedWebhookPayload,
  | "oauthClientId"
  | "appUserId"
  | "organizationId"
  | "addedTeamIds"
  | "removedTeamIds"
  | "createdAt"
  | "action"
  | "type"
  | "canAccessAllPublicTeams"
>;

export type CustomResourceWebhookPayloadFragment = { __typename: "CustomResourceWebhookPayload" } & Pick<
  CustomResourceWebhookPayload,
  "organizationId" | "createdAt" | "action" | "type"
>;

export type EntityWebhookPayloadFragment = { __typename: "EntityWebhookPayload" } & Pick<
  EntityWebhookPayload,
  "organizationId" | "updatedFrom" | "createdAt" | "action" | "type" | "url"
>;

export type IssueSlaWebhookPayloadFragment = { __typename: "IssueSlaWebhookPayload" } & Pick<
  IssueSlaWebhookPayload,
  "organizationId" | "createdAt" | "action" | "type" | "url"
> & { issueData: { __typename?: "IssueWebhookPayload" } & IssueWebhookPayloadFragment };

export type ProjectAttachmentFragment = { __typename: "ProjectAttachment" } & Pick<
  ProjectAttachment,
  "sourceType" | "metadata" | "source" | "subtitle" | "updatedAt" | "archivedAt" | "createdAt" | "id" | "title" | "url"
> & { creator?: Maybe<{ __typename?: "User" } & Pick<User, "id">> };

export type UserAuthorizedApplicationFragment = { __typename: "UserAuthorizedApplication" } & Pick<
  UserAuthorizedApplication,
  | "name"
  | "approvalErrorCode"
  | "imageUrl"
  | "description"
  | "developer"
  | "id"
  | "clientId"
  | "developerUrl"
  | "webhooksEnabled"
  | "createdByLinear"
  | "isAuthorized"
>;

export type ApplicationFragment = { __typename: "Application" } & Pick<
  Application,
  "name" | "imageUrl" | "description" | "developer" | "id" | "clientId" | "developerUrl"
>;

export type OauthClientApprovalFragment = { __typename: "OauthClientApproval" } & Pick<
  OauthClientApproval,
  | "updatedAt"
  | "requesterId"
  | "responderId"
  | "requestReason"
  | "denyReason"
  | "scopes"
  | "status"
  | "archivedAt"
  | "createdAt"
  | "id"
  | "oauthClientId"
>;

export type SesDomainIdentityFragment = { __typename: "SesDomainIdentity" } & Pick<
  SesDomainIdentity,
  "region" | "domain" | "updatedAt" | "archivedAt" | "createdAt" | "id" | "canSendFromCustomDomain"
> & {
    dnsRecords: Array<{ __typename?: "SesDomainIdentityDnsRecord" } & SesDomainIdentityDnsRecordFragment>;
    creator?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
  };

export type IntegrationsSettingsFragment = { __typename: "IntegrationsSettings" } & Pick<
  IntegrationsSettings,
  | "updatedAt"
  | "archivedAt"
  | "createdAt"
  | "contextViewType"
  | "id"
  | "slackIssueNewComment"
  | "slackInitiativeUpdateCreated"
  | "slackIssueAddedToTriage"
  | "slackIssueCreated"
  | "slackProjectUpdateCreated"
  | "slackIssueSlaHighRisk"
  | "slackIssueSlaBreached"
  | "slackIssueAddedToView"
  | "slackIssueStatusChangedDone"
  | "slackIssueStatusChangedAll"
  | "slackProjectUpdateCreatedToTeam"
  | "slackProjectUpdateCreatedToWorkspace"
> & {
    initiative?: Maybe<{ __typename?: "Initiative" } & Pick<Initiative, "id">>;
    project?: Maybe<{ __typename?: "Project" } & Pick<Project, "id">>;
    team?: Maybe<{ __typename?: "Team" } & Pick<Team, "id">>;
  };

export type PaidSubscriptionFragment = { __typename: "PaidSubscription" } & Pick<
  PaidSubscription,
  | "collectionMethod"
  | "cancelAt"
  | "canceledAt"
  | "nextBillingAt"
  | "updatedAt"
  | "seatsMaximum"
  | "seatsMinimum"
  | "seats"
  | "pendingChangeType"
  | "type"
  | "archivedAt"
  | "createdAt"
  | "id"
> & { creator?: Maybe<{ __typename?: "User" } & Pick<User, "id">> };

export type InitiativePayloadFragment = { __typename: "InitiativePayload" } & Pick<
  InitiativePayload,
  "lastSyncId" | "success"
> & { initiative: { __typename?: "Initiative" } & Pick<Initiative, "id"> };

export type InitiativeToProjectPayloadFragment = { __typename: "InitiativeToProjectPayload" } & Pick<
  InitiativeToProjectPayload,
  "lastSyncId" | "success"
> & { initiativeToProject: { __typename?: "InitiativeToProject" } & Pick<InitiativeToProject, "id"> };

export type UserSettingsFragment = { __typename: "UserSettings" } & Pick<
  UserSettings,
  | "calendarHash"
  | "unsubscribedFrom"
  | "updatedAt"
  | "archivedAt"
  | "createdAt"
  | "id"
  | "subscribedToDPA"
  | "subscribedToChangelog"
  | "subscribedToInviteAccepted"
  | "subscribedToPrivacyLegalUpdates"
  | "autoAssignToSelf"
  | "showFullUserNames"
> & {
    notificationDeliveryPreferences: {
      __typename?: "NotificationDeliveryPreferences";
    } & NotificationDeliveryPreferencesFragment;
    user: { __typename?: "User" } & Pick<User, "id">;
    notificationCategoryPreferences: {
      __typename?: "NotificationCategoryPreferences";
    } & NotificationCategoryPreferencesFragment;
    notificationChannelPreferences: {
      __typename?: "NotificationChannelPreferences";
    } & NotificationChannelPreferencesFragment;
  };

export type SlackAsksTeamSettingsFragment = { __typename: "SlackAsksTeamSettings" } & Pick<
  SlackAsksTeamSettings,
  "id" | "hasDefaultAsk"
>;

export type FavoriteFragment = { __typename: "Favorite" } & Pick<
  Favorite,
  | "updatedAt"
  | "folderName"
  | "sortOrder"
  | "initiativeTab"
  | "projectTab"
  | "archivedAt"
  | "createdAt"
  | "predefinedViewType"
  | "type"
  | "id"
  | "url"
> & {
    customView?: Maybe<{ __typename?: "CustomView" } & Pick<CustomView, "id">>;
    customer?: Maybe<{ __typename?: "Customer" } & Pick<Customer, "id">>;
    cycle?: Maybe<{ __typename?: "Cycle" } & Pick<Cycle, "id">>;
    document?: Maybe<{ __typename?: "Document" } & Pick<Document, "id">>;
    initiative?: Maybe<{ __typename?: "Initiative" } & Pick<Initiative, "id">>;
    issue?: Maybe<{ __typename?: "Issue" } & Pick<Issue, "id">>;
    label?: Maybe<{ __typename?: "IssueLabel" } & Pick<IssueLabel, "id">>;
    projectLabel?: Maybe<{ __typename?: "ProjectLabel" } & Pick<ProjectLabel, "id">>;
    project?: Maybe<{ __typename?: "Project" } & Pick<Project, "id">>;
    user?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    owner: { __typename?: "User" } & Pick<User, "id">;
    parent?: Maybe<{ __typename?: "Favorite" } & Pick<Favorite, "id">>;
    predefinedViewTeam?: Maybe<{ __typename?: "Team" } & Pick<Team, "id">>;
    projectTeam?: Maybe<{ __typename?: "Team" } & Pick<Team, "id">>;
  };

export type ViewPreferencesFragment = { __typename: "ViewPreferences" } & Pick<
  ViewPreferences,
  "updatedAt" | "archivedAt" | "createdAt" | "id" | "type" | "viewType"
> & { preferences: { __typename?: "ViewPreferencesValues" } & ViewPreferencesValuesFragment };

export type IssueImportJqlCheckPayloadFragment = { __typename: "IssueImportJqlCheckPayload" } & Pick<
  IssueImportJqlCheckPayload,
  "error" | "count" | "success"
>;

export type IssueImportSyncCheckPayloadFragment = { __typename: "IssueImportSyncCheckPayload" } & Pick<
  IssueImportSyncCheckPayload,
  "error" | "canSync"
>;

export type AuditEntryFragment = { __typename: "AuditEntry" } & Pick<
  AuditEntry,
  | "requestInformation"
  | "metadata"
  | "countryCode"
  | "ip"
  | "actorId"
  | "updatedAt"
  | "archivedAt"
  | "createdAt"
  | "id"
  | "type"
> & { actor?: Maybe<{ __typename?: "User" } & Pick<User, "id">> };

export type RoadmapFragment = { __typename: "Roadmap" } & Pick<
  Roadmap,
  "url" | "description" | "updatedAt" | "name" | "color" | "slugId" | "sortOrder" | "archivedAt" | "createdAt" | "id"
> & { creator: { __typename?: "User" } & Pick<User, "id">; owner?: Maybe<{ __typename?: "User" } & Pick<User, "id">> };

export type RoadmapToProjectFragment = { __typename: "RoadmapToProject" } & Pick<
  RoadmapToProject,
  "updatedAt" | "sortOrder" | "archivedAt" | "createdAt" | "id"
> & {
    project: { __typename?: "Project" } & Pick<Project, "id">;
    roadmap: { __typename?: "Roadmap" } & Pick<Roadmap, "id">;
  };

export type AgentActivityConnectionFragment = { __typename: "AgentActivityConnection" } & {
  nodes: Array<{ __typename?: "AgentActivity" } & AgentActivityFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type AgentActivityPayloadFragment = { __typename: "AgentActivityPayload" } & Pick<
  AgentActivityPayload,
  "lastSyncId" | "success"
> & { agentActivity: { __typename?: "AgentActivity" } & Pick<AgentActivity, "id"> };

export type AgentSessionConnectionFragment = { __typename: "AgentSessionConnection" } & {
  nodes: Array<{ __typename?: "AgentSession" } & AgentSessionFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type AgentSessionPayloadFragment = { __typename: "AgentSessionPayload" } & Pick<
  AgentSessionPayload,
  "lastSyncId" | "success"
> & { agentSession: { __typename?: "AgentSession" } & Pick<AgentSession, "id"> };

export type ApiKeyConnectionFragment = { __typename: "ApiKeyConnection" } & {
  nodes: Array<{ __typename?: "ApiKey" } & ApiKeyFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type ApiKeyPayloadFragment = { __typename: "ApiKeyPayload" } & Pick<ApiKeyPayload, "lastSyncId" | "success"> & {
    apiKey: { __typename?: "ApiKey" } & ApiKeyFragment;
  };

export type AsksChannelConnectPayloadFragment = { __typename: "AsksChannelConnectPayload" } & Pick<
  AsksChannelConnectPayload,
  "lastSyncId" | "addBot" | "success"
> & {
    integration?: Maybe<{ __typename?: "Integration" } & Pick<Integration, "id">>;
    mapping: { __typename?: "SlackChannelNameMapping" } & SlackChannelNameMappingFragment;
  };

export type AttachmentConnectionFragment = { __typename: "AttachmentConnection" } & {
  nodes: Array<{ __typename?: "Attachment" } & AttachmentFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type AttachmentPayloadFragment = { __typename: "AttachmentPayload" } & Pick<
  AttachmentPayload,
  "lastSyncId" | "success"
> & { attachment: { __typename?: "Attachment" } & Pick<Attachment, "id"> };

export type AttachmentSourcesPayloadFragment = { __typename: "AttachmentSourcesPayload" } & Pick<
  AttachmentSourcesPayload,
  "sources"
>;

export type AuditEntryConnectionFragment = { __typename: "AuditEntryConnection" } & {
  nodes: Array<{ __typename?: "AuditEntry" } & AuditEntryFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type AuditEntryTypeFragment = { __typename: "AuditEntryType" } & Pick<AuditEntryType, "description" | "type">;

export type AuthResolverResponseFragment = { __typename: "AuthResolverResponse" } & Pick<
  AuthResolverResponse,
  "token" | "email" | "lastUsedOrganizationId" | "allowDomainAccess" | "id"
> & {
    users: Array<{ __typename?: "AuthUser" } & AuthUserFragment>;
    lockedUsers: Array<{ __typename?: "AuthUser" } & AuthUserFragment>;
    lockedOrganizations?: Maybe<Array<{ __typename?: "AuthOrganization" } & AuthOrganizationFragment>>;
    availableOrganizations?: Maybe<Array<{ __typename?: "AuthOrganization" } & AuthOrganizationFragment>>;
  };

export type CommentConnectionFragment = { __typename: "CommentConnection" } & {
  nodes: Array<{ __typename?: "Comment" } & CommentFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type CommentPayloadFragment = { __typename: "CommentPayload" } & Pick<
  CommentPayload,
  "lastSyncId" | "success"
> & { comment: { __typename?: "Comment" } & Pick<Comment, "id"> };

export type ContactPayloadFragment = { __typename: "ContactPayload" } & Pick<ContactPayload, "success">;

export type CreateCsvExportReportPayloadFragment = { __typename: "CreateCsvExportReportPayload" } & Pick<
  CreateCsvExportReportPayload,
  "success"
>;

export type CreateOrJoinOrganizationResponseFragment = { __typename: "CreateOrJoinOrganizationResponse" } & {
  organization: { __typename?: "AuthOrganization" } & AuthOrganizationFragment;
  user: { __typename?: "AuthUser" } & AuthUserFragment;
};

export type CustomViewConnectionFragment = { __typename: "CustomViewConnection" } & {
  nodes: Array<{ __typename?: "CustomView" } & CustomViewFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type CustomViewHasSubscribersPayloadFragment = { __typename: "CustomViewHasSubscribersPayload" } & Pick<
  CustomViewHasSubscribersPayload,
  "hasSubscribers"
>;

export type CustomViewPayloadFragment = { __typename: "CustomViewPayload" } & Pick<
  CustomViewPayload,
  "lastSyncId" | "success"
> & { customView: { __typename?: "CustomView" } & Pick<CustomView, "id"> };

export type CustomViewSuggestionPayloadFragment = { __typename: "CustomViewSuggestionPayload" } & Pick<
  CustomViewSuggestionPayload,
  "description" | "icon" | "name"
>;

export type CustomerConnectionFragment = { __typename: "CustomerConnection" } & {
  nodes: Array<{ __typename?: "Customer" } & CustomerFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type CustomerNeedConnectionFragment = { __typename: "CustomerNeedConnection" } & {
  nodes: Array<{ __typename?: "CustomerNeed" } & CustomerNeedFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type CustomerNeedPayloadFragment = { __typename: "CustomerNeedPayload" } & Pick<
  CustomerNeedPayload,
  "lastSyncId" | "success"
> & { need: { __typename?: "CustomerNeed" } & Pick<CustomerNeed, "id"> };

export type CustomerNeedUpdatePayloadFragment = { __typename: "CustomerNeedUpdatePayload" } & Pick<
  CustomerNeedUpdatePayload,
  "lastSyncId" | "success"
> & {
    need: { __typename?: "CustomerNeed" } & Pick<CustomerNeed, "id">;
    updatedRelatedNeeds: Array<{ __typename?: "CustomerNeed" } & CustomerNeedFragment>;
  };

export type CustomerPayloadFragment = { __typename: "CustomerPayload" } & Pick<
  CustomerPayload,
  "lastSyncId" | "success"
> & { customer: { __typename?: "Customer" } & Pick<Customer, "id"> };

export type CustomerStatusConnectionFragment = { __typename: "CustomerStatusConnection" } & {
  nodes: Array<{ __typename?: "CustomerStatus" } & CustomerStatusFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type CustomerStatusPayloadFragment = { __typename: "CustomerStatusPayload" } & Pick<
  CustomerStatusPayload,
  "lastSyncId" | "success"
> & { status: { __typename?: "CustomerStatus" } & Pick<CustomerStatus, "id"> };

export type CustomerTierConnectionFragment = { __typename: "CustomerTierConnection" } & {
  nodes: Array<{ __typename?: "CustomerTier" } & CustomerTierFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type CustomerTierPayloadFragment = { __typename: "CustomerTierPayload" } & Pick<
  CustomerTierPayload,
  "lastSyncId" | "success"
> & { tier: { __typename?: "CustomerTier" } & Pick<CustomerTier, "id"> };

export type CycleConnectionFragment = { __typename: "CycleConnection" } & {
  nodes: Array<{ __typename?: "Cycle" } & CycleFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type CyclePayloadFragment = { __typename: "CyclePayload" } & Pick<CyclePayload, "lastSyncId" | "success"> & {
    cycle?: Maybe<{ __typename?: "Cycle" } & Pick<Cycle, "id">>;
  };

export type DocumentConnectionFragment = { __typename: "DocumentConnection" } & {
  nodes: Array<{ __typename?: "Document" } & DocumentFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type DocumentContentHistoryPayloadFragment = { __typename: "DocumentContentHistoryPayload" } & Pick<
  DocumentContentHistoryPayload,
  "success"
> & { history: Array<{ __typename?: "DocumentContentHistoryType" } & DocumentContentHistoryTypeFragment> };

export type DocumentContentHistoryTypeFragment = { __typename: "DocumentContentHistoryType" } & Pick<
  DocumentContentHistoryType,
  "actorIds" | "id" | "createdAt" | "contentDataSnapshotAt"
>;

export type DocumentPayloadFragment = { __typename: "DocumentPayload" } & Pick<
  DocumentPayload,
  "lastSyncId" | "success"
> & { document: { __typename?: "Document" } & Pick<Document, "id"> };

export type DocumentSearchPayloadFragment = { __typename: "DocumentSearchPayload" } & Pick<
  DocumentSearchPayload,
  "totalCount"
> & {
    archivePayload: { __typename?: "ArchiveResponse" } & ArchiveResponseFragment;
    nodes: Array<{ __typename?: "DocumentSearchResult" } & DocumentSearchResultFragment>;
    pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
  };

export type DocumentSearchResultFragment = { __typename: "DocumentSearchResult" } & Pick<
  DocumentSearchResult,
  | "trashed"
  | "metadata"
  | "documentContentId"
  | "url"
  | "color"
  | "title"
  | "slugId"
  | "content"
  | "icon"
  | "updatedAt"
  | "sortOrder"
  | "hiddenAt"
  | "archivedAt"
  | "createdAt"
  | "id"
> & {
    initiative?: Maybe<{ __typename?: "Initiative" } & Pick<Initiative, "id">>;
    lastAppliedTemplate?: Maybe<{ __typename?: "Template" } & Pick<Template, "id">>;
    project?: Maybe<{ __typename?: "Project" } & Pick<Project, "id">>;
    creator?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    updatedBy?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
  };

export type DraftConnectionFragment = { __typename: "DraftConnection" } & {
  nodes: Array<{ __typename?: "Draft" } & DraftFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type EmailIntakeAddressPayloadFragment = { __typename: "EmailIntakeAddressPayload" } & Pick<
  EmailIntakeAddressPayload,
  "lastSyncId" | "success"
> & { emailIntakeAddress: { __typename?: "EmailIntakeAddress" } & Pick<EmailIntakeAddress, "id"> };

export type EmailUnsubscribePayloadFragment = { __typename: "EmailUnsubscribePayload" } & Pick<
  EmailUnsubscribePayload,
  "success"
>;

export type EmailUserAccountAuthChallengeResponseFragment = {
  __typename: "EmailUserAccountAuthChallengeResponse";
} & Pick<EmailUserAccountAuthChallengeResponse, "authType" | "success">;

export type EmojiConnectionFragment = { __typename: "EmojiConnection" } & {
  nodes: Array<{ __typename?: "Emoji" } & EmojiFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type EmojiPayloadFragment = { __typename: "EmojiPayload" } & Pick<EmojiPayload, "lastSyncId" | "success"> & {
    emoji: { __typename?: "Emoji" } & Pick<Emoji, "id">;
  };

export type EntityExternalLinkConnectionFragment = { __typename: "EntityExternalLinkConnection" } & {
  nodes: Array<{ __typename?: "EntityExternalLink" } & EntityExternalLinkFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type EntityExternalLinkPayloadFragment = { __typename: "EntityExternalLinkPayload" } & Pick<
  EntityExternalLinkPayload,
  "lastSyncId" | "success"
> & { entityExternalLink: { __typename?: "EntityExternalLink" } & Pick<EntityExternalLink, "id"> };

export type ExternalUserConnectionFragment = { __typename: "ExternalUserConnection" } & {
  nodes: Array<{ __typename?: "ExternalUser" } & ExternalUserFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type FavoriteConnectionFragment = { __typename: "FavoriteConnection" } & {
  nodes: Array<{ __typename?: "Favorite" } & FavoriteFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type FavoritePayloadFragment = { __typename: "FavoritePayload" } & Pick<
  FavoritePayload,
  "lastSyncId" | "success"
> & { favorite: { __typename?: "Favorite" } & Pick<Favorite, "id"> };

export type FetchDataPayloadFragment = { __typename: "FetchDataPayload" } & Pick<FetchDataPayload, "data" | "success">;

export type FrontAttachmentPayloadFragment = { __typename: "FrontAttachmentPayload" } & Pick<
  FrontAttachmentPayload,
  "lastSyncId" | "success"
> & { attachment: { __typename?: "Attachment" } & Pick<Attachment, "id"> };

export type GitAutomationStateConnectionFragment = { __typename: "GitAutomationStateConnection" } & {
  nodes: Array<{ __typename?: "GitAutomationState" } & GitAutomationStateFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type GitAutomationStatePayloadFragment = { __typename: "GitAutomationStatePayload" } & Pick<
  GitAutomationStatePayload,
  "lastSyncId" | "success"
> & { gitAutomationState: { __typename?: "GitAutomationState" } & GitAutomationStateFragment };

export type GitAutomationTargetBranchPayloadFragment = { __typename: "GitAutomationTargetBranchPayload" } & Pick<
  GitAutomationTargetBranchPayload,
  "lastSyncId" | "success"
> & { targetBranch: { __typename?: "GitAutomationTargetBranch" } & GitAutomationTargetBranchFragment };

export type GitHubCommitIntegrationPayloadFragment = { __typename: "GitHubCommitIntegrationPayload" } & Pick<
  GitHubCommitIntegrationPayload,
  "lastSyncId" | "webhookSecret" | "success"
> & { integration?: Maybe<{ __typename?: "Integration" } & Pick<Integration, "id">> };

export type GitHubEnterpriseServerInstallVerificationPayloadFragment = {
  __typename: "GitHubEnterpriseServerInstallVerificationPayload";
} & Pick<GitHubEnterpriseServerInstallVerificationPayload, "success">;

export type GitHubEnterpriseServerPayloadFragment = { __typename: "GitHubEnterpriseServerPayload" } & Pick<
  GitHubEnterpriseServerPayload,
  "installUrl" | "lastSyncId" | "setupUrl" | "webhookSecret" | "success"
> & { integration?: Maybe<{ __typename?: "Integration" } & Pick<Integration, "id">> };

export type GitLabIntegrationCreatePayloadFragment = { __typename: "GitLabIntegrationCreatePayload" } & Pick<
  GitLabIntegrationCreatePayload,
  "lastSyncId" | "webhookSecret" | "success"
> & { integration?: Maybe<{ __typename?: "Integration" } & Pick<Integration, "id">> };

export type ImageUploadFromUrlPayloadFragment = { __typename: "ImageUploadFromUrlPayload" } & Pick<
  ImageUploadFromUrlPayload,
  "url" | "lastSyncId" | "success"
>;

export type InitiativeConnectionFragment = { __typename: "InitiativeConnection" } & {
  nodes: Array<{ __typename?: "Initiative" } & InitiativeFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type InitiativeHistoryConnectionFragment = { __typename: "InitiativeHistoryConnection" } & {
  nodes: Array<{ __typename?: "InitiativeHistory" } & InitiativeHistoryFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type InitiativeRelationConnectionFragment = { __typename: "InitiativeRelationConnection" } & {
  nodes: Array<{ __typename?: "InitiativeRelation" } & InitiativeRelationFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type InitiativeRelationPayloadFragment = { __typename: "InitiativeRelationPayload" } & Pick<
  InitiativeRelationPayload,
  "lastSyncId" | "success"
> & { initiativeRelation: { __typename?: "InitiativeRelation" } & InitiativeRelationFragment };

export type InitiativeToProjectConnectionFragment = { __typename: "InitiativeToProjectConnection" } & {
  nodes: Array<{ __typename?: "InitiativeToProject" } & InitiativeToProjectFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type InitiativeUpdateConnectionFragment = { __typename: "InitiativeUpdateConnection" } & {
  nodes: Array<{ __typename?: "InitiativeUpdate" } & InitiativeUpdateFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type InitiativeUpdatePayloadFragment = { __typename: "InitiativeUpdatePayload" } & Pick<
  InitiativeUpdatePayload,
  "lastSyncId" | "success"
> & { initiativeUpdate: { __typename?: "InitiativeUpdate" } & Pick<InitiativeUpdate, "id"> };

export type InitiativeUpdateReminderPayloadFragment = { __typename: "InitiativeUpdateReminderPayload" } & Pick<
  InitiativeUpdateReminderPayload,
  "lastSyncId" | "success"
>;

export type IntegrationConnectionFragment = { __typename: "IntegrationConnection" } & {
  nodes: Array<{ __typename?: "Integration" } & IntegrationFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type IntegrationHasScopesPayloadFragment = { __typename: "IntegrationHasScopesPayload" } & Pick<
  IntegrationHasScopesPayload,
  "missingScopes" | "hasAllScopes"
>;

export type IntegrationPayloadFragment = { __typename: "IntegrationPayload" } & Pick<
  IntegrationPayload,
  "lastSyncId" | "success"
> & { integration?: Maybe<{ __typename?: "Integration" } & Pick<Integration, "id">> };

export type IntegrationRequestPayloadFragment = { __typename: "IntegrationRequestPayload" } & Pick<
  IntegrationRequestPayload,
  "success"
>;

export type IntegrationSlackWorkspaceNamePayloadFragment = {
  __typename: "IntegrationSlackWorkspaceNamePayload";
} & Pick<IntegrationSlackWorkspaceNamePayload, "name" | "success">;

export type IntegrationTemplateConnectionFragment = { __typename: "IntegrationTemplateConnection" } & {
  nodes: Array<{ __typename?: "IntegrationTemplate" } & IntegrationTemplateFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type IntegrationTemplatePayloadFragment = { __typename: "IntegrationTemplatePayload" } & Pick<
  IntegrationTemplatePayload,
  "lastSyncId" | "success"
> & { integrationTemplate: { __typename?: "IntegrationTemplate" } & Pick<IntegrationTemplate, "id"> };

export type IntegrationsSettingsPayloadFragment = { __typename: "IntegrationsSettingsPayload" } & Pick<
  IntegrationsSettingsPayload,
  "lastSyncId" | "success"
> & { integrationsSettings: { __typename?: "IntegrationsSettings" } & Pick<IntegrationsSettings, "id"> };

export type IssueBatchPayloadFragment = { __typename: "IssueBatchPayload" } & Pick<
  IssueBatchPayload,
  "lastSyncId" | "success"
> & { issues: Array<{ __typename?: "Issue" } & IssueFragment> };

export type IssueConnectionFragment = { __typename: "IssueConnection" } & {
  nodes: Array<{ __typename?: "Issue" } & IssueFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type IssueFilterSuggestionPayloadFragment = { __typename: "IssueFilterSuggestionPayload" } & Pick<
  IssueFilterSuggestionPayload,
  "filter" | "logId"
>;

export type IssueHistoryConnectionFragment = { __typename: "IssueHistoryConnection" } & {
  nodes: Array<{ __typename?: "IssueHistory" } & IssueHistoryFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type IssueImportCheckPayloadFragment = { __typename: "IssueImportCheckPayload" } & Pick<
  IssueImportCheckPayload,
  "success"
>;

export type IssueImportDeletePayloadFragment = { __typename: "IssueImportDeletePayload" } & Pick<
  IssueImportDeletePayload,
  "lastSyncId" | "success"
> & { issueImport?: Maybe<{ __typename?: "IssueImport" } & IssueImportFragment> };

export type IssueImportPayloadFragment = { __typename: "IssueImportPayload" } & Pick<
  IssueImportPayload,
  "lastSyncId" | "success"
> & { issueImport?: Maybe<{ __typename?: "IssueImport" } & IssueImportFragment> };

export type IssueLabelConnectionFragment = { __typename: "IssueLabelConnection" } & {
  nodes: Array<{ __typename?: "IssueLabel" } & IssueLabelFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type IssueLabelMoveToTeamLabelsPayloadFragment = { __typename: "IssueLabelMoveToTeamLabelsPayload" } & Pick<
  IssueLabelMoveToTeamLabelsPayload,
  "lastSyncId" | "success"
>;

export type IssueLabelPayloadFragment = { __typename: "IssueLabelPayload" } & Pick<
  IssueLabelPayload,
  "lastSyncId" | "success"
> & { issueLabel: { __typename?: "IssueLabel" } & Pick<IssueLabel, "id"> };

export type IssuePayloadFragment = { __typename: "IssuePayload" } & Pick<IssuePayload, "lastSyncId" | "success"> & {
    issue?: Maybe<{ __typename?: "Issue" } & Pick<Issue, "id">>;
  };

export type IssuePriorityValueFragment = { __typename: "IssuePriorityValue" } & Pick<
  IssuePriorityValue,
  "label" | "priority"
>;

export type IssueRelationConnectionFragment = { __typename: "IssueRelationConnection" } & {
  nodes: Array<{ __typename?: "IssueRelation" } & IssueRelationFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type IssueRelationPayloadFragment = { __typename: "IssueRelationPayload" } & Pick<
  IssueRelationPayload,
  "lastSyncId" | "success"
> & { issueRelation: { __typename?: "IssueRelation" } & Pick<IssueRelation, "id"> };

export type IssueSearchPayloadFragment = { __typename: "IssueSearchPayload" } & Pick<
  IssueSearchPayload,
  "totalCount"
> & {
    archivePayload: { __typename?: "ArchiveResponse" } & ArchiveResponseFragment;
    nodes: Array<{ __typename?: "IssueSearchResult" } & IssueSearchResultFragment>;
    pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
  };

export type IssueSearchResultFragment = { __typename: "IssueSearchResult" } & Pick<
  IssueSearchResult,
  | "trashed"
  | "reactionData"
  | "labelIds"
  | "integrationSourceType"
  | "url"
  | "identifier"
  | "priorityLabel"
  | "metadata"
  | "previousIdentifiers"
  | "customerTicketCount"
  | "branchName"
  | "dueDate"
  | "estimate"
  | "description"
  | "title"
  | "number"
  | "updatedAt"
  | "boardOrder"
  | "prioritySortOrder"
  | "sortOrder"
  | "subIssueSortOrder"
  | "priority"
  | "archivedAt"
  | "createdAt"
  | "startedTriageAt"
  | "triagedAt"
  | "addedToCycleAt"
  | "addedToProjectAt"
  | "addedToTeamAt"
  | "autoArchivedAt"
  | "autoClosedAt"
  | "canceledAt"
  | "completedAt"
  | "startedAt"
  | "slaStartedAt"
  | "slaBreachesAt"
  | "slaHighRiskAt"
  | "slaMediumRiskAt"
  | "snoozedUntilAt"
  | "slaType"
  | "id"
> & {
    reactions: Array<{ __typename?: "Reaction" } & ReactionFragment>;
    delegate?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    botActor?: Maybe<{ __typename?: "ActorBot" } & ActorBotFragment>;
    sourceComment?: Maybe<{ __typename?: "Comment" } & Pick<Comment, "id">>;
    cycle?: Maybe<{ __typename?: "Cycle" } & Pick<Cycle, "id">>;
    syncedWith?: Maybe<Array<{ __typename?: "ExternalEntityInfo" } & ExternalEntityInfoFragment>>;
    externalUserCreator?: Maybe<{ __typename?: "ExternalUser" } & Pick<ExternalUser, "id">>;
    lastAppliedTemplate?: Maybe<{ __typename?: "Template" } & Pick<Template, "id">>;
    parent?: Maybe<{ __typename?: "Issue" } & Pick<Issue, "id">>;
    project?: Maybe<{ __typename?: "Project" } & Pick<Project, "id">>;
    projectMilestone?: Maybe<{ __typename?: "ProjectMilestone" } & Pick<ProjectMilestone, "id">>;
    recurringIssueTemplate?: Maybe<{ __typename?: "Template" } & Pick<Template, "id">>;
    team: { __typename?: "Team" } & Pick<Team, "id">;
    assignee?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    creator?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    snoozedBy?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    favorite?: Maybe<{ __typename?: "Favorite" } & Pick<Favorite, "id">>;
    state: { __typename?: "WorkflowState" } & Pick<WorkflowState, "id">;
  };

export type IssueSuggestionFragment = { __typename: "IssueSuggestion" } & Pick<
  IssueSuggestion,
  | "updatedAt"
  | "archivedAt"
  | "createdAt"
  | "id"
  | "issueId"
  | "state"
  | "stateChangedAt"
  | "suggestedIssueId"
  | "suggestedLabelId"
  | "suggestedUserId"
  | "type"
> & {
    issue: { __typename?: "Issue" } & Pick<Issue, "id">;
    metadata?: Maybe<{ __typename?: "IssueSuggestionMetadata" } & IssueSuggestionMetadataFragment>;
    suggestedIssue?: Maybe<{ __typename?: "Issue" } & Pick<Issue, "id">>;
    suggestedLabel?: Maybe<{ __typename?: "IssueLabel" } & Pick<IssueLabel, "id">>;
    suggestedProject?: Maybe<{ __typename?: "Project" } & Pick<Project, "id">>;
    suggestedTeam?: Maybe<{ __typename?: "Team" } & Pick<Team, "id">>;
    suggestedUser?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
  };

export type IssueSuggestionConnectionFragment = { __typename: "IssueSuggestionConnection" } & {
  nodes: Array<{ __typename?: "IssueSuggestion" } & IssueSuggestionFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type IssueSuggestionMetadataFragment = { __typename: "IssueSuggestionMetadata" } & Pick<
  IssueSuggestionMetadata,
  "classification" | "evalLogId" | "rank" | "reasons" | "score"
>;

export type IssueTitleSuggestionFromCustomerRequestPayloadFragment = {
  __typename: "IssueTitleSuggestionFromCustomerRequestPayload";
} & Pick<IssueTitleSuggestionFromCustomerRequestPayload, "lastSyncId" | "title">;

export type LogoutResponseFragment = { __typename: "LogoutResponse" } & Pick<LogoutResponse, "success">;

type Node_AgentActivity_Fragment = { __typename: "AgentActivity" } & Pick<AgentActivity, "id">;

type Node_AgentSession_Fragment = { __typename: "AgentSession" } & Pick<AgentSession, "id">;

type Node_ApiKey_Fragment = { __typename: "ApiKey" } & Pick<ApiKey, "id">;

type Node_Attachment_Fragment = { __typename: "Attachment" } & Pick<Attachment, "id">;

type Node_AuditEntry_Fragment = { __typename: "AuditEntry" } & Pick<AuditEntry, "id">;

type Node_Comment_Fragment = { __typename: "Comment" } & Pick<Comment, "id">;

type Node_CustomView_Fragment = { __typename: "CustomView" } & Pick<CustomView, "id">;

type Node_CustomViewNotificationSubscription_Fragment = { __typename: "CustomViewNotificationSubscription" } & Pick<
  CustomViewNotificationSubscription,
  "id"
>;

type Node_Customer_Fragment = { __typename: "Customer" } & Pick<Customer, "id">;

type Node_CustomerNeed_Fragment = { __typename: "CustomerNeed" } & Pick<CustomerNeed, "id">;

type Node_CustomerNeedNotification_Fragment = { __typename: "CustomerNeedNotification" } & Pick<
  CustomerNeedNotification,
  "id"
>;

type Node_CustomerNotification_Fragment = { __typename: "CustomerNotification" } & Pick<CustomerNotification, "id">;

type Node_CustomerNotificationSubscription_Fragment = { __typename: "CustomerNotificationSubscription" } & Pick<
  CustomerNotificationSubscription,
  "id"
>;

type Node_CustomerStatus_Fragment = { __typename: "CustomerStatus" } & Pick<CustomerStatus, "id">;

type Node_CustomerTier_Fragment = { __typename: "CustomerTier" } & Pick<CustomerTier, "id">;

type Node_Cycle_Fragment = { __typename: "Cycle" } & Pick<Cycle, "id">;

type Node_CycleNotificationSubscription_Fragment = { __typename: "CycleNotificationSubscription" } & Pick<
  CycleNotificationSubscription,
  "id"
>;

type Node_Dashboard_Fragment = { __typename: "Dashboard" } & Pick<Dashboard, "id">;

type Node_Document_Fragment = { __typename: "Document" } & Pick<Document, "id">;

type Node_DocumentContent_Fragment = { __typename: "DocumentContent" } & Pick<DocumentContent, "id">;

type Node_DocumentNotification_Fragment = { __typename: "DocumentNotification" } & Pick<DocumentNotification, "id">;

type Node_DocumentSearchResult_Fragment = { __typename: "DocumentSearchResult" } & Pick<DocumentSearchResult, "id">;

type Node_Draft_Fragment = { __typename: "Draft" } & Pick<Draft, "id">;

type Node_EmailIntakeAddress_Fragment = { __typename: "EmailIntakeAddress" } & Pick<EmailIntakeAddress, "id">;

type Node_Emoji_Fragment = { __typename: "Emoji" } & Pick<Emoji, "id">;

type Node_EntityExternalLink_Fragment = { __typename: "EntityExternalLink" } & Pick<EntityExternalLink, "id">;

type Node_ExternalUser_Fragment = { __typename: "ExternalUser" } & Pick<ExternalUser, "id">;

type Node_Facet_Fragment = { __typename: "Facet" } & Pick<Facet, "id">;

type Node_Favorite_Fragment = { __typename: "Favorite" } & Pick<Favorite, "id">;

type Node_FeedItem_Fragment = { __typename: "FeedItem" } & Pick<FeedItem, "id">;

type Node_GitAutomationState_Fragment = { __typename: "GitAutomationState" } & Pick<GitAutomationState, "id">;

type Node_GitAutomationTargetBranch_Fragment = { __typename: "GitAutomationTargetBranch" } & Pick<
  GitAutomationTargetBranch,
  "id"
>;

type Node_IdentityProvider_Fragment = { __typename: "IdentityProvider" } & Pick<IdentityProvider, "id">;

type Node_Initiative_Fragment = { __typename: "Initiative" } & Pick<Initiative, "id">;

type Node_InitiativeHistory_Fragment = { __typename: "InitiativeHistory" } & Pick<InitiativeHistory, "id">;

type Node_InitiativeNotification_Fragment = { __typename: "InitiativeNotification" } & Pick<
  InitiativeNotification,
  "id"
>;

type Node_InitiativeNotificationSubscription_Fragment = { __typename: "InitiativeNotificationSubscription" } & Pick<
  InitiativeNotificationSubscription,
  "id"
>;

type Node_InitiativeRelation_Fragment = { __typename: "InitiativeRelation" } & Pick<InitiativeRelation, "id">;

type Node_InitiativeToProject_Fragment = { __typename: "InitiativeToProject" } & Pick<InitiativeToProject, "id">;

type Node_InitiativeUpdate_Fragment = { __typename: "InitiativeUpdate" } & Pick<InitiativeUpdate, "id">;

type Node_Integration_Fragment = { __typename: "Integration" } & Pick<Integration, "id">;

type Node_IntegrationTemplate_Fragment = { __typename: "IntegrationTemplate" } & Pick<IntegrationTemplate, "id">;

type Node_IntegrationsSettings_Fragment = { __typename: "IntegrationsSettings" } & Pick<IntegrationsSettings, "id">;

type Node_Issue_Fragment = { __typename: "Issue" } & Pick<Issue, "id">;

type Node_IssueDraft_Fragment = { __typename: "IssueDraft" } & Pick<IssueDraft, "id">;

type Node_IssueHistory_Fragment = { __typename: "IssueHistory" } & Pick<IssueHistory, "id">;

type Node_IssueImport_Fragment = { __typename: "IssueImport" } & Pick<IssueImport, "id">;

type Node_IssueLabel_Fragment = { __typename: "IssueLabel" } & Pick<IssueLabel, "id">;

type Node_IssueNotification_Fragment = { __typename: "IssueNotification" } & Pick<IssueNotification, "id">;

type Node_IssueRelation_Fragment = { __typename: "IssueRelation" } & Pick<IssueRelation, "id">;

type Node_IssueSearchResult_Fragment = { __typename: "IssueSearchResult" } & Pick<IssueSearchResult, "id">;

type Node_IssueSuggestion_Fragment = { __typename: "IssueSuggestion" } & Pick<IssueSuggestion, "id">;

type Node_LabelNotificationSubscription_Fragment = { __typename: "LabelNotificationSubscription" } & Pick<
  LabelNotificationSubscription,
  "id"
>;

type Node_OauthClientApproval_Fragment = { __typename: "OauthClientApproval" } & Pick<OauthClientApproval, "id">;

type Node_OauthClientApprovalNotification_Fragment = { __typename: "OauthClientApprovalNotification" } & Pick<
  OauthClientApprovalNotification,
  "id"
>;

type Node_Organization_Fragment = { __typename: "Organization" } & Pick<Organization, "id">;

type Node_OrganizationDomain_Fragment = { __typename: "OrganizationDomain" } & Pick<OrganizationDomain, "id">;

type Node_OrganizationInvite_Fragment = { __typename: "OrganizationInvite" } & Pick<OrganizationInvite, "id">;

type Node_PaidSubscription_Fragment = { __typename: "PaidSubscription" } & Pick<PaidSubscription, "id">;

type Node_Post_Fragment = { __typename: "Post" } & Pick<Post, "id">;

type Node_PostNotification_Fragment = { __typename: "PostNotification" } & Pick<PostNotification, "id">;

type Node_Project_Fragment = { __typename: "Project" } & Pick<Project, "id">;

type Node_ProjectAttachment_Fragment = { __typename: "ProjectAttachment" } & Pick<ProjectAttachment, "id">;

type Node_ProjectHistory_Fragment = { __typename: "ProjectHistory" } & Pick<ProjectHistory, "id">;

type Node_ProjectLabel_Fragment = { __typename: "ProjectLabel" } & Pick<ProjectLabel, "id">;

type Node_ProjectMilestone_Fragment = { __typename: "ProjectMilestone" } & Pick<ProjectMilestone, "id">;

type Node_ProjectNotification_Fragment = { __typename: "ProjectNotification" } & Pick<ProjectNotification, "id">;

type Node_ProjectNotificationSubscription_Fragment = { __typename: "ProjectNotificationSubscription" } & Pick<
  ProjectNotificationSubscription,
  "id"
>;

type Node_ProjectRelation_Fragment = { __typename: "ProjectRelation" } & Pick<ProjectRelation, "id">;

type Node_ProjectSearchResult_Fragment = { __typename: "ProjectSearchResult" } & Pick<ProjectSearchResult, "id">;

type Node_ProjectStatus_Fragment = { __typename: "ProjectStatus" } & Pick<ProjectStatus, "id">;

type Node_ProjectUpdate_Fragment = { __typename: "ProjectUpdate" } & Pick<ProjectUpdate, "id">;

type Node_PullRequest_Fragment = { __typename: "PullRequest" } & Pick<PullRequest, "id">;

type Node_PullRequestNotification_Fragment = { __typename: "PullRequestNotification" } & Pick<
  PullRequestNotification,
  "id"
>;

type Node_PushSubscription_Fragment = { __typename: "PushSubscription" } & Pick<PushSubscription, "id">;

type Node_Reaction_Fragment = { __typename: "Reaction" } & Pick<Reaction, "id">;

type Node_Roadmap_Fragment = { __typename: "Roadmap" } & Pick<Roadmap, "id">;

type Node_RoadmapToProject_Fragment = { __typename: "RoadmapToProject" } & Pick<RoadmapToProject, "id">;

type Node_SemanticSearchResult_Fragment = { __typename: "SemanticSearchResult" } & Pick<SemanticSearchResult, "id">;

type Node_SesDomainIdentity_Fragment = { __typename: "SesDomainIdentity" } & Pick<SesDomainIdentity, "id">;

type Node_Team_Fragment = { __typename: "Team" } & Pick<Team, "id">;

type Node_TeamMembership_Fragment = { __typename: "TeamMembership" } & Pick<TeamMembership, "id">;

type Node_TeamNotificationSubscription_Fragment = { __typename: "TeamNotificationSubscription" } & Pick<
  TeamNotificationSubscription,
  "id"
>;

type Node_Template_Fragment = { __typename: "Template" } & Pick<Template, "id">;

type Node_TimeSchedule_Fragment = { __typename: "TimeSchedule" } & Pick<TimeSchedule, "id">;

type Node_TriageResponsibility_Fragment = { __typename: "TriageResponsibility" } & Pick<TriageResponsibility, "id">;

type Node_User_Fragment = { __typename: "User" } & Pick<User, "id">;

type Node_UserNotificationSubscription_Fragment = { __typename: "UserNotificationSubscription" } & Pick<
  UserNotificationSubscription,
  "id"
>;

type Node_UserSettings_Fragment = { __typename: "UserSettings" } & Pick<UserSettings, "id">;

type Node_ViewPreferences_Fragment = { __typename: "ViewPreferences" } & Pick<ViewPreferences, "id">;

type Node_Webhook_Fragment = { __typename: "Webhook" } & Pick<Webhook, "id">;

type Node_WorkflowState_Fragment = { __typename: "WorkflowState" } & Pick<WorkflowState, "id">;

export type NodeFragment =
  | Node_AgentActivity_Fragment
  | Node_AgentSession_Fragment
  | Node_ApiKey_Fragment
  | Node_Attachment_Fragment
  | Node_AuditEntry_Fragment
  | Node_Comment_Fragment
  | Node_CustomView_Fragment
  | Node_CustomViewNotificationSubscription_Fragment
  | Node_Customer_Fragment
  | Node_CustomerNeed_Fragment
  | Node_CustomerNeedNotification_Fragment
  | Node_CustomerNotification_Fragment
  | Node_CustomerNotificationSubscription_Fragment
  | Node_CustomerStatus_Fragment
  | Node_CustomerTier_Fragment
  | Node_Cycle_Fragment
  | Node_CycleNotificationSubscription_Fragment
  | Node_Dashboard_Fragment
  | Node_Document_Fragment
  | Node_DocumentContent_Fragment
  | Node_DocumentNotification_Fragment
  | Node_DocumentSearchResult_Fragment
  | Node_Draft_Fragment
  | Node_EmailIntakeAddress_Fragment
  | Node_Emoji_Fragment
  | Node_EntityExternalLink_Fragment
  | Node_ExternalUser_Fragment
  | Node_Facet_Fragment
  | Node_Favorite_Fragment
  | Node_FeedItem_Fragment
  | Node_GitAutomationState_Fragment
  | Node_GitAutomationTargetBranch_Fragment
  | Node_IdentityProvider_Fragment
  | Node_Initiative_Fragment
  | Node_InitiativeHistory_Fragment
  | Node_InitiativeNotification_Fragment
  | Node_InitiativeNotificationSubscription_Fragment
  | Node_InitiativeRelation_Fragment
  | Node_InitiativeToProject_Fragment
  | Node_InitiativeUpdate_Fragment
  | Node_Integration_Fragment
  | Node_IntegrationTemplate_Fragment
  | Node_IntegrationsSettings_Fragment
  | Node_Issue_Fragment
  | Node_IssueDraft_Fragment
  | Node_IssueHistory_Fragment
  | Node_IssueImport_Fragment
  | Node_IssueLabel_Fragment
  | Node_IssueNotification_Fragment
  | Node_IssueRelation_Fragment
  | Node_IssueSearchResult_Fragment
  | Node_IssueSuggestion_Fragment
  | Node_LabelNotificationSubscription_Fragment
  | Node_OauthClientApproval_Fragment
  | Node_OauthClientApprovalNotification_Fragment
  | Node_Organization_Fragment
  | Node_OrganizationDomain_Fragment
  | Node_OrganizationInvite_Fragment
  | Node_PaidSubscription_Fragment
  | Node_Post_Fragment
  | Node_PostNotification_Fragment
  | Node_Project_Fragment
  | Node_ProjectAttachment_Fragment
  | Node_ProjectHistory_Fragment
  | Node_ProjectLabel_Fragment
  | Node_ProjectMilestone_Fragment
  | Node_ProjectNotification_Fragment
  | Node_ProjectNotificationSubscription_Fragment
  | Node_ProjectRelation_Fragment
  | Node_ProjectSearchResult_Fragment
  | Node_ProjectStatus_Fragment
  | Node_ProjectUpdate_Fragment
  | Node_PullRequest_Fragment
  | Node_PullRequestNotification_Fragment
  | Node_PushSubscription_Fragment
  | Node_Reaction_Fragment
  | Node_Roadmap_Fragment
  | Node_RoadmapToProject_Fragment
  | Node_SemanticSearchResult_Fragment
  | Node_SesDomainIdentity_Fragment
  | Node_Team_Fragment
  | Node_TeamMembership_Fragment
  | Node_TeamNotificationSubscription_Fragment
  | Node_Template_Fragment
  | Node_TimeSchedule_Fragment
  | Node_TriageResponsibility_Fragment
  | Node_User_Fragment
  | Node_UserNotificationSubscription_Fragment
  | Node_UserSettings_Fragment
  | Node_ViewPreferences_Fragment
  | Node_Webhook_Fragment
  | Node_WorkflowState_Fragment;

export type NotificationBatchActionPayloadFragment = { __typename: "NotificationBatchActionPayload" } & Pick<
  NotificationBatchActionPayload,
  "lastSyncId" | "success"
> & {
    notifications: Array<
      | ({ __typename?: "CustomerNeedNotification" } & Notification_CustomerNeedNotification_Fragment)
      | ({ __typename?: "CustomerNotification" } & Notification_CustomerNotification_Fragment)
      | ({ __typename?: "DocumentNotification" } & Notification_DocumentNotification_Fragment)
      | ({ __typename?: "InitiativeNotification" } & Notification_InitiativeNotification_Fragment)
      | ({ __typename?: "IssueNotification" } & Notification_IssueNotification_Fragment)
      | ({ __typename?: "OauthClientApprovalNotification" } & Notification_OauthClientApprovalNotification_Fragment)
      | ({ __typename?: "PostNotification" } & Notification_PostNotification_Fragment)
      | ({ __typename?: "ProjectNotification" } & Notification_ProjectNotification_Fragment)
      | ({ __typename?: "PullRequestNotification" } & Notification_PullRequestNotification_Fragment)
    >;
  };

export type NotificationConnectionFragment = { __typename: "NotificationConnection" } & {
  nodes: Array<
    | ({ __typename?: "CustomerNeedNotification" } & Notification_CustomerNeedNotification_Fragment)
    | ({ __typename?: "CustomerNotification" } & Notification_CustomerNotification_Fragment)
    | ({ __typename?: "DocumentNotification" } & Notification_DocumentNotification_Fragment)
    | ({ __typename?: "InitiativeNotification" } & Notification_InitiativeNotification_Fragment)
    | ({ __typename?: "IssueNotification" } & Notification_IssueNotification_Fragment)
    | ({ __typename?: "OauthClientApprovalNotification" } & Notification_OauthClientApprovalNotification_Fragment)
    | ({ __typename?: "PostNotification" } & Notification_PostNotification_Fragment)
    | ({ __typename?: "ProjectNotification" } & Notification_ProjectNotification_Fragment)
    | ({ __typename?: "PullRequestNotification" } & Notification_PullRequestNotification_Fragment)
  >;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type NotificationPayloadFragment = { __typename: "NotificationPayload" } & Pick<
  NotificationPayload,
  "lastSyncId" | "success"
> & {
    notification:
      | ({ __typename?: "CustomerNeedNotification" } & Notification_CustomerNeedNotification_Fragment)
      | ({ __typename?: "CustomerNotification" } & Notification_CustomerNotification_Fragment)
      | ({ __typename?: "DocumentNotification" } & Notification_DocumentNotification_Fragment)
      | ({ __typename?: "InitiativeNotification" } & Notification_InitiativeNotification_Fragment)
      | ({ __typename?: "IssueNotification" } & Notification_IssueNotification_Fragment)
      | ({ __typename?: "OauthClientApprovalNotification" } & Notification_OauthClientApprovalNotification_Fragment)
      | ({ __typename?: "PostNotification" } & Notification_PostNotification_Fragment)
      | ({ __typename?: "ProjectNotification" } & Notification_ProjectNotification_Fragment)
      | ({ __typename?: "PullRequestNotification" } & Notification_PullRequestNotification_Fragment);
  };

export type NotificationSubscriptionConnectionFragment = { __typename: "NotificationSubscriptionConnection" } & {
  nodes: Array<
    | ({
        __typename?: "CustomViewNotificationSubscription";
      } & NotificationSubscription_CustomViewNotificationSubscription_Fragment)
    | ({
        __typename?: "CustomerNotificationSubscription";
      } & NotificationSubscription_CustomerNotificationSubscription_Fragment)
    | ({
        __typename?: "CycleNotificationSubscription";
      } & NotificationSubscription_CycleNotificationSubscription_Fragment)
    | ({
        __typename?: "InitiativeNotificationSubscription";
      } & NotificationSubscription_InitiativeNotificationSubscription_Fragment)
    | ({
        __typename?: "LabelNotificationSubscription";
      } & NotificationSubscription_LabelNotificationSubscription_Fragment)
    | ({
        __typename?: "ProjectNotificationSubscription";
      } & NotificationSubscription_ProjectNotificationSubscription_Fragment)
    | ({ __typename?: "TeamNotificationSubscription" } & NotificationSubscription_TeamNotificationSubscription_Fragment)
    | ({ __typename?: "UserNotificationSubscription" } & NotificationSubscription_UserNotificationSubscription_Fragment)
  >;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type NotificationSubscriptionPayloadFragment = { __typename: "NotificationSubscriptionPayload" } & Pick<
  NotificationSubscriptionPayload,
  "lastSyncId" | "success"
> & {
    notificationSubscription:
      | ({
          __typename?: "CustomViewNotificationSubscription";
        } & NotificationSubscription_CustomViewNotificationSubscription_Fragment)
      | ({
          __typename?: "CustomerNotificationSubscription";
        } & NotificationSubscription_CustomerNotificationSubscription_Fragment)
      | ({
          __typename?: "CycleNotificationSubscription";
        } & NotificationSubscription_CycleNotificationSubscription_Fragment)
      | ({
          __typename?: "InitiativeNotificationSubscription";
        } & NotificationSubscription_InitiativeNotificationSubscription_Fragment)
      | ({
          __typename?: "LabelNotificationSubscription";
        } & NotificationSubscription_LabelNotificationSubscription_Fragment)
      | ({
          __typename?: "ProjectNotificationSubscription";
        } & NotificationSubscription_ProjectNotificationSubscription_Fragment)
      | ({
          __typename?: "TeamNotificationSubscription";
        } & NotificationSubscription_TeamNotificationSubscription_Fragment)
      | ({
          __typename?: "UserNotificationSubscription";
        } & NotificationSubscription_UserNotificationSubscription_Fragment);
  };

export type OrganizationAcceptedOrExpiredInviteDetailsPayloadFragment = {
  __typename: "OrganizationAcceptedOrExpiredInviteDetailsPayload";
} & Pick<OrganizationAcceptedOrExpiredInviteDetailsPayload, "status">;

export type OrganizationCancelDeletePayloadFragment = { __typename: "OrganizationCancelDeletePayload" } & Pick<
  OrganizationCancelDeletePayload,
  "success"
>;

export type OrganizationDeletePayloadFragment = { __typename: "OrganizationDeletePayload" } & Pick<
  OrganizationDeletePayload,
  "success"
>;

export type OrganizationExistsPayloadFragment = { __typename: "OrganizationExistsPayload" } & Pick<
  OrganizationExistsPayload,
  "success" | "exists"
>;

export type OrganizationInviteConnectionFragment = { __typename: "OrganizationInviteConnection" } & {
  nodes: Array<{ __typename?: "OrganizationInvite" } & OrganizationInviteFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type OrganizationInviteFullDetailsPayloadFragment = {
  __typename: "OrganizationInviteFullDetailsPayload";
} & Pick<
  OrganizationInviteFullDetailsPayload,
  | "allowedAuthServices"
  | "organizationId"
  | "organizationName"
  | "email"
  | "inviter"
  | "status"
  | "organizationLogoUrl"
  | "role"
  | "createdAt"
  | "accepted"
  | "expired"
>;

export type OrganizationInvitePayloadFragment = { __typename: "OrganizationInvitePayload" } & Pick<
  OrganizationInvitePayload,
  "lastSyncId" | "success"
> & { organizationInvite: { __typename?: "OrganizationInvite" } & Pick<OrganizationInvite, "id"> };

export type OrganizationIpRestrictionFragment = { __typename: "OrganizationIpRestriction" } & Pick<
  OrganizationIpRestriction,
  "range" | "description" | "type" | "enabled"
>;

export type OrganizationMetaFragment = { __typename: "OrganizationMeta" } & Pick<
  OrganizationMeta,
  "allowedAuthServices" | "region"
>;

export type OrganizationPayloadFragment = { __typename: "OrganizationPayload" } & Pick<
  OrganizationPayload,
  "lastSyncId" | "success"
>;

export type OrganizationStartTrialPayloadFragment = { __typename: "OrganizationStartTrialPayload" } & Pick<
  OrganizationStartTrialPayload,
  "success"
>;

export type PageInfoFragment = { __typename: "PageInfo" } & Pick<
  PageInfo,
  "startCursor" | "endCursor" | "hasPreviousPage" | "hasNextPage"
>;

export type PasskeyLoginStartResponseFragment = { __typename: "PasskeyLoginStartResponse" } & Pick<
  PasskeyLoginStartResponse,
  "options" | "success"
>;

export type ProjectConnectionFragment = { __typename: "ProjectConnection" } & {
  nodes: Array<{ __typename?: "Project" } & ProjectFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type ProjectFilterSuggestionPayloadFragment = { __typename: "ProjectFilterSuggestionPayload" } & Pick<
  ProjectFilterSuggestionPayload,
  "filter" | "logId"
>;

export type ProjectHistoryConnectionFragment = { __typename: "ProjectHistoryConnection" } & {
  nodes: Array<{ __typename?: "ProjectHistory" } & ProjectHistoryFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type ProjectLabelConnectionFragment = { __typename: "ProjectLabelConnection" } & {
  nodes: Array<{ __typename?: "ProjectLabel" } & ProjectLabelFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type ProjectLabelPayloadFragment = { __typename: "ProjectLabelPayload" } & Pick<
  ProjectLabelPayload,
  "lastSyncId" | "success"
> & { projectLabel: { __typename?: "ProjectLabel" } & Pick<ProjectLabel, "id"> };

export type ProjectMilestoneConnectionFragment = { __typename: "ProjectMilestoneConnection" } & {
  nodes: Array<{ __typename?: "ProjectMilestone" } & ProjectMilestoneFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type ProjectMilestoneMoveIssueToTeamFragment = { __typename: "ProjectMilestoneMoveIssueToTeam" } & Pick<
  ProjectMilestoneMoveIssueToTeam,
  "issueId" | "teamId"
>;

export type ProjectMilestoneMovePayloadFragment = { __typename: "ProjectMilestoneMovePayload" } & Pick<
  ProjectMilestoneMovePayload,
  "lastSyncId" | "success"
> & {
    previousIssueTeamIds?: Maybe<
      Array<{ __typename?: "ProjectMilestoneMoveIssueToTeam" } & ProjectMilestoneMoveIssueToTeamFragment>
    >;
    previousProjectTeamIds?: Maybe<
      { __typename?: "ProjectMilestoneMoveProjectTeams" } & ProjectMilestoneMoveProjectTeamsFragment
    >;
    projectMilestone: { __typename?: "ProjectMilestone" } & Pick<ProjectMilestone, "id">;
  };

export type ProjectMilestoneMoveProjectTeamsFragment = { __typename: "ProjectMilestoneMoveProjectTeams" } & Pick<
  ProjectMilestoneMoveProjectTeams,
  "projectId" | "teamIds"
>;

export type ProjectMilestonePayloadFragment = { __typename: "ProjectMilestonePayload" } & Pick<
  ProjectMilestonePayload,
  "lastSyncId" | "success"
> & { projectMilestone: { __typename?: "ProjectMilestone" } & Pick<ProjectMilestone, "id"> };

export type ProjectPayloadFragment = { __typename: "ProjectPayload" } & Pick<
  ProjectPayload,
  "lastSyncId" | "success"
> & { project?: Maybe<{ __typename?: "Project" } & Pick<Project, "id">> };

export type ProjectRelationConnectionFragment = { __typename: "ProjectRelationConnection" } & {
  nodes: Array<{ __typename?: "ProjectRelation" } & ProjectRelationFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type ProjectRelationPayloadFragment = { __typename: "ProjectRelationPayload" } & Pick<
  ProjectRelationPayload,
  "lastSyncId" | "success"
> & { projectRelation: { __typename?: "ProjectRelation" } & Pick<ProjectRelation, "id"> };

export type ProjectSearchPayloadFragment = { __typename: "ProjectSearchPayload" } & Pick<
  ProjectSearchPayload,
  "totalCount"
> & {
    archivePayload: { __typename?: "ArchiveResponse" } & ArchiveResponseFragment;
    nodes: Array<{ __typename?: "ProjectSearchResult" } & ProjectSearchResultFragment>;
    pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
  };

export type ProjectSearchResultFragment = { __typename: "ProjectSearchResult" } & Pick<
  ProjectSearchResult,
  | "trashed"
  | "labelIds"
  | "metadata"
  | "url"
  | "updateRemindersDay"
  | "targetDate"
  | "startDate"
  | "updateReminderFrequency"
  | "health"
  | "updateRemindersHour"
  | "icon"
  | "updatedAt"
  | "updateReminderFrequencyInWeeks"
  | "completedScopeHistory"
  | "completedIssueCountHistory"
  | "inProgressScopeHistory"
  | "progress"
  | "scope"
  | "priorityLabel"
  | "priority"
  | "color"
  | "content"
  | "description"
  | "name"
  | "slugId"
  | "targetDateResolution"
  | "startDateResolution"
  | "frequencyResolution"
  | "prioritySortOrder"
  | "sortOrder"
  | "archivedAt"
  | "createdAt"
  | "healthUpdatedAt"
  | "autoArchivedAt"
  | "canceledAt"
  | "completedAt"
  | "startedAt"
  | "projectUpdateRemindersPausedUntilAt"
  | "scopeHistory"
  | "issueCountHistory"
  | "id"
  | "slackIssueComments"
  | "slackNewIssue"
  | "slackIssueStatuses"
  | "state"
> & {
    integrationsSettings?: Maybe<{ __typename?: "IntegrationsSettings" } & Pick<IntegrationsSettings, "id">>;
    documentContent?: Maybe<{ __typename?: "DocumentContent" } & DocumentContentFragment>;
    lastUpdate?: Maybe<{ __typename?: "ProjectUpdate" } & Pick<ProjectUpdate, "id">>;
    lastAppliedTemplate?: Maybe<{ __typename?: "Template" } & Pick<Template, "id">>;
    lead?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    convertedFromIssue?: Maybe<{ __typename?: "Issue" } & Pick<Issue, "id">>;
    status: { __typename?: "ProjectStatus" } & Pick<ProjectStatus, "id">;
    creator?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    favorite?: Maybe<{ __typename?: "Favorite" } & Pick<Favorite, "id">>;
  };

export type ProjectStatusConnectionFragment = { __typename: "ProjectStatusConnection" } & {
  nodes: Array<{ __typename?: "ProjectStatus" } & ProjectStatusFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type ProjectStatusCountPayloadFragment = { __typename: "ProjectStatusCountPayload" } & Pick<
  ProjectStatusCountPayload,
  "privateCount" | "archivedTeamCount" | "count"
>;

export type ProjectStatusPayloadFragment = { __typename: "ProjectStatusPayload" } & Pick<
  ProjectStatusPayload,
  "lastSyncId" | "success"
> & { status: { __typename?: "ProjectStatus" } & Pick<ProjectStatus, "id"> };

export type ProjectUpdateConnectionFragment = { __typename: "ProjectUpdateConnection" } & {
  nodes: Array<{ __typename?: "ProjectUpdate" } & ProjectUpdateFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type ProjectUpdatePayloadFragment = { __typename: "ProjectUpdatePayload" } & Pick<
  ProjectUpdatePayload,
  "lastSyncId" | "success"
> & { projectUpdate: { __typename?: "ProjectUpdate" } & Pick<ProjectUpdate, "id"> };

export type ProjectUpdateReminderPayloadFragment = { __typename: "ProjectUpdateReminderPayload" } & Pick<
  ProjectUpdateReminderPayload,
  "lastSyncId" | "success"
>;

export type PushSubscriptionPayloadFragment = { __typename: "PushSubscriptionPayload" } & Pick<
  PushSubscriptionPayload,
  "lastSyncId" | "success"
> & { entity: { __typename?: "PushSubscription" } & PushSubscriptionFragment };

export type PushSubscriptionTestPayloadFragment = { __typename: "PushSubscriptionTestPayload" } & Pick<
  PushSubscriptionTestPayload,
  "success"
>;

export type RateLimitPayloadFragment = { __typename: "RateLimitPayload" } & Pick<
  RateLimitPayload,
  "identifier" | "kind"
> & { limits: Array<{ __typename?: "RateLimitResultPayload" } & RateLimitResultPayloadFragment> };

export type RateLimitResultPayloadFragment = { __typename: "RateLimitResultPayload" } & Pick<
  RateLimitResultPayload,
  "period" | "remainingAmount" | "requestedAmount" | "reset" | "allowedAmount" | "type"
>;

export type ReactionPayloadFragment = { __typename: "ReactionPayload" } & Pick<
  ReactionPayload,
  "lastSyncId" | "success"
> & { reaction: { __typename?: "Reaction" } & ReactionFragment };

export type RoadmapConnectionFragment = { __typename: "RoadmapConnection" } & {
  nodes: Array<{ __typename?: "Roadmap" } & RoadmapFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type RoadmapPayloadFragment = { __typename: "RoadmapPayload" } & Pick<
  RoadmapPayload,
  "lastSyncId" | "success"
> & { roadmap: { __typename?: "Roadmap" } & Pick<Roadmap, "id"> };

export type RoadmapToProjectConnectionFragment = { __typename: "RoadmapToProjectConnection" } & {
  nodes: Array<{ __typename?: "RoadmapToProject" } & RoadmapToProjectFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type RoadmapToProjectPayloadFragment = { __typename: "RoadmapToProjectPayload" } & Pick<
  RoadmapToProjectPayload,
  "lastSyncId" | "success"
> & { roadmapToProject: { __typename?: "RoadmapToProject" } & Pick<RoadmapToProject, "id"> };

export type SlackChannelConnectPayloadFragment = { __typename: "SlackChannelConnectPayload" } & Pick<
  SlackChannelConnectPayload,
  "lastSyncId" | "nudgeToConnectMainSlackIntegration" | "nudgeToUpdateMainSlackIntegration" | "addBot" | "success"
> & { integration?: Maybe<{ __typename?: "Integration" } & Pick<Integration, "id">> };

export type SsoUrlFromEmailResponseFragment = { __typename: "SsoUrlFromEmailResponse" } & Pick<
  SsoUrlFromEmailResponse,
  "samlSsoUrl" | "success"
>;

export type SuccessPayloadFragment = { __typename: "SuccessPayload" } & Pick<SuccessPayload, "lastSyncId" | "success">;

export type SummaryPayloadFragment = { __typename: "SummaryPayload" } & Pick<SummaryPayload, "summary">;

export type TeamConnectionFragment = { __typename: "TeamConnection" } & {
  nodes: Array<{ __typename?: "Team" } & TeamFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type TeamMembershipConnectionFragment = { __typename: "TeamMembershipConnection" } & {
  nodes: Array<{ __typename?: "TeamMembership" } & TeamMembershipFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type TeamMembershipPayloadFragment = { __typename: "TeamMembershipPayload" } & Pick<
  TeamMembershipPayload,
  "lastSyncId" | "success"
> & { teamMembership?: Maybe<{ __typename?: "TeamMembership" } & Pick<TeamMembership, "id">> };

export type TeamPayloadFragment = { __typename: "TeamPayload" } & Pick<TeamPayload, "lastSyncId" | "success"> & {
    team?: Maybe<{ __typename?: "Team" } & Pick<Team, "id">>;
  };

export type TemplateConnectionFragment = { __typename: "TemplateConnection" } & {
  nodes: Array<{ __typename?: "Template" } & TemplateFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type TemplatePayloadFragment = { __typename: "TemplatePayload" } & Pick<
  TemplatePayload,
  "lastSyncId" | "success"
> & { template: { __typename?: "Template" } & Pick<Template, "id"> };

export type TimeScheduleConnectionFragment = { __typename: "TimeScheduleConnection" } & {
  nodes: Array<{ __typename?: "TimeSchedule" } & TimeScheduleFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type TimeScheduleEntryFragment = { __typename: "TimeScheduleEntry" } & Pick<
  TimeScheduleEntry,
  "userId" | "userEmail" | "endsAt" | "startsAt"
>;

export type TimeSchedulePayloadFragment = { __typename: "TimeSchedulePayload" } & Pick<
  TimeSchedulePayload,
  "lastSyncId" | "success"
> & { timeSchedule: { __typename?: "TimeSchedule" } & Pick<TimeSchedule, "id"> };

export type TriageResponsibilityConnectionFragment = { __typename: "TriageResponsibilityConnection" } & {
  nodes: Array<{ __typename?: "TriageResponsibility" } & TriageResponsibilityFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type TriageResponsibilityManualSelectionFragment = { __typename: "TriageResponsibilityManualSelection" } & Pick<
  TriageResponsibilityManualSelection,
  "userIds"
>;

export type TriageResponsibilityPayloadFragment = { __typename: "TriageResponsibilityPayload" } & Pick<
  TriageResponsibilityPayload,
  "lastSyncId" | "success"
> & { triageResponsibility: { __typename?: "TriageResponsibility" } & Pick<TriageResponsibility, "id"> };

export type UploadFileHeaderFragment = { __typename: "UploadFileHeader" } & Pick<UploadFileHeader, "key" | "value">;

export type UploadPayloadFragment = { __typename: "UploadPayload" } & Pick<UploadPayload, "lastSyncId" | "success"> & {
    uploadFile?: Maybe<{ __typename?: "UploadFile" } & UploadFileFragment>;
  };

export type UserAdminPayloadFragment = { __typename: "UserAdminPayload" } & Pick<UserAdminPayload, "success">;

export type UserConnectionFragment = { __typename: "UserConnection" } & {
  nodes: Array<{ __typename?: "User" } & UserFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type UserPayloadFragment = { __typename: "UserPayload" } & Pick<UserPayload, "lastSyncId" | "success"> & {
    user?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
  };

export type UserSettingsFlagPayloadFragment = { __typename: "UserSettingsFlagPayload" } & Pick<
  UserSettingsFlagPayload,
  "flag" | "value" | "lastSyncId" | "success"
>;

export type UserSettingsFlagsResetPayloadFragment = { __typename: "UserSettingsFlagsResetPayload" } & Pick<
  UserSettingsFlagsResetPayload,
  "lastSyncId" | "success"
>;

export type UserSettingsPayloadFragment = { __typename: "UserSettingsPayload" } & Pick<
  UserSettingsPayload,
  "lastSyncId" | "success"
>;

export type ViewPreferencesPayloadFragment = { __typename: "ViewPreferencesPayload" } & Pick<
  ViewPreferencesPayload,
  "lastSyncId" | "success"
> & { viewPreferences: { __typename?: "ViewPreferences" } & ViewPreferencesFragment };

export type ViewPreferencesValuesFragment = { __typename: "ViewPreferencesValues" } & Pick<
  ViewPreferencesValues,
  "issueGrouping" | "viewOrdering" | "showCompletedIssues"
>;

export type WebhookConnectionFragment = { __typename: "WebhookConnection" } & {
  nodes: Array<{ __typename?: "Webhook" } & WebhookFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type WebhookPayloadFragment = { __typename: "WebhookPayload" } & Pick<
  WebhookPayload,
  "lastSyncId" | "success"
> & { webhook: { __typename?: "Webhook" } & Pick<Webhook, "id"> };

export type WorkflowStateConnectionFragment = { __typename: "WorkflowStateConnection" } & {
  nodes: Array<{ __typename?: "WorkflowState" } & WorkflowStateFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type WorkflowStatePayloadFragment = { __typename: "WorkflowStatePayload" } & Pick<
  WorkflowStatePayload,
  "lastSyncId" | "success"
> & { workflowState: { __typename?: "WorkflowState" } & Pick<WorkflowState, "id"> };

export type AdministrableTeamsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<TeamFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type AdministrableTeamsQuery = { __typename?: "Query" } & {
  administrableTeams: { __typename?: "TeamConnection" } & TeamConnectionFragment;
};

export type AgentActivitiesQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<AgentActivityFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type AgentActivitiesQuery = { __typename?: "Query" } & {
  agentActivities: { __typename?: "AgentActivityConnection" } & AgentActivityConnectionFragment;
};

export type AgentActivityQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type AgentActivityQuery = { __typename?: "Query" } & {
  agentActivity: { __typename?: "AgentActivity" } & AgentActivityFragment;
};

export type AgentSessionQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type AgentSessionQuery = { __typename?: "Query" } & {
  agentSession: { __typename?: "AgentSession" } & AgentSessionFragment;
};

export type AgentSession_ActivitiesQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<AgentActivityFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type AgentSession_ActivitiesQuery = { __typename?: "Query" } & {
  agentSession: { __typename?: "AgentSession" } & {
    activities: { __typename?: "AgentActivityConnection" } & AgentActivityConnectionFragment;
  };
};

export type AgentSessionsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type AgentSessionsQuery = { __typename?: "Query" } & {
  agentSessions: { __typename?: "AgentSessionConnection" } & AgentSessionConnectionFragment;
};

export type ApiKeysQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type ApiKeysQuery = { __typename?: "Query" } & {
  apiKeys: { __typename?: "ApiKeyConnection" } & ApiKeyConnectionFragment;
};

export type ApplicationInfoQueryVariables = Exact<{
  clientId: Scalars["String"];
}>;

export type ApplicationInfoQuery = { __typename?: "Query" } & {
  applicationInfo: { __typename?: "Application" } & ApplicationFragment;
};

export type ApplicationWithAuthorizationQueryVariables = Exact<{
  actor?: Maybe<Scalars["String"]>;
  clientId: Scalars["String"];
  redirectUri?: Maybe<Scalars["String"]>;
  scope: Array<Scalars["String"]> | Scalars["String"];
}>;

export type ApplicationWithAuthorizationQuery = { __typename?: "Query" } & {
  applicationWithAuthorization: { __typename?: "UserAuthorizedApplication" } & UserAuthorizedApplicationFragment;
};

export type AttachmentQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type AttachmentQuery = { __typename?: "Query" } & {
  attachment: { __typename?: "Attachment" } & AttachmentFragment;
};

export type AttachmentIssueQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type AttachmentIssueQuery = { __typename?: "Query" } & {
  attachmentIssue: { __typename?: "Issue" } & IssueFragment;
};

export type AttachmentIssue_AttachmentsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<AttachmentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type AttachmentIssue_AttachmentsQuery = { __typename?: "Query" } & {
  attachmentIssue: { __typename?: "Issue" } & {
    attachments: { __typename?: "AttachmentConnection" } & AttachmentConnectionFragment;
  };
};

export type AttachmentIssue_BotActorQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type AttachmentIssue_BotActorQuery = { __typename?: "Query" } & {
  attachmentIssue: { __typename?: "Issue" } & { botActor?: Maybe<{ __typename?: "ActorBot" } & ActorBotFragment> };
};

export type AttachmentIssue_ChildrenQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type AttachmentIssue_ChildrenQuery = { __typename?: "Query" } & {
  attachmentIssue: { __typename?: "Issue" } & {
    children: { __typename?: "IssueConnection" } & IssueConnectionFragment;
  };
};

export type AttachmentIssue_CommentsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CommentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type AttachmentIssue_CommentsQuery = { __typename?: "Query" } & {
  attachmentIssue: { __typename?: "Issue" } & {
    comments: { __typename?: "CommentConnection" } & CommentConnectionFragment;
  };
};

export type AttachmentIssue_FormerAttachmentsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<AttachmentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type AttachmentIssue_FormerAttachmentsQuery = { __typename?: "Query" } & {
  attachmentIssue: { __typename?: "Issue" } & {
    formerAttachments: { __typename?: "AttachmentConnection" } & AttachmentConnectionFragment;
  };
};

export type AttachmentIssue_FormerNeedsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CustomerNeedFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type AttachmentIssue_FormerNeedsQuery = { __typename?: "Query" } & {
  attachmentIssue: { __typename?: "Issue" } & {
    formerNeeds: { __typename?: "CustomerNeedConnection" } & CustomerNeedConnectionFragment;
  };
};

export type AttachmentIssue_HistoryQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type AttachmentIssue_HistoryQuery = { __typename?: "Query" } & {
  attachmentIssue: { __typename?: "Issue" } & {
    history: { __typename?: "IssueHistoryConnection" } & IssueHistoryConnectionFragment;
  };
};

export type AttachmentIssue_InverseRelationsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type AttachmentIssue_InverseRelationsQuery = { __typename?: "Query" } & {
  attachmentIssue: { __typename?: "Issue" } & {
    inverseRelations: { __typename?: "IssueRelationConnection" } & IssueRelationConnectionFragment;
  };
};

export type AttachmentIssue_LabelsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueLabelFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type AttachmentIssue_LabelsQuery = { __typename?: "Query" } & {
  attachmentIssue: { __typename?: "Issue" } & {
    labels: { __typename?: "IssueLabelConnection" } & IssueLabelConnectionFragment;
  };
};

export type AttachmentIssue_NeedsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CustomerNeedFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type AttachmentIssue_NeedsQuery = { __typename?: "Query" } & {
  attachmentIssue: { __typename?: "Issue" } & {
    needs: { __typename?: "CustomerNeedConnection" } & CustomerNeedConnectionFragment;
  };
};

export type AttachmentIssue_RelationsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type AttachmentIssue_RelationsQuery = { __typename?: "Query" } & {
  attachmentIssue: { __typename?: "Issue" } & {
    relations: { __typename?: "IssueRelationConnection" } & IssueRelationConnectionFragment;
  };
};

export type AttachmentIssue_SubscribersQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<UserFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  includeDisabled?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type AttachmentIssue_SubscribersQuery = { __typename?: "Query" } & {
  attachmentIssue: { __typename?: "Issue" } & {
    subscribers: { __typename?: "UserConnection" } & UserConnectionFragment;
  };
};

export type AttachmentsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<AttachmentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type AttachmentsQuery = { __typename?: "Query" } & {
  attachments: { __typename?: "AttachmentConnection" } & AttachmentConnectionFragment;
};

export type AttachmentsForUrlQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
  url: Scalars["String"];
}>;

export type AttachmentsForUrlQuery = { __typename?: "Query" } & {
  attachmentsForURL: { __typename?: "AttachmentConnection" } & AttachmentConnectionFragment;
};

export type AuditEntriesQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<AuditEntryFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type AuditEntriesQuery = { __typename?: "Query" } & {
  auditEntries: { __typename?: "AuditEntryConnection" } & AuditEntryConnectionFragment;
};

export type AuditEntryTypesQueryVariables = Exact<{ [key: string]: never }>;

export type AuditEntryTypesQuery = { __typename?: "Query" } & {
  auditEntryTypes: Array<{ __typename?: "AuditEntryType" } & AuditEntryTypeFragment>;
};

export type AuthenticationSessionsQueryVariables = Exact<{ [key: string]: never }>;

export type AuthenticationSessionsQuery = { __typename?: "Query" } & {
  authenticationSessions: Array<
    { __typename?: "AuthenticationSessionResponse" } & AuthenticationSessionResponseFragment
  >;
};

export type AvailableUsersQueryVariables = Exact<{ [key: string]: never }>;

export type AvailableUsersQuery = { __typename?: "Query" } & {
  availableUsers: { __typename?: "AuthResolverResponse" } & AuthResolverResponseFragment;
};

export type CommentQueryVariables = Exact<{
  hash?: Maybe<Scalars["String"]>;
  id?: Maybe<Scalars["String"]>;
}>;

export type CommentQuery = { __typename?: "Query" } & { comment: { __typename?: "Comment" } & CommentFragment };

export type Comment_BotActorQueryVariables = Exact<{
  hash?: Maybe<Scalars["String"]>;
  id?: Maybe<Scalars["String"]>;
}>;

export type Comment_BotActorQuery = { __typename?: "Query" } & {
  comment: { __typename?: "Comment" } & { botActor?: Maybe<{ __typename?: "ActorBot" } & ActorBotFragment> };
};

export type Comment_ChildrenQueryVariables = Exact<{
  hash?: Maybe<Scalars["String"]>;
  id?: Maybe<Scalars["String"]>;
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CommentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Comment_ChildrenQuery = { __typename?: "Query" } & {
  comment: { __typename?: "Comment" } & { children: { __typename?: "CommentConnection" } & CommentConnectionFragment };
};

export type Comment_DocumentContentQueryVariables = Exact<{
  hash?: Maybe<Scalars["String"]>;
  id?: Maybe<Scalars["String"]>;
}>;

export type Comment_DocumentContentQuery = { __typename?: "Query" } & {
  comment: { __typename?: "Comment" } & {
    documentContent?: Maybe<{ __typename?: "DocumentContent" } & DocumentContentFragment>;
  };
};

export type Comment_ExternalThreadQueryVariables = Exact<{
  hash?: Maybe<Scalars["String"]>;
  id?: Maybe<Scalars["String"]>;
}>;

export type Comment_ExternalThreadQuery = { __typename?: "Query" } & {
  comment: { __typename?: "Comment" } & {
    externalThread?: Maybe<{ __typename?: "SyncedExternalThread" } & SyncedExternalThreadFragment>;
  };
};

export type CommentsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CommentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type CommentsQuery = { __typename?: "Query" } & {
  comments: { __typename?: "CommentConnection" } & CommentConnectionFragment;
};

export type CustomViewQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type CustomViewQuery = { __typename?: "Query" } & {
  customView: { __typename?: "CustomView" } & CustomViewFragment;
};

export type CustomView_InitiativesQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<InitiativeFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type CustomView_InitiativesQuery = { __typename?: "Query" } & {
  customView: { __typename?: "CustomView" } & {
    initiatives: { __typename?: "InitiativeConnection" } & InitiativeConnectionFragment;
  };
};

export type CustomView_IssuesQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  includeSubTeams?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
  sort?: Maybe<Array<IssueSortInput> | IssueSortInput>;
}>;

export type CustomView_IssuesQuery = { __typename?: "Query" } & {
  customView: { __typename?: "CustomView" } & { issues: { __typename?: "IssueConnection" } & IssueConnectionFragment };
};

export type CustomView_OrganizationViewPreferencesQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type CustomView_OrganizationViewPreferencesQuery = { __typename?: "Query" } & {
  customView: { __typename?: "CustomView" } & {
    organizationViewPreferences?: Maybe<{ __typename?: "ViewPreferences" } & ViewPreferencesFragment>;
  };
};

export type CustomView_OrganizationViewPreferences_PreferencesQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type CustomView_OrganizationViewPreferences_PreferencesQuery = { __typename?: "Query" } & {
  customView: { __typename?: "CustomView" } & {
    organizationViewPreferences?: Maybe<
      { __typename?: "ViewPreferences" } & {
        preferences: { __typename?: "ViewPreferencesValues" } & ViewPreferencesValuesFragment;
      }
    >;
  };
};

export type CustomView_ProjectsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<ProjectFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  includeSubTeams?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
  sort?: Maybe<Array<ProjectSortInput> | ProjectSortInput>;
}>;

export type CustomView_ProjectsQuery = { __typename?: "Query" } & {
  customView: { __typename?: "CustomView" } & {
    projects: { __typename?: "ProjectConnection" } & ProjectConnectionFragment;
  };
};

export type CustomView_UserViewPreferencesQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type CustomView_UserViewPreferencesQuery = { __typename?: "Query" } & {
  customView: { __typename?: "CustomView" } & {
    userViewPreferences?: Maybe<{ __typename?: "ViewPreferences" } & ViewPreferencesFragment>;
  };
};

export type CustomView_UserViewPreferences_PreferencesQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type CustomView_UserViewPreferences_PreferencesQuery = { __typename?: "Query" } & {
  customView: { __typename?: "CustomView" } & {
    userViewPreferences?: Maybe<
      { __typename?: "ViewPreferences" } & {
        preferences: { __typename?: "ViewPreferencesValues" } & ViewPreferencesValuesFragment;
      }
    >;
  };
};

export type CustomView_ViewPreferencesValuesQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type CustomView_ViewPreferencesValuesQuery = { __typename?: "Query" } & {
  customView: { __typename?: "CustomView" } & {
    viewPreferencesValues?: Maybe<{ __typename?: "ViewPreferencesValues" } & ViewPreferencesValuesFragment>;
  };
};

export type CustomViewHasSubscribersQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type CustomViewHasSubscribersQuery = { __typename?: "Query" } & {
  customViewHasSubscribers: {
    __typename?: "CustomViewHasSubscribersPayload";
  } & CustomViewHasSubscribersPayloadFragment;
};

export type CustomViewsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CustomViewFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
  sort?: Maybe<Array<CustomViewSortInput> | CustomViewSortInput>;
}>;

export type CustomViewsQuery = { __typename?: "Query" } & {
  customViews: { __typename?: "CustomViewConnection" } & CustomViewConnectionFragment;
};

export type CustomerQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type CustomerQuery = { __typename?: "Query" } & { customer: { __typename?: "Customer" } & CustomerFragment };

export type CustomerNeedQueryVariables = Exact<{
  hash?: Maybe<Scalars["String"]>;
  id?: Maybe<Scalars["String"]>;
}>;

export type CustomerNeedQuery = { __typename?: "Query" } & {
  customerNeed: { __typename?: "CustomerNeed" } & CustomerNeedFragment;
};

export type CustomerNeed_ProjectAttachmentQueryVariables = Exact<{
  hash?: Maybe<Scalars["String"]>;
  id?: Maybe<Scalars["String"]>;
}>;

export type CustomerNeed_ProjectAttachmentQuery = { __typename?: "Query" } & {
  customerNeed: { __typename?: "CustomerNeed" } & {
    projectAttachment?: Maybe<{ __typename?: "ProjectAttachment" } & ProjectAttachmentFragment>;
  };
};

export type CustomerNeedsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CustomerNeedFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type CustomerNeedsQuery = { __typename?: "Query" } & {
  customerNeeds: { __typename?: "CustomerNeedConnection" } & CustomerNeedConnectionFragment;
};

export type CustomerStatusQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type CustomerStatusQuery = { __typename?: "Query" } & {
  customerStatus: { __typename?: "CustomerStatus" } & CustomerStatusFragment;
};

export type CustomerStatusesQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type CustomerStatusesQuery = { __typename?: "Query" } & {
  customerStatuses: { __typename?: "CustomerStatusConnection" } & CustomerStatusConnectionFragment;
};

export type CustomerTierQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type CustomerTierQuery = { __typename?: "Query" } & {
  customerTier: { __typename?: "CustomerTier" } & CustomerTierFragment;
};

export type CustomerTiersQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type CustomerTiersQuery = { __typename?: "Query" } & {
  customerTiers: { __typename?: "CustomerTierConnection" } & CustomerTierConnectionFragment;
};

export type CustomersQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CustomerFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
  sorts?: Maybe<Array<CustomerSortInput> | CustomerSortInput>;
}>;

export type CustomersQuery = { __typename?: "Query" } & {
  customers: { __typename?: "CustomerConnection" } & CustomerConnectionFragment;
};

export type CycleQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type CycleQuery = { __typename?: "Query" } & { cycle: { __typename?: "Cycle" } & CycleFragment };

export type Cycle_IssuesQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Cycle_IssuesQuery = { __typename?: "Query" } & {
  cycle: { __typename?: "Cycle" } & { issues: { __typename?: "IssueConnection" } & IssueConnectionFragment };
};

export type Cycle_UncompletedIssuesUponCloseQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Cycle_UncompletedIssuesUponCloseQuery = { __typename?: "Query" } & {
  cycle: { __typename?: "Cycle" } & {
    uncompletedIssuesUponClose: { __typename?: "IssueConnection" } & IssueConnectionFragment;
  };
};

export type CyclesQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CycleFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type CyclesQuery = { __typename?: "Query" } & {
  cycles: { __typename?: "CycleConnection" } & CycleConnectionFragment;
};

export type DocumentQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type DocumentQuery = { __typename?: "Query" } & { document: { __typename?: "Document" } & DocumentFragment };

export type Document_CommentsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CommentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Document_CommentsQuery = { __typename?: "Query" } & {
  document: { __typename?: "Document" } & {
    comments: { __typename?: "CommentConnection" } & CommentConnectionFragment;
  };
};

export type DocumentContentHistoryQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type DocumentContentHistoryQuery = { __typename?: "Query" } & {
  documentContentHistory: { __typename?: "DocumentContentHistoryPayload" } & DocumentContentHistoryPayloadFragment;
};

export type DocumentsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<DocumentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type DocumentsQuery = { __typename?: "Query" } & {
  documents: { __typename?: "DocumentConnection" } & DocumentConnectionFragment;
};

export type EmailIntakeAddressQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type EmailIntakeAddressQuery = { __typename?: "Query" } & {
  emailIntakeAddress: { __typename?: "EmailIntakeAddress" } & EmailIntakeAddressFragment;
};

export type EmailIntakeAddress_SesDomainIdentityQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type EmailIntakeAddress_SesDomainIdentityQuery = { __typename?: "Query" } & {
  emailIntakeAddress: { __typename?: "EmailIntakeAddress" } & {
    sesDomainIdentity?: Maybe<{ __typename?: "SesDomainIdentity" } & SesDomainIdentityFragment>;
  };
};

export type EmojiQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type EmojiQuery = { __typename?: "Query" } & { emoji: { __typename?: "Emoji" } & EmojiFragment };

export type EmojisQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type EmojisQuery = { __typename?: "Query" } & {
  emojis: { __typename?: "EmojiConnection" } & EmojiConnectionFragment;
};

export type EntityExternalLinkQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type EntityExternalLinkQuery = { __typename?: "Query" } & {
  entityExternalLink: { __typename?: "EntityExternalLink" } & EntityExternalLinkFragment;
};

export type ExternalUserQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type ExternalUserQuery = { __typename?: "Query" } & {
  externalUser: { __typename?: "ExternalUser" } & ExternalUserFragment;
};

export type ExternalUsersQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type ExternalUsersQuery = { __typename?: "Query" } & {
  externalUsers: { __typename?: "ExternalUserConnection" } & ExternalUserConnectionFragment;
};

export type FavoriteQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type FavoriteQuery = { __typename?: "Query" } & { favorite: { __typename?: "Favorite" } & FavoriteFragment };

export type Favorite_ChildrenQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Favorite_ChildrenQuery = { __typename?: "Query" } & {
  favorite: { __typename?: "Favorite" } & {
    children: { __typename?: "FavoriteConnection" } & FavoriteConnectionFragment;
  };
};

export type FavoritesQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type FavoritesQuery = { __typename?: "Query" } & {
  favorites: { __typename?: "FavoriteConnection" } & FavoriteConnectionFragment;
};

export type InitiativeQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type InitiativeQuery = { __typename?: "Query" } & {
  initiative: { __typename?: "Initiative" } & InitiativeFragment;
};

export type Initiative_DocumentContentQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type Initiative_DocumentContentQuery = { __typename?: "Query" } & {
  initiative: { __typename?: "Initiative" } & {
    documentContent?: Maybe<{ __typename?: "DocumentContent" } & DocumentContentFragment>;
  };
};

export type Initiative_DocumentsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<DocumentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Initiative_DocumentsQuery = { __typename?: "Query" } & {
  initiative: { __typename?: "Initiative" } & {
    documents: { __typename?: "DocumentConnection" } & DocumentConnectionFragment;
  };
};

export type Initiative_HistoryQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Initiative_HistoryQuery = { __typename?: "Query" } & {
  initiative: { __typename?: "Initiative" } & {
    history: { __typename?: "InitiativeHistoryConnection" } & InitiativeHistoryConnectionFragment;
  };
};

export type Initiative_LinksQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Initiative_LinksQuery = { __typename?: "Query" } & {
  initiative: { __typename?: "Initiative" } & {
    links: { __typename?: "EntityExternalLinkConnection" } & EntityExternalLinkConnectionFragment;
  };
};

export type Initiative_ProjectsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<ProjectFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  includeSubInitiatives?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
  sort?: Maybe<Array<ProjectSortInput> | ProjectSortInput>;
}>;

export type Initiative_ProjectsQuery = { __typename?: "Query" } & {
  initiative: { __typename?: "Initiative" } & {
    projects: { __typename?: "ProjectConnection" } & ProjectConnectionFragment;
  };
};

export type Initiative_SubInitiativesQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<InitiativeFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
  sort?: Maybe<Array<InitiativeSortInput> | InitiativeSortInput>;
}>;

export type Initiative_SubInitiativesQuery = { __typename?: "Query" } & {
  initiative: { __typename?: "Initiative" } & {
    subInitiatives: { __typename?: "InitiativeConnection" } & InitiativeConnectionFragment;
  };
};

export type InitiativeRelationQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type InitiativeRelationQuery = { __typename?: "Query" } & {
  initiativeRelation: { __typename?: "ProjectRelation" } & ProjectRelationFragment;
};

export type InitiativeRelationsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type InitiativeRelationsQuery = { __typename?: "Query" } & {
  initiativeRelations: { __typename?: "InitiativeRelationConnection" } & InitiativeRelationConnectionFragment;
};

export type InitiativeToProjectQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type InitiativeToProjectQuery = { __typename?: "Query" } & {
  initiativeToProject: { __typename?: "InitiativeToProject" } & InitiativeToProjectFragment;
};

export type InitiativeToProjectsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type InitiativeToProjectsQuery = { __typename?: "Query" } & {
  initiativeToProjects: { __typename?: "InitiativeToProjectConnection" } & InitiativeToProjectConnectionFragment;
};

export type InitiativeUpdateQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type InitiativeUpdateQuery = { __typename?: "Query" } & {
  initiativeUpdate: { __typename?: "InitiativeUpdate" } & InitiativeUpdateFragment;
};

export type InitiativeUpdate_CommentsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CommentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type InitiativeUpdate_CommentsQuery = { __typename?: "Query" } & {
  initiativeUpdate: { __typename?: "InitiativeUpdate" } & {
    comments: { __typename?: "CommentConnection" } & CommentConnectionFragment;
  };
};

export type InitiativeUpdatesQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<InitiativeUpdateFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type InitiativeUpdatesQuery = { __typename?: "Query" } & {
  initiativeUpdates: { __typename?: "InitiativeUpdateConnection" } & InitiativeUpdateConnectionFragment;
};

export type InitiativesQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<InitiativeFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
  sort?: Maybe<Array<InitiativeSortInput> | InitiativeSortInput>;
}>;

export type InitiativesQuery = { __typename?: "Query" } & {
  initiatives: { __typename?: "InitiativeConnection" } & InitiativeConnectionFragment;
};

export type IntegrationQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type IntegrationQuery = { __typename?: "Query" } & {
  integration: { __typename?: "Integration" } & IntegrationFragment;
};

export type IntegrationHasScopesQueryVariables = Exact<{
  integrationId: Scalars["String"];
  scopes: Array<Scalars["String"]> | Scalars["String"];
}>;

export type IntegrationHasScopesQuery = { __typename?: "Query" } & {
  integrationHasScopes: { __typename?: "IntegrationHasScopesPayload" } & IntegrationHasScopesPayloadFragment;
};

export type IntegrationTemplateQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type IntegrationTemplateQuery = { __typename?: "Query" } & {
  integrationTemplate: { __typename?: "IntegrationTemplate" } & IntegrationTemplateFragment;
};

export type IntegrationTemplatesQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type IntegrationTemplatesQuery = { __typename?: "Query" } & {
  integrationTemplates: { __typename?: "IntegrationTemplateConnection" } & IntegrationTemplateConnectionFragment;
};

export type IntegrationsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type IntegrationsQuery = { __typename?: "Query" } & {
  integrations: { __typename?: "IntegrationConnection" } & IntegrationConnectionFragment;
};

export type IntegrationsSettingsQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type IntegrationsSettingsQuery = { __typename?: "Query" } & {
  integrationsSettings: { __typename?: "IntegrationsSettings" } & IntegrationsSettingsFragment;
};

export type IssueQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type IssueQuery = { __typename?: "Query" } & { issue: { __typename?: "Issue" } & IssueFragment };

export type Issue_AttachmentsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<AttachmentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Issue_AttachmentsQuery = { __typename?: "Query" } & {
  issue: { __typename?: "Issue" } & {
    attachments: { __typename?: "AttachmentConnection" } & AttachmentConnectionFragment;
  };
};

export type Issue_BotActorQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type Issue_BotActorQuery = { __typename?: "Query" } & {
  issue: { __typename?: "Issue" } & { botActor?: Maybe<{ __typename?: "ActorBot" } & ActorBotFragment> };
};

export type Issue_ChildrenQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Issue_ChildrenQuery = { __typename?: "Query" } & {
  issue: { __typename?: "Issue" } & { children: { __typename?: "IssueConnection" } & IssueConnectionFragment };
};

export type Issue_CommentsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CommentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Issue_CommentsQuery = { __typename?: "Query" } & {
  issue: { __typename?: "Issue" } & { comments: { __typename?: "CommentConnection" } & CommentConnectionFragment };
};

export type Issue_FormerAttachmentsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<AttachmentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Issue_FormerAttachmentsQuery = { __typename?: "Query" } & {
  issue: { __typename?: "Issue" } & {
    formerAttachments: { __typename?: "AttachmentConnection" } & AttachmentConnectionFragment;
  };
};

export type Issue_FormerNeedsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CustomerNeedFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Issue_FormerNeedsQuery = { __typename?: "Query" } & {
  issue: { __typename?: "Issue" } & {
    formerNeeds: { __typename?: "CustomerNeedConnection" } & CustomerNeedConnectionFragment;
  };
};

export type Issue_HistoryQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Issue_HistoryQuery = { __typename?: "Query" } & {
  issue: { __typename?: "Issue" } & {
    history: { __typename?: "IssueHistoryConnection" } & IssueHistoryConnectionFragment;
  };
};

export type Issue_InverseRelationsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Issue_InverseRelationsQuery = { __typename?: "Query" } & {
  issue: { __typename?: "Issue" } & {
    inverseRelations: { __typename?: "IssueRelationConnection" } & IssueRelationConnectionFragment;
  };
};

export type Issue_LabelsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueLabelFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Issue_LabelsQuery = { __typename?: "Query" } & {
  issue: { __typename?: "Issue" } & { labels: { __typename?: "IssueLabelConnection" } & IssueLabelConnectionFragment };
};

export type Issue_NeedsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CustomerNeedFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Issue_NeedsQuery = { __typename?: "Query" } & {
  issue: { __typename?: "Issue" } & {
    needs: { __typename?: "CustomerNeedConnection" } & CustomerNeedConnectionFragment;
  };
};

export type Issue_RelationsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Issue_RelationsQuery = { __typename?: "Query" } & {
  issue: { __typename?: "Issue" } & {
    relations: { __typename?: "IssueRelationConnection" } & IssueRelationConnectionFragment;
  };
};

export type Issue_SubscribersQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<UserFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  includeDisabled?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Issue_SubscribersQuery = { __typename?: "Query" } & {
  issue: { __typename?: "Issue" } & { subscribers: { __typename?: "UserConnection" } & UserConnectionFragment };
};

export type IssueFigmaFileKeySearchQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  fileKey: Scalars["String"];
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type IssueFigmaFileKeySearchQuery = { __typename?: "Query" } & {
  issueFigmaFileKeySearch: { __typename?: "IssueConnection" } & IssueConnectionFragment;
};

export type IssueFilterSuggestionQueryVariables = Exact<{
  projectId?: Maybe<Scalars["String"]>;
  prompt: Scalars["String"];
}>;

export type IssueFilterSuggestionQuery = { __typename?: "Query" } & {
  issueFilterSuggestion: { __typename?: "IssueFilterSuggestionPayload" } & IssueFilterSuggestionPayloadFragment;
};

export type IssueImportCheckCsvQueryVariables = Exact<{
  csvUrl: Scalars["String"];
  service: Scalars["String"];
}>;

export type IssueImportCheckCsvQuery = { __typename?: "Query" } & {
  issueImportCheckCSV: { __typename?: "IssueImportCheckPayload" } & IssueImportCheckPayloadFragment;
};

export type IssueImportCheckSyncQueryVariables = Exact<{
  issueImportId: Scalars["String"];
}>;

export type IssueImportCheckSyncQuery = { __typename?: "Query" } & {
  issueImportCheckSync: { __typename?: "IssueImportSyncCheckPayload" } & IssueImportSyncCheckPayloadFragment;
};

export type IssueImportJqlCheckQueryVariables = Exact<{
  jiraEmail: Scalars["String"];
  jiraHostname: Scalars["String"];
  jiraProject: Scalars["String"];
  jiraToken: Scalars["String"];
  jql: Scalars["String"];
}>;

export type IssueImportJqlCheckQuery = { __typename?: "Query" } & {
  issueImportJqlCheck: { __typename?: "IssueImportJqlCheckPayload" } & IssueImportJqlCheckPayloadFragment;
};

export type IssueLabelQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type IssueLabelQuery = { __typename?: "Query" } & {
  issueLabel: { __typename?: "IssueLabel" } & IssueLabelFragment;
};

export type IssueLabel_ChildrenQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueLabelFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type IssueLabel_ChildrenQuery = { __typename?: "Query" } & {
  issueLabel: { __typename?: "IssueLabel" } & {
    children: { __typename?: "IssueLabelConnection" } & IssueLabelConnectionFragment;
  };
};

export type IssueLabel_IssuesQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type IssueLabel_IssuesQuery = { __typename?: "Query" } & {
  issueLabel: { __typename?: "IssueLabel" } & { issues: { __typename?: "IssueConnection" } & IssueConnectionFragment };
};

export type IssueLabelsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueLabelFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type IssueLabelsQuery = { __typename?: "Query" } & {
  issueLabels: { __typename?: "IssueLabelConnection" } & IssueLabelConnectionFragment;
};

export type IssuePriorityValuesQueryVariables = Exact<{ [key: string]: never }>;

export type IssuePriorityValuesQuery = { __typename?: "Query" } & {
  issuePriorityValues: Array<{ __typename?: "IssuePriorityValue" } & IssuePriorityValueFragment>;
};

export type IssueRelationQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type IssueRelationQuery = { __typename?: "Query" } & {
  issueRelation: { __typename?: "IssueRelation" } & IssueRelationFragment;
};

export type IssueRelationsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type IssueRelationsQuery = { __typename?: "Query" } & {
  issueRelations: { __typename?: "IssueRelationConnection" } & IssueRelationConnectionFragment;
};

export type IssueSearchQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
  query?: Maybe<Scalars["String"]>;
}>;

export type IssueSearchQuery = { __typename?: "Query" } & {
  issueSearch: { __typename?: "IssueConnection" } & IssueConnectionFragment;
};

export type IssueTitleSuggestionFromCustomerRequestQueryVariables = Exact<{
  request: Scalars["String"];
}>;

export type IssueTitleSuggestionFromCustomerRequestQuery = { __typename?: "Query" } & {
  issueTitleSuggestionFromCustomerRequest: {
    __typename?: "IssueTitleSuggestionFromCustomerRequestPayload";
  } & IssueTitleSuggestionFromCustomerRequestPayloadFragment;
};

export type IssueVcsBranchSearchQueryVariables = Exact<{
  branchName: Scalars["String"];
}>;

export type IssueVcsBranchSearchQuery = { __typename?: "Query" } & {
  issueVcsBranchSearch?: Maybe<{ __typename?: "Issue" } & IssueFragment>;
};

export type IssueVcsBranchSearch_AttachmentsQueryVariables = Exact<{
  branchName: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<AttachmentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type IssueVcsBranchSearch_AttachmentsQuery = { __typename?: "Query" } & {
  issueVcsBranchSearch?: Maybe<
    { __typename?: "Issue" } & { attachments: { __typename?: "AttachmentConnection" } & AttachmentConnectionFragment }
  >;
};

export type IssueVcsBranchSearch_BotActorQueryVariables = Exact<{
  branchName: Scalars["String"];
}>;

export type IssueVcsBranchSearch_BotActorQuery = { __typename?: "Query" } & {
  issueVcsBranchSearch?: Maybe<
    { __typename?: "Issue" } & { botActor?: Maybe<{ __typename?: "ActorBot" } & ActorBotFragment> }
  >;
};

export type IssueVcsBranchSearch_ChildrenQueryVariables = Exact<{
  branchName: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type IssueVcsBranchSearch_ChildrenQuery = { __typename?: "Query" } & {
  issueVcsBranchSearch?: Maybe<
    { __typename?: "Issue" } & { children: { __typename?: "IssueConnection" } & IssueConnectionFragment }
  >;
};

export type IssueVcsBranchSearch_CommentsQueryVariables = Exact<{
  branchName: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CommentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type IssueVcsBranchSearch_CommentsQuery = { __typename?: "Query" } & {
  issueVcsBranchSearch?: Maybe<
    { __typename?: "Issue" } & { comments: { __typename?: "CommentConnection" } & CommentConnectionFragment }
  >;
};

export type IssueVcsBranchSearch_FormerAttachmentsQueryVariables = Exact<{
  branchName: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<AttachmentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type IssueVcsBranchSearch_FormerAttachmentsQuery = { __typename?: "Query" } & {
  issueVcsBranchSearch?: Maybe<
    { __typename?: "Issue" } & {
      formerAttachments: { __typename?: "AttachmentConnection" } & AttachmentConnectionFragment;
    }
  >;
};

export type IssueVcsBranchSearch_FormerNeedsQueryVariables = Exact<{
  branchName: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CustomerNeedFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type IssueVcsBranchSearch_FormerNeedsQuery = { __typename?: "Query" } & {
  issueVcsBranchSearch?: Maybe<
    { __typename?: "Issue" } & {
      formerNeeds: { __typename?: "CustomerNeedConnection" } & CustomerNeedConnectionFragment;
    }
  >;
};

export type IssueVcsBranchSearch_HistoryQueryVariables = Exact<{
  branchName: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type IssueVcsBranchSearch_HistoryQuery = { __typename?: "Query" } & {
  issueVcsBranchSearch?: Maybe<
    { __typename?: "Issue" } & { history: { __typename?: "IssueHistoryConnection" } & IssueHistoryConnectionFragment }
  >;
};

export type IssueVcsBranchSearch_InverseRelationsQueryVariables = Exact<{
  branchName: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type IssueVcsBranchSearch_InverseRelationsQuery = { __typename?: "Query" } & {
  issueVcsBranchSearch?: Maybe<
    { __typename?: "Issue" } & {
      inverseRelations: { __typename?: "IssueRelationConnection" } & IssueRelationConnectionFragment;
    }
  >;
};

export type IssueVcsBranchSearch_LabelsQueryVariables = Exact<{
  branchName: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueLabelFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type IssueVcsBranchSearch_LabelsQuery = { __typename?: "Query" } & {
  issueVcsBranchSearch?: Maybe<
    { __typename?: "Issue" } & { labels: { __typename?: "IssueLabelConnection" } & IssueLabelConnectionFragment }
  >;
};

export type IssueVcsBranchSearch_NeedsQueryVariables = Exact<{
  branchName: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CustomerNeedFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type IssueVcsBranchSearch_NeedsQuery = { __typename?: "Query" } & {
  issueVcsBranchSearch?: Maybe<
    { __typename?: "Issue" } & { needs: { __typename?: "CustomerNeedConnection" } & CustomerNeedConnectionFragment }
  >;
};

export type IssueVcsBranchSearch_RelationsQueryVariables = Exact<{
  branchName: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type IssueVcsBranchSearch_RelationsQuery = { __typename?: "Query" } & {
  issueVcsBranchSearch?: Maybe<
    { __typename?: "Issue" } & {
      relations: { __typename?: "IssueRelationConnection" } & IssueRelationConnectionFragment;
    }
  >;
};

export type IssueVcsBranchSearch_SubscribersQueryVariables = Exact<{
  branchName: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<UserFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  includeDisabled?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type IssueVcsBranchSearch_SubscribersQuery = { __typename?: "Query" } & {
  issueVcsBranchSearch?: Maybe<
    { __typename?: "Issue" } & { subscribers: { __typename?: "UserConnection" } & UserConnectionFragment }
  >;
};

export type IssuesQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
  sort?: Maybe<Array<IssueSortInput> | IssueSortInput>;
}>;

export type IssuesQuery = { __typename?: "Query" } & {
  issues: { __typename?: "IssueConnection" } & IssueConnectionFragment;
};

export type NotificationQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type NotificationQuery = { __typename?: "Query" } & {
  notification:
    | ({ __typename?: "CustomerNeedNotification" } & Notification_CustomerNeedNotification_Fragment)
    | ({ __typename?: "CustomerNotification" } & Notification_CustomerNotification_Fragment)
    | ({ __typename?: "DocumentNotification" } & Notification_DocumentNotification_Fragment)
    | ({ __typename?: "InitiativeNotification" } & Notification_InitiativeNotification_Fragment)
    | ({ __typename?: "IssueNotification" } & Notification_IssueNotification_Fragment)
    | ({ __typename?: "OauthClientApprovalNotification" } & Notification_OauthClientApprovalNotification_Fragment)
    | ({ __typename?: "PostNotification" } & Notification_PostNotification_Fragment)
    | ({ __typename?: "ProjectNotification" } & Notification_ProjectNotification_Fragment)
    | ({ __typename?: "PullRequestNotification" } & Notification_PullRequestNotification_Fragment);
};

export type NotificationSubscriptionQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type NotificationSubscriptionQuery = { __typename?: "Query" } & {
  notificationSubscription:
    | ({
        __typename?: "CustomViewNotificationSubscription";
      } & NotificationSubscription_CustomViewNotificationSubscription_Fragment)
    | ({
        __typename?: "CustomerNotificationSubscription";
      } & NotificationSubscription_CustomerNotificationSubscription_Fragment)
    | ({
        __typename?: "CycleNotificationSubscription";
      } & NotificationSubscription_CycleNotificationSubscription_Fragment)
    | ({
        __typename?: "InitiativeNotificationSubscription";
      } & NotificationSubscription_InitiativeNotificationSubscription_Fragment)
    | ({
        __typename?: "LabelNotificationSubscription";
      } & NotificationSubscription_LabelNotificationSubscription_Fragment)
    | ({
        __typename?: "ProjectNotificationSubscription";
      } & NotificationSubscription_ProjectNotificationSubscription_Fragment)
    | ({ __typename?: "TeamNotificationSubscription" } & NotificationSubscription_TeamNotificationSubscription_Fragment)
    | ({
        __typename?: "UserNotificationSubscription";
      } & NotificationSubscription_UserNotificationSubscription_Fragment);
};

export type NotificationSubscriptionsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type NotificationSubscriptionsQuery = { __typename?: "Query" } & {
  notificationSubscriptions: {
    __typename?: "NotificationSubscriptionConnection";
  } & NotificationSubscriptionConnectionFragment;
};

export type NotificationsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<NotificationFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type NotificationsQuery = { __typename?: "Query" } & {
  notifications: { __typename?: "NotificationConnection" } & NotificationConnectionFragment;
};

export type OrganizationQueryVariables = Exact<{ [key: string]: never }>;

export type OrganizationQuery = { __typename?: "Query" } & {
  organization: { __typename?: "Organization" } & OrganizationFragment;
};

export type Organization_IntegrationsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Organization_IntegrationsQuery = { __typename?: "Query" } & {
  organization: { __typename?: "Organization" } & {
    integrations: { __typename?: "IntegrationConnection" } & IntegrationConnectionFragment;
  };
};

export type Organization_LabelsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueLabelFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Organization_LabelsQuery = { __typename?: "Query" } & {
  organization: { __typename?: "Organization" } & {
    labels: { __typename?: "IssueLabelConnection" } & IssueLabelConnectionFragment;
  };
};

export type Organization_ProjectLabelsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<ProjectLabelFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Organization_ProjectLabelsQuery = { __typename?: "Query" } & {
  organization: { __typename?: "Organization" } & {
    projectLabels: { __typename?: "ProjectLabelConnection" } & ProjectLabelConnectionFragment;
  };
};

export type Organization_SubscriptionQueryVariables = Exact<{ [key: string]: never }>;

export type Organization_SubscriptionQuery = { __typename?: "Query" } & {
  organization: { __typename?: "Organization" } & {
    subscription?: Maybe<{ __typename?: "PaidSubscription" } & PaidSubscriptionFragment>;
  };
};

export type Organization_TeamsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<TeamFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Organization_TeamsQuery = { __typename?: "Query" } & {
  organization: { __typename?: "Organization" } & { teams: { __typename?: "TeamConnection" } & TeamConnectionFragment };
};

export type Organization_TemplatesQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<NullableTemplateFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Organization_TemplatesQuery = { __typename?: "Query" } & {
  organization: { __typename?: "Organization" } & {
    templates: { __typename?: "TemplateConnection" } & TemplateConnectionFragment;
  };
};

export type Organization_UsersQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  includeDisabled?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Organization_UsersQuery = { __typename?: "Query" } & {
  organization: { __typename?: "Organization" } & { users: { __typename?: "UserConnection" } & UserConnectionFragment };
};

export type OrganizationExistsQueryVariables = Exact<{
  urlKey: Scalars["String"];
}>;

export type OrganizationExistsQuery = { __typename?: "Query" } & {
  organizationExists: { __typename?: "OrganizationExistsPayload" } & OrganizationExistsPayloadFragment;
};

export type OrganizationInviteQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type OrganizationInviteQuery = { __typename?: "Query" } & {
  organizationInvite: { __typename?: "OrganizationInvite" } & OrganizationInviteFragment;
};

export type OrganizationInvitesQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type OrganizationInvitesQuery = { __typename?: "Query" } & {
  organizationInvites: { __typename?: "OrganizationInviteConnection" } & OrganizationInviteConnectionFragment;
};

export type ProjectQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type ProjectQuery = { __typename?: "Query" } & { project: { __typename?: "Project" } & ProjectFragment };

export type Project_CommentsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CommentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Project_CommentsQuery = { __typename?: "Query" } & {
  project: { __typename?: "Project" } & { comments: { __typename?: "CommentConnection" } & CommentConnectionFragment };
};

export type Project_DocumentContentQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type Project_DocumentContentQuery = { __typename?: "Query" } & {
  project: { __typename?: "Project" } & {
    documentContent?: Maybe<{ __typename?: "DocumentContent" } & DocumentContentFragment>;
  };
};

export type Project_DocumentsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<DocumentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Project_DocumentsQuery = { __typename?: "Query" } & {
  project: { __typename?: "Project" } & {
    documents: { __typename?: "DocumentConnection" } & DocumentConnectionFragment;
  };
};

export type Project_ExternalLinksQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Project_ExternalLinksQuery = { __typename?: "Query" } & {
  project: { __typename?: "Project" } & {
    externalLinks: { __typename?: "EntityExternalLinkConnection" } & EntityExternalLinkConnectionFragment;
  };
};

export type Project_HistoryQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Project_HistoryQuery = { __typename?: "Query" } & {
  project: { __typename?: "Project" } & {
    history: { __typename?: "ProjectHistoryConnection" } & ProjectHistoryConnectionFragment;
  };
};

export type Project_InitiativesQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Project_InitiativesQuery = { __typename?: "Query" } & {
  project: { __typename?: "Project" } & {
    initiatives: { __typename?: "InitiativeConnection" } & InitiativeConnectionFragment;
  };
};

export type Project_InverseRelationsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Project_InverseRelationsQuery = { __typename?: "Query" } & {
  project: { __typename?: "Project" } & {
    inverseRelations: { __typename?: "ProjectRelationConnection" } & ProjectRelationConnectionFragment;
  };
};

export type Project_IssuesQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Project_IssuesQuery = { __typename?: "Query" } & {
  project: { __typename?: "Project" } & { issues: { __typename?: "IssueConnection" } & IssueConnectionFragment };
};

export type Project_LabelsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<ProjectLabelFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Project_LabelsQuery = { __typename?: "Query" } & {
  project: { __typename?: "Project" } & {
    labels: { __typename?: "ProjectLabelConnection" } & ProjectLabelConnectionFragment;
  };
};

export type Project_MembersQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<UserFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  includeDisabled?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Project_MembersQuery = { __typename?: "Query" } & {
  project: { __typename?: "Project" } & { members: { __typename?: "UserConnection" } & UserConnectionFragment };
};

export type Project_NeedsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CustomerNeedFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Project_NeedsQuery = { __typename?: "Query" } & {
  project: { __typename?: "Project" } & {
    needs: { __typename?: "CustomerNeedConnection" } & CustomerNeedConnectionFragment;
  };
};

export type Project_ProjectMilestonesQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<ProjectMilestoneFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Project_ProjectMilestonesQuery = { __typename?: "Query" } & {
  project: { __typename?: "Project" } & {
    projectMilestones: { __typename?: "ProjectMilestoneConnection" } & ProjectMilestoneConnectionFragment;
  };
};

export type Project_ProjectUpdatesQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Project_ProjectUpdatesQuery = { __typename?: "Query" } & {
  project: { __typename?: "Project" } & {
    projectUpdates: { __typename?: "ProjectUpdateConnection" } & ProjectUpdateConnectionFragment;
  };
};

export type Project_RelationsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Project_RelationsQuery = { __typename?: "Query" } & {
  project: { __typename?: "Project" } & {
    relations: { __typename?: "ProjectRelationConnection" } & ProjectRelationConnectionFragment;
  };
};

export type Project_TeamsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<TeamFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Project_TeamsQuery = { __typename?: "Query" } & {
  project: { __typename?: "Project" } & { teams: { __typename?: "TeamConnection" } & TeamConnectionFragment };
};

export type ProjectFilterSuggestionQueryVariables = Exact<{
  prompt: Scalars["String"];
}>;

export type ProjectFilterSuggestionQuery = { __typename?: "Query" } & {
  projectFilterSuggestion: { __typename?: "ProjectFilterSuggestionPayload" } & ProjectFilterSuggestionPayloadFragment;
};

export type ProjectLabelQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type ProjectLabelQuery = { __typename?: "Query" } & {
  projectLabel: { __typename?: "ProjectLabel" } & ProjectLabelFragment;
};

export type ProjectLabel_ChildrenQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<ProjectLabelFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type ProjectLabel_ChildrenQuery = { __typename?: "Query" } & {
  projectLabel: { __typename?: "ProjectLabel" } & {
    children: { __typename?: "ProjectLabelConnection" } & ProjectLabelConnectionFragment;
  };
};

export type ProjectLabel_ProjectsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<ProjectFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
  sort?: Maybe<Array<ProjectSortInput> | ProjectSortInput>;
}>;

export type ProjectLabel_ProjectsQuery = { __typename?: "Query" } & {
  projectLabel: { __typename?: "ProjectLabel" } & {
    projects: { __typename?: "ProjectConnection" } & ProjectConnectionFragment;
  };
};

export type ProjectLabelsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<ProjectLabelFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type ProjectLabelsQuery = { __typename?: "Query" } & {
  projectLabels: { __typename?: "ProjectLabelConnection" } & ProjectLabelConnectionFragment;
};

export type ProjectMilestoneQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type ProjectMilestoneQuery = { __typename?: "Query" } & {
  projectMilestone: { __typename?: "ProjectMilestone" } & ProjectMilestoneFragment;
};

export type ProjectMilestone_DocumentContentQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type ProjectMilestone_DocumentContentQuery = { __typename?: "Query" } & {
  projectMilestone: { __typename?: "ProjectMilestone" } & {
    documentContent?: Maybe<{ __typename?: "DocumentContent" } & DocumentContentFragment>;
  };
};

export type ProjectMilestone_IssuesQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type ProjectMilestone_IssuesQuery = { __typename?: "Query" } & {
  projectMilestone: { __typename?: "ProjectMilestone" } & {
    issues: { __typename?: "IssueConnection" } & IssueConnectionFragment;
  };
};

export type ProjectMilestonesQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<ProjectMilestoneFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type ProjectMilestonesQuery = { __typename?: "Query" } & {
  projectMilestones: { __typename?: "ProjectMilestoneConnection" } & ProjectMilestoneConnectionFragment;
};

export type ProjectRelationQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type ProjectRelationQuery = { __typename?: "Query" } & {
  projectRelation: { __typename?: "ProjectRelation" } & ProjectRelationFragment;
};

export type ProjectRelationsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type ProjectRelationsQuery = { __typename?: "Query" } & {
  projectRelations: { __typename?: "ProjectRelationConnection" } & ProjectRelationConnectionFragment;
};

export type ProjectStatusQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type ProjectStatusQuery = { __typename?: "Query" } & {
  projectStatus: { __typename?: "ProjectStatus" } & ProjectStatusFragment;
};

export type ProjectStatusesQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type ProjectStatusesQuery = { __typename?: "Query" } & {
  projectStatuses: { __typename?: "ProjectStatusConnection" } & ProjectStatusConnectionFragment;
};

export type ProjectUpdateQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type ProjectUpdateQuery = { __typename?: "Query" } & {
  projectUpdate: { __typename?: "ProjectUpdate" } & ProjectUpdateFragment;
};

export type ProjectUpdate_CommentsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CommentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type ProjectUpdate_CommentsQuery = { __typename?: "Query" } & {
  projectUpdate: { __typename?: "ProjectUpdate" } & {
    comments: { __typename?: "CommentConnection" } & CommentConnectionFragment;
  };
};

export type ProjectUpdatesQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<ProjectUpdateFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type ProjectUpdatesQuery = { __typename?: "Query" } & {
  projectUpdates: { __typename?: "ProjectUpdateConnection" } & ProjectUpdateConnectionFragment;
};

export type ProjectsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<ProjectFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
  sort?: Maybe<Array<ProjectSortInput> | ProjectSortInput>;
}>;

export type ProjectsQuery = { __typename?: "Query" } & {
  projects: { __typename?: "ProjectConnection" } & ProjectConnectionFragment;
};

export type PushSubscriptionTestQueryVariables = Exact<{
  sendStrategy?: Maybe<SendStrategy>;
  targetMobile?: Maybe<Scalars["Boolean"]>;
}>;

export type PushSubscriptionTestQuery = { __typename?: "Query" } & {
  pushSubscriptionTest: { __typename?: "PushSubscriptionTestPayload" } & PushSubscriptionTestPayloadFragment;
};

export type RateLimitStatusQueryVariables = Exact<{ [key: string]: never }>;

export type RateLimitStatusQuery = { __typename?: "Query" } & {
  rateLimitStatus: { __typename?: "RateLimitPayload" } & RateLimitPayloadFragment;
};

export type RoadmapQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type RoadmapQuery = { __typename?: "Query" } & { roadmap: { __typename?: "Roadmap" } & RoadmapFragment };

export type Roadmap_ProjectsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<ProjectFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Roadmap_ProjectsQuery = { __typename?: "Query" } & {
  roadmap: { __typename?: "Roadmap" } & { projects: { __typename?: "ProjectConnection" } & ProjectConnectionFragment };
};

export type RoadmapToProjectQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type RoadmapToProjectQuery = { __typename?: "Query" } & {
  roadmapToProject: { __typename?: "RoadmapToProject" } & RoadmapToProjectFragment;
};

export type RoadmapToProjectsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type RoadmapToProjectsQuery = { __typename?: "Query" } & {
  roadmapToProjects: { __typename?: "RoadmapToProjectConnection" } & RoadmapToProjectConnectionFragment;
};

export type RoadmapsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type RoadmapsQuery = { __typename?: "Query" } & {
  roadmaps: { __typename?: "RoadmapConnection" } & RoadmapConnectionFragment;
};

export type SearchDocumentsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  includeComments?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
  teamId?: Maybe<Scalars["String"]>;
  term: Scalars["String"];
}>;

export type SearchDocumentsQuery = { __typename?: "Query" } & {
  searchDocuments: { __typename?: "DocumentSearchPayload" } & DocumentSearchPayloadFragment;
};

export type SearchDocuments_ArchivePayloadQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  includeComments?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
  teamId?: Maybe<Scalars["String"]>;
  term: Scalars["String"];
}>;

export type SearchDocuments_ArchivePayloadQuery = { __typename?: "Query" } & {
  searchDocuments: { __typename?: "DocumentSearchPayload" } & {
    archivePayload: { __typename?: "ArchiveResponse" } & ArchiveResponseFragment;
  };
};

export type SearchIssuesQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  includeComments?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
  teamId?: Maybe<Scalars["String"]>;
  term: Scalars["String"];
}>;

export type SearchIssuesQuery = { __typename?: "Query" } & {
  searchIssues: { __typename?: "IssueSearchPayload" } & IssueSearchPayloadFragment;
};

export type SearchIssues_ArchivePayloadQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  includeComments?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
  teamId?: Maybe<Scalars["String"]>;
  term: Scalars["String"];
}>;

export type SearchIssues_ArchivePayloadQuery = { __typename?: "Query" } & {
  searchIssues: { __typename?: "IssueSearchPayload" } & {
    archivePayload: { __typename?: "ArchiveResponse" } & ArchiveResponseFragment;
  };
};

export type SearchProjectsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  includeComments?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
  teamId?: Maybe<Scalars["String"]>;
  term: Scalars["String"];
}>;

export type SearchProjectsQuery = { __typename?: "Query" } & {
  searchProjects: { __typename?: "ProjectSearchPayload" } & ProjectSearchPayloadFragment;
};

export type SearchProjects_ArchivePayloadQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  includeComments?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
  teamId?: Maybe<Scalars["String"]>;
  term: Scalars["String"];
}>;

export type SearchProjects_ArchivePayloadQuery = { __typename?: "Query" } & {
  searchProjects: { __typename?: "ProjectSearchPayload" } & {
    archivePayload: { __typename?: "ArchiveResponse" } & ArchiveResponseFragment;
  };
};

export type SsoUrlFromEmailQueryVariables = Exact<{
  email: Scalars["String"];
  isDesktop?: Maybe<Scalars["Boolean"]>;
}>;

export type SsoUrlFromEmailQuery = { __typename?: "Query" } & {
  ssoUrlFromEmail: { __typename?: "SsoUrlFromEmailResponse" } & SsoUrlFromEmailResponseFragment;
};

export type TeamQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type TeamQuery = { __typename?: "Query" } & { team: { __typename?: "Team" } & TeamFragment };

export type Team_CyclesQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CycleFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Team_CyclesQuery = { __typename?: "Query" } & {
  team: { __typename?: "Team" } & { cycles: { __typename?: "CycleConnection" } & CycleConnectionFragment };
};

export type Team_GitAutomationStatesQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Team_GitAutomationStatesQuery = { __typename?: "Query" } & {
  team: { __typename?: "Team" } & {
    gitAutomationStates: { __typename?: "GitAutomationStateConnection" } & GitAutomationStateConnectionFragment;
  };
};

export type Team_IssuesQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  includeSubTeams?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Team_IssuesQuery = { __typename?: "Query" } & {
  team: { __typename?: "Team" } & { issues: { __typename?: "IssueConnection" } & IssueConnectionFragment };
};

export type Team_LabelsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueLabelFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Team_LabelsQuery = { __typename?: "Query" } & {
  team: { __typename?: "Team" } & { labels: { __typename?: "IssueLabelConnection" } & IssueLabelConnectionFragment };
};

export type Team_MembersQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<UserFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  includeDisabled?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Team_MembersQuery = { __typename?: "Query" } & {
  team: { __typename?: "Team" } & { members: { __typename?: "UserConnection" } & UserConnectionFragment };
};

export type Team_MembershipsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Team_MembershipsQuery = { __typename?: "Query" } & {
  team: { __typename?: "Team" } & {
    memberships: { __typename?: "TeamMembershipConnection" } & TeamMembershipConnectionFragment;
  };
};

export type Team_ProjectsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<ProjectFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  includeSubTeams?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
  sort?: Maybe<Array<ProjectSortInput> | ProjectSortInput>;
}>;

export type Team_ProjectsQuery = { __typename?: "Query" } & {
  team: { __typename?: "Team" } & { projects: { __typename?: "ProjectConnection" } & ProjectConnectionFragment };
};

export type Team_StatesQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<WorkflowStateFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Team_StatesQuery = { __typename?: "Query" } & {
  team: { __typename?: "Team" } & {
    states: { __typename?: "WorkflowStateConnection" } & WorkflowStateConnectionFragment;
  };
};

export type Team_TemplatesQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<NullableTemplateFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Team_TemplatesQuery = { __typename?: "Query" } & {
  team: { __typename?: "Team" } & { templates: { __typename?: "TemplateConnection" } & TemplateConnectionFragment };
};

export type Team_WebhooksQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Team_WebhooksQuery = { __typename?: "Query" } & {
  team: { __typename?: "Team" } & { webhooks: { __typename?: "WebhookConnection" } & WebhookConnectionFragment };
};

export type TeamMembershipQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type TeamMembershipQuery = { __typename?: "Query" } & {
  teamMembership: { __typename?: "TeamMembership" } & TeamMembershipFragment;
};

export type TeamMembershipsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type TeamMembershipsQuery = { __typename?: "Query" } & {
  teamMemberships: { __typename?: "TeamMembershipConnection" } & TeamMembershipConnectionFragment;
};

export type TeamsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<TeamFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type TeamsQuery = { __typename?: "Query" } & {
  teams: { __typename?: "TeamConnection" } & TeamConnectionFragment;
};

export type TemplateQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type TemplateQuery = { __typename?: "Query" } & { template: { __typename?: "Template" } & TemplateFragment };

export type TemplatesQueryVariables = Exact<{ [key: string]: never }>;

export type TemplatesQuery = { __typename?: "Query" } & {
  templates: Array<{ __typename?: "Template" } & TemplateFragment>;
};

export type TemplatesForIntegrationQueryVariables = Exact<{
  integrationType: Scalars["String"];
}>;

export type TemplatesForIntegrationQuery = { __typename?: "Query" } & {
  templatesForIntegration: Array<{ __typename?: "Template" } & TemplateFragment>;
};

export type TimeScheduleQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type TimeScheduleQuery = { __typename?: "Query" } & {
  timeSchedule: { __typename?: "TimeSchedule" } & TimeScheduleFragment;
};

export type TimeSchedulesQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type TimeSchedulesQuery = { __typename?: "Query" } & {
  timeSchedules: { __typename?: "TimeScheduleConnection" } & TimeScheduleConnectionFragment;
};

export type TriageResponsibilitiesQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type TriageResponsibilitiesQuery = { __typename?: "Query" } & {
  triageResponsibilities: { __typename?: "TriageResponsibilityConnection" } & TriageResponsibilityConnectionFragment;
};

export type TriageResponsibilityQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type TriageResponsibilityQuery = { __typename?: "Query" } & {
  triageResponsibility: { __typename?: "TriageResponsibility" } & TriageResponsibilityFragment;
};

export type TriageResponsibility_ManualSelectionQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type TriageResponsibility_ManualSelectionQuery = { __typename?: "Query" } & {
  triageResponsibility: { __typename?: "TriageResponsibility" } & {
    manualSelection?: Maybe<
      { __typename?: "TriageResponsibilityManualSelection" } & TriageResponsibilityManualSelectionFragment
    >;
  };
};

export type UserQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type UserQuery = { __typename?: "Query" } & { user: { __typename?: "User" } & UserFragment };

export type User_AssignedIssuesQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type User_AssignedIssuesQuery = { __typename?: "Query" } & {
  user: { __typename?: "User" } & { assignedIssues: { __typename?: "IssueConnection" } & IssueConnectionFragment };
};

export type User_CreatedIssuesQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type User_CreatedIssuesQuery = { __typename?: "Query" } & {
  user: { __typename?: "User" } & { createdIssues: { __typename?: "IssueConnection" } & IssueConnectionFragment };
};

export type User_DelegatedIssuesQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type User_DelegatedIssuesQuery = { __typename?: "Query" } & {
  user: { __typename?: "User" } & { delegatedIssues: { __typename?: "IssueConnection" } & IssueConnectionFragment };
};

export type User_DraftsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type User_DraftsQuery = { __typename?: "Query" } & {
  user: { __typename?: "User" } & { drafts: { __typename?: "DraftConnection" } & DraftConnectionFragment };
};

export type User_TeamMembershipsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type User_TeamMembershipsQuery = { __typename?: "Query" } & {
  user: { __typename?: "User" } & {
    teamMemberships: { __typename?: "TeamMembershipConnection" } & TeamMembershipConnectionFragment;
  };
};

export type User_TeamsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<TeamFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type User_TeamsQuery = { __typename?: "Query" } & {
  user: { __typename?: "User" } & { teams: { __typename?: "TeamConnection" } & TeamConnectionFragment };
};

export type UserSettingsQueryVariables = Exact<{ [key: string]: never }>;

export type UserSettingsQuery = { __typename?: "Query" } & {
  userSettings: { __typename?: "UserSettings" } & UserSettingsFragment;
};

export type UserSettings_NotificationCategoryPreferencesQueryVariables = Exact<{ [key: string]: never }>;

export type UserSettings_NotificationCategoryPreferencesQuery = { __typename?: "Query" } & {
  userSettings: { __typename?: "UserSettings" } & {
    notificationCategoryPreferences: {
      __typename?: "NotificationCategoryPreferences";
    } & NotificationCategoryPreferencesFragment;
  };
};

export type UserSettings_NotificationCategoryPreferences_AppsAndIntegrationsQueryVariables = Exact<{
  [key: string]: never;
}>;

export type UserSettings_NotificationCategoryPreferences_AppsAndIntegrationsQuery = { __typename?: "Query" } & {
  userSettings: { __typename?: "UserSettings" } & {
    notificationCategoryPreferences: { __typename?: "NotificationCategoryPreferences" } & {
      appsAndIntegrations: { __typename?: "NotificationChannelPreferences" } & NotificationChannelPreferencesFragment;
    };
  };
};

export type UserSettings_NotificationCategoryPreferences_AssignmentsQueryVariables = Exact<{ [key: string]: never }>;

export type UserSettings_NotificationCategoryPreferences_AssignmentsQuery = { __typename?: "Query" } & {
  userSettings: { __typename?: "UserSettings" } & {
    notificationCategoryPreferences: { __typename?: "NotificationCategoryPreferences" } & {
      assignments: { __typename?: "NotificationChannelPreferences" } & NotificationChannelPreferencesFragment;
    };
  };
};

export type UserSettings_NotificationCategoryPreferences_CommentsAndRepliesQueryVariables = Exact<{
  [key: string]: never;
}>;

export type UserSettings_NotificationCategoryPreferences_CommentsAndRepliesQuery = { __typename?: "Query" } & {
  userSettings: { __typename?: "UserSettings" } & {
    notificationCategoryPreferences: { __typename?: "NotificationCategoryPreferences" } & {
      commentsAndReplies: { __typename?: "NotificationChannelPreferences" } & NotificationChannelPreferencesFragment;
    };
  };
};

export type UserSettings_NotificationCategoryPreferences_CustomersQueryVariables = Exact<{ [key: string]: never }>;

export type UserSettings_NotificationCategoryPreferences_CustomersQuery = { __typename?: "Query" } & {
  userSettings: { __typename?: "UserSettings" } & {
    notificationCategoryPreferences: { __typename?: "NotificationCategoryPreferences" } & {
      customers: { __typename?: "NotificationChannelPreferences" } & NotificationChannelPreferencesFragment;
    };
  };
};

export type UserSettings_NotificationCategoryPreferences_DocumentChangesQueryVariables = Exact<{
  [key: string]: never;
}>;

export type UserSettings_NotificationCategoryPreferences_DocumentChangesQuery = { __typename?: "Query" } & {
  userSettings: { __typename?: "UserSettings" } & {
    notificationCategoryPreferences: { __typename?: "NotificationCategoryPreferences" } & {
      documentChanges: { __typename?: "NotificationChannelPreferences" } & NotificationChannelPreferencesFragment;
    };
  };
};

export type UserSettings_NotificationCategoryPreferences_FeedQueryVariables = Exact<{ [key: string]: never }>;

export type UserSettings_NotificationCategoryPreferences_FeedQuery = { __typename?: "Query" } & {
  userSettings: { __typename?: "UserSettings" } & {
    notificationCategoryPreferences: { __typename?: "NotificationCategoryPreferences" } & {
      feed: { __typename?: "NotificationChannelPreferences" } & NotificationChannelPreferencesFragment;
    };
  };
};

export type UserSettings_NotificationCategoryPreferences_MentionsQueryVariables = Exact<{ [key: string]: never }>;

export type UserSettings_NotificationCategoryPreferences_MentionsQuery = { __typename?: "Query" } & {
  userSettings: { __typename?: "UserSettings" } & {
    notificationCategoryPreferences: { __typename?: "NotificationCategoryPreferences" } & {
      mentions: { __typename?: "NotificationChannelPreferences" } & NotificationChannelPreferencesFragment;
    };
  };
};

export type UserSettings_NotificationCategoryPreferences_PostsAndUpdatesQueryVariables = Exact<{
  [key: string]: never;
}>;

export type UserSettings_NotificationCategoryPreferences_PostsAndUpdatesQuery = { __typename?: "Query" } & {
  userSettings: { __typename?: "UserSettings" } & {
    notificationCategoryPreferences: { __typename?: "NotificationCategoryPreferences" } & {
      postsAndUpdates: { __typename?: "NotificationChannelPreferences" } & NotificationChannelPreferencesFragment;
    };
  };
};

export type UserSettings_NotificationCategoryPreferences_ReactionsQueryVariables = Exact<{ [key: string]: never }>;

export type UserSettings_NotificationCategoryPreferences_ReactionsQuery = { __typename?: "Query" } & {
  userSettings: { __typename?: "UserSettings" } & {
    notificationCategoryPreferences: { __typename?: "NotificationCategoryPreferences" } & {
      reactions: { __typename?: "NotificationChannelPreferences" } & NotificationChannelPreferencesFragment;
    };
  };
};

export type UserSettings_NotificationCategoryPreferences_RemindersQueryVariables = Exact<{ [key: string]: never }>;

export type UserSettings_NotificationCategoryPreferences_RemindersQuery = { __typename?: "Query" } & {
  userSettings: { __typename?: "UserSettings" } & {
    notificationCategoryPreferences: { __typename?: "NotificationCategoryPreferences" } & {
      reminders: { __typename?: "NotificationChannelPreferences" } & NotificationChannelPreferencesFragment;
    };
  };
};

export type UserSettings_NotificationCategoryPreferences_ReviewsQueryVariables = Exact<{ [key: string]: never }>;

export type UserSettings_NotificationCategoryPreferences_ReviewsQuery = { __typename?: "Query" } & {
  userSettings: { __typename?: "UserSettings" } & {
    notificationCategoryPreferences: { __typename?: "NotificationCategoryPreferences" } & {
      reviews: { __typename?: "NotificationChannelPreferences" } & NotificationChannelPreferencesFragment;
    };
  };
};

export type UserSettings_NotificationCategoryPreferences_StatusChangesQueryVariables = Exact<{ [key: string]: never }>;

export type UserSettings_NotificationCategoryPreferences_StatusChangesQuery = { __typename?: "Query" } & {
  userSettings: { __typename?: "UserSettings" } & {
    notificationCategoryPreferences: { __typename?: "NotificationCategoryPreferences" } & {
      statusChanges: { __typename?: "NotificationChannelPreferences" } & NotificationChannelPreferencesFragment;
    };
  };
};

export type UserSettings_NotificationCategoryPreferences_SubscriptionsQueryVariables = Exact<{ [key: string]: never }>;

export type UserSettings_NotificationCategoryPreferences_SubscriptionsQuery = { __typename?: "Query" } & {
  userSettings: { __typename?: "UserSettings" } & {
    notificationCategoryPreferences: { __typename?: "NotificationCategoryPreferences" } & {
      subscriptions: { __typename?: "NotificationChannelPreferences" } & NotificationChannelPreferencesFragment;
    };
  };
};

export type UserSettings_NotificationCategoryPreferences_SystemQueryVariables = Exact<{ [key: string]: never }>;

export type UserSettings_NotificationCategoryPreferences_SystemQuery = { __typename?: "Query" } & {
  userSettings: { __typename?: "UserSettings" } & {
    notificationCategoryPreferences: { __typename?: "NotificationCategoryPreferences" } & {
      system: { __typename?: "NotificationChannelPreferences" } & NotificationChannelPreferencesFragment;
    };
  };
};

export type UserSettings_NotificationCategoryPreferences_TriageQueryVariables = Exact<{ [key: string]: never }>;

export type UserSettings_NotificationCategoryPreferences_TriageQuery = { __typename?: "Query" } & {
  userSettings: { __typename?: "UserSettings" } & {
    notificationCategoryPreferences: { __typename?: "NotificationCategoryPreferences" } & {
      triage: { __typename?: "NotificationChannelPreferences" } & NotificationChannelPreferencesFragment;
    };
  };
};

export type UserSettings_NotificationChannelPreferencesQueryVariables = Exact<{ [key: string]: never }>;

export type UserSettings_NotificationChannelPreferencesQuery = { __typename?: "Query" } & {
  userSettings: { __typename?: "UserSettings" } & {
    notificationChannelPreferences: {
      __typename?: "NotificationChannelPreferences";
    } & NotificationChannelPreferencesFragment;
  };
};

export type UserSettings_NotificationDeliveryPreferencesQueryVariables = Exact<{ [key: string]: never }>;

export type UserSettings_NotificationDeliveryPreferencesQuery = { __typename?: "Query" } & {
  userSettings: { __typename?: "UserSettings" } & {
    notificationDeliveryPreferences: {
      __typename?: "NotificationDeliveryPreferences";
    } & NotificationDeliveryPreferencesFragment;
  };
};

export type UserSettings_NotificationDeliveryPreferences_MobileQueryVariables = Exact<{ [key: string]: never }>;

export type UserSettings_NotificationDeliveryPreferences_MobileQuery = { __typename?: "Query" } & {
  userSettings: { __typename?: "UserSettings" } & {
    notificationDeliveryPreferences: { __typename?: "NotificationDeliveryPreferences" } & {
      mobile?: Maybe<
        { __typename?: "NotificationDeliveryPreferencesChannel" } & NotificationDeliveryPreferencesChannelFragment
      >;
    };
  };
};

export type UserSettings_NotificationDeliveryPreferences_Mobile_ScheduleQueryVariables = Exact<{
  [key: string]: never;
}>;

export type UserSettings_NotificationDeliveryPreferences_Mobile_ScheduleQuery = { __typename?: "Query" } & {
  userSettings: { __typename?: "UserSettings" } & {
    notificationDeliveryPreferences: { __typename?: "NotificationDeliveryPreferences" } & {
      mobile?: Maybe<
        { __typename?: "NotificationDeliveryPreferencesChannel" } & {
          schedule?: Maybe<
            { __typename?: "NotificationDeliveryPreferencesSchedule" } & NotificationDeliveryPreferencesScheduleFragment
          >;
        }
      >;
    };
  };
};

export type UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_FridayQueryVariables = Exact<{
  [key: string]: never;
}>;

export type UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_FridayQuery = { __typename?: "Query" } & {
  userSettings: { __typename?: "UserSettings" } & {
    notificationDeliveryPreferences: { __typename?: "NotificationDeliveryPreferences" } & {
      mobile?: Maybe<
        { __typename?: "NotificationDeliveryPreferencesChannel" } & {
          schedule?: Maybe<
            { __typename?: "NotificationDeliveryPreferencesSchedule" } & {
              friday: {
                __typename?: "NotificationDeliveryPreferencesDay";
              } & NotificationDeliveryPreferencesDayFragment;
            }
          >;
        }
      >;
    };
  };
};

export type UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_MondayQueryVariables = Exact<{
  [key: string]: never;
}>;

export type UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_MondayQuery = { __typename?: "Query" } & {
  userSettings: { __typename?: "UserSettings" } & {
    notificationDeliveryPreferences: { __typename?: "NotificationDeliveryPreferences" } & {
      mobile?: Maybe<
        { __typename?: "NotificationDeliveryPreferencesChannel" } & {
          schedule?: Maybe<
            { __typename?: "NotificationDeliveryPreferencesSchedule" } & {
              monday: {
                __typename?: "NotificationDeliveryPreferencesDay";
              } & NotificationDeliveryPreferencesDayFragment;
            }
          >;
        }
      >;
    };
  };
};

export type UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SaturdayQueryVariables = Exact<{
  [key: string]: never;
}>;

export type UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SaturdayQuery = { __typename?: "Query" } & {
  userSettings: { __typename?: "UserSettings" } & {
    notificationDeliveryPreferences: { __typename?: "NotificationDeliveryPreferences" } & {
      mobile?: Maybe<
        { __typename?: "NotificationDeliveryPreferencesChannel" } & {
          schedule?: Maybe<
            { __typename?: "NotificationDeliveryPreferencesSchedule" } & {
              saturday: {
                __typename?: "NotificationDeliveryPreferencesDay";
              } & NotificationDeliveryPreferencesDayFragment;
            }
          >;
        }
      >;
    };
  };
};

export type UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SundayQueryVariables = Exact<{
  [key: string]: never;
}>;

export type UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SundayQuery = { __typename?: "Query" } & {
  userSettings: { __typename?: "UserSettings" } & {
    notificationDeliveryPreferences: { __typename?: "NotificationDeliveryPreferences" } & {
      mobile?: Maybe<
        { __typename?: "NotificationDeliveryPreferencesChannel" } & {
          schedule?: Maybe<
            { __typename?: "NotificationDeliveryPreferencesSchedule" } & {
              sunday: {
                __typename?: "NotificationDeliveryPreferencesDay";
              } & NotificationDeliveryPreferencesDayFragment;
            }
          >;
        }
      >;
    };
  };
};

export type UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_ThursdayQueryVariables = Exact<{
  [key: string]: never;
}>;

export type UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_ThursdayQuery = { __typename?: "Query" } & {
  userSettings: { __typename?: "UserSettings" } & {
    notificationDeliveryPreferences: { __typename?: "NotificationDeliveryPreferences" } & {
      mobile?: Maybe<
        { __typename?: "NotificationDeliveryPreferencesChannel" } & {
          schedule?: Maybe<
            { __typename?: "NotificationDeliveryPreferencesSchedule" } & {
              thursday: {
                __typename?: "NotificationDeliveryPreferencesDay";
              } & NotificationDeliveryPreferencesDayFragment;
            }
          >;
        }
      >;
    };
  };
};

export type UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_TuesdayQueryVariables = Exact<{
  [key: string]: never;
}>;

export type UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_TuesdayQuery = { __typename?: "Query" } & {
  userSettings: { __typename?: "UserSettings" } & {
    notificationDeliveryPreferences: { __typename?: "NotificationDeliveryPreferences" } & {
      mobile?: Maybe<
        { __typename?: "NotificationDeliveryPreferencesChannel" } & {
          schedule?: Maybe<
            { __typename?: "NotificationDeliveryPreferencesSchedule" } & {
              tuesday: {
                __typename?: "NotificationDeliveryPreferencesDay";
              } & NotificationDeliveryPreferencesDayFragment;
            }
          >;
        }
      >;
    };
  };
};

export type UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_WednesdayQueryVariables = Exact<{
  [key: string]: never;
}>;

export type UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_WednesdayQuery = { __typename?: "Query" } & {
  userSettings: { __typename?: "UserSettings" } & {
    notificationDeliveryPreferences: { __typename?: "NotificationDeliveryPreferences" } & {
      mobile?: Maybe<
        { __typename?: "NotificationDeliveryPreferencesChannel" } & {
          schedule?: Maybe<
            { __typename?: "NotificationDeliveryPreferencesSchedule" } & {
              wednesday: {
                __typename?: "NotificationDeliveryPreferencesDay";
              } & NotificationDeliveryPreferencesDayFragment;
            }
          >;
        }
      >;
    };
  };
};

export type UsersQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<UserFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  includeDisabled?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
  sort?: Maybe<Array<UserSortInput> | UserSortInput>;
}>;

export type UsersQuery = { __typename?: "Query" } & {
  users: { __typename?: "UserConnection" } & UserConnectionFragment;
};

export type VerifyGitHubEnterpriseServerInstallationQueryVariables = Exact<{
  integrationId: Scalars["String"];
}>;

export type VerifyGitHubEnterpriseServerInstallationQuery = { __typename?: "Query" } & {
  verifyGitHubEnterpriseServerInstallation: {
    __typename?: "GitHubEnterpriseServerInstallVerificationPayload";
  } & GitHubEnterpriseServerInstallVerificationPayloadFragment;
};

export type ViewerQueryVariables = Exact<{ [key: string]: never }>;

export type ViewerQuery = { __typename?: "Query" } & { viewer: { __typename?: "User" } & UserFragment };

export type Viewer_AssignedIssuesQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Viewer_AssignedIssuesQuery = { __typename?: "Query" } & {
  viewer: { __typename?: "User" } & { assignedIssues: { __typename?: "IssueConnection" } & IssueConnectionFragment };
};

export type Viewer_CreatedIssuesQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Viewer_CreatedIssuesQuery = { __typename?: "Query" } & {
  viewer: { __typename?: "User" } & { createdIssues: { __typename?: "IssueConnection" } & IssueConnectionFragment };
};

export type Viewer_DelegatedIssuesQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Viewer_DelegatedIssuesQuery = { __typename?: "Query" } & {
  viewer: { __typename?: "User" } & { delegatedIssues: { __typename?: "IssueConnection" } & IssueConnectionFragment };
};

export type Viewer_DraftsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Viewer_DraftsQuery = { __typename?: "Query" } & {
  viewer: { __typename?: "User" } & { drafts: { __typename?: "DraftConnection" } & DraftConnectionFragment };
};

export type Viewer_TeamMembershipsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Viewer_TeamMembershipsQuery = { __typename?: "Query" } & {
  viewer: { __typename?: "User" } & {
    teamMemberships: { __typename?: "TeamMembershipConnection" } & TeamMembershipConnectionFragment;
  };
};

export type Viewer_TeamsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<TeamFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Viewer_TeamsQuery = { __typename?: "Query" } & {
  viewer: { __typename?: "User" } & { teams: { __typename?: "TeamConnection" } & TeamConnectionFragment };
};

export type WebhookQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type WebhookQuery = { __typename?: "Query" } & { webhook: { __typename?: "Webhook" } & WebhookFragment };

export type WebhooksQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type WebhooksQuery = { __typename?: "Query" } & {
  webhooks: { __typename?: "WebhookConnection" } & WebhookConnectionFragment;
};

export type WorkflowStateQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type WorkflowStateQuery = { __typename?: "Query" } & {
  workflowState: { __typename?: "WorkflowState" } & WorkflowStateFragment;
};

export type WorkflowState_IssuesQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type WorkflowState_IssuesQuery = { __typename?: "Query" } & {
  workflowState: { __typename?: "WorkflowState" } & {
    issues: { __typename?: "IssueConnection" } & IssueConnectionFragment;
  };
};

export type WorkflowStatesQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<WorkflowStateFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type WorkflowStatesQuery = { __typename?: "Query" } & {
  workflowStates: { __typename?: "WorkflowStateConnection" } & WorkflowStateConnectionFragment;
};

export type CreateAgentActivityMutationVariables = Exact<{
  input: AgentActivityCreateInput;
}>;

export type CreateAgentActivityMutation = { __typename?: "Mutation" } & {
  agentActivityCreate: { __typename?: "AgentActivityPayload" } & AgentActivityPayloadFragment;
};

export type AgentSessionUpdateExternalUrlMutationVariables = Exact<{
  id: Scalars["String"];
  input: AgentSessionUpdateExternalUrlInput;
}>;

export type AgentSessionUpdateExternalUrlMutation = { __typename?: "Mutation" } & {
  agentSessionUpdateExternalUrl: { __typename?: "AgentSessionPayload" } & AgentSessionPayloadFragment;
};

export type AirbyteIntegrationConnectMutationVariables = Exact<{
  input: AirbyteConfigurationInput;
}>;

export type AirbyteIntegrationConnectMutation = { __typename?: "Mutation" } & {
  airbyteIntegrationConnect: { __typename?: "IntegrationPayload" } & IntegrationPayloadFragment;
};

export type CreateAttachmentMutationVariables = Exact<{
  input: AttachmentCreateInput;
}>;

export type CreateAttachmentMutation = { __typename?: "Mutation" } & {
  attachmentCreate: { __typename?: "AttachmentPayload" } & AttachmentPayloadFragment;
};

export type DeleteAttachmentMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteAttachmentMutation = { __typename?: "Mutation" } & {
  attachmentDelete: { __typename?: "DeletePayload" } & DeletePayloadFragment;
};

export type AttachmentLinkDiscordMutationVariables = Exact<{
  channelId: Scalars["String"];
  createAsUser?: Maybe<Scalars["String"]>;
  displayIconUrl?: Maybe<Scalars["String"]>;
  id?: Maybe<Scalars["String"]>;
  issueId: Scalars["String"];
  messageId: Scalars["String"];
  title?: Maybe<Scalars["String"]>;
  url: Scalars["String"];
}>;

export type AttachmentLinkDiscordMutation = { __typename?: "Mutation" } & {
  attachmentLinkDiscord: { __typename?: "AttachmentPayload" } & AttachmentPayloadFragment;
};

export type AttachmentLinkFrontMutationVariables = Exact<{
  conversationId: Scalars["String"];
  createAsUser?: Maybe<Scalars["String"]>;
  displayIconUrl?: Maybe<Scalars["String"]>;
  id?: Maybe<Scalars["String"]>;
  issueId: Scalars["String"];
  title?: Maybe<Scalars["String"]>;
}>;

export type AttachmentLinkFrontMutation = { __typename?: "Mutation" } & {
  attachmentLinkFront: { __typename?: "FrontAttachmentPayload" } & FrontAttachmentPayloadFragment;
};

export type AttachmentLinkGitHubIssueMutationVariables = Exact<{
  createAsUser?: Maybe<Scalars["String"]>;
  displayIconUrl?: Maybe<Scalars["String"]>;
  id?: Maybe<Scalars["String"]>;
  issueId: Scalars["String"];
  title?: Maybe<Scalars["String"]>;
  url: Scalars["String"];
}>;

export type AttachmentLinkGitHubIssueMutation = { __typename?: "Mutation" } & {
  attachmentLinkGitHubIssue: { __typename?: "AttachmentPayload" } & AttachmentPayloadFragment;
};

export type AttachmentLinkGitHubPrMutationVariables = Exact<{
  createAsUser?: Maybe<Scalars["String"]>;
  displayIconUrl?: Maybe<Scalars["String"]>;
  id?: Maybe<Scalars["String"]>;
  issueId: Scalars["String"];
  linkKind?: Maybe<GitLinkKind>;
  title?: Maybe<Scalars["String"]>;
  url: Scalars["String"];
}>;

export type AttachmentLinkGitHubPrMutation = { __typename?: "Mutation" } & {
  attachmentLinkGitHubPR: { __typename?: "AttachmentPayload" } & AttachmentPayloadFragment;
};

export type AttachmentLinkGitLabMrMutationVariables = Exact<{
  createAsUser?: Maybe<Scalars["String"]>;
  displayIconUrl?: Maybe<Scalars["String"]>;
  id?: Maybe<Scalars["String"]>;
  issueId: Scalars["String"];
  number: Scalars["Float"];
  projectPathWithNamespace: Scalars["String"];
  title?: Maybe<Scalars["String"]>;
  url: Scalars["String"];
}>;

export type AttachmentLinkGitLabMrMutation = { __typename?: "Mutation" } & {
  attachmentLinkGitLabMR: { __typename?: "AttachmentPayload" } & AttachmentPayloadFragment;
};

export type AttachmentLinkIntercomMutationVariables = Exact<{
  conversationId: Scalars["String"];
  createAsUser?: Maybe<Scalars["String"]>;
  displayIconUrl?: Maybe<Scalars["String"]>;
  id?: Maybe<Scalars["String"]>;
  issueId: Scalars["String"];
  partId?: Maybe<Scalars["String"]>;
  title?: Maybe<Scalars["String"]>;
}>;

export type AttachmentLinkIntercomMutation = { __typename?: "Mutation" } & {
  attachmentLinkIntercom: { __typename?: "AttachmentPayload" } & AttachmentPayloadFragment;
};

export type AttachmentLinkJiraIssueMutationVariables = Exact<{
  createAsUser?: Maybe<Scalars["String"]>;
  displayIconUrl?: Maybe<Scalars["String"]>;
  id?: Maybe<Scalars["String"]>;
  issueId: Scalars["String"];
  jiraIssueId: Scalars["String"];
  title?: Maybe<Scalars["String"]>;
  url?: Maybe<Scalars["String"]>;
}>;

export type AttachmentLinkJiraIssueMutation = { __typename?: "Mutation" } & {
  attachmentLinkJiraIssue: { __typename?: "AttachmentPayload" } & AttachmentPayloadFragment;
};

export type AttachmentLinkSalesforceMutationVariables = Exact<{
  createAsUser?: Maybe<Scalars["String"]>;
  displayIconUrl?: Maybe<Scalars["String"]>;
  id?: Maybe<Scalars["String"]>;
  issueId: Scalars["String"];
  title?: Maybe<Scalars["String"]>;
  url: Scalars["String"];
}>;

export type AttachmentLinkSalesforceMutation = { __typename?: "Mutation" } & {
  attachmentLinkSalesforce: { __typename?: "AttachmentPayload" } & AttachmentPayloadFragment;
};

export type AttachmentLinkSlackMutationVariables = Exact<{
  createAsUser?: Maybe<Scalars["String"]>;
  displayIconUrl?: Maybe<Scalars["String"]>;
  id?: Maybe<Scalars["String"]>;
  issueId: Scalars["String"];
  syncToCommentThread?: Maybe<Scalars["Boolean"]>;
  title?: Maybe<Scalars["String"]>;
  url: Scalars["String"];
}>;

export type AttachmentLinkSlackMutation = { __typename?: "Mutation" } & {
  attachmentLinkSlack: { __typename?: "AttachmentPayload" } & AttachmentPayloadFragment;
};

export type AttachmentLinkUrlMutationVariables = Exact<{
  createAsUser?: Maybe<Scalars["String"]>;
  displayIconUrl?: Maybe<Scalars["String"]>;
  id?: Maybe<Scalars["String"]>;
  issueId: Scalars["String"];
  title?: Maybe<Scalars["String"]>;
  url: Scalars["String"];
}>;

export type AttachmentLinkUrlMutation = { __typename?: "Mutation" } & {
  attachmentLinkURL: { __typename?: "AttachmentPayload" } & AttachmentPayloadFragment;
};

export type AttachmentLinkZendeskMutationVariables = Exact<{
  createAsUser?: Maybe<Scalars["String"]>;
  displayIconUrl?: Maybe<Scalars["String"]>;
  id?: Maybe<Scalars["String"]>;
  issueId: Scalars["String"];
  ticketId: Scalars["String"];
  title?: Maybe<Scalars["String"]>;
  url?: Maybe<Scalars["String"]>;
}>;

export type AttachmentLinkZendeskMutation = { __typename?: "Mutation" } & {
  attachmentLinkZendesk: { __typename?: "AttachmentPayload" } & AttachmentPayloadFragment;
};

export type AttachmentSyncToSlackMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type AttachmentSyncToSlackMutation = { __typename?: "Mutation" } & {
  attachmentSyncToSlack: { __typename?: "AttachmentPayload" } & AttachmentPayloadFragment;
};

export type UpdateAttachmentMutationVariables = Exact<{
  id: Scalars["String"];
  input: AttachmentUpdateInput;
}>;

export type UpdateAttachmentMutation = { __typename?: "Mutation" } & {
  attachmentUpdate: { __typename?: "AttachmentPayload" } & AttachmentPayloadFragment;
};

export type CreateCommentMutationVariables = Exact<{
  input: CommentCreateInput;
}>;

export type CreateCommentMutation = { __typename?: "Mutation" } & {
  commentCreate: { __typename?: "CommentPayload" } & CommentPayloadFragment;
};

export type DeleteCommentMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteCommentMutation = { __typename?: "Mutation" } & {
  commentDelete: { __typename?: "DeletePayload" } & DeletePayloadFragment;
};

export type CommentResolveMutationVariables = Exact<{
  id: Scalars["String"];
  resolvingCommentId?: Maybe<Scalars["String"]>;
}>;

export type CommentResolveMutation = { __typename?: "Mutation" } & {
  commentResolve: { __typename?: "CommentPayload" } & CommentPayloadFragment;
};

export type CommentUnresolveMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type CommentUnresolveMutation = { __typename?: "Mutation" } & {
  commentUnresolve: { __typename?: "CommentPayload" } & CommentPayloadFragment;
};

export type UpdateCommentMutationVariables = Exact<{
  id: Scalars["String"];
  input: CommentUpdateInput;
}>;

export type UpdateCommentMutation = { __typename?: "Mutation" } & {
  commentUpdate: { __typename?: "CommentPayload" } & CommentPayloadFragment;
};

export type CreateContactMutationVariables = Exact<{
  input: ContactCreateInput;
}>;

export type CreateContactMutation = { __typename?: "Mutation" } & {
  contactCreate: { __typename?: "ContactPayload" } & ContactPayloadFragment;
};

export type CreateCsvExportReportMutationVariables = Exact<{
  includePrivateTeamIds?: Maybe<Array<Scalars["String"]> | Scalars["String"]>;
}>;

export type CreateCsvExportReportMutation = { __typename?: "Mutation" } & {
  createCsvExportReport: { __typename?: "CreateCsvExportReportPayload" } & CreateCsvExportReportPayloadFragment;
};

export type CreateInitiativeUpdateReminderMutationVariables = Exact<{
  initiativeId: Scalars["String"];
  userId?: Maybe<Scalars["String"]>;
}>;

export type CreateInitiativeUpdateReminderMutation = { __typename?: "Mutation" } & {
  createInitiativeUpdateReminder: {
    __typename?: "InitiativeUpdateReminderPayload";
  } & InitiativeUpdateReminderPayloadFragment;
};

export type CreateOrganizationFromOnboardingMutationVariables = Exact<{
  input: CreateOrganizationInput;
  survey?: Maybe<OnboardingCustomerSurvey>;
}>;

export type CreateOrganizationFromOnboardingMutation = { __typename?: "Mutation" } & {
  createOrganizationFromOnboarding: {
    __typename?: "CreateOrJoinOrganizationResponse";
  } & CreateOrJoinOrganizationResponseFragment;
};

export type CreateProjectUpdateReminderMutationVariables = Exact<{
  projectId: Scalars["String"];
  userId?: Maybe<Scalars["String"]>;
}>;

export type CreateProjectUpdateReminderMutation = { __typename?: "Mutation" } & {
  createProjectUpdateReminder: { __typename?: "ProjectUpdateReminderPayload" } & ProjectUpdateReminderPayloadFragment;
};

export type CreateCustomViewMutationVariables = Exact<{
  input: CustomViewCreateInput;
}>;

export type CreateCustomViewMutation = { __typename?: "Mutation" } & {
  customViewCreate: { __typename?: "CustomViewPayload" } & CustomViewPayloadFragment;
};

export type DeleteCustomViewMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteCustomViewMutation = { __typename?: "Mutation" } & {
  customViewDelete: { __typename?: "DeletePayload" } & DeletePayloadFragment;
};

export type UpdateCustomViewMutationVariables = Exact<{
  id: Scalars["String"];
  input: CustomViewUpdateInput;
}>;

export type UpdateCustomViewMutation = { __typename?: "Mutation" } & {
  customViewUpdate: { __typename?: "CustomViewPayload" } & CustomViewPayloadFragment;
};

export type CreateCustomerMutationVariables = Exact<{
  input: CustomerCreateInput;
}>;

export type CreateCustomerMutation = { __typename?: "Mutation" } & {
  customerCreate: { __typename?: "CustomerPayload" } & CustomerPayloadFragment;
};

export type DeleteCustomerMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteCustomerMutation = { __typename?: "Mutation" } & {
  customerDelete: { __typename?: "DeletePayload" } & DeletePayloadFragment;
};

export type CustomerMergeMutationVariables = Exact<{
  sourceCustomerId: Scalars["String"];
  targetCustomerId: Scalars["String"];
}>;

export type CustomerMergeMutation = { __typename?: "Mutation" } & {
  customerMerge: { __typename?: "CustomerPayload" } & CustomerPayloadFragment;
};

export type ArchiveCustomerNeedMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type ArchiveCustomerNeedMutation = { __typename?: "Mutation" } & {
  customerNeedArchive: { __typename?: "CustomerNeedArchivePayload" } & CustomerNeedArchivePayloadFragment;
};

export type CreateCustomerNeedMutationVariables = Exact<{
  input: CustomerNeedCreateInput;
}>;

export type CreateCustomerNeedMutation = { __typename?: "Mutation" } & {
  customerNeedCreate: { __typename?: "CustomerNeedPayload" } & CustomerNeedPayloadFragment;
};

export type CustomerNeedCreateFromAttachmentMutationVariables = Exact<{
  input: CustomerNeedCreateFromAttachmentInput;
}>;

export type CustomerNeedCreateFromAttachmentMutation = { __typename?: "Mutation" } & {
  customerNeedCreateFromAttachment: { __typename?: "CustomerNeedPayload" } & CustomerNeedPayloadFragment;
};

export type DeleteCustomerNeedMutationVariables = Exact<{
  id: Scalars["String"];
  keepAttachment?: Maybe<Scalars["Boolean"]>;
}>;

export type DeleteCustomerNeedMutation = { __typename?: "Mutation" } & {
  customerNeedDelete: { __typename?: "DeletePayload" } & DeletePayloadFragment;
};

export type UnarchiveCustomerNeedMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type UnarchiveCustomerNeedMutation = { __typename?: "Mutation" } & {
  customerNeedUnarchive: { __typename?: "CustomerNeedArchivePayload" } & CustomerNeedArchivePayloadFragment;
};

export type UpdateCustomerNeedMutationVariables = Exact<{
  id: Scalars["String"];
  input: CustomerNeedUpdateInput;
}>;

export type UpdateCustomerNeedMutation = { __typename?: "Mutation" } & {
  customerNeedUpdate: { __typename?: "CustomerNeedUpdatePayload" } & CustomerNeedUpdatePayloadFragment;
};

export type CreateCustomerStatusMutationVariables = Exact<{
  input: CustomerStatusCreateInput;
}>;

export type CreateCustomerStatusMutation = { __typename?: "Mutation" } & {
  customerStatusCreate: { __typename?: "CustomerStatusPayload" } & CustomerStatusPayloadFragment;
};

export type DeleteCustomerStatusMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteCustomerStatusMutation = { __typename?: "Mutation" } & {
  customerStatusDelete: { __typename?: "DeletePayload" } & DeletePayloadFragment;
};

export type UpdateCustomerStatusMutationVariables = Exact<{
  id: Scalars["String"];
  input: CustomerStatusUpdateInput;
}>;

export type UpdateCustomerStatusMutation = { __typename?: "Mutation" } & {
  customerStatusUpdate: { __typename?: "CustomerStatusPayload" } & CustomerStatusPayloadFragment;
};

export type CreateCustomerTierMutationVariables = Exact<{
  input: CustomerTierCreateInput;
}>;

export type CreateCustomerTierMutation = { __typename?: "Mutation" } & {
  customerTierCreate: { __typename?: "CustomerTierPayload" } & CustomerTierPayloadFragment;
};

export type DeleteCustomerTierMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteCustomerTierMutation = { __typename?: "Mutation" } & {
  customerTierDelete: { __typename?: "DeletePayload" } & DeletePayloadFragment;
};

export type UpdateCustomerTierMutationVariables = Exact<{
  id: Scalars["String"];
  input: CustomerTierUpdateInput;
}>;

export type UpdateCustomerTierMutation = { __typename?: "Mutation" } & {
  customerTierUpdate: { __typename?: "CustomerTierPayload" } & CustomerTierPayloadFragment;
};

export type UpdateCustomerMutationVariables = Exact<{
  id: Scalars["String"];
  input: CustomerUpdateInput;
}>;

export type UpdateCustomerMutation = { __typename?: "Mutation" } & {
  customerUpdate: { __typename?: "CustomerPayload" } & CustomerPayloadFragment;
};

export type CustomerUpsertMutationVariables = Exact<{
  input: CustomerUpsertInput;
}>;

export type CustomerUpsertMutation = { __typename?: "Mutation" } & {
  customerUpsert: { __typename?: "CustomerPayload" } & CustomerPayloadFragment;
};

export type ArchiveCycleMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type ArchiveCycleMutation = { __typename?: "Mutation" } & {
  cycleArchive: { __typename?: "CycleArchivePayload" } & CycleArchivePayloadFragment;
};

export type CreateCycleMutationVariables = Exact<{
  input: CycleCreateInput;
}>;

export type CreateCycleMutation = { __typename?: "Mutation" } & {
  cycleCreate: { __typename?: "CyclePayload" } & CyclePayloadFragment;
};

export type CycleShiftAllMutationVariables = Exact<{
  input: CycleShiftAllInput;
}>;

export type CycleShiftAllMutation = { __typename?: "Mutation" } & {
  cycleShiftAll: { __typename?: "CyclePayload" } & CyclePayloadFragment;
};

export type CycleStartUpcomingCycleTodayMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type CycleStartUpcomingCycleTodayMutation = { __typename?: "Mutation" } & {
  cycleStartUpcomingCycleToday: { __typename?: "CyclePayload" } & CyclePayloadFragment;
};

export type UpdateCycleMutationVariables = Exact<{
  id: Scalars["String"];
  input: CycleUpdateInput;
}>;

export type UpdateCycleMutation = { __typename?: "Mutation" } & {
  cycleUpdate: { __typename?: "CyclePayload" } & CyclePayloadFragment;
};

export type CreateDocumentMutationVariables = Exact<{
  input: DocumentCreateInput;
}>;

export type CreateDocumentMutation = { __typename?: "Mutation" } & {
  documentCreate: { __typename?: "DocumentPayload" } & DocumentPayloadFragment;
};

export type DeleteDocumentMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteDocumentMutation = { __typename?: "Mutation" } & {
  documentDelete: { __typename?: "DocumentArchivePayload" } & DocumentArchivePayloadFragment;
};

export type UnarchiveDocumentMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type UnarchiveDocumentMutation = { __typename?: "Mutation" } & {
  documentUnarchive: { __typename?: "DocumentArchivePayload" } & DocumentArchivePayloadFragment;
};

export type UpdateDocumentMutationVariables = Exact<{
  id: Scalars["String"];
  input: DocumentUpdateInput;
}>;

export type UpdateDocumentMutation = { __typename?: "Mutation" } & {
  documentUpdate: { __typename?: "DocumentPayload" } & DocumentPayloadFragment;
};

export type CreateEmailIntakeAddressMutationVariables = Exact<{
  input: EmailIntakeAddressCreateInput;
}>;

export type CreateEmailIntakeAddressMutation = { __typename?: "Mutation" } & {
  emailIntakeAddressCreate: { __typename?: "EmailIntakeAddressPayload" } & EmailIntakeAddressPayloadFragment;
};

export type DeleteEmailIntakeAddressMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteEmailIntakeAddressMutation = { __typename?: "Mutation" } & {
  emailIntakeAddressDelete: { __typename?: "DeletePayload" } & DeletePayloadFragment;
};

export type EmailIntakeAddressRotateMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type EmailIntakeAddressRotateMutation = { __typename?: "Mutation" } & {
  emailIntakeAddressRotate: { __typename?: "EmailIntakeAddressPayload" } & EmailIntakeAddressPayloadFragment;
};

export type UpdateEmailIntakeAddressMutationVariables = Exact<{
  id: Scalars["String"];
  input: EmailIntakeAddressUpdateInput;
}>;

export type UpdateEmailIntakeAddressMutation = { __typename?: "Mutation" } & {
  emailIntakeAddressUpdate: { __typename?: "EmailIntakeAddressPayload" } & EmailIntakeAddressPayloadFragment;
};

export type EmailTokenUserAccountAuthMutationVariables = Exact<{
  input: TokenUserAccountAuthInput;
}>;

export type EmailTokenUserAccountAuthMutation = { __typename?: "Mutation" } & {
  emailTokenUserAccountAuth: { __typename?: "AuthResolverResponse" } & AuthResolverResponseFragment;
};

export type EmailUnsubscribeMutationVariables = Exact<{
  input: EmailUnsubscribeInput;
}>;

export type EmailUnsubscribeMutation = { __typename?: "Mutation" } & {
  emailUnsubscribe: { __typename?: "EmailUnsubscribePayload" } & EmailUnsubscribePayloadFragment;
};

export type EmailUserAccountAuthChallengeMutationVariables = Exact<{
  input: EmailUserAccountAuthChallengeInput;
}>;

export type EmailUserAccountAuthChallengeMutation = { __typename?: "Mutation" } & {
  emailUserAccountAuthChallenge: {
    __typename?: "EmailUserAccountAuthChallengeResponse";
  } & EmailUserAccountAuthChallengeResponseFragment;
};

export type CreateEmojiMutationVariables = Exact<{
  input: EmojiCreateInput;
}>;

export type CreateEmojiMutation = { __typename?: "Mutation" } & {
  emojiCreate: { __typename?: "EmojiPayload" } & EmojiPayloadFragment;
};

export type DeleteEmojiMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteEmojiMutation = { __typename?: "Mutation" } & {
  emojiDelete: { __typename?: "DeletePayload" } & DeletePayloadFragment;
};

export type CreateEntityExternalLinkMutationVariables = Exact<{
  input: EntityExternalLinkCreateInput;
}>;

export type CreateEntityExternalLinkMutation = { __typename?: "Mutation" } & {
  entityExternalLinkCreate: { __typename?: "EntityExternalLinkPayload" } & EntityExternalLinkPayloadFragment;
};

export type DeleteEntityExternalLinkMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteEntityExternalLinkMutation = { __typename?: "Mutation" } & {
  entityExternalLinkDelete: { __typename?: "DeletePayload" } & DeletePayloadFragment;
};

export type UpdateEntityExternalLinkMutationVariables = Exact<{
  id: Scalars["String"];
  input: EntityExternalLinkUpdateInput;
}>;

export type UpdateEntityExternalLinkMutation = { __typename?: "Mutation" } & {
  entityExternalLinkUpdate: { __typename?: "EntityExternalLinkPayload" } & EntityExternalLinkPayloadFragment;
};

export type CreateFavoriteMutationVariables = Exact<{
  input: FavoriteCreateInput;
}>;

export type CreateFavoriteMutation = { __typename?: "Mutation" } & {
  favoriteCreate: { __typename?: "FavoritePayload" } & FavoritePayloadFragment;
};

export type DeleteFavoriteMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteFavoriteMutation = { __typename?: "Mutation" } & {
  favoriteDelete: { __typename?: "DeletePayload" } & DeletePayloadFragment;
};

export type UpdateFavoriteMutationVariables = Exact<{
  id: Scalars["String"];
  input: FavoriteUpdateInput;
}>;

export type UpdateFavoriteMutation = { __typename?: "Mutation" } & {
  favoriteUpdate: { __typename?: "FavoritePayload" } & FavoritePayloadFragment;
};

export type FileUploadMutationVariables = Exact<{
  contentType: Scalars["String"];
  filename: Scalars["String"];
  makePublic?: Maybe<Scalars["Boolean"]>;
  metaData?: Maybe<Scalars["JSON"]>;
  size: Scalars["Int"];
}>;

export type FileUploadMutation = { __typename?: "Mutation" } & {
  fileUpload: { __typename?: "UploadPayload" } & UploadPayloadFragment;
};

export type CreateGitAutomationStateMutationVariables = Exact<{
  input: GitAutomationStateCreateInput;
}>;

export type CreateGitAutomationStateMutation = { __typename?: "Mutation" } & {
  gitAutomationStateCreate: { __typename?: "GitAutomationStatePayload" } & GitAutomationStatePayloadFragment;
};

export type DeleteGitAutomationStateMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteGitAutomationStateMutation = { __typename?: "Mutation" } & {
  gitAutomationStateDelete: { __typename?: "DeletePayload" } & DeletePayloadFragment;
};

export type UpdateGitAutomationStateMutationVariables = Exact<{
  id: Scalars["String"];
  input: GitAutomationStateUpdateInput;
}>;

export type UpdateGitAutomationStateMutation = { __typename?: "Mutation" } & {
  gitAutomationStateUpdate: { __typename?: "GitAutomationStatePayload" } & GitAutomationStatePayloadFragment;
};

export type CreateGitAutomationTargetBranchMutationVariables = Exact<{
  input: GitAutomationTargetBranchCreateInput;
}>;

export type CreateGitAutomationTargetBranchMutation = { __typename?: "Mutation" } & {
  gitAutomationTargetBranchCreate: {
    __typename?: "GitAutomationTargetBranchPayload";
  } & GitAutomationTargetBranchPayloadFragment;
};

export type DeleteGitAutomationTargetBranchMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteGitAutomationTargetBranchMutation = { __typename?: "Mutation" } & {
  gitAutomationTargetBranchDelete: { __typename?: "DeletePayload" } & DeletePayloadFragment;
};

export type UpdateGitAutomationTargetBranchMutationVariables = Exact<{
  id: Scalars["String"];
  input: GitAutomationTargetBranchUpdateInput;
}>;

export type UpdateGitAutomationTargetBranchMutation = { __typename?: "Mutation" } & {
  gitAutomationTargetBranchUpdate: {
    __typename?: "GitAutomationTargetBranchPayload";
  } & GitAutomationTargetBranchPayloadFragment;
};

export type GoogleUserAccountAuthMutationVariables = Exact<{
  input: GoogleUserAccountAuthInput;
}>;

export type GoogleUserAccountAuthMutation = { __typename?: "Mutation" } & {
  googleUserAccountAuth: { __typename?: "AuthResolverResponse" } & AuthResolverResponseFragment;
};

export type ImageUploadFromUrlMutationVariables = Exact<{
  url: Scalars["String"];
}>;

export type ImageUploadFromUrlMutation = { __typename?: "Mutation" } & {
  imageUploadFromUrl: { __typename?: "ImageUploadFromUrlPayload" } & ImageUploadFromUrlPayloadFragment;
};

export type ImportFileUploadMutationVariables = Exact<{
  contentType: Scalars["String"];
  filename: Scalars["String"];
  metaData?: Maybe<Scalars["JSON"]>;
  size: Scalars["Int"];
}>;

export type ImportFileUploadMutation = { __typename?: "Mutation" } & {
  importFileUpload: { __typename?: "UploadPayload" } & UploadPayloadFragment;
};

export type ArchiveInitiativeMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type ArchiveInitiativeMutation = { __typename?: "Mutation" } & {
  initiativeArchive: { __typename?: "InitiativeArchivePayload" } & InitiativeArchivePayloadFragment;
};

export type CreateInitiativeMutationVariables = Exact<{
  input: InitiativeCreateInput;
}>;

export type CreateInitiativeMutation = { __typename?: "Mutation" } & {
  initiativeCreate: { __typename?: "InitiativePayload" } & InitiativePayloadFragment;
};

export type DeleteInitiativeMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteInitiativeMutation = { __typename?: "Mutation" } & {
  initiativeDelete: { __typename?: "DeletePayload" } & DeletePayloadFragment;
};

export type CreateInitiativeRelationMutationVariables = Exact<{
  input: InitiativeRelationCreateInput;
}>;

export type CreateInitiativeRelationMutation = { __typename?: "Mutation" } & {
  initiativeRelationCreate: { __typename?: "InitiativeRelationPayload" } & InitiativeRelationPayloadFragment;
};

export type DeleteInitiativeRelationMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteInitiativeRelationMutation = { __typename?: "Mutation" } & {
  initiativeRelationDelete: { __typename?: "DeletePayload" } & DeletePayloadFragment;
};

export type UpdateInitiativeRelationMutationVariables = Exact<{
  id: Scalars["String"];
  input: InitiativeRelationUpdateInput;
}>;

export type UpdateInitiativeRelationMutation = { __typename?: "Mutation" } & {
  initiativeRelationUpdate: { __typename?: "DeletePayload" } & DeletePayloadFragment;
};

export type CreateInitiativeToProjectMutationVariables = Exact<{
  input: InitiativeToProjectCreateInput;
}>;

export type CreateInitiativeToProjectMutation = { __typename?: "Mutation" } & {
  initiativeToProjectCreate: { __typename?: "InitiativeToProjectPayload" } & InitiativeToProjectPayloadFragment;
};

export type DeleteInitiativeToProjectMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteInitiativeToProjectMutation = { __typename?: "Mutation" } & {
  initiativeToProjectDelete: { __typename?: "DeletePayload" } & DeletePayloadFragment;
};

export type UpdateInitiativeToProjectMutationVariables = Exact<{
  id: Scalars["String"];
  input: InitiativeToProjectUpdateInput;
}>;

export type UpdateInitiativeToProjectMutation = { __typename?: "Mutation" } & {
  initiativeToProjectUpdate: { __typename?: "InitiativeToProjectPayload" } & InitiativeToProjectPayloadFragment;
};

export type UnarchiveInitiativeMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type UnarchiveInitiativeMutation = { __typename?: "Mutation" } & {
  initiativeUnarchive: { __typename?: "InitiativeArchivePayload" } & InitiativeArchivePayloadFragment;
};

export type UpdateInitiativeMutationVariables = Exact<{
  id: Scalars["String"];
  input: InitiativeUpdateInput;
}>;

export type UpdateInitiativeMutation = { __typename?: "Mutation" } & {
  initiativeUpdate: { __typename?: "InitiativePayload" } & InitiativePayloadFragment;
};

export type ArchiveInitiativeUpdateMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type ArchiveInitiativeUpdateMutation = { __typename?: "Mutation" } & {
  initiativeUpdateArchive: { __typename?: "InitiativeUpdateArchivePayload" } & InitiativeUpdateArchivePayloadFragment;
};

export type CreateInitiativeUpdateMutationVariables = Exact<{
  input: InitiativeUpdateCreateInput;
}>;

export type CreateInitiativeUpdateMutation = { __typename?: "Mutation" } & {
  initiativeUpdateCreate: { __typename?: "InitiativeUpdatePayload" } & InitiativeUpdatePayloadFragment;
};

export type UnarchiveInitiativeUpdateMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type UnarchiveInitiativeUpdateMutation = { __typename?: "Mutation" } & {
  initiativeUpdateUnarchive: { __typename?: "InitiativeUpdateArchivePayload" } & InitiativeUpdateArchivePayloadFragment;
};

export type UpdateInitiativeUpdateMutationVariables = Exact<{
  id: Scalars["String"];
  input: InitiativeUpdateUpdateInput;
}>;

export type UpdateInitiativeUpdateMutation = { __typename?: "Mutation" } & {
  initiativeUpdateUpdate: { __typename?: "InitiativeUpdatePayload" } & InitiativeUpdatePayloadFragment;
};

export type ArchiveIntegrationMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type ArchiveIntegrationMutation = { __typename?: "Mutation" } & {
  integrationArchive: { __typename?: "DeletePayload" } & DeletePayloadFragment;
};

export type IntegrationAsksConnectChannelMutationVariables = Exact<{
  code: Scalars["String"];
  redirectUri: Scalars["String"];
}>;

export type IntegrationAsksConnectChannelMutation = { __typename?: "Mutation" } & {
  integrationAsksConnectChannel: { __typename?: "AsksChannelConnectPayload" } & AsksChannelConnectPayloadFragment;
};

export type DeleteIntegrationMutationVariables = Exact<{
  id: Scalars["String"];
  skipInstallationDeletion?: Maybe<Scalars["Boolean"]>;
}>;

export type DeleteIntegrationMutation = { __typename?: "Mutation" } & {
  integrationDelete: { __typename?: "DeletePayload" } & DeletePayloadFragment;
};

export type IntegrationDiscordMutationVariables = Exact<{
  code: Scalars["String"];
  redirectUri: Scalars["String"];
}>;

export type IntegrationDiscordMutation = { __typename?: "Mutation" } & {
  integrationDiscord: { __typename?: "IntegrationPayload" } & IntegrationPayloadFragment;
};

export type IntegrationFigmaMutationVariables = Exact<{
  code: Scalars["String"];
  redirectUri: Scalars["String"];
}>;

export type IntegrationFigmaMutation = { __typename?: "Mutation" } & {
  integrationFigma: { __typename?: "IntegrationPayload" } & IntegrationPayloadFragment;
};

export type IntegrationFrontMutationVariables = Exact<{
  code: Scalars["String"];
  redirectUri: Scalars["String"];
}>;

export type IntegrationFrontMutation = { __typename?: "Mutation" } & {
  integrationFront: { __typename?: "IntegrationPayload" } & IntegrationPayloadFragment;
};

export type IntegrationGitHubEnterpriseServerConnectMutationVariables = Exact<{
  githubUrl: Scalars["String"];
  organizationName: Scalars["String"];
}>;

export type IntegrationGitHubEnterpriseServerConnectMutation = { __typename?: "Mutation" } & {
  integrationGitHubEnterpriseServerConnect: {
    __typename?: "GitHubEnterpriseServerPayload";
  } & GitHubEnterpriseServerPayloadFragment;
};

export type IntegrationGitHubPersonalMutationVariables = Exact<{
  code: Scalars["String"];
  codeAccess?: Maybe<Scalars["Boolean"]>;
}>;

export type IntegrationGitHubPersonalMutation = { __typename?: "Mutation" } & {
  integrationGitHubPersonal: { __typename?: "IntegrationPayload" } & IntegrationPayloadFragment;
};

export type CreateIntegrationGithubCommitMutationVariables = Exact<{ [key: string]: never }>;

export type CreateIntegrationGithubCommitMutation = { __typename?: "Mutation" } & {
  integrationGithubCommitCreate: {
    __typename?: "GitHubCommitIntegrationPayload";
  } & GitHubCommitIntegrationPayloadFragment;
};

export type IntegrationGithubConnectMutationVariables = Exact<{
  code: Scalars["String"];
  codeAccess?: Maybe<Scalars["Boolean"]>;
  installationId: Scalars["String"];
}>;

export type IntegrationGithubConnectMutation = { __typename?: "Mutation" } & {
  integrationGithubConnect: { __typename?: "IntegrationPayload" } & IntegrationPayloadFragment;
};

export type IntegrationGithubImportConnectMutationVariables = Exact<{
  code: Scalars["String"];
  installationId: Scalars["String"];
}>;

export type IntegrationGithubImportConnectMutation = { __typename?: "Mutation" } & {
  integrationGithubImportConnect: { __typename?: "IntegrationPayload" } & IntegrationPayloadFragment;
};

export type IntegrationGithubImportRefreshMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type IntegrationGithubImportRefreshMutation = { __typename?: "Mutation" } & {
  integrationGithubImportRefresh: { __typename?: "IntegrationPayload" } & IntegrationPayloadFragment;
};

export type IntegrationGitlabConnectMutationVariables = Exact<{
  accessToken: Scalars["String"];
  gitlabUrl: Scalars["String"];
}>;

export type IntegrationGitlabConnectMutation = { __typename?: "Mutation" } & {
  integrationGitlabConnect: { __typename?: "GitLabIntegrationCreatePayload" } & GitLabIntegrationCreatePayloadFragment;
};

export type IntegrationGoogleSheetsMutationVariables = Exact<{
  code: Scalars["String"];
}>;

export type IntegrationGoogleSheetsMutation = { __typename?: "Mutation" } & {
  integrationGoogleSheets: { __typename?: "IntegrationPayload" } & IntegrationPayloadFragment;
};

export type IntegrationIntercomMutationVariables = Exact<{
  code: Scalars["String"];
  domainUrl?: Maybe<Scalars["String"]>;
  redirectUri: Scalars["String"];
}>;

export type IntegrationIntercomMutation = { __typename?: "Mutation" } & {
  integrationIntercom: { __typename?: "IntegrationPayload" } & IntegrationPayloadFragment;
};

export type DeleteIntegrationIntercomMutationVariables = Exact<{ [key: string]: never }>;

export type DeleteIntegrationIntercomMutation = { __typename?: "Mutation" } & {
  integrationIntercomDelete: { __typename?: "IntegrationPayload" } & IntegrationPayloadFragment;
};

export type UpdateIntegrationIntercomSettingsMutationVariables = Exact<{
  input: IntercomSettingsInput;
}>;

export type UpdateIntegrationIntercomSettingsMutation = { __typename?: "Mutation" } & {
  integrationIntercomSettingsUpdate: { __typename?: "IntegrationPayload" } & IntegrationPayloadFragment;
};

export type IntegrationJiraPersonalMutationVariables = Exact<{
  accessToken?: Maybe<Scalars["String"]>;
  code?: Maybe<Scalars["String"]>;
}>;

export type IntegrationJiraPersonalMutation = { __typename?: "Mutation" } & {
  integrationJiraPersonal: { __typename?: "IntegrationPayload" } & IntegrationPayloadFragment;
};

export type IntegrationLoomMutationVariables = Exact<{ [key: string]: never }>;

export type IntegrationLoomMutation = { __typename?: "Mutation" } & {
  integrationLoom: { __typename?: "IntegrationPayload" } & IntegrationPayloadFragment;
};

export type IntegrationRequestMutationVariables = Exact<{
  input: IntegrationRequestInput;
}>;

export type IntegrationRequestMutation = { __typename?: "Mutation" } & {
  integrationRequest: { __typename?: "IntegrationRequestPayload" } & IntegrationRequestPayloadFragment;
};

export type IntegrationSalesforceMutationVariables = Exact<{
  code: Scalars["String"];
  redirectUri: Scalars["String"];
  subdomain: Scalars["String"];
}>;

export type IntegrationSalesforceMutation = { __typename?: "Mutation" } & {
  integrationSalesforce: { __typename?: "IntegrationPayload" } & IntegrationPayloadFragment;
};

export type IntegrationSentryConnectMutationVariables = Exact<{
  code: Scalars["String"];
  installationId: Scalars["String"];
  organizationSlug: Scalars["String"];
}>;

export type IntegrationSentryConnectMutation = { __typename?: "Mutation" } & {
  integrationSentryConnect: { __typename?: "IntegrationPayload" } & IntegrationPayloadFragment;
};

export type IntegrationSlackMutationVariables = Exact<{
  code: Scalars["String"];
  redirectUri: Scalars["String"];
  shouldUseV2Auth?: Maybe<Scalars["Boolean"]>;
}>;

export type IntegrationSlackMutation = { __typename?: "Mutation" } & {
  integrationSlack: { __typename?: "IntegrationPayload" } & IntegrationPayloadFragment;
};

export type IntegrationSlackAsksMutationVariables = Exact<{
  code: Scalars["String"];
  redirectUri: Scalars["String"];
}>;

export type IntegrationSlackAsksMutation = { __typename?: "Mutation" } & {
  integrationSlackAsks: { __typename?: "IntegrationPayload" } & IntegrationPayloadFragment;
};

export type IntegrationSlackCustomViewNotificationsMutationVariables = Exact<{
  code: Scalars["String"];
  customViewId: Scalars["String"];
  redirectUri: Scalars["String"];
}>;

export type IntegrationSlackCustomViewNotificationsMutation = { __typename?: "Mutation" } & {
  integrationSlackCustomViewNotifications: {
    __typename?: "SlackChannelConnectPayload";
  } & SlackChannelConnectPayloadFragment;
};

export type IntegrationSlackCustomerChannelLinkMutationVariables = Exact<{
  code: Scalars["String"];
  customerId: Scalars["String"];
  redirectUri: Scalars["String"];
}>;

export type IntegrationSlackCustomerChannelLinkMutation = { __typename?: "Mutation" } & {
  integrationSlackCustomerChannelLink: { __typename?: "SuccessPayload" } & SuccessPayloadFragment;
};

export type IntegrationSlackImportEmojisMutationVariables = Exact<{
  code: Scalars["String"];
  redirectUri: Scalars["String"];
}>;

export type IntegrationSlackImportEmojisMutation = { __typename?: "Mutation" } & {
  integrationSlackImportEmojis: { __typename?: "IntegrationPayload" } & IntegrationPayloadFragment;
};

export type IntegrationSlackOrAsksUpdateSlackTeamNameMutationVariables = Exact<{
  integrationId: Scalars["String"];
}>;

export type IntegrationSlackOrAsksUpdateSlackTeamNameMutation = { __typename?: "Mutation" } & {
  integrationSlackOrAsksUpdateSlackTeamName: {
    __typename?: "IntegrationSlackWorkspaceNamePayload";
  } & IntegrationSlackWorkspaceNamePayloadFragment;
};

export type IntegrationSlackOrgProjectUpdatesPostMutationVariables = Exact<{
  code: Scalars["String"];
  redirectUri: Scalars["String"];
}>;

export type IntegrationSlackOrgProjectUpdatesPostMutation = { __typename?: "Mutation" } & {
  integrationSlackOrgProjectUpdatesPost: {
    __typename?: "SlackChannelConnectPayload";
  } & SlackChannelConnectPayloadFragment;
};

export type IntegrationSlackPersonalMutationVariables = Exact<{
  code: Scalars["String"];
  redirectUri: Scalars["String"];
}>;

export type IntegrationSlackPersonalMutation = { __typename?: "Mutation" } & {
  integrationSlackPersonal: { __typename?: "IntegrationPayload" } & IntegrationPayloadFragment;
};

export type IntegrationSlackPostMutationVariables = Exact<{
  code: Scalars["String"];
  redirectUri: Scalars["String"];
  shouldUseV2Auth?: Maybe<Scalars["Boolean"]>;
  teamId: Scalars["String"];
}>;

export type IntegrationSlackPostMutation = { __typename?: "Mutation" } & {
  integrationSlackPost: { __typename?: "SlackChannelConnectPayload" } & SlackChannelConnectPayloadFragment;
};

export type IntegrationSlackProjectPostMutationVariables = Exact<{
  code: Scalars["String"];
  projectId: Scalars["String"];
  redirectUri: Scalars["String"];
  service: Scalars["String"];
}>;

export type IntegrationSlackProjectPostMutation = { __typename?: "Mutation" } & {
  integrationSlackProjectPost: { __typename?: "SlackChannelConnectPayload" } & SlackChannelConnectPayloadFragment;
};

export type CreateIntegrationTemplateMutationVariables = Exact<{
  input: IntegrationTemplateCreateInput;
}>;

export type CreateIntegrationTemplateMutation = { __typename?: "Mutation" } & {
  integrationTemplateCreate: { __typename?: "IntegrationTemplatePayload" } & IntegrationTemplatePayloadFragment;
};

export type DeleteIntegrationTemplateMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteIntegrationTemplateMutation = { __typename?: "Mutation" } & {
  integrationTemplateDelete: { __typename?: "DeletePayload" } & DeletePayloadFragment;
};

export type IntegrationZendeskMutationVariables = Exact<{
  code: Scalars["String"];
  redirectUri: Scalars["String"];
  scope: Scalars["String"];
  subdomain: Scalars["String"];
}>;

export type IntegrationZendeskMutation = { __typename?: "Mutation" } & {
  integrationZendesk: { __typename?: "IntegrationPayload" } & IntegrationPayloadFragment;
};

export type CreateIntegrationsSettingsMutationVariables = Exact<{
  input: IntegrationsSettingsCreateInput;
}>;

export type CreateIntegrationsSettingsMutation = { __typename?: "Mutation" } & {
  integrationsSettingsCreate: { __typename?: "IntegrationsSettingsPayload" } & IntegrationsSettingsPayloadFragment;
};

export type UpdateIntegrationsSettingsMutationVariables = Exact<{
  id: Scalars["String"];
  input: IntegrationsSettingsUpdateInput;
}>;

export type UpdateIntegrationsSettingsMutation = { __typename?: "Mutation" } & {
  integrationsSettingsUpdate: { __typename?: "IntegrationsSettingsPayload" } & IntegrationsSettingsPayloadFragment;
};

export type IssueAddLabelMutationVariables = Exact<{
  id: Scalars["String"];
  labelId: Scalars["String"];
}>;

export type IssueAddLabelMutation = { __typename?: "Mutation" } & {
  issueAddLabel: { __typename?: "IssuePayload" } & IssuePayloadFragment;
};

export type ArchiveIssueMutationVariables = Exact<{
  id: Scalars["String"];
  trash?: Maybe<Scalars["Boolean"]>;
}>;

export type ArchiveIssueMutation = { __typename?: "Mutation" } & {
  issueArchive: { __typename?: "IssueArchivePayload" } & IssueArchivePayloadFragment;
};

export type CreateIssueBatchMutationVariables = Exact<{
  input: IssueBatchCreateInput;
}>;

export type CreateIssueBatchMutation = { __typename?: "Mutation" } & {
  issueBatchCreate: { __typename?: "IssueBatchPayload" } & IssueBatchPayloadFragment;
};

export type UpdateIssueBatchMutationVariables = Exact<{
  ids: Array<Scalars["UUID"]> | Scalars["UUID"];
  input: IssueUpdateInput;
}>;

export type UpdateIssueBatchMutation = { __typename?: "Mutation" } & {
  issueBatchUpdate: { __typename?: "IssueBatchPayload" } & IssueBatchPayloadFragment;
};

export type CreateIssueMutationVariables = Exact<{
  input: IssueCreateInput;
}>;

export type CreateIssueMutation = { __typename?: "Mutation" } & {
  issueCreate: { __typename?: "IssuePayload" } & IssuePayloadFragment;
};

export type DeleteIssueMutationVariables = Exact<{
  id: Scalars["String"];
  permanentlyDelete?: Maybe<Scalars["Boolean"]>;
}>;

export type DeleteIssueMutation = { __typename?: "Mutation" } & {
  issueDelete: { __typename?: "IssueArchivePayload" } & IssueArchivePayloadFragment;
};

export type IssueImportCreateAsanaMutationVariables = Exact<{
  asanaTeamName: Scalars["String"];
  asanaToken: Scalars["String"];
  id?: Maybe<Scalars["String"]>;
  includeClosedIssues?: Maybe<Scalars["Boolean"]>;
  instantProcess?: Maybe<Scalars["Boolean"]>;
  teamId?: Maybe<Scalars["String"]>;
  teamName?: Maybe<Scalars["String"]>;
}>;

export type IssueImportCreateAsanaMutation = { __typename?: "Mutation" } & {
  issueImportCreateAsana: { __typename?: "IssueImportPayload" } & IssueImportPayloadFragment;
};

export type IssueImportCreateCsvJiraMutationVariables = Exact<{
  csvUrl: Scalars["String"];
  jiraEmail?: Maybe<Scalars["String"]>;
  jiraHostname?: Maybe<Scalars["String"]>;
  jiraToken?: Maybe<Scalars["String"]>;
  teamId?: Maybe<Scalars["String"]>;
  teamName?: Maybe<Scalars["String"]>;
}>;

export type IssueImportCreateCsvJiraMutation = { __typename?: "Mutation" } & {
  issueImportCreateCSVJira: { __typename?: "IssueImportPayload" } & IssueImportPayloadFragment;
};

export type IssueImportCreateClubhouseMutationVariables = Exact<{
  clubhouseGroupName: Scalars["String"];
  clubhouseToken: Scalars["String"];
  id?: Maybe<Scalars["String"]>;
  includeClosedIssues?: Maybe<Scalars["Boolean"]>;
  instantProcess?: Maybe<Scalars["Boolean"]>;
  teamId?: Maybe<Scalars["String"]>;
  teamName?: Maybe<Scalars["String"]>;
}>;

export type IssueImportCreateClubhouseMutation = { __typename?: "Mutation" } & {
  issueImportCreateClubhouse: { __typename?: "IssueImportPayload" } & IssueImportPayloadFragment;
};

export type IssueImportCreateGithubMutationVariables = Exact<{
  githubLabels?: Maybe<Array<Scalars["String"]> | Scalars["String"]>;
  githubRepoIds?: Maybe<Array<Scalars["Int"]> | Scalars["Int"]>;
  includeClosedIssues?: Maybe<Scalars["Boolean"]>;
  instantProcess?: Maybe<Scalars["Boolean"]>;
  teamId?: Maybe<Scalars["String"]>;
  teamName?: Maybe<Scalars["String"]>;
}>;

export type IssueImportCreateGithubMutation = { __typename?: "Mutation" } & {
  issueImportCreateGithub: { __typename?: "IssueImportPayload" } & IssueImportPayloadFragment;
};

export type IssueImportCreateJiraMutationVariables = Exact<{
  id?: Maybe<Scalars["String"]>;
  includeClosedIssues?: Maybe<Scalars["Boolean"]>;
  instantProcess?: Maybe<Scalars["Boolean"]>;
  jiraEmail: Scalars["String"];
  jiraHostname: Scalars["String"];
  jiraProject: Scalars["String"];
  jiraToken: Scalars["String"];
  jql?: Maybe<Scalars["String"]>;
  teamId?: Maybe<Scalars["String"]>;
  teamName?: Maybe<Scalars["String"]>;
}>;

export type IssueImportCreateJiraMutation = { __typename?: "Mutation" } & {
  issueImportCreateJira: { __typename?: "IssueImportPayload" } & IssueImportPayloadFragment;
};

export type DeleteIssueImportMutationVariables = Exact<{
  issueImportId: Scalars["String"];
}>;

export type DeleteIssueImportMutation = { __typename?: "Mutation" } & {
  issueImportDelete: { __typename?: "IssueImportDeletePayload" } & IssueImportDeletePayloadFragment;
};

export type IssueImportProcessMutationVariables = Exact<{
  issueImportId: Scalars["String"];
  mapping: Scalars["JSONObject"];
}>;

export type IssueImportProcessMutation = { __typename?: "Mutation" } & {
  issueImportProcess: { __typename?: "IssueImportPayload" } & IssueImportPayloadFragment;
};

export type UpdateIssueImportMutationVariables = Exact<{
  id: Scalars["String"];
  input: IssueImportUpdateInput;
}>;

export type UpdateIssueImportMutation = { __typename?: "Mutation" } & {
  issueImportUpdate: { __typename?: "IssueImportPayload" } & IssueImportPayloadFragment;
};

export type CreateIssueLabelMutationVariables = Exact<{
  input: IssueLabelCreateInput;
  replaceTeamLabels?: Maybe<Scalars["Boolean"]>;
}>;

export type CreateIssueLabelMutation = { __typename?: "Mutation" } & {
  issueLabelCreate: { __typename?: "IssueLabelPayload" } & IssueLabelPayloadFragment;
};

export type DeleteIssueLabelMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteIssueLabelMutation = { __typename?: "Mutation" } & {
  issueLabelDelete: { __typename?: "DeletePayload" } & DeletePayloadFragment;
};

export type IssueLabelMoveToTeamLabelsMutationVariables = Exact<{
  input: IssueLabelMoveToTeamLabelsInput;
}>;

export type IssueLabelMoveToTeamLabelsMutation = { __typename?: "Mutation" } & {
  issueLabelMoveToTeamLabels: {
    __typename?: "IssueLabelMoveToTeamLabelsPayload";
  } & IssueLabelMoveToTeamLabelsPayloadFragment;
};

export type UpdateIssueLabelMutationVariables = Exact<{
  id: Scalars["String"];
  input: IssueLabelUpdateInput;
  replaceTeamLabels?: Maybe<Scalars["Boolean"]>;
}>;

export type UpdateIssueLabelMutation = { __typename?: "Mutation" } & {
  issueLabelUpdate: { __typename?: "IssueLabelPayload" } & IssueLabelPayloadFragment;
};

export type IssueLabelsMergeMutationVariables = Exact<{
  input: LabelsMergeInput;
}>;

export type IssueLabelsMergeMutation = { __typename?: "Mutation" } & {
  issueLabelsMerge: { __typename?: "IssueLabelPayload" } & IssueLabelPayloadFragment;
};

export type CreateIssueRelationMutationVariables = Exact<{
  input: IssueRelationCreateInput;
  overrideCreatedAt?: Maybe<Scalars["DateTime"]>;
}>;

export type CreateIssueRelationMutation = { __typename?: "Mutation" } & {
  issueRelationCreate: { __typename?: "IssueRelationPayload" } & IssueRelationPayloadFragment;
};

export type DeleteIssueRelationMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteIssueRelationMutation = { __typename?: "Mutation" } & {
  issueRelationDelete: { __typename?: "DeletePayload" } & DeletePayloadFragment;
};

export type UpdateIssueRelationMutationVariables = Exact<{
  id: Scalars["String"];
  input: IssueRelationUpdateInput;
}>;

export type UpdateIssueRelationMutation = { __typename?: "Mutation" } & {
  issueRelationUpdate: { __typename?: "IssueRelationPayload" } & IssueRelationPayloadFragment;
};

export type IssueReminderMutationVariables = Exact<{
  id: Scalars["String"];
  reminderAt: Scalars["DateTime"];
}>;

export type IssueReminderMutation = { __typename?: "Mutation" } & {
  issueReminder: { __typename?: "IssuePayload" } & IssuePayloadFragment;
};

export type IssueRemoveLabelMutationVariables = Exact<{
  id: Scalars["String"];
  labelId: Scalars["String"];
}>;

export type IssueRemoveLabelMutation = { __typename?: "Mutation" } & {
  issueRemoveLabel: { __typename?: "IssuePayload" } & IssuePayloadFragment;
};

export type IssueSubscribeMutationVariables = Exact<{
  id: Scalars["String"];
  userId?: Maybe<Scalars["String"]>;
}>;

export type IssueSubscribeMutation = { __typename?: "Mutation" } & {
  issueSubscribe: { __typename?: "IssuePayload" } & IssuePayloadFragment;
};

export type UnarchiveIssueMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type UnarchiveIssueMutation = { __typename?: "Mutation" } & {
  issueUnarchive: { __typename?: "IssueArchivePayload" } & IssueArchivePayloadFragment;
};

export type IssueUnsubscribeMutationVariables = Exact<{
  id: Scalars["String"];
  userId?: Maybe<Scalars["String"]>;
}>;

export type IssueUnsubscribeMutation = { __typename?: "Mutation" } & {
  issueUnsubscribe: { __typename?: "IssuePayload" } & IssuePayloadFragment;
};

export type UpdateIssueMutationVariables = Exact<{
  id: Scalars["String"];
  input: IssueUpdateInput;
}>;

export type UpdateIssueMutation = { __typename?: "Mutation" } & {
  issueUpdate: { __typename?: "IssuePayload" } & IssuePayloadFragment;
};

export type JoinOrganizationFromOnboardingMutationVariables = Exact<{
  input: JoinOrganizationInput;
}>;

export type JoinOrganizationFromOnboardingMutation = { __typename?: "Mutation" } & {
  joinOrganizationFromOnboarding: {
    __typename?: "CreateOrJoinOrganizationResponse";
  } & CreateOrJoinOrganizationResponseFragment;
};

export type LeaveOrganizationMutationVariables = Exact<{
  organizationId: Scalars["String"];
}>;

export type LeaveOrganizationMutation = { __typename?: "Mutation" } & {
  leaveOrganization: { __typename?: "CreateOrJoinOrganizationResponse" } & CreateOrJoinOrganizationResponseFragment;
};

export type LogoutMutationVariables = Exact<{
  reason?: Maybe<Scalars["String"]>;
}>;

export type LogoutMutation = { __typename?: "Mutation" } & {
  logout: { __typename?: "LogoutResponse" } & LogoutResponseFragment;
};

export type LogoutAllSessionsMutationVariables = Exact<{
  reason?: Maybe<Scalars["String"]>;
}>;

export type LogoutAllSessionsMutation = { __typename?: "Mutation" } & {
  logoutAllSessions: { __typename?: "LogoutResponse" } & LogoutResponseFragment;
};

export type LogoutOtherSessionsMutationVariables = Exact<{
  reason?: Maybe<Scalars["String"]>;
}>;

export type LogoutOtherSessionsMutation = { __typename?: "Mutation" } & {
  logoutOtherSessions: { __typename?: "LogoutResponse" } & LogoutResponseFragment;
};

export type LogoutSessionMutationVariables = Exact<{
  sessionId: Scalars["String"];
}>;

export type LogoutSessionMutation = { __typename?: "Mutation" } & {
  logoutSession: { __typename?: "LogoutResponse" } & LogoutResponseFragment;
};

export type ArchiveNotificationMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type ArchiveNotificationMutation = { __typename?: "Mutation" } & {
  notificationArchive: { __typename?: "NotificationArchivePayload" } & NotificationArchivePayloadFragment;
};

export type NotificationArchiveAllMutationVariables = Exact<{
  input: NotificationEntityInput;
}>;

export type NotificationArchiveAllMutation = { __typename?: "Mutation" } & {
  notificationArchiveAll: { __typename?: "NotificationBatchActionPayload" } & NotificationBatchActionPayloadFragment;
};

export type UpdateNotificationCategoryChannelSubscriptionMutationVariables = Exact<{
  category: NotificationCategory;
  channel: NotificationChannel;
  subscribe: Scalars["Boolean"];
}>;

export type UpdateNotificationCategoryChannelSubscriptionMutation = { __typename?: "Mutation" } & {
  notificationCategoryChannelSubscriptionUpdate: { __typename?: "UserSettingsPayload" } & UserSettingsPayloadFragment;
};

export type NotificationMarkReadAllMutationVariables = Exact<{
  input: NotificationEntityInput;
  readAt: Scalars["DateTime"];
}>;

export type NotificationMarkReadAllMutation = { __typename?: "Mutation" } & {
  notificationMarkReadAll: { __typename?: "NotificationBatchActionPayload" } & NotificationBatchActionPayloadFragment;
};

export type NotificationMarkUnreadAllMutationVariables = Exact<{
  input: NotificationEntityInput;
}>;

export type NotificationMarkUnreadAllMutation = { __typename?: "Mutation" } & {
  notificationMarkUnreadAll: { __typename?: "NotificationBatchActionPayload" } & NotificationBatchActionPayloadFragment;
};

export type NotificationSnoozeAllMutationVariables = Exact<{
  input: NotificationEntityInput;
  snoozedUntilAt: Scalars["DateTime"];
}>;

export type NotificationSnoozeAllMutation = { __typename?: "Mutation" } & {
  notificationSnoozeAll: { __typename?: "NotificationBatchActionPayload" } & NotificationBatchActionPayloadFragment;
};

export type CreateNotificationSubscriptionMutationVariables = Exact<{
  input: NotificationSubscriptionCreateInput;
}>;

export type CreateNotificationSubscriptionMutation = { __typename?: "Mutation" } & {
  notificationSubscriptionCreate: {
    __typename?: "NotificationSubscriptionPayload";
  } & NotificationSubscriptionPayloadFragment;
};

export type DeleteNotificationSubscriptionMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteNotificationSubscriptionMutation = { __typename?: "Mutation" } & {
  notificationSubscriptionDelete: { __typename?: "DeletePayload" } & DeletePayloadFragment;
};

export type UpdateNotificationSubscriptionMutationVariables = Exact<{
  id: Scalars["String"];
  input: NotificationSubscriptionUpdateInput;
}>;

export type UpdateNotificationSubscriptionMutation = { __typename?: "Mutation" } & {
  notificationSubscriptionUpdate: {
    __typename?: "NotificationSubscriptionPayload";
  } & NotificationSubscriptionPayloadFragment;
};

export type UnarchiveNotificationMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type UnarchiveNotificationMutation = { __typename?: "Mutation" } & {
  notificationUnarchive: { __typename?: "NotificationArchivePayload" } & NotificationArchivePayloadFragment;
};

export type NotificationUnsnoozeAllMutationVariables = Exact<{
  input: NotificationEntityInput;
  unsnoozedAt: Scalars["DateTime"];
}>;

export type NotificationUnsnoozeAllMutation = { __typename?: "Mutation" } & {
  notificationUnsnoozeAll: { __typename?: "NotificationBatchActionPayload" } & NotificationBatchActionPayloadFragment;
};

export type UpdateNotificationMutationVariables = Exact<{
  id: Scalars["String"];
  input: NotificationUpdateInput;
}>;

export type UpdateNotificationMutation = { __typename?: "Mutation" } & {
  notificationUpdate: { __typename?: "NotificationPayload" } & NotificationPayloadFragment;
};

export type DeleteOrganizationCancelMutationVariables = Exact<{ [key: string]: never }>;

export type DeleteOrganizationCancelMutation = { __typename?: "Mutation" } & {
  organizationCancelDelete: {
    __typename?: "OrganizationCancelDeletePayload";
  } & OrganizationCancelDeletePayloadFragment;
};

export type DeleteOrganizationMutationVariables = Exact<{
  input: DeleteOrganizationInput;
}>;

export type DeleteOrganizationMutation = { __typename?: "Mutation" } & {
  organizationDelete: { __typename?: "OrganizationDeletePayload" } & OrganizationDeletePayloadFragment;
};

export type OrganizationDeleteChallengeMutationVariables = Exact<{ [key: string]: never }>;

export type OrganizationDeleteChallengeMutation = { __typename?: "Mutation" } & {
  organizationDeleteChallenge: { __typename?: "OrganizationDeletePayload" } & OrganizationDeletePayloadFragment;
};

export type DeleteOrganizationDomainMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteOrganizationDomainMutation = { __typename?: "Mutation" } & {
  organizationDomainDelete: { __typename?: "DeletePayload" } & DeletePayloadFragment;
};

export type CreateOrganizationInviteMutationVariables = Exact<{
  input: OrganizationInviteCreateInput;
}>;

export type CreateOrganizationInviteMutation = { __typename?: "Mutation" } & {
  organizationInviteCreate: { __typename?: "OrganizationInvitePayload" } & OrganizationInvitePayloadFragment;
};

export type DeleteOrganizationInviteMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteOrganizationInviteMutation = { __typename?: "Mutation" } & {
  organizationInviteDelete: { __typename?: "DeletePayload" } & DeletePayloadFragment;
};

export type UpdateOrganizationInviteMutationVariables = Exact<{
  id: Scalars["String"];
  input: OrganizationInviteUpdateInput;
}>;

export type UpdateOrganizationInviteMutation = { __typename?: "Mutation" } & {
  organizationInviteUpdate: { __typename?: "OrganizationInvitePayload" } & OrganizationInvitePayloadFragment;
};

export type OrganizationStartTrialMutationVariables = Exact<{ [key: string]: never }>;

export type OrganizationStartTrialMutation = { __typename?: "Mutation" } & {
  organizationStartTrial: { __typename?: "OrganizationStartTrialPayload" } & OrganizationStartTrialPayloadFragment;
};

export type OrganizationStartTrialForPlanMutationVariables = Exact<{
  input: OrganizationStartTrialInput;
}>;

export type OrganizationStartTrialForPlanMutation = { __typename?: "Mutation" } & {
  organizationStartTrialForPlan: {
    __typename?: "OrganizationStartTrialPayload";
  } & OrganizationStartTrialPayloadFragment;
};

export type UpdateOrganizationMutationVariables = Exact<{
  input: OrganizationUpdateInput;
}>;

export type UpdateOrganizationMutation = { __typename?: "Mutation" } & {
  organizationUpdate: { __typename?: "OrganizationPayload" } & OrganizationPayloadFragment;
};

export type ProjectAddLabelMutationVariables = Exact<{
  id: Scalars["String"];
  labelId: Scalars["String"];
}>;

export type ProjectAddLabelMutation = { __typename?: "Mutation" } & {
  projectAddLabel: { __typename?: "ProjectPayload" } & ProjectPayloadFragment;
};

export type ArchiveProjectMutationVariables = Exact<{
  id: Scalars["String"];
  trash?: Maybe<Scalars["Boolean"]>;
}>;

export type ArchiveProjectMutation = { __typename?: "Mutation" } & {
  projectArchive: { __typename?: "ProjectArchivePayload" } & ProjectArchivePayloadFragment;
};

export type CreateProjectMutationVariables = Exact<{
  connectSlackChannel?: Maybe<Scalars["Boolean"]>;
  input: ProjectCreateInput;
}>;

export type CreateProjectMutation = { __typename?: "Mutation" } & {
  projectCreate: { __typename?: "ProjectPayload" } & ProjectPayloadFragment;
};

export type DeleteProjectMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteProjectMutation = { __typename?: "Mutation" } & {
  projectDelete: { __typename?: "ProjectArchivePayload" } & ProjectArchivePayloadFragment;
};

export type CreateProjectLabelMutationVariables = Exact<{
  input: ProjectLabelCreateInput;
}>;

export type CreateProjectLabelMutation = { __typename?: "Mutation" } & {
  projectLabelCreate: { __typename?: "ProjectLabelPayload" } & ProjectLabelPayloadFragment;
};

export type DeleteProjectLabelMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteProjectLabelMutation = { __typename?: "Mutation" } & {
  projectLabelDelete: { __typename?: "DeletePayload" } & DeletePayloadFragment;
};

export type UpdateProjectLabelMutationVariables = Exact<{
  id: Scalars["String"];
  input: ProjectLabelUpdateInput;
}>;

export type UpdateProjectLabelMutation = { __typename?: "Mutation" } & {
  projectLabelUpdate: { __typename?: "ProjectLabelPayload" } & ProjectLabelPayloadFragment;
};

export type ProjectLabelsMergeMutationVariables = Exact<{
  input: LabelsMergeInput;
}>;

export type ProjectLabelsMergeMutation = { __typename?: "Mutation" } & {
  projectLabelsMerge: { __typename?: "ProjectLabelPayload" } & ProjectLabelPayloadFragment;
};

export type CreateProjectMilestoneMutationVariables = Exact<{
  input: ProjectMilestoneCreateInput;
}>;

export type CreateProjectMilestoneMutation = { __typename?: "Mutation" } & {
  projectMilestoneCreate: { __typename?: "ProjectMilestonePayload" } & ProjectMilestonePayloadFragment;
};

export type DeleteProjectMilestoneMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteProjectMilestoneMutation = { __typename?: "Mutation" } & {
  projectMilestoneDelete: { __typename?: "DeletePayload" } & DeletePayloadFragment;
};

export type UpdateProjectMilestoneMutationVariables = Exact<{
  id: Scalars["String"];
  input: ProjectMilestoneUpdateInput;
}>;

export type UpdateProjectMilestoneMutation = { __typename?: "Mutation" } & {
  projectMilestoneUpdate: { __typename?: "ProjectMilestonePayload" } & ProjectMilestonePayloadFragment;
};

export type CreateProjectRelationMutationVariables = Exact<{
  input: ProjectRelationCreateInput;
}>;

export type CreateProjectRelationMutation = { __typename?: "Mutation" } & {
  projectRelationCreate: { __typename?: "ProjectRelationPayload" } & ProjectRelationPayloadFragment;
};

export type DeleteProjectRelationMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteProjectRelationMutation = { __typename?: "Mutation" } & {
  projectRelationDelete: { __typename?: "DeletePayload" } & DeletePayloadFragment;
};

export type UpdateProjectRelationMutationVariables = Exact<{
  id: Scalars["String"];
  input: ProjectRelationUpdateInput;
}>;

export type UpdateProjectRelationMutation = { __typename?: "Mutation" } & {
  projectRelationUpdate: { __typename?: "ProjectRelationPayload" } & ProjectRelationPayloadFragment;
};

export type ProjectRemoveLabelMutationVariables = Exact<{
  id: Scalars["String"];
  labelId: Scalars["String"];
}>;

export type ProjectRemoveLabelMutation = { __typename?: "Mutation" } & {
  projectRemoveLabel: { __typename?: "ProjectPayload" } & ProjectPayloadFragment;
};

export type ArchiveProjectStatusMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type ArchiveProjectStatusMutation = { __typename?: "Mutation" } & {
  projectStatusArchive: { __typename?: "ProjectStatusArchivePayload" } & ProjectStatusArchivePayloadFragment;
};

export type CreateProjectStatusMutationVariables = Exact<{
  input: ProjectStatusCreateInput;
}>;

export type CreateProjectStatusMutation = { __typename?: "Mutation" } & {
  projectStatusCreate: { __typename?: "ProjectStatusPayload" } & ProjectStatusPayloadFragment;
};

export type UnarchiveProjectStatusMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type UnarchiveProjectStatusMutation = { __typename?: "Mutation" } & {
  projectStatusUnarchive: { __typename?: "ProjectStatusArchivePayload" } & ProjectStatusArchivePayloadFragment;
};

export type UpdateProjectStatusMutationVariables = Exact<{
  id: Scalars["String"];
  input: ProjectStatusUpdateInput;
}>;

export type UpdateProjectStatusMutation = { __typename?: "Mutation" } & {
  projectStatusUpdate: { __typename?: "ProjectStatusPayload" } & ProjectStatusPayloadFragment;
};

export type UnarchiveProjectMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type UnarchiveProjectMutation = { __typename?: "Mutation" } & {
  projectUnarchive: { __typename?: "ProjectArchivePayload" } & ProjectArchivePayloadFragment;
};

export type UpdateProjectMutationVariables = Exact<{
  id: Scalars["String"];
  input: ProjectUpdateInput;
}>;

export type UpdateProjectMutation = { __typename?: "Mutation" } & {
  projectUpdate: { __typename?: "ProjectPayload" } & ProjectPayloadFragment;
};

export type ArchiveProjectUpdateMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type ArchiveProjectUpdateMutation = { __typename?: "Mutation" } & {
  projectUpdateArchive: { __typename?: "ProjectUpdateArchivePayload" } & ProjectUpdateArchivePayloadFragment;
};

export type CreateProjectUpdateMutationVariables = Exact<{
  input: ProjectUpdateCreateInput;
}>;

export type CreateProjectUpdateMutation = { __typename?: "Mutation" } & {
  projectUpdateCreate: { __typename?: "ProjectUpdatePayload" } & ProjectUpdatePayloadFragment;
};

export type DeleteProjectUpdateMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteProjectUpdateMutation = { __typename?: "Mutation" } & {
  projectUpdateDelete: { __typename?: "DeletePayload" } & DeletePayloadFragment;
};

export type UnarchiveProjectUpdateMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type UnarchiveProjectUpdateMutation = { __typename?: "Mutation" } & {
  projectUpdateUnarchive: { __typename?: "ProjectUpdateArchivePayload" } & ProjectUpdateArchivePayloadFragment;
};

export type UpdateProjectUpdateMutationVariables = Exact<{
  id: Scalars["String"];
  input: ProjectUpdateUpdateInput;
}>;

export type UpdateProjectUpdateMutation = { __typename?: "Mutation" } & {
  projectUpdateUpdate: { __typename?: "ProjectUpdatePayload" } & ProjectUpdatePayloadFragment;
};

export type CreatePushSubscriptionMutationVariables = Exact<{
  input: PushSubscriptionCreateInput;
}>;

export type CreatePushSubscriptionMutation = { __typename?: "Mutation" } & {
  pushSubscriptionCreate: { __typename?: "PushSubscriptionPayload" } & PushSubscriptionPayloadFragment;
};

export type DeletePushSubscriptionMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeletePushSubscriptionMutation = { __typename?: "Mutation" } & {
  pushSubscriptionDelete: { __typename?: "PushSubscriptionPayload" } & PushSubscriptionPayloadFragment;
};

export type CreateReactionMutationVariables = Exact<{
  input: ReactionCreateInput;
}>;

export type CreateReactionMutation = { __typename?: "Mutation" } & {
  reactionCreate: { __typename?: "ReactionPayload" } & ReactionPayloadFragment;
};

export type DeleteReactionMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteReactionMutation = { __typename?: "Mutation" } & {
  reactionDelete: { __typename?: "DeletePayload" } & DeletePayloadFragment;
};

export type RefreshGoogleSheetsDataMutationVariables = Exact<{
  id: Scalars["String"];
  type?: Maybe<Scalars["String"]>;
}>;

export type RefreshGoogleSheetsDataMutation = { __typename?: "Mutation" } & {
  refreshGoogleSheetsData: { __typename?: "IntegrationPayload" } & IntegrationPayloadFragment;
};

export type ResendOrganizationInviteMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type ResendOrganizationInviteMutation = { __typename?: "Mutation" } & {
  resendOrganizationInvite: { __typename?: "DeletePayload" } & DeletePayloadFragment;
};

export type ResendOrganizationInviteByEmailMutationVariables = Exact<{
  email: Scalars["String"];
}>;

export type ResendOrganizationInviteByEmailMutation = { __typename?: "Mutation" } & {
  resendOrganizationInviteByEmail: { __typename?: "DeletePayload" } & DeletePayloadFragment;
};

export type ArchiveRoadmapMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type ArchiveRoadmapMutation = { __typename?: "Mutation" } & {
  roadmapArchive: { __typename?: "RoadmapArchivePayload" } & RoadmapArchivePayloadFragment;
};

export type CreateRoadmapMutationVariables = Exact<{
  input: RoadmapCreateInput;
}>;

export type CreateRoadmapMutation = { __typename?: "Mutation" } & {
  roadmapCreate: { __typename?: "RoadmapPayload" } & RoadmapPayloadFragment;
};

export type DeleteRoadmapMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteRoadmapMutation = { __typename?: "Mutation" } & {
  roadmapDelete: { __typename?: "DeletePayload" } & DeletePayloadFragment;
};

export type CreateRoadmapToProjectMutationVariables = Exact<{
  input: RoadmapToProjectCreateInput;
}>;

export type CreateRoadmapToProjectMutation = { __typename?: "Mutation" } & {
  roadmapToProjectCreate: { __typename?: "RoadmapToProjectPayload" } & RoadmapToProjectPayloadFragment;
};

export type DeleteRoadmapToProjectMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteRoadmapToProjectMutation = { __typename?: "Mutation" } & {
  roadmapToProjectDelete: { __typename?: "DeletePayload" } & DeletePayloadFragment;
};

export type UpdateRoadmapToProjectMutationVariables = Exact<{
  id: Scalars["String"];
  input: RoadmapToProjectUpdateInput;
}>;

export type UpdateRoadmapToProjectMutation = { __typename?: "Mutation" } & {
  roadmapToProjectUpdate: { __typename?: "RoadmapToProjectPayload" } & RoadmapToProjectPayloadFragment;
};

export type UnarchiveRoadmapMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type UnarchiveRoadmapMutation = { __typename?: "Mutation" } & {
  roadmapUnarchive: { __typename?: "RoadmapArchivePayload" } & RoadmapArchivePayloadFragment;
};

export type UpdateRoadmapMutationVariables = Exact<{
  id: Scalars["String"];
  input: RoadmapUpdateInput;
}>;

export type UpdateRoadmapMutation = { __typename?: "Mutation" } & {
  roadmapUpdate: { __typename?: "RoadmapPayload" } & RoadmapPayloadFragment;
};

export type SamlTokenUserAccountAuthMutationVariables = Exact<{
  input: TokenUserAccountAuthInput;
}>;

export type SamlTokenUserAccountAuthMutation = { __typename?: "Mutation" } & {
  samlTokenUserAccountAuth: { __typename?: "AuthResolverResponse" } & AuthResolverResponseFragment;
};

export type CreateTeamMutationVariables = Exact<{
  copySettingsFromTeamId?: Maybe<Scalars["String"]>;
  input: TeamCreateInput;
}>;

export type CreateTeamMutation = { __typename?: "Mutation" } & {
  teamCreate: { __typename?: "TeamPayload" } & TeamPayloadFragment;
};

export type DeleteTeamCyclesMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteTeamCyclesMutation = { __typename?: "Mutation" } & {
  teamCyclesDelete: { __typename?: "TeamPayload" } & TeamPayloadFragment;
};

export type DeleteTeamMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteTeamMutation = { __typename?: "Mutation" } & {
  teamDelete: { __typename?: "DeletePayload" } & DeletePayloadFragment;
};

export type DeleteTeamKeyMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteTeamKeyMutation = { __typename?: "Mutation" } & {
  teamKeyDelete: { __typename?: "DeletePayload" } & DeletePayloadFragment;
};

export type CreateTeamMembershipMutationVariables = Exact<{
  input: TeamMembershipCreateInput;
}>;

export type CreateTeamMembershipMutation = { __typename?: "Mutation" } & {
  teamMembershipCreate: { __typename?: "TeamMembershipPayload" } & TeamMembershipPayloadFragment;
};

export type DeleteTeamMembershipMutationVariables = Exact<{
  alsoLeaveParentTeams?: Maybe<Scalars["Boolean"]>;
  id: Scalars["String"];
}>;

export type DeleteTeamMembershipMutation = { __typename?: "Mutation" } & {
  teamMembershipDelete: { __typename?: "DeletePayload" } & DeletePayloadFragment;
};

export type UpdateTeamMembershipMutationVariables = Exact<{
  id: Scalars["String"];
  input: TeamMembershipUpdateInput;
}>;

export type UpdateTeamMembershipMutation = { __typename?: "Mutation" } & {
  teamMembershipUpdate: { __typename?: "TeamMembershipPayload" } & TeamMembershipPayloadFragment;
};

export type UnarchiveTeamMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type UnarchiveTeamMutation = { __typename?: "Mutation" } & {
  teamUnarchive: { __typename?: "TeamArchivePayload" } & TeamArchivePayloadFragment;
};

export type UpdateTeamMutationVariables = Exact<{
  id: Scalars["String"];
  input: TeamUpdateInput;
  mapping?: Maybe<InheritanceEntityMapping>;
}>;

export type UpdateTeamMutation = { __typename?: "Mutation" } & {
  teamUpdate: { __typename?: "TeamPayload" } & TeamPayloadFragment;
};

export type CreateTemplateMutationVariables = Exact<{
  input: TemplateCreateInput;
}>;

export type CreateTemplateMutation = { __typename?: "Mutation" } & {
  templateCreate: { __typename?: "TemplatePayload" } & TemplatePayloadFragment;
};

export type DeleteTemplateMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteTemplateMutation = { __typename?: "Mutation" } & {
  templateDelete: { __typename?: "DeletePayload" } & DeletePayloadFragment;
};

export type UpdateTemplateMutationVariables = Exact<{
  id: Scalars["String"];
  input: TemplateUpdateInput;
}>;

export type UpdateTemplateMutation = { __typename?: "Mutation" } & {
  templateUpdate: { __typename?: "TemplatePayload" } & TemplatePayloadFragment;
};

export type CreateTimeScheduleMutationVariables = Exact<{
  input: TimeScheduleCreateInput;
}>;

export type CreateTimeScheduleMutation = { __typename?: "Mutation" } & {
  timeScheduleCreate: { __typename?: "TimeSchedulePayload" } & TimeSchedulePayloadFragment;
};

export type DeleteTimeScheduleMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteTimeScheduleMutation = { __typename?: "Mutation" } & {
  timeScheduleDelete: { __typename?: "DeletePayload" } & DeletePayloadFragment;
};

export type TimeScheduleRefreshIntegrationScheduleMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type TimeScheduleRefreshIntegrationScheduleMutation = { __typename?: "Mutation" } & {
  timeScheduleRefreshIntegrationSchedule: { __typename?: "TimeSchedulePayload" } & TimeSchedulePayloadFragment;
};

export type UpdateTimeScheduleMutationVariables = Exact<{
  id: Scalars["String"];
  input: TimeScheduleUpdateInput;
}>;

export type UpdateTimeScheduleMutation = { __typename?: "Mutation" } & {
  timeScheduleUpdate: { __typename?: "TimeSchedulePayload" } & TimeSchedulePayloadFragment;
};

export type TimeScheduleUpsertExternalMutationVariables = Exact<{
  externalId: Scalars["String"];
  input: TimeScheduleUpdateInput;
}>;

export type TimeScheduleUpsertExternalMutation = { __typename?: "Mutation" } & {
  timeScheduleUpsertExternal: { __typename?: "TimeSchedulePayload" } & TimeSchedulePayloadFragment;
};

export type CreateTriageResponsibilityMutationVariables = Exact<{
  input: TriageResponsibilityCreateInput;
}>;

export type CreateTriageResponsibilityMutation = { __typename?: "Mutation" } & {
  triageResponsibilityCreate: { __typename?: "TriageResponsibilityPayload" } & TriageResponsibilityPayloadFragment;
};

export type DeleteTriageResponsibilityMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteTriageResponsibilityMutation = { __typename?: "Mutation" } & {
  triageResponsibilityDelete: { __typename?: "DeletePayload" } & DeletePayloadFragment;
};

export type UpdateTriageResponsibilityMutationVariables = Exact<{
  id: Scalars["String"];
  input: TriageResponsibilityUpdateInput;
}>;

export type UpdateTriageResponsibilityMutation = { __typename?: "Mutation" } & {
  triageResponsibilityUpdate: { __typename?: "TriageResponsibilityPayload" } & TriageResponsibilityPayloadFragment;
};

export type UserDemoteAdminMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type UserDemoteAdminMutation = { __typename?: "Mutation" } & {
  userDemoteAdmin: { __typename?: "UserAdminPayload" } & UserAdminPayloadFragment;
};

export type UserDemoteMemberMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type UserDemoteMemberMutation = { __typename?: "Mutation" } & {
  userDemoteMember: { __typename?: "UserAdminPayload" } & UserAdminPayloadFragment;
};

export type UserDiscordConnectMutationVariables = Exact<{
  code: Scalars["String"];
  redirectUri: Scalars["String"];
}>;

export type UserDiscordConnectMutation = { __typename?: "Mutation" } & {
  userDiscordConnect: { __typename?: "UserPayload" } & UserPayloadFragment;
};

export type UserExternalUserDisconnectMutationVariables = Exact<{
  service: Scalars["String"];
}>;

export type UserExternalUserDisconnectMutation = { __typename?: "Mutation" } & {
  userExternalUserDisconnect: { __typename?: "UserPayload" } & UserPayloadFragment;
};

export type UpdateUserFlagMutationVariables = Exact<{
  flag: UserFlagType;
  operation: UserFlagUpdateOperation;
}>;

export type UpdateUserFlagMutation = { __typename?: "Mutation" } & {
  userFlagUpdate: { __typename?: "UserSettingsFlagPayload" } & UserSettingsFlagPayloadFragment;
};

export type UserPromoteAdminMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type UserPromoteAdminMutation = { __typename?: "Mutation" } & {
  userPromoteAdmin: { __typename?: "UserAdminPayload" } & UserAdminPayloadFragment;
};

export type UserPromoteMemberMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type UserPromoteMemberMutation = { __typename?: "Mutation" } & {
  userPromoteMember: { __typename?: "UserAdminPayload" } & UserAdminPayloadFragment;
};

export type UserSettingsFlagsResetMutationVariables = Exact<{
  flags?: Maybe<Array<UserFlagType> | UserFlagType>;
}>;

export type UserSettingsFlagsResetMutation = { __typename?: "Mutation" } & {
  userSettingsFlagsReset: { __typename?: "UserSettingsFlagsResetPayload" } & UserSettingsFlagsResetPayloadFragment;
};

export type UpdateUserSettingsMutationVariables = Exact<{
  id: Scalars["String"];
  input: UserSettingsUpdateInput;
}>;

export type UpdateUserSettingsMutation = { __typename?: "Mutation" } & {
  userSettingsUpdate: { __typename?: "UserSettingsPayload" } & UserSettingsPayloadFragment;
};

export type SuspendUserMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type SuspendUserMutation = { __typename?: "Mutation" } & {
  userSuspend: { __typename?: "UserAdminPayload" } & UserAdminPayloadFragment;
};

export type UnsuspendUserMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type UnsuspendUserMutation = { __typename?: "Mutation" } & {
  userUnsuspend: { __typename?: "UserAdminPayload" } & UserAdminPayloadFragment;
};

export type UpdateUserMutationVariables = Exact<{
  id: Scalars["String"];
  input: UserUpdateInput;
}>;

export type UpdateUserMutation = { __typename?: "Mutation" } & {
  userUpdate: { __typename?: "UserPayload" } & UserPayloadFragment;
};

export type CreateViewPreferencesMutationVariables = Exact<{
  input: ViewPreferencesCreateInput;
}>;

export type CreateViewPreferencesMutation = { __typename?: "Mutation" } & {
  viewPreferencesCreate: { __typename?: "ViewPreferencesPayload" } & ViewPreferencesPayloadFragment;
};

export type DeleteViewPreferencesMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteViewPreferencesMutation = { __typename?: "Mutation" } & {
  viewPreferencesDelete: { __typename?: "DeletePayload" } & DeletePayloadFragment;
};

export type UpdateViewPreferencesMutationVariables = Exact<{
  id: Scalars["String"];
  input: ViewPreferencesUpdateInput;
}>;

export type UpdateViewPreferencesMutation = { __typename?: "Mutation" } & {
  viewPreferencesUpdate: { __typename?: "ViewPreferencesPayload" } & ViewPreferencesPayloadFragment;
};

export type CreateWebhookMutationVariables = Exact<{
  input: WebhookCreateInput;
}>;

export type CreateWebhookMutation = { __typename?: "Mutation" } & {
  webhookCreate: { __typename?: "WebhookPayload" } & WebhookPayloadFragment;
};

export type DeleteWebhookMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteWebhookMutation = { __typename?: "Mutation" } & {
  webhookDelete: { __typename?: "DeletePayload" } & DeletePayloadFragment;
};

export type UpdateWebhookMutationVariables = Exact<{
  id: Scalars["String"];
  input: WebhookUpdateInput;
}>;

export type UpdateWebhookMutation = { __typename?: "Mutation" } & {
  webhookUpdate: { __typename?: "WebhookPayload" } & WebhookPayloadFragment;
};

export type ArchiveWorkflowStateMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type ArchiveWorkflowStateMutation = { __typename?: "Mutation" } & {
  workflowStateArchive: { __typename?: "WorkflowStateArchivePayload" } & WorkflowStateArchivePayloadFragment;
};

export type CreateWorkflowStateMutationVariables = Exact<{
  input: WorkflowStateCreateInput;
}>;

export type CreateWorkflowStateMutation = { __typename?: "Mutation" } & {
  workflowStateCreate: { __typename?: "WorkflowStatePayload" } & WorkflowStatePayloadFragment;
};

export type UpdateWorkflowStateMutationVariables = Exact<{
  id: Scalars["String"];
  input: WorkflowStateUpdateInput;
}>;

export type UpdateWorkflowStateMutation = { __typename?: "Mutation" } & {
  workflowStateUpdate: { __typename?: "WorkflowStatePayload" } & WorkflowStatePayloadFragment;
};

export const EntityFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "Entity" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Entity" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<EntityFragment, unknown>;
export const CustomViewNotificationSubscriptionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CustomViewNotificationSubscription" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomViewNotificationSubscription" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "cycle" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "initiative" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "label" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "customView" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "customer" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "notificationSubscriptionTypes" } },
          { kind: "Field", name: { kind: "Name", value: "userContextViewType" } },
          { kind: "Field", name: { kind: "Name", value: "contextViewType" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "subscriber" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "active" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CustomViewNotificationSubscriptionFragment, unknown>;
export const CustomerNotificationSubscriptionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CustomerNotificationSubscription" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerNotificationSubscription" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "customView" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "cycle" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "initiative" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "label" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "customer" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "notificationSubscriptionTypes" } },
          { kind: "Field", name: { kind: "Name", value: "userContextViewType" } },
          { kind: "Field", name: { kind: "Name", value: "contextViewType" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "subscriber" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "active" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CustomerNotificationSubscriptionFragment, unknown>;
export const CycleNotificationSubscriptionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CycleNotificationSubscription" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CycleNotificationSubscription" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "customView" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "initiative" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "label" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "customer" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "cycle" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "notificationSubscriptionTypes" } },
          { kind: "Field", name: { kind: "Name", value: "userContextViewType" } },
          { kind: "Field", name: { kind: "Name", value: "contextViewType" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "subscriber" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "active" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CycleNotificationSubscriptionFragment, unknown>;
export const FacetFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "Facet" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Facet" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "sourceFeedUser" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "sourceInitiative" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "sourcePage" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "sourceProject" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "sourceTeam" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "targetCustomView" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<FacetFragment, unknown>;
export const CustomerNeedArchivePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CustomerNeedArchivePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedArchivePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "entity" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CustomerNeedArchivePayloadFragment, unknown>;
export const CycleArchivePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CycleArchivePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CycleArchivePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "entity" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CycleArchivePayloadFragment, unknown>;
export const DeletePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "DeletePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DeletePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "entityId" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<DeletePayloadFragment, unknown>;
export const DocumentArchivePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "DocumentArchivePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentArchivePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "entity" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<DocumentArchivePayloadFragment, unknown>;
export const InitiativeArchivePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "InitiativeArchivePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeArchivePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "entity" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<InitiativeArchivePayloadFragment, unknown>;
export const InitiativeUpdateArchivePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "InitiativeUpdateArchivePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdateArchivePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "entity" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<InitiativeUpdateArchivePayloadFragment, unknown>;
export const IssueArchivePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueArchivePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueArchivePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "entity" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueArchivePayloadFragment, unknown>;
export const ActorBotFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ActorBot" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ActorBot" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "avatarUrl" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "userDisplayName" } },
          { kind: "Field", name: { kind: "Name", value: "subType" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ActorBotFragment, unknown>;
export const CustomerNeedNotificationFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CustomerNeedNotification" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedNotification" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          { kind: "Field", name: { kind: "Name", value: "customerNeedId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "botActor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "category" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "customerNeed" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "externalUserActor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "relatedIssue" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "relatedProject" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "emailedAt" } },
          { kind: "Field", name: { kind: "Name", value: "readAt" } },
          { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "actor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CustomerNeedNotificationFragment, unknown>;
export const CustomerNotificationFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CustomerNotification" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerNotification" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          { kind: "Field", name: { kind: "Name", value: "customerId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "botActor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "category" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "customer" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "externalUserActor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "emailedAt" } },
          { kind: "Field", name: { kind: "Name", value: "readAt" } },
          { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "actor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CustomerNotificationFragment, unknown>;
export const DocumentNotificationFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "DocumentNotification" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentNotification" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "reactionEmoji" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          { kind: "Field", name: { kind: "Name", value: "commentId" } },
          { kind: "Field", name: { kind: "Name", value: "documentId" } },
          { kind: "Field", name: { kind: "Name", value: "parentCommentId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "botActor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "category" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "externalUserActor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "emailedAt" } },
          { kind: "Field", name: { kind: "Name", value: "readAt" } },
          { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "actor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<DocumentNotificationFragment, unknown>;
export const InitiativeNotificationFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "InitiativeNotification" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeNotification" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "reactionEmoji" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          { kind: "Field", name: { kind: "Name", value: "commentId" } },
          { kind: "Field", name: { kind: "Name", value: "initiativeId" } },
          { kind: "Field", name: { kind: "Name", value: "initiativeUpdateId" } },
          { kind: "Field", name: { kind: "Name", value: "parentCommentId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "botActor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "category" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "comment" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "document" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "externalUserActor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "initiative" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "initiativeUpdate" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "parentComment" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "emailedAt" } },
          { kind: "Field", name: { kind: "Name", value: "readAt" } },
          { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "actor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<InitiativeNotificationFragment, unknown>;
export const NotificationSubscriptionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "NotificationSubscription" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscription" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "customView" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "cycle" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "initiative" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "label" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "customer" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "userContextViewType" } },
          { kind: "Field", name: { kind: "Name", value: "contextViewType" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "subscriber" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "active" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<NotificationSubscriptionFragment, unknown>;
export const IssueNotificationFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueNotification" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueNotification" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "reactionEmoji" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          { kind: "Field", name: { kind: "Name", value: "commentId" } },
          { kind: "Field", name: { kind: "Name", value: "issueId" } },
          { kind: "Field", name: { kind: "Name", value: "parentCommentId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "botActor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "category" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "comment" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "externalUserActor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "parentComment" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "subscriptions" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscription" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "emailedAt" } },
          { kind: "Field", name: { kind: "Name", value: "readAt" } },
          { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "actor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueNotificationFragment, unknown>;
export const OauthClientApprovalFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "OauthClientApproval" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OauthClientApproval" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "requesterId" } },
          { kind: "Field", name: { kind: "Name", value: "responderId" } },
          { kind: "Field", name: { kind: "Name", value: "requestReason" } },
          { kind: "Field", name: { kind: "Name", value: "denyReason" } },
          { kind: "Field", name: { kind: "Name", value: "scopes" } },
          { kind: "Field", name: { kind: "Name", value: "status" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "oauthClientId" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<OauthClientApprovalFragment, unknown>;
export const OauthClientApprovalNotificationFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "OauthClientApprovalNotification" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OauthClientApprovalNotification" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          { kind: "Field", name: { kind: "Name", value: "oauthClientApprovalId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "oauthClientApproval" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OauthClientApproval" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "botActor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "category" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "externalUserActor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "emailedAt" } },
          { kind: "Field", name: { kind: "Name", value: "readAt" } },
          { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "actor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<OauthClientApprovalNotificationFragment, unknown>;
export const PostNotificationFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "PostNotification" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PostNotification" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "reactionEmoji" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          { kind: "Field", name: { kind: "Name", value: "commentId" } },
          { kind: "Field", name: { kind: "Name", value: "parentCommentId" } },
          { kind: "Field", name: { kind: "Name", value: "postId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "botActor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "category" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "externalUserActor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "emailedAt" } },
          { kind: "Field", name: { kind: "Name", value: "readAt" } },
          { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "actor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<PostNotificationFragment, unknown>;
export const ProjectNotificationFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectNotification" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectNotification" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "reactionEmoji" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          { kind: "Field", name: { kind: "Name", value: "commentId" } },
          { kind: "Field", name: { kind: "Name", value: "parentCommentId" } },
          { kind: "Field", name: { kind: "Name", value: "projectId" } },
          { kind: "Field", name: { kind: "Name", value: "projectMilestoneId" } },
          { kind: "Field", name: { kind: "Name", value: "projectUpdateId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "botActor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "category" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "comment" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "document" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "externalUserActor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "parentComment" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "projectUpdate" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "emailedAt" } },
          { kind: "Field", name: { kind: "Name", value: "readAt" } },
          { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "actor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectNotificationFragment, unknown>;
export const PullRequestNotificationFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "PullRequestNotification" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PullRequestNotification" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "reactionEmoji" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          { kind: "Field", name: { kind: "Name", value: "commentId" } },
          { kind: "Field", name: { kind: "Name", value: "parentCommentId" } },
          { kind: "Field", name: { kind: "Name", value: "pullRequestId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "botActor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "category" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "externalUserActor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "emailedAt" } },
          { kind: "Field", name: { kind: "Name", value: "readAt" } },
          { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "actor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<PullRequestNotificationFragment, unknown>;
export const NotificationFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "Notification" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Notification" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "botActor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "category" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "externalUserActor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "emailedAt" } },
          { kind: "Field", name: { kind: "Name", value: "readAt" } },
          { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "actor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "InlineFragment",
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedNotification" } },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedNotification" } }],
            },
          },
          {
            kind: "InlineFragment",
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerNotification" } },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNotification" } }],
            },
          },
          {
            kind: "InlineFragment",
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentNotification" } },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentNotification" } }],
            },
          },
          {
            kind: "InlineFragment",
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeNotification" } },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeNotification" } }],
            },
          },
          {
            kind: "InlineFragment",
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueNotification" } },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueNotification" } }],
            },
          },
          {
            kind: "InlineFragment",
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OauthClientApprovalNotification" } },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "OauthClientApprovalNotification" } },
              ],
            },
          },
          {
            kind: "InlineFragment",
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PostNotification" } },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PostNotification" } }],
            },
          },
          {
            kind: "InlineFragment",
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectNotification" } },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectNotification" } }],
            },
          },
          {
            kind: "InlineFragment",
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PullRequestNotification" } },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PullRequestNotification" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<NotificationFragment, unknown>;
export const NotificationArchivePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "NotificationArchivePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationArchivePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "entity" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Notification" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<NotificationArchivePayloadFragment, unknown>;
export const ProjectArchivePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectArchivePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectArchivePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "entity" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectArchivePayloadFragment, unknown>;
export const ProjectStatusArchivePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectStatusArchivePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectStatusArchivePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "entity" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectStatusArchivePayloadFragment, unknown>;
export const ProjectUpdateArchivePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectUpdateArchivePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateArchivePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "entity" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectUpdateArchivePayloadFragment, unknown>;
export const RoadmapArchivePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "RoadmapArchivePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapArchivePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "entity" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<RoadmapArchivePayloadFragment, unknown>;
export const TeamArchivePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "TeamArchivePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamArchivePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "entity" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<TeamArchivePayloadFragment, unknown>;
export const WorkflowStateArchivePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "WorkflowStateArchivePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateArchivePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "entity" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<WorkflowStateArchivePayloadFragment, unknown>;
export const ArchivePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ArchivePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ArchivePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
          {
            kind: "InlineFragment",
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedArchivePayload" } },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedArchivePayload" } }],
            },
          },
          {
            kind: "InlineFragment",
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CycleArchivePayload" } },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CycleArchivePayload" } }],
            },
          },
          {
            kind: "InlineFragment",
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DeletePayload" } },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
            },
          },
          {
            kind: "InlineFragment",
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentArchivePayload" } },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentArchivePayload" } }],
            },
          },
          {
            kind: "InlineFragment",
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeArchivePayload" } },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeArchivePayload" } }],
            },
          },
          {
            kind: "InlineFragment",
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdateArchivePayload" } },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeUpdateArchivePayload" } }],
            },
          },
          {
            kind: "InlineFragment",
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueArchivePayload" } },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueArchivePayload" } }],
            },
          },
          {
            kind: "InlineFragment",
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationArchivePayload" } },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationArchivePayload" } }],
            },
          },
          {
            kind: "InlineFragment",
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectArchivePayload" } },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectArchivePayload" } }],
            },
          },
          {
            kind: "InlineFragment",
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectStatusArchivePayload" } },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatusArchivePayload" } }],
            },
          },
          {
            kind: "InlineFragment",
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateArchivePayload" } },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateArchivePayload" } }],
            },
          },
          {
            kind: "InlineFragment",
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapArchivePayload" } },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapArchivePayload" } }],
            },
          },
          {
            kind: "InlineFragment",
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamArchivePayload" } },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamArchivePayload" } }],
            },
          },
          {
            kind: "InlineFragment",
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateArchivePayload" } },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStateArchivePayload" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ArchivePayloadFragment, unknown>;
export const LabelNotificationSubscriptionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "LabelNotificationSubscription" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "LabelNotificationSubscription" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "customView" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "cycle" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "initiative" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "customer" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "label" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "notificationSubscriptionTypes" } },
          { kind: "Field", name: { kind: "Name", value: "userContextViewType" } },
          { kind: "Field", name: { kind: "Name", value: "contextViewType" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "subscriber" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "active" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<LabelNotificationSubscriptionFragment, unknown>;
export const ProjectNotificationSubscriptionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectNotificationSubscription" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectNotificationSubscription" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "customView" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "cycle" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "initiative" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "label" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "customer" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "notificationSubscriptionTypes" } },
          { kind: "Field", name: { kind: "Name", value: "userContextViewType" } },
          { kind: "Field", name: { kind: "Name", value: "contextViewType" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "subscriber" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "active" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectNotificationSubscriptionFragment, unknown>;
export const TeamNotificationSubscriptionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "TeamNotificationSubscription" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamNotificationSubscription" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "customView" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "cycle" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "initiative" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "label" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "customer" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "notificationSubscriptionTypes" } },
          { kind: "Field", name: { kind: "Name", value: "userContextViewType" } },
          { kind: "Field", name: { kind: "Name", value: "contextViewType" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "subscriber" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "active" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<TeamNotificationSubscriptionFragment, unknown>;
export const UserNotificationSubscriptionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "UserNotificationSubscription" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserNotificationSubscription" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "customView" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "cycle" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "initiative" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "label" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "customer" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "notificationSubscriptionTypes" } },
          { kind: "Field", name: { kind: "Name", value: "userContextViewType" } },
          { kind: "Field", name: { kind: "Name", value: "contextViewType" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "subscriber" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "active" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<UserNotificationSubscriptionFragment, unknown>;
export const SesDomainIdentityDnsRecordFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "SesDomainIdentityDnsRecord" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SesDomainIdentityDnsRecord" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "content" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          { kind: "Field", name: { kind: "Name", value: "isVerified" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<SesDomainIdentityDnsRecordFragment, unknown>;
export const SesDomainIdentityFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "SesDomainIdentity" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SesDomainIdentity" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "region" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "dnsRecords" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SesDomainIdentityDnsRecord" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "domain" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "creator" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "canSendFromCustomDomain" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<SesDomainIdentityFragment, unknown>;
export const EmailIntakeAddressFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "EmailIntakeAddress" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmailIntakeAddress" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "sesDomainIdentity" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SesDomainIdentity" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "issueCanceledAutoReply" } },
          { kind: "Field", name: { kind: "Name", value: "issueCompletedAutoReply" } },
          { kind: "Field", name: { kind: "Name", value: "issueCreatedAutoReply" } },
          { kind: "Field", name: { kind: "Name", value: "forwardingEmailAddress" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "senderName" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "template" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "creator" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "address" } },
          { kind: "Field", name: { kind: "Name", value: "repliesEnabled" } },
          { kind: "Field", name: { kind: "Name", value: "customerRequestsEnabled" } },
          { kind: "Field", name: { kind: "Name", value: "issueCanceledAutoReplyEnabled" } },
          { kind: "Field", name: { kind: "Name", value: "issueCompletedAutoReplyEnabled" } },
          { kind: "Field", name: { kind: "Name", value: "useUserNamesInReplies" } },
          { kind: "Field", name: { kind: "Name", value: "enabled" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<EmailIntakeAddressFragment, unknown>;
export const InitiativeNotificationSubscriptionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "InitiativeNotificationSubscription" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeNotificationSubscription" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "customView" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "cycle" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "label" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "customer" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "initiative" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "notificationSubscriptionTypes" } },
          { kind: "Field", name: { kind: "Name", value: "userContextViewType" } },
          { kind: "Field", name: { kind: "Name", value: "contextViewType" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "subscriber" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "active" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<InitiativeNotificationSubscriptionFragment, unknown>;
export const OrganizationIpRestrictionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "OrganizationIpRestriction" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationIpRestriction" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "range" } },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          { kind: "Field", name: { kind: "Name", value: "enabled" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<OrganizationIpRestrictionFragment, unknown>;
export const ProjectStatusFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectStatus" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectStatus" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "color" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "position" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "indefinite" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectStatusFragment, unknown>;
export const PaidSubscriptionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "PaidSubscription" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PaidSubscription" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "collectionMethod" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "creator" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "cancelAt" } },
          { kind: "Field", name: { kind: "Name", value: "canceledAt" } },
          { kind: "Field", name: { kind: "Name", value: "nextBillingAt" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "seatsMaximum" } },
          { kind: "Field", name: { kind: "Name", value: "seatsMinimum" } },
          { kind: "Field", name: { kind: "Name", value: "seats" } },
          { kind: "Field", name: { kind: "Name", value: "pendingChangeType" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<PaidSubscriptionFragment, unknown>;
export const OrganizationFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "Organization" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Organization" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "allowedAuthServices" } },
          { kind: "Field", name: { kind: "Name", value: "customersConfiguration" } },
          { kind: "Field", name: { kind: "Name", value: "defaultFeedSummarySchedule" } },
          { kind: "Field", name: { kind: "Name", value: "gitBranchFormat" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "ipRestrictions" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationIpRestriction" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "userCount" } },
          { kind: "Field", name: { kind: "Name", value: "customerCount" } },
          { kind: "Field", name: { kind: "Name", value: "createdIssueCount" } },
          { kind: "Field", name: { kind: "Name", value: "previousUrlKeys" } },
          { kind: "Field", name: { kind: "Name", value: "periodUploadVolume" } },
          { kind: "Field", name: { kind: "Name", value: "initiativeUpdateRemindersDay" } },
          { kind: "Field", name: { kind: "Name", value: "projectUpdateRemindersDay" } },
          { kind: "Field", name: { kind: "Name", value: "releaseChannel" } },
          { kind: "Field", name: { kind: "Name", value: "initiativeUpdateRemindersHour" } },
          { kind: "Field", name: { kind: "Name", value: "projectUpdateRemindersHour" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "fiscalYearStartMonth" } },
          { kind: "Field", name: { kind: "Name", value: "initiativeUpdateReminderFrequencyInWeeks" } },
          { kind: "Field", name: { kind: "Name", value: "projectUpdateReminderFrequencyInWeeks" } },
          { kind: "Field", name: { kind: "Name", value: "logoUrl" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "projectStatuses" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatus" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "subscription" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PaidSubscription" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "urlKey" } },
          { kind: "Field", name: { kind: "Name", value: "deletionRequestedAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "trialEndsAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "samlEnabled" } },
          { kind: "Field", name: { kind: "Name", value: "scimEnabled" } },
          { kind: "Field", name: { kind: "Name", value: "allowMembersToInvite" } },
          { kind: "Field", name: { kind: "Name", value: "restrictTeamCreationToAdmins" } },
          { kind: "Field", name: { kind: "Name", value: "gitLinkbackMessagesEnabled" } },
          { kind: "Field", name: { kind: "Name", value: "gitPublicLinkbackMessagesEnabled" } },
          { kind: "Field", name: { kind: "Name", value: "feedEnabled" } },
          { kind: "Field", name: { kind: "Name", value: "customersEnabled" } },
          { kind: "Field", name: { kind: "Name", value: "roadmapEnabled" } },
          { kind: "Field", name: { kind: "Name", value: "restrictLabelManagementToAdmins" } },
          { kind: "Field", name: { kind: "Name", value: "projectUpdatesReminderFrequency" } },
          { kind: "Field", name: { kind: "Name", value: "slaDayCount" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<OrganizationFragment, unknown>;
export const AuthenticationSessionResponseFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "AuthenticationSessionResponse" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthenticationSessionResponse" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "client" } },
          { kind: "Field", name: { kind: "Name", value: "countryCodes" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "location" } },
          { kind: "Field", name: { kind: "Name", value: "ip" } },
          { kind: "Field", name: { kind: "Name", value: "isCurrentSession" } },
          { kind: "Field", name: { kind: "Name", value: "locationCity" } },
          { kind: "Field", name: { kind: "Name", value: "locationCountryCode" } },
          { kind: "Field", name: { kind: "Name", value: "locationCountry" } },
          { kind: "Field", name: { kind: "Name", value: "locationRegionCode" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "operatingSystem" } },
          { kind: "Field", name: { kind: "Name", value: "service" } },
          { kind: "Field", name: { kind: "Name", value: "userAgent" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          { kind: "Field", name: { kind: "Name", value: "browserType" } },
          { kind: "Field", name: { kind: "Name", value: "lastActiveAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<AuthenticationSessionResponseFragment, unknown>;
export const BaseWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "BaseWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "BaseWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "organizationId" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<BaseWebhookPayloadFragment, unknown>;
export const CustomerNeedChildWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CustomerNeedChildWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedChildWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "attachmentId" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "customerId" } },
          { kind: "Field", name: { kind: "Name", value: "issueId" } },
          { kind: "Field", name: { kind: "Name", value: "projectId" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CustomerNeedChildWebhookPayloadFragment, unknown>;
export const OauthClientChildWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "OauthClientChildWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OauthClientChildWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<OauthClientChildWebhookPayloadFragment, unknown>;
export const IntegrationChildWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IntegrationChildWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationChildWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "service" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IntegrationChildWebhookPayloadFragment, unknown>;
export const IdentityProviderFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IdentityProvider" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IdentityProvider" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "ssoBinding" } },
          { kind: "Field", name: { kind: "Name", value: "ssoEndpoint" } },
          { kind: "Field", name: { kind: "Name", value: "priority" } },
          { kind: "Field", name: { kind: "Name", value: "ssoSignAlgo" } },
          { kind: "Field", name: { kind: "Name", value: "issuerEntityId" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "samlEnabled" } },
          { kind: "Field", name: { kind: "Name", value: "scimEnabled" } },
          { kind: "Field", name: { kind: "Name", value: "defaultMigrated" } },
          { kind: "Field", name: { kind: "Name", value: "ssoSigningCert" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IdentityProviderFragment, unknown>;
export const OrganizationDomainFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "OrganizationDomain" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationDomain" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "verificationEmail" } },
          { kind: "Field", name: { kind: "Name", value: "verified" } },
          { kind: "Field", name: { kind: "Name", value: "disableOrganizationCreation" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "identityProvider" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IdentityProvider" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "creator" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "authType" } },
          { kind: "Field", name: { kind: "Name", value: "claimed" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<OrganizationDomainFragment, unknown>;
export const AuthorizingUserFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "AuthorizingUser" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthorizingUser" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "displayName" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<AuthorizingUserFragment, unknown>;
export const WebhookFailureEventFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "WebhookFailureEvent" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WebhookFailureEvent" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "responseOrError" } },
          { kind: "Field", name: { kind: "Name", value: "httpStatus" } },
          { kind: "Field", name: { kind: "Name", value: "url" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "executionId" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "webhook" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<WebhookFailureEventFragment, unknown>;
export const UserChildWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "UserChildWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserChildWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "url" } },
          { kind: "Field", name: { kind: "Name", value: "avatarUrl" } },
          { kind: "Field", name: { kind: "Name", value: "email" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<UserChildWebhookPayloadFragment, unknown>;
export const CommentChildWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CommentChildWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CommentChildWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "documentContentId" } },
          { kind: "Field", name: { kind: "Name", value: "initiativeUpdateId" } },
          { kind: "Field", name: { kind: "Name", value: "issueId" } },
          { kind: "Field", name: { kind: "Name", value: "projectUpdateId" } },
          { kind: "Field", name: { kind: "Name", value: "userId" } },
          { kind: "Field", name: { kind: "Name", value: "body" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CommentChildWebhookPayloadFragment, unknown>;
export const InitiativeChildWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "InitiativeChildWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeChildWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "url" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<InitiativeChildWebhookPayloadFragment, unknown>;
export const ProjectChildWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectChildWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectChildWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "url" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectChildWebhookPayloadFragment, unknown>;
export const DocumentChildWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "DocumentChildWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentChildWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "initiativeId" } },
          { kind: "Field", name: { kind: "Name", value: "projectId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "initiative" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeChildWebhookPayload" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectChildWebhookPayload" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "title" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<DocumentChildWebhookPayloadFragment, unknown>;
export const TeamChildWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "TeamChildWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamChildWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "key" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<TeamChildWebhookPayloadFragment, unknown>;
export const IssueWithDescriptionChildWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueWithDescriptionChildWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueWithDescriptionChildWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamChildWebhookPayload" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "teamId" } },
          { kind: "Field", name: { kind: "Name", value: "url" } },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "identifier" } },
          { kind: "Field", name: { kind: "Name", value: "title" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueWithDescriptionChildWebhookPayloadFragment, unknown>;
export const ProjectUpdateChildWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectUpdateChildWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateChildWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "userId" } },
          { kind: "Field", name: { kind: "Name", value: "body" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectChildWebhookPayload" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectUpdateChildWebhookPayloadFragment, unknown>;
export const OtherNotificationWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "OtherNotificationWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OtherNotificationWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "actorId" } },
          { kind: "Field", name: { kind: "Name", value: "commentId" } },
          { kind: "Field", name: { kind: "Name", value: "documentId" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "externalUserActorId" } },
          { kind: "Field", name: { kind: "Name", value: "issueId" } },
          { kind: "Field", name: { kind: "Name", value: "parentCommentId" } },
          { kind: "Field", name: { kind: "Name", value: "projectId" } },
          { kind: "Field", name: { kind: "Name", value: "projectUpdateId" } },
          { kind: "Field", name: { kind: "Name", value: "userId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "actor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "comment" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentChildWebhookPayload" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "document" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentChildWebhookPayload" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "reactionEmoji" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "IssueWithDescriptionChildWebhookPayload" } },
              ],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "parentComment" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentChildWebhookPayload" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectChildWebhookPayload" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "projectUpdate" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateChildWebhookPayload" } },
              ],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<OtherNotificationWebhookPayloadFragment, unknown>;
export const OAuthAppWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "OAuthAppWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OAuthAppWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "organizationId" } },
          { kind: "Field", name: { kind: "Name", value: "oauthClientId" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "action" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<OAuthAppWebhookPayloadFragment, unknown>;
export const DocumentContentChildWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "DocumentContentChildWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentContentChildWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "document" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentChildWebhookPayload" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectChildWebhookPayload" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<DocumentContentChildWebhookPayloadFragment, unknown>;
export const ExternalUserChildWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ExternalUserChildWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ExternalUserChildWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "email" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ExternalUserChildWebhookPayloadFragment, unknown>;
export const InitiativeUpdateChildWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "InitiativeUpdateChildWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdateChildWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "bodyData" } },
          { kind: "Field", name: { kind: "Name", value: "editedAt" } },
          { kind: "Field", name: { kind: "Name", value: "health" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<InitiativeUpdateChildWebhookPayloadFragment, unknown>;
export const IssueChildWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueChildWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueChildWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamChildWebhookPayload" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "teamId" } },
          { kind: "Field", name: { kind: "Name", value: "url" } },
          { kind: "Field", name: { kind: "Name", value: "identifier" } },
          { kind: "Field", name: { kind: "Name", value: "title" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueChildWebhookPayloadFragment, unknown>;
export const CommentWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CommentWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CommentWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "resolvingCommentId" } },
          { kind: "Field", name: { kind: "Name", value: "documentContentId" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "externalUserId" } },
          { kind: "Field", name: { kind: "Name", value: "initiativeUpdateId" } },
          { kind: "Field", name: { kind: "Name", value: "issueId" } },
          { kind: "Field", name: { kind: "Name", value: "parentId" } },
          { kind: "Field", name: { kind: "Name", value: "postId" } },
          { kind: "Field", name: { kind: "Name", value: "projectUpdateId" } },
          { kind: "Field", name: { kind: "Name", value: "userId" } },
          { kind: "Field", name: { kind: "Name", value: "resolvingUserId" } },
          { kind: "Field", name: { kind: "Name", value: "body" } },
          { kind: "Field", name: { kind: "Name", value: "botActor" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "documentContent" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContentChildWebhookPayload" } },
              ],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "syncedWith" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "externalUser" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "ExternalUserChildWebhookPayload" } },
              ],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "initiativeUpdate" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeUpdateChildWebhookPayload" } },
              ],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueChildWebhookPayload" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "parent" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentChildWebhookPayload" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "projectUpdate" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateChildWebhookPayload" } },
              ],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "quotedText" } },
          { kind: "Field", name: { kind: "Name", value: "reactionData" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "editedAt" } },
          { kind: "Field", name: { kind: "Name", value: "resolvedAt" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CommentWebhookPayloadFragment, unknown>;
export const AttachmentWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "AttachmentWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AttachmentWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "metadata" } },
          { kind: "Field", name: { kind: "Name", value: "source" } },
          { kind: "Field", name: { kind: "Name", value: "subtitle" } },
          { kind: "Field", name: { kind: "Name", value: "creatorId" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "originalIssueId" } },
          { kind: "Field", name: { kind: "Name", value: "issueId" } },
          { kind: "Field", name: { kind: "Name", value: "externalUserCreatorId" } },
          { kind: "Field", name: { kind: "Name", value: "url" } },
          { kind: "Field", name: { kind: "Name", value: "sourceType" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "title" } },
          { kind: "Field", name: { kind: "Name", value: "groupBySource" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<AttachmentWebhookPayloadFragment, unknown>;
export const CustomerChildWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CustomerChildWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerChildWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "domains" } },
          { kind: "Field", name: { kind: "Name", value: "externalIds" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CustomerChildWebhookPayloadFragment, unknown>;
export const CustomerNeedWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CustomerNeedWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "attachmentId" } },
          { kind: "Field", name: { kind: "Name", value: "commentId" } },
          { kind: "Field", name: { kind: "Name", value: "creatorId" } },
          { kind: "Field", name: { kind: "Name", value: "customerId" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "issueId" } },
          { kind: "Field", name: { kind: "Name", value: "projectAttachmentId" } },
          { kind: "Field", name: { kind: "Name", value: "projectId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "attachment" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentWebhookPayload" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "body" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "customer" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerChildWebhookPayload" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "originalIssueId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueChildWebhookPayload" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "priority" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectChildWebhookPayload" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CustomerNeedWebhookPayloadFragment, unknown>;
export const CustomerStatusChildWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CustomerStatusChildWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerStatusChildWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "color" } },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "displayName" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CustomerStatusChildWebhookPayloadFragment, unknown>;
export const CustomerTierChildWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CustomerTierChildWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerTierChildWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "color" } },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "displayName" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CustomerTierChildWebhookPayloadFragment, unknown>;
export const CustomerWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CustomerWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "slackChannelId" } },
          { kind: "Field", name: { kind: "Name", value: "statusId" } },
          { kind: "Field", name: { kind: "Name", value: "tierId" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "mainSourceId" } },
          { kind: "Field", name: { kind: "Name", value: "ownerId" } },
          { kind: "Field", name: { kind: "Name", value: "revenue" } },
          { kind: "Field", name: { kind: "Name", value: "approximateNeedCount" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "status" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "CustomerStatusChildWebhookPayload" } },
              ],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "tier" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "CustomerTierChildWebhookPayload" } },
              ],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "logoUrl" } },
          { kind: "Field", name: { kind: "Name", value: "slugId" } },
          { kind: "Field", name: { kind: "Name", value: "domains" } },
          { kind: "Field", name: { kind: "Name", value: "externalIds" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "size" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CustomerWebhookPayloadFragment, unknown>;
export const CycleWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CycleWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CycleWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "inheritedFromId" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "uncompletedIssuesUponCloseIds" } },
          { kind: "Field", name: { kind: "Name", value: "completedAt" } },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "endsAt" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "completedScopeHistory" } },
          { kind: "Field", name: { kind: "Name", value: "completedIssueCountHistory" } },
          { kind: "Field", name: { kind: "Name", value: "inProgressScopeHistory" } },
          { kind: "Field", name: { kind: "Name", value: "number" } },
          { kind: "Field", name: { kind: "Name", value: "startsAt" } },
          { kind: "Field", name: { kind: "Name", value: "teamId" } },
          { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "scopeHistory" } },
          { kind: "Field", name: { kind: "Name", value: "issueCountHistory" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CycleWebhookPayloadFragment, unknown>;
export const DocumentWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "DocumentWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "trashed" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "initiativeId" } },
          { kind: "Field", name: { kind: "Name", value: "lastAppliedTemplateId" } },
          { kind: "Field", name: { kind: "Name", value: "projectId" } },
          { kind: "Field", name: { kind: "Name", value: "resourceFolderId" } },
          { kind: "Field", name: { kind: "Name", value: "creatorId" } },
          { kind: "Field", name: { kind: "Name", value: "updatedById" } },
          { kind: "Field", name: { kind: "Name", value: "subscriberIds" } },
          { kind: "Field", name: { kind: "Name", value: "color" } },
          { kind: "Field", name: { kind: "Name", value: "content" } },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "slugId" } },
          { kind: "Field", name: { kind: "Name", value: "icon" } },
          { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
          { kind: "Field", name: { kind: "Name", value: "hiddenAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "title" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<DocumentWebhookPayloadFragment, unknown>;
export const ProjectUpdateWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectUpdateWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "url" } },
          { kind: "Field", name: { kind: "Name", value: "bodyData" } },
          { kind: "Field", name: { kind: "Name", value: "body" } },
          { kind: "Field", name: { kind: "Name", value: "editedAt" } },
          { kind: "Field", name: { kind: "Name", value: "health" } },
          { kind: "Field", name: { kind: "Name", value: "projectId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectChildWebhookPayload" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "reactionData" } },
          { kind: "Field", name: { kind: "Name", value: "slugId" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "userId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectUpdateWebhookPayloadFragment, unknown>;
export const ProjectMilestoneChildWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectMilestoneChildWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneChildWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "targetDate" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectMilestoneChildWebhookPayloadFragment, unknown>;
export const ProjectStatusChildWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectStatusChildWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectStatusChildWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "color" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectStatusChildWebhookPayloadFragment, unknown>;
export const ProjectWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "labelIds" } },
          { kind: "Field", name: { kind: "Name", value: "memberIds" } },
          { kind: "Field", name: { kind: "Name", value: "teamIds" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "convertedFromIssueId" } },
          { kind: "Field", name: { kind: "Name", value: "lastAppliedTemplateId" } },
          { kind: "Field", name: { kind: "Name", value: "lastUpdateId" } },
          { kind: "Field", name: { kind: "Name", value: "leadId" } },
          { kind: "Field", name: { kind: "Name", value: "statusId" } },
          { kind: "Field", name: { kind: "Name", value: "creatorId" } },
          { kind: "Field", name: { kind: "Name", value: "url" } },
          { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "canceledAt" } },
          { kind: "Field", name: { kind: "Name", value: "completedAt" } },
          { kind: "Field", name: { kind: "Name", value: "content" } },
          { kind: "Field", name: { kind: "Name", value: "documentContentId" } },
          { kind: "Field", name: { kind: "Name", value: "startDate" } },
          { kind: "Field", name: { kind: "Name", value: "health" } },
          { kind: "Field", name: { kind: "Name", value: "icon" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "initiatives" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeChildWebhookPayload" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "milestones" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestoneChildWebhookPayload" } },
              ],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "completedScopeHistory" } },
          { kind: "Field", name: { kind: "Name", value: "completedIssueCountHistory" } },
          { kind: "Field", name: { kind: "Name", value: "inProgressScopeHistory" } },
          { kind: "Field", name: { kind: "Name", value: "priority" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "lead" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "status" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatusChildWebhookPayload" } },
              ],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "color" } },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "slugId" } },
          { kind: "Field", name: { kind: "Name", value: "startDateResolution" } },
          { kind: "Field", name: { kind: "Name", value: "targetDateResolution" } },
          { kind: "Field", name: { kind: "Name", value: "prioritySortOrder" } },
          { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
          { kind: "Field", name: { kind: "Name", value: "targetDate" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "healthUpdatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "projectUpdateRemindersPausedUntilAt" } },
          { kind: "Field", name: { kind: "Name", value: "startedAt" } },
          { kind: "Field", name: { kind: "Name", value: "scopeHistory" } },
          { kind: "Field", name: { kind: "Name", value: "issueCountHistory" } },
          { kind: "Field", name: { kind: "Name", value: "trashed" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectWebhookPayloadFragment, unknown>;
export const ReactionWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ReactionWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ReactionWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "emoji" } },
          { kind: "Field", name: { kind: "Name", value: "commentId" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "externalUserId" } },
          { kind: "Field", name: { kind: "Name", value: "initiativeUpdateId" } },
          { kind: "Field", name: { kind: "Name", value: "issueId" } },
          { kind: "Field", name: { kind: "Name", value: "postId" } },
          { kind: "Field", name: { kind: "Name", value: "projectUpdateId" } },
          { kind: "Field", name: { kind: "Name", value: "userId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "comment" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentChildWebhookPayload" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueChildWebhookPayload" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "projectUpdate" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateChildWebhookPayload" } },
              ],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ReactionWebhookPayloadFragment, unknown>;
export const IssueStatusChangedNotificationWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueStatusChangedNotificationWebhookPayload" },
      typeCondition: {
        kind: "NamedType",
        name: { kind: "Name", value: "IssueStatusChangedNotificationWebhookPayload" },
      },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          { kind: "Field", name: { kind: "Name", value: "actorId" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "externalUserActorId" } },
          { kind: "Field", name: { kind: "Name", value: "issueId" } },
          { kind: "Field", name: { kind: "Name", value: "userId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "actor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "IssueWithDescriptionChildWebhookPayload" } },
              ],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueStatusChangedNotificationWebhookPayloadFragment, unknown>;
export const UserWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "UserWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "url" } },
          { kind: "Field", name: { kind: "Name", value: "avatarUrl" } },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "displayName" } },
          { kind: "Field", name: { kind: "Name", value: "email" } },
          { kind: "Field", name: { kind: "Name", value: "timezone" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "disableReason" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "guest" } },
          { kind: "Field", name: { kind: "Name", value: "active" } },
          { kind: "Field", name: { kind: "Name", value: "admin" } },
          { kind: "Field", name: { kind: "Name", value: "app" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<UserWebhookPayloadFragment, unknown>;
export const AgentActivityWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "AgentActivityWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "signal" } },
          { kind: "Field", name: { kind: "Name", value: "agentSessionId" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "userId" } },
          { kind: "Field", name: { kind: "Name", value: "content" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<AgentActivityWebhookPayloadFragment, unknown>;
export const AgentSessionWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "AgentSessionWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentSessionWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "summary" } },
          { kind: "Field", name: { kind: "Name", value: "sourceMetadata" } },
          { kind: "Field", name: { kind: "Name", value: "appUserId" } },
          { kind: "Field", name: { kind: "Name", value: "commentId" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "issueId" } },
          { kind: "Field", name: { kind: "Name", value: "organizationId" } },
          { kind: "Field", name: { kind: "Name", value: "creatorId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "comment" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentChildWebhookPayload" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "status" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "IssueWithDescriptionChildWebhookPayload" } },
              ],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "endedAt" } },
          { kind: "Field", name: { kind: "Name", value: "startedAt" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "creator" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<AgentSessionWebhookPayloadFragment, unknown>;
export const AgentSessionEventWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "AgentSessionEventWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentSessionEventWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "oauthClientId" } },
          { kind: "Field", name: { kind: "Name", value: "appUserId" } },
          { kind: "Field", name: { kind: "Name", value: "organizationId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "agentActivity" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AgentActivityWebhookPayload" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "agentSession" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AgentSessionWebhookPayload" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "previousComments" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentChildWebhookPayload" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "action" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<AgentSessionEventWebhookPayloadFragment, unknown>;
export const AuditEntryWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "AuditEntryWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuditEntryWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "requestInformation" } },
          { kind: "Field", name: { kind: "Name", value: "metadata" } },
          { kind: "Field", name: { kind: "Name", value: "countryCode" } },
          { kind: "Field", name: { kind: "Name", value: "ip" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "organizationId" } },
          { kind: "Field", name: { kind: "Name", value: "actorId" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<AuditEntryWebhookPayloadFragment, unknown>;
export const InitiativeUpdateWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "InitiativeUpdateWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdateWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "url" } },
          { kind: "Field", name: { kind: "Name", value: "bodyData" } },
          { kind: "Field", name: { kind: "Name", value: "body" } },
          { kind: "Field", name: { kind: "Name", value: "editedAt" } },
          { kind: "Field", name: { kind: "Name", value: "health" } },
          { kind: "Field", name: { kind: "Name", value: "initiativeId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "initiative" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeChildWebhookPayload" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "reactionData" } },
          { kind: "Field", name: { kind: "Name", value: "slugId" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "userId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<InitiativeUpdateWebhookPayloadFragment, unknown>;
export const InitiativeWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "InitiativeWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "lastUpdateId" } },
          { kind: "Field", name: { kind: "Name", value: "organizationId" } },
          { kind: "Field", name: { kind: "Name", value: "creatorId" } },
          { kind: "Field", name: { kind: "Name", value: "ownerId" } },
          { kind: "Field", name: { kind: "Name", value: "url" } },
          { kind: "Field", name: { kind: "Name", value: "color" } },
          { kind: "Field", name: { kind: "Name", value: "status" } },
          { kind: "Field", name: { kind: "Name", value: "updateRemindersDay" } },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "updateReminderFrequencyInWeeks" } },
          { kind: "Field", name: { kind: "Name", value: "updateReminderFrequency" } },
          { kind: "Field", name: { kind: "Name", value: "health" } },
          { kind: "Field", name: { kind: "Name", value: "updateRemindersHour" } },
          { kind: "Field", name: { kind: "Name", value: "icon" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "lastUpdate" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeUpdateChildWebhookPayload" } },
              ],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "parentInitiative" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeChildWebhookPayload" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "projects" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectChildWebhookPayload" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "targetDateResolution" } },
          { kind: "Field", name: { kind: "Name", value: "frequencyResolution" } },
          { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "subInitiatives" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeChildWebhookPayload" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "targetDate" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "slugId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "creator" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "owner" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "healthUpdatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "completedAt" } },
          { kind: "Field", name: { kind: "Name", value: "startedAt" } },
          { kind: "Field", name: { kind: "Name", value: "trashed" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<InitiativeWebhookPayloadFragment, unknown>;
export const IssueAssignedToYouNotificationWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueAssignedToYouNotificationWebhookPayload" },
      typeCondition: {
        kind: "NamedType",
        name: { kind: "Name", value: "IssueAssignedToYouNotificationWebhookPayload" },
      },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          { kind: "Field", name: { kind: "Name", value: "actorId" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "externalUserActorId" } },
          { kind: "Field", name: { kind: "Name", value: "issueId" } },
          { kind: "Field", name: { kind: "Name", value: "userId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "actor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "IssueWithDescriptionChildWebhookPayload" } },
              ],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueAssignedToYouNotificationWebhookPayloadFragment, unknown>;
export const IssueCommentMentionNotificationWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueCommentMentionNotificationWebhookPayload" },
      typeCondition: {
        kind: "NamedType",
        name: { kind: "Name", value: "IssueCommentMentionNotificationWebhookPayload" },
      },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          { kind: "Field", name: { kind: "Name", value: "actorId" } },
          { kind: "Field", name: { kind: "Name", value: "commentId" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "externalUserActorId" } },
          { kind: "Field", name: { kind: "Name", value: "issueId" } },
          { kind: "Field", name: { kind: "Name", value: "parentCommentId" } },
          { kind: "Field", name: { kind: "Name", value: "userId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "actor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "comment" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentChildWebhookPayload" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "IssueWithDescriptionChildWebhookPayload" } },
              ],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "parentComment" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentChildWebhookPayload" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueCommentMentionNotificationWebhookPayloadFragment, unknown>;
export const IssueCommentReactionNotificationWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueCommentReactionNotificationWebhookPayload" },
      typeCondition: {
        kind: "NamedType",
        name: { kind: "Name", value: "IssueCommentReactionNotificationWebhookPayload" },
      },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          { kind: "Field", name: { kind: "Name", value: "actorId" } },
          { kind: "Field", name: { kind: "Name", value: "commentId" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "externalUserActorId" } },
          { kind: "Field", name: { kind: "Name", value: "issueId" } },
          { kind: "Field", name: { kind: "Name", value: "parentCommentId" } },
          { kind: "Field", name: { kind: "Name", value: "userId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "actor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "comment" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentChildWebhookPayload" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "reactionEmoji" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "IssueWithDescriptionChildWebhookPayload" } },
              ],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "parentComment" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentChildWebhookPayload" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueCommentReactionNotificationWebhookPayloadFragment, unknown>;
export const IssueEmojiReactionNotificationWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueEmojiReactionNotificationWebhookPayload" },
      typeCondition: {
        kind: "NamedType",
        name: { kind: "Name", value: "IssueEmojiReactionNotificationWebhookPayload" },
      },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          { kind: "Field", name: { kind: "Name", value: "actorId" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "externalUserActorId" } },
          { kind: "Field", name: { kind: "Name", value: "issueId" } },
          { kind: "Field", name: { kind: "Name", value: "userId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "actor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "reactionEmoji" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "IssueWithDescriptionChildWebhookPayload" } },
              ],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueEmojiReactionNotificationWebhookPayloadFragment, unknown>;
export const IssueLabelWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueLabelWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "color" } },
          { kind: "Field", name: { kind: "Name", value: "creatorId" } },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "inheritedFromId" } },
          { kind: "Field", name: { kind: "Name", value: "parentId" } },
          { kind: "Field", name: { kind: "Name", value: "teamId" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "isGroup" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueLabelWebhookPayloadFragment, unknown>;
export const IssueMentionNotificationWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueMentionNotificationWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueMentionNotificationWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          { kind: "Field", name: { kind: "Name", value: "actorId" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "externalUserActorId" } },
          { kind: "Field", name: { kind: "Name", value: "issueId" } },
          { kind: "Field", name: { kind: "Name", value: "userId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "actor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "IssueWithDescriptionChildWebhookPayload" } },
              ],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueMentionNotificationWebhookPayloadFragment, unknown>;
export const IssueNewCommentNotificationWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueNewCommentNotificationWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueNewCommentNotificationWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          { kind: "Field", name: { kind: "Name", value: "actorId" } },
          { kind: "Field", name: { kind: "Name", value: "commentId" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "externalUserActorId" } },
          { kind: "Field", name: { kind: "Name", value: "issueId" } },
          { kind: "Field", name: { kind: "Name", value: "parentCommentId" } },
          { kind: "Field", name: { kind: "Name", value: "userId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "actor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "comment" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentChildWebhookPayload" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "IssueWithDescriptionChildWebhookPayload" } },
              ],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "parentComment" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentChildWebhookPayload" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueNewCommentNotificationWebhookPayloadFragment, unknown>;
export const IssueUnassignedFromYouNotificationWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueUnassignedFromYouNotificationWebhookPayload" },
      typeCondition: {
        kind: "NamedType",
        name: { kind: "Name", value: "IssueUnassignedFromYouNotificationWebhookPayload" },
      },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          { kind: "Field", name: { kind: "Name", value: "actorId" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "externalUserActorId" } },
          { kind: "Field", name: { kind: "Name", value: "issueId" } },
          { kind: "Field", name: { kind: "Name", value: "userId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "actor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "IssueWithDescriptionChildWebhookPayload" } },
              ],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueUnassignedFromYouNotificationWebhookPayloadFragment, unknown>;
export const AppUserNotificationWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "AppUserNotificationWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AppUserNotificationWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "oauthClientId" } },
          { kind: "Field", name: { kind: "Name", value: "appUserId" } },
          { kind: "Field", name: { kind: "Name", value: "organizationId" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "action" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<AppUserNotificationWebhookPayloadFragment, unknown>;
export const AppUserTeamAccessChangedWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "AppUserTeamAccessChangedWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AppUserTeamAccessChangedWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "oauthClientId" } },
          { kind: "Field", name: { kind: "Name", value: "appUserId" } },
          { kind: "Field", name: { kind: "Name", value: "organizationId" } },
          { kind: "Field", name: { kind: "Name", value: "addedTeamIds" } },
          { kind: "Field", name: { kind: "Name", value: "removedTeamIds" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "action" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          { kind: "Field", name: { kind: "Name", value: "canAccessAllPublicTeams" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<AppUserTeamAccessChangedWebhookPayloadFragment, unknown>;
export const CustomResourceWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CustomResourceWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomResourceWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "organizationId" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "action" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CustomResourceWebhookPayloadFragment, unknown>;
export const EntityWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "EntityWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EntityWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "organizationId" } },
          { kind: "Field", name: { kind: "Name", value: "updatedFrom" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "action" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          { kind: "Field", name: { kind: "Name", value: "url" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<EntityWebhookPayloadFragment, unknown>;
export const CycleChildWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CycleChildWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CycleChildWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "endsAt" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "number" } },
          { kind: "Field", name: { kind: "Name", value: "startsAt" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CycleChildWebhookPayloadFragment, unknown>;
export const WorkflowStateChildWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "WorkflowStateChildWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateChildWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "color" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<WorkflowStateChildWebhookPayloadFragment, unknown>;
export const IssueLabelChildWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueLabelChildWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelChildWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "color" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "parentId" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueLabelChildWebhookPayloadFragment, unknown>;
export const IssueWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "trashed" } },
          { kind: "Field", name: { kind: "Name", value: "labelIds" } },
          { kind: "Field", name: { kind: "Name", value: "integrationSourceType" } },
          { kind: "Field", name: { kind: "Name", value: "previousIdentifiers" } },
          { kind: "Field", name: { kind: "Name", value: "delegateId" } },
          { kind: "Field", name: { kind: "Name", value: "cycleId" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "externalUserCreatorId" } },
          { kind: "Field", name: { kind: "Name", value: "stateId" } },
          { kind: "Field", name: { kind: "Name", value: "lastAppliedTemplateId" } },
          { kind: "Field", name: { kind: "Name", value: "parentId" } },
          { kind: "Field", name: { kind: "Name", value: "projectMilestoneId" } },
          { kind: "Field", name: { kind: "Name", value: "projectId" } },
          { kind: "Field", name: { kind: "Name", value: "recurringIssueTemplateId" } },
          { kind: "Field", name: { kind: "Name", value: "sourceCommentId" } },
          { kind: "Field", name: { kind: "Name", value: "teamId" } },
          { kind: "Field", name: { kind: "Name", value: "creatorId" } },
          { kind: "Field", name: { kind: "Name", value: "assigneeId" } },
          { kind: "Field", name: { kind: "Name", value: "subscriberIds" } },
          { kind: "Field", name: { kind: "Name", value: "url" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "delegate" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "botActor" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "cycle" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CycleChildWebhookPayload" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "descriptionData" } },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "dueDate" } },
          { kind: "Field", name: { kind: "Name", value: "syncedWith" } },
          { kind: "Field", name: { kind: "Name", value: "estimate" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "externalUserCreator" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "ExternalUserChildWebhookPayload" } },
              ],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "identifier" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "state" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStateChildWebhookPayload" } },
              ],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "title" } },
          { kind: "Field", name: { kind: "Name", value: "number" } },
          { kind: "Field", name: { kind: "Name", value: "priorityLabel" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "labels" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelChildWebhookPayload" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "prioritySortOrder" } },
          { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
          { kind: "Field", name: { kind: "Name", value: "subIssueSortOrder" } },
          { kind: "Field", name: { kind: "Name", value: "priority" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "projectMilestone" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestoneChildWebhookPayload" } },
              ],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectChildWebhookPayload" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "reactionData" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamChildWebhookPayload" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "startedTriageAt" } },
          { kind: "Field", name: { kind: "Name", value: "addedToCycleAt" } },
          { kind: "Field", name: { kind: "Name", value: "addedToProjectAt" } },
          { kind: "Field", name: { kind: "Name", value: "addedToTeamAt" } },
          { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "autoClosedAt" } },
          { kind: "Field", name: { kind: "Name", value: "canceledAt" } },
          { kind: "Field", name: { kind: "Name", value: "completedAt" } },
          { kind: "Field", name: { kind: "Name", value: "startedAt" } },
          { kind: "Field", name: { kind: "Name", value: "triagedAt" } },
          { kind: "Field", name: { kind: "Name", value: "slaBreachesAt" } },
          { kind: "Field", name: { kind: "Name", value: "slaHighRiskAt" } },
          { kind: "Field", name: { kind: "Name", value: "slaMediumRiskAt" } },
          { kind: "Field", name: { kind: "Name", value: "slaStartedAt" } },
          { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } },
          { kind: "Field", name: { kind: "Name", value: "slaType" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "creator" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "assignee" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueWebhookPayloadFragment, unknown>;
export const IssueSlaWebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueSlaWebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueSlaWebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "organizationId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "issueData" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueWebhookPayload" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "action" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          { kind: "Field", name: { kind: "Name", value: "url" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueSlaWebhookPayloadFragment, unknown>;
export const UserAuthorizedApplicationFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "UserAuthorizedApplication" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserAuthorizedApplication" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "approvalErrorCode" } },
          { kind: "Field", name: { kind: "Name", value: "imageUrl" } },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "developer" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "clientId" } },
          { kind: "Field", name: { kind: "Name", value: "developerUrl" } },
          { kind: "Field", name: { kind: "Name", value: "webhooksEnabled" } },
          { kind: "Field", name: { kind: "Name", value: "createdByLinear" } },
          { kind: "Field", name: { kind: "Name", value: "isAuthorized" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<UserAuthorizedApplicationFragment, unknown>;
export const ApplicationFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "Application" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Application" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "imageUrl" } },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "developer" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "clientId" } },
          { kind: "Field", name: { kind: "Name", value: "developerUrl" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ApplicationFragment, unknown>;
export const IntegrationsSettingsFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IntegrationsSettings" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationsSettings" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "initiative" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "contextViewType" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "slackIssueNewComment" } },
          { kind: "Field", name: { kind: "Name", value: "slackInitiativeUpdateCreated" } },
          { kind: "Field", name: { kind: "Name", value: "slackIssueAddedToTriage" } },
          { kind: "Field", name: { kind: "Name", value: "slackIssueCreated" } },
          { kind: "Field", name: { kind: "Name", value: "slackProjectUpdateCreated" } },
          { kind: "Field", name: { kind: "Name", value: "slackIssueSlaHighRisk" } },
          { kind: "Field", name: { kind: "Name", value: "slackIssueSlaBreached" } },
          { kind: "Field", name: { kind: "Name", value: "slackIssueAddedToView" } },
          { kind: "Field", name: { kind: "Name", value: "slackIssueStatusChangedDone" } },
          { kind: "Field", name: { kind: "Name", value: "slackIssueStatusChangedAll" } },
          { kind: "Field", name: { kind: "Name", value: "slackProjectUpdateCreatedToTeam" } },
          { kind: "Field", name: { kind: "Name", value: "slackProjectUpdateCreatedToWorkspace" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IntegrationsSettingsFragment, unknown>;
export const InitiativePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "InitiativePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "initiative" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<InitiativePayloadFragment, unknown>;
export const InitiativeToProjectPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "InitiativeToProjectPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeToProjectPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "initiativeToProject" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<InitiativeToProjectPayloadFragment, unknown>;
export const NotificationDeliveryPreferencesDayFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "end" } },
          { kind: "Field", name: { kind: "Name", value: "start" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<NotificationDeliveryPreferencesDayFragment, unknown>;
export const NotificationDeliveryPreferencesScheduleFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "NotificationDeliveryPreferencesSchedule" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationDeliveryPreferencesSchedule" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "friday" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } },
              ],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "monday" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } },
              ],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "saturday" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } },
              ],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "sunday" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } },
              ],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "thursday" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } },
              ],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "tuesday" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } },
              ],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "wednesday" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } },
              ],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "disabled" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<NotificationDeliveryPreferencesScheduleFragment, unknown>;
export const NotificationDeliveryPreferencesChannelFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "NotificationDeliveryPreferencesChannel" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationDeliveryPreferencesChannel" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "schedule" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesSchedule" } },
              ],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "notificationsDisabled" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<NotificationDeliveryPreferencesChannelFragment, unknown>;
export const NotificationDeliveryPreferencesFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "NotificationDeliveryPreferences" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationDeliveryPreferences" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "mobile" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesChannel" } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<NotificationDeliveryPreferencesFragment, unknown>;
export const NotificationChannelPreferencesFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "NotificationChannelPreferences" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationChannelPreferences" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "slack" } },
          { kind: "Field", name: { kind: "Name", value: "desktop" } },
          { kind: "Field", name: { kind: "Name", value: "email" } },
          { kind: "Field", name: { kind: "Name", value: "mobile" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<NotificationChannelPreferencesFragment, unknown>;
export const NotificationCategoryPreferencesFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "NotificationCategoryPreferences" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationCategoryPreferences" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "customers" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "feed" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "appsAndIntegrations" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "assignments" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "commentsAndReplies" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "documentChanges" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "mentions" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "postsAndUpdates" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "reactions" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "reminders" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "reviews" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "statusChanges" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "subscriptions" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "system" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "triage" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<NotificationCategoryPreferencesFragment, unknown>;
export const UserSettingsFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "UserSettings" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserSettings" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "calendarHash" } },
          { kind: "Field", name: { kind: "Name", value: "unsubscribedFrom" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "notificationDeliveryPreferences" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferences" } },
              ],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "notificationCategoryPreferences" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationCategoryPreferences" } },
              ],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "notificationChannelPreferences" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "subscribedToDPA" } },
          { kind: "Field", name: { kind: "Name", value: "subscribedToChangelog" } },
          { kind: "Field", name: { kind: "Name", value: "subscribedToInviteAccepted" } },
          { kind: "Field", name: { kind: "Name", value: "subscribedToPrivacyLegalUpdates" } },
          { kind: "Field", name: { kind: "Name", value: "autoAssignToSelf" } },
          { kind: "Field", name: { kind: "Name", value: "showFullUserNames" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<UserSettingsFragment, unknown>;
export const IssueImportJqlCheckPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueImportJqlCheckPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImportJqlCheckPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "error" } },
          { kind: "Field", name: { kind: "Name", value: "count" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueImportJqlCheckPayloadFragment, unknown>;
export const IssueImportSyncCheckPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueImportSyncCheckPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImportSyncCheckPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "error" } },
          { kind: "Field", name: { kind: "Name", value: "canSync" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueImportSyncCheckPayloadFragment, unknown>;
export const AgentActivityActionContentFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "AgentActivityActionContent" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityActionContent" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "action" } },
          { kind: "Field", name: { kind: "Name", value: "parameter" } },
          { kind: "Field", name: { kind: "Name", value: "result" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<AgentActivityActionContentFragment, unknown>;
export const AgentActivityElicitationContentFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "AgentActivityElicitationContent" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityElicitationContent" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "body" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<AgentActivityElicitationContentFragment, unknown>;
export const AgentActivityErrorContentFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "AgentActivityErrorContent" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityErrorContent" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "body" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<AgentActivityErrorContentFragment, unknown>;
export const AgentActivityPromptContentFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "AgentActivityPromptContent" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityPromptContent" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "body" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<AgentActivityPromptContentFragment, unknown>;
export const AgentActivityResponseContentFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "AgentActivityResponseContent" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityResponseContent" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "body" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<AgentActivityResponseContentFragment, unknown>;
export const AgentActivityThoughtContentFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "AgentActivityThoughtContent" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityThoughtContent" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "body" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<AgentActivityThoughtContentFragment, unknown>;
export const AgentActivityFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "AgentActivity" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentActivity" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "signal" } },
          { kind: "Field", name: { kind: "Name", value: "sourceMetadata" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "agentSession" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "sourceComment" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "content" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "InlineFragment",
                  typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityActionContent" } },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      { kind: "FragmentSpread", name: { kind: "Name", value: "AgentActivityActionContent" } },
                    ],
                  },
                },
                {
                  kind: "InlineFragment",
                  typeCondition: {
                    kind: "NamedType",
                    name: { kind: "Name", value: "AgentActivityElicitationContent" },
                  },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      { kind: "FragmentSpread", name: { kind: "Name", value: "AgentActivityElicitationContent" } },
                    ],
                  },
                },
                {
                  kind: "InlineFragment",
                  typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityErrorContent" } },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      { kind: "FragmentSpread", name: { kind: "Name", value: "AgentActivityErrorContent" } },
                    ],
                  },
                },
                {
                  kind: "InlineFragment",
                  typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityPromptContent" } },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      { kind: "FragmentSpread", name: { kind: "Name", value: "AgentActivityPromptContent" } },
                    ],
                  },
                },
                {
                  kind: "InlineFragment",
                  typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityResponseContent" } },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      { kind: "FragmentSpread", name: { kind: "Name", value: "AgentActivityResponseContent" } },
                    ],
                  },
                },
                {
                  kind: "InlineFragment",
                  typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityThoughtContent" } },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      { kind: "FragmentSpread", name: { kind: "Name", value: "AgentActivityThoughtContent" } },
                    ],
                  },
                },
              ],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<AgentActivityFragment, unknown>;
export const PageInfoFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "PageInfo" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PageInfo" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "startCursor" } },
          { kind: "Field", name: { kind: "Name", value: "endCursor" } },
          { kind: "Field", name: { kind: "Name", value: "hasPreviousPage" } },
          { kind: "Field", name: { kind: "Name", value: "hasNextPage" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<PageInfoFragment, unknown>;
export const AgentActivityConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "AgentActivityConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AgentActivity" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<AgentActivityConnectionFragment, unknown>;
export const AgentActivityPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "AgentActivityPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "agentActivity" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<AgentActivityPayloadFragment, unknown>;
export const AgentSessionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "AgentSession" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentSession" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "summary" } },
          { kind: "Field", name: { kind: "Name", value: "sourceMetadata" } },
          { kind: "Field", name: { kind: "Name", value: "externalLink" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "appUser" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "comment" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "status" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "endedAt" } },
          { kind: "Field", name: { kind: "Name", value: "startedAt" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "creator" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<AgentSessionFragment, unknown>;
export const AgentSessionConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "AgentSessionConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentSessionConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AgentSession" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<AgentSessionConnectionFragment, unknown>;
export const AgentSessionPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "AgentSessionPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentSessionPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "agentSession" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<AgentSessionPayloadFragment, unknown>;
export const ApiKeyFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ApiKey" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ApiKey" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "scope" } },
          { kind: "Field", name: { kind: "Name", value: "label" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "requestedSyncGroups" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "lastActiveAt" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ApiKeyFragment, unknown>;
export const ApiKeyConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ApiKeyConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ApiKeyConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ApiKey" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ApiKeyConnectionFragment, unknown>;
export const ApiKeyPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ApiKeyPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ApiKeyPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "apiKey" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ApiKey" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ApiKeyPayloadFragment, unknown>;
export const SlackAsksTeamSettingsFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "SlackAsksTeamSettings" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SlackAsksTeamSettings" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "hasDefaultAsk" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<SlackAsksTeamSettingsFragment, unknown>;
export const SlackChannelNameMappingFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "SlackChannelNameMapping" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SlackChannelNameMapping" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "autoCreateTemplateId" } },
          { kind: "Field", name: { kind: "Name", value: "autoCreateOnBotMention" } },
          { kind: "Field", name: { kind: "Name", value: "postCancellationUpdates" } },
          { kind: "Field", name: { kind: "Name", value: "postCompletionUpdates" } },
          { kind: "Field", name: { kind: "Name", value: "postAcceptedFromTriageUpdates" } },
          { kind: "Field", name: { kind: "Name", value: "botAdded" } },
          { kind: "Field", name: { kind: "Name", value: "isPrivate" } },
          { kind: "Field", name: { kind: "Name", value: "isShared" } },
          { kind: "Field", name: { kind: "Name", value: "aiTitles" } },
          { kind: "Field", name: { kind: "Name", value: "autoCreateOnMessage" } },
          { kind: "Field", name: { kind: "Name", value: "autoCreateOnEmoji" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "teams" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackAsksTeamSettings" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<SlackChannelNameMappingFragment, unknown>;
export const AsksChannelConnectPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "AsksChannelConnectPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AsksChannelConnectPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "integration" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "mapping" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackChannelNameMapping" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "addBot" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<AsksChannelConnectPayloadFragment, unknown>;
export const AttachmentFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "Attachment" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Attachment" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "sourceType" } },
          { kind: "Field", name: { kind: "Name", value: "subtitle" } },
          { kind: "Field", name: { kind: "Name", value: "title" } },
          { kind: "Field", name: { kind: "Name", value: "metadata" } },
          { kind: "Field", name: { kind: "Name", value: "groupBySource" } },
          { kind: "Field", name: { kind: "Name", value: "source" } },
          { kind: "Field", name: { kind: "Name", value: "url" } },
          { kind: "Field", name: { kind: "Name", value: "bodyData" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "creator" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "originalIssue" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "externalUserCreator" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<AttachmentFragment, unknown>;
export const AttachmentConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "AttachmentConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AttachmentConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Attachment" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<AttachmentConnectionFragment, unknown>;
export const AttachmentPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "AttachmentPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AttachmentPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "attachment" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<AttachmentPayloadFragment, unknown>;
export const AttachmentSourcesPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "AttachmentSourcesPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AttachmentSourcesPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "sources" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<AttachmentSourcesPayloadFragment, unknown>;
export const AuditEntryFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "AuditEntry" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuditEntry" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "requestInformation" } },
          { kind: "Field", name: { kind: "Name", value: "metadata" } },
          { kind: "Field", name: { kind: "Name", value: "countryCode" } },
          { kind: "Field", name: { kind: "Name", value: "ip" } },
          { kind: "Field", name: { kind: "Name", value: "actorId" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "actor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "type" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<AuditEntryFragment, unknown>;
export const AuditEntryConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "AuditEntryConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuditEntryConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuditEntry" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<AuditEntryConnectionFragment, unknown>;
export const AuditEntryTypeFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "AuditEntryType" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuditEntryType" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<AuditEntryTypeFragment, unknown>;
export const AuthOrganizationFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "AuthOrganization" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthOrganization" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "allowedAuthServices" } },
          { kind: "Field", name: { kind: "Name", value: "previousUrlKeys" } },
          { kind: "Field", name: { kind: "Name", value: "serviceId" } },
          { kind: "Field", name: { kind: "Name", value: "releaseChannel" } },
          { kind: "Field", name: { kind: "Name", value: "logoUrl" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "urlKey" } },
          { kind: "Field", name: { kind: "Name", value: "region" } },
          { kind: "Field", name: { kind: "Name", value: "deletionRequestedAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "samlEnabled" } },
          { kind: "Field", name: { kind: "Name", value: "scimEnabled" } },
          { kind: "Field", name: { kind: "Name", value: "enabled" } },
          { kind: "Field", name: { kind: "Name", value: "userCount" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<AuthOrganizationFragment, unknown>;
export const AuthUserFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "AuthUser" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthUser" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "avatarUrl" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "organization" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthOrganization" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "displayName" } },
          { kind: "Field", name: { kind: "Name", value: "email" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "userAccountId" } },
          { kind: "Field", name: { kind: "Name", value: "active" } },
          { kind: "Field", name: { kind: "Name", value: "role" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<AuthUserFragment, unknown>;
export const AuthResolverResponseFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "AuthResolverResponse" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthResolverResponse" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "token" } },
          { kind: "Field", name: { kind: "Name", value: "email" } },
          { kind: "Field", name: { kind: "Name", value: "lastUsedOrganizationId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "users" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthUser" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "lockedUsers" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthUser" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "lockedOrganizations" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthOrganization" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "availableOrganizations" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthOrganization" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "allowDomainAccess" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<AuthResolverResponseFragment, unknown>;
export const ReactionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "Reaction" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Reaction" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "emoji" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "comment" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "externalUser" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "initiativeUpdate" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "projectUpdate" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ReactionFragment, unknown>;
export const DocumentContentFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "DocumentContent" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentContent" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "content" } },
          { kind: "Field", name: { kind: "Name", value: "contentState" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "document" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "initiative" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "projectMilestone" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "restoredAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<DocumentContentFragment, unknown>;
export const ExternalEntityInfoGithubMetadataFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ExternalEntityInfoGithubMetadata" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ExternalEntityInfoGithubMetadata" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "number" } },
          { kind: "Field", name: { kind: "Name", value: "owner" } },
          { kind: "Field", name: { kind: "Name", value: "repo" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ExternalEntityInfoGithubMetadataFragment, unknown>;
export const ExternalEntityInfoJiraMetadataFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ExternalEntityInfoJiraMetadata" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ExternalEntityInfoJiraMetadata" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "issueTypeId" } },
          { kind: "Field", name: { kind: "Name", value: "projectId" } },
          { kind: "Field", name: { kind: "Name", value: "issueKey" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ExternalEntityInfoJiraMetadataFragment, unknown>;
export const ExternalEntitySlackMetadataFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ExternalEntitySlackMetadata" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ExternalEntitySlackMetadata" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "messageUrl" } },
          { kind: "Field", name: { kind: "Name", value: "channelId" } },
          { kind: "Field", name: { kind: "Name", value: "channelName" } },
          { kind: "Field", name: { kind: "Name", value: "isFromSlack" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ExternalEntitySlackMetadataFragment, unknown>;
export const ExternalEntityInfoFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ExternalEntityInfo" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ExternalEntityInfo" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "metadata" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "InlineFragment",
                  typeCondition: {
                    kind: "NamedType",
                    name: { kind: "Name", value: "ExternalEntityInfoGithubMetadata" },
                  },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      { kind: "FragmentSpread", name: { kind: "Name", value: "ExternalEntityInfoGithubMetadata" } },
                    ],
                  },
                },
                {
                  kind: "InlineFragment",
                  typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ExternalEntityInfoJiraMetadata" } },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      { kind: "FragmentSpread", name: { kind: "Name", value: "ExternalEntityInfoJiraMetadata" } },
                    ],
                  },
                },
                {
                  kind: "InlineFragment",
                  typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ExternalEntitySlackMetadata" } },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      { kind: "FragmentSpread", name: { kind: "Name", value: "ExternalEntitySlackMetadata" } },
                    ],
                  },
                },
              ],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "service" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ExternalEntityInfoFragment, unknown>;
export const SyncedExternalThreadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "SyncedExternalThread" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SyncedExternalThread" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "displayName" } },
          { kind: "Field", name: { kind: "Name", value: "url" } },
          { kind: "Field", name: { kind: "Name", value: "subType" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          { kind: "Field", name: { kind: "Name", value: "isPersonalIntegrationRequired" } },
          { kind: "Field", name: { kind: "Name", value: "isPersonalIntegrationConnected" } },
          { kind: "Field", name: { kind: "Name", value: "isConnected" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<SyncedExternalThreadFragment, unknown>;
export const CommentFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "Comment" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Comment" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "url" } },
          { kind: "Field", name: { kind: "Name", value: "reactionData" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "reactions" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Reaction" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "botActor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "body" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "resolvingComment" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "documentContent" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "syncedWith" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ExternalEntityInfo" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "externalThread" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SyncedExternalThread" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "externalUser" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "initiativeUpdate" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "parent" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "projectUpdate" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "quotedText" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "resolvedAt" } },
          { kind: "Field", name: { kind: "Name", value: "editedAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "resolvingUser" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CommentFragment, unknown>;
export const CommentConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CommentConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CommentConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Comment" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CommentConnectionFragment, unknown>;
export const CommentPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CommentPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CommentPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "comment" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CommentPayloadFragment, unknown>;
export const ContactPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ContactPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ContactPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ContactPayloadFragment, unknown>;
export const CreateCsvExportReportPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CreateCsvExportReportPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CreateCsvExportReportPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CreateCsvExportReportPayloadFragment, unknown>;
export const CreateOrJoinOrganizationResponseFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "organization" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthOrganization" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthUser" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CreateOrJoinOrganizationResponseFragment, unknown>;
export const ViewPreferencesValuesFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ViewPreferencesValues" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ViewPreferencesValues" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "issueGrouping" } },
          { kind: "Field", name: { kind: "Name", value: "viewOrdering" } },
          { kind: "Field", name: { kind: "Name", value: "showCompletedIssues" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ViewPreferencesValuesFragment, unknown>;
export const ViewPreferencesFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ViewPreferences" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ViewPreferences" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "preferences" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesValues" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "viewType" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ViewPreferencesFragment, unknown>;
export const CustomViewFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CustomView" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomView" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "viewPreferencesValues" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesValues" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "color" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "userViewPreferences" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferences" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "slugId" } },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "feedItemFilterData" } },
          { kind: "Field", name: { kind: "Name", value: "initiativeFilterData" } },
          { kind: "Field", name: { kind: "Name", value: "filterData" } },
          { kind: "Field", name: { kind: "Name", value: "projectFilterData" } },
          { kind: "Field", name: { kind: "Name", value: "filters" } },
          { kind: "Field", name: { kind: "Name", value: "icon" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "modelName" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "organizationViewPreferences" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferences" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "creator" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "updatedBy" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "owner" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "shared" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CustomViewFragment, unknown>;
export const CustomViewConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CustomViewConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomViewConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomView" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CustomViewConnectionFragment, unknown>;
export const CustomViewHasSubscribersPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CustomViewHasSubscribersPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomViewHasSubscribersPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "hasSubscribers" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CustomViewHasSubscribersPayloadFragment, unknown>;
export const CustomViewPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CustomViewPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomViewPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "customView" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CustomViewPayloadFragment, unknown>;
export const CustomViewSuggestionPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CustomViewSuggestionPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomViewSuggestionPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "icon" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CustomViewSuggestionPayloadFragment, unknown>;
export const CustomerFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "Customer" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Customer" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "slackChannelId" } },
          { kind: "Field", name: { kind: "Name", value: "mainSourceId" } },
          { kind: "Field", name: { kind: "Name", value: "revenue" } },
          { kind: "Field", name: { kind: "Name", value: "approximateNeedCount" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "status" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "logoUrl" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "slugId" } },
          { kind: "Field", name: { kind: "Name", value: "domains" } },
          { kind: "Field", name: { kind: "Name", value: "externalIds" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "integration" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "size" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "tier" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "owner" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CustomerFragment, unknown>;
export const CustomerConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CustomerConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Customer" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CustomerConnectionFragment, unknown>;
export const ProjectAttachmentFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectAttachment" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectAttachment" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "sourceType" } },
          { kind: "Field", name: { kind: "Name", value: "metadata" } },
          { kind: "Field", name: { kind: "Name", value: "source" } },
          { kind: "Field", name: { kind: "Name", value: "subtitle" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "creator" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "title" } },
          { kind: "Field", name: { kind: "Name", value: "url" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectAttachmentFragment, unknown>;
export const CustomerNeedFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CustomerNeed" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeed" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "url" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "attachment" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "comment" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "creator" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "customer" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "originalIssue" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "body" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "projectAttachment" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectAttachment" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "priority" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CustomerNeedFragment, unknown>;
export const CustomerNeedConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CustomerNeedConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeed" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CustomerNeedConnectionFragment, unknown>;
export const CustomerNeedPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CustomerNeedPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "need" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CustomerNeedPayloadFragment, unknown>;
export const CustomerNeedUpdatePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CustomerNeedUpdatePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedUpdatePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "need" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "updatedRelatedNeeds" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeed" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CustomerNeedUpdatePayloadFragment, unknown>;
export const CustomerPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CustomerPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "customer" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CustomerPayloadFragment, unknown>;
export const CustomerStatusFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CustomerStatus" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerStatus" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "color" } },
          { kind: "Field", name: { kind: "Name", value: "displayName" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "position" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CustomerStatusFragment, unknown>;
export const CustomerStatusConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CustomerStatusConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerStatusConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerStatus" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CustomerStatusConnectionFragment, unknown>;
export const CustomerStatusPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CustomerStatusPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerStatusPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "status" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CustomerStatusPayloadFragment, unknown>;
export const CustomerTierFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CustomerTier" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerTier" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "color" } },
          { kind: "Field", name: { kind: "Name", value: "displayName" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "position" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CustomerTierFragment, unknown>;
export const CustomerTierConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CustomerTierConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerTierConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerTier" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CustomerTierConnectionFragment, unknown>;
export const CustomerTierPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CustomerTierPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerTierPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "tier" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CustomerTierPayloadFragment, unknown>;
export const CycleFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "Cycle" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Cycle" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "completedAt" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "inheritedFrom" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "endsAt" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "completedScopeHistory" } },
          { kind: "Field", name: { kind: "Name", value: "completedIssueCountHistory" } },
          { kind: "Field", name: { kind: "Name", value: "inProgressScopeHistory" } },
          { kind: "Field", name: { kind: "Name", value: "number" } },
          { kind: "Field", name: { kind: "Name", value: "progress" } },
          { kind: "Field", name: { kind: "Name", value: "startsAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "scopeHistory" } },
          { kind: "Field", name: { kind: "Name", value: "issueCountHistory" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "isActive" } },
          { kind: "Field", name: { kind: "Name", value: "isFuture" } },
          { kind: "Field", name: { kind: "Name", value: "isPast" } },
          { kind: "Field", name: { kind: "Name", value: "isNext" } },
          { kind: "Field", name: { kind: "Name", value: "isPrevious" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CycleFragment, unknown>;
export const CycleConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CycleConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CycleConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Cycle" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CycleConnectionFragment, unknown>;
export const CyclePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CyclePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CyclePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "cycle" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CyclePayloadFragment, unknown>;
export const DocumentFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "Document" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Document" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "trashed" } },
          { kind: "Field", name: { kind: "Name", value: "documentContentId" } },
          { kind: "Field", name: { kind: "Name", value: "url" } },
          { kind: "Field", name: { kind: "Name", value: "color" } },
          { kind: "Field", name: { kind: "Name", value: "title" } },
          { kind: "Field", name: { kind: "Name", value: "slugId" } },
          { kind: "Field", name: { kind: "Name", value: "content" } },
          { kind: "Field", name: { kind: "Name", value: "icon" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "initiative" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "lastAppliedTemplate" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "hiddenAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "creator" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "updatedBy" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<DocumentFragment, unknown>;
export const DocumentConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "DocumentConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Document" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<DocumentConnectionFragment, unknown>;
export const DocumentContentHistoryTypeFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "DocumentContentHistoryType" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentContentHistoryType" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "actorIds" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "contentDataSnapshotAt" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<DocumentContentHistoryTypeFragment, unknown>;
export const DocumentContentHistoryPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "DocumentContentHistoryPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentContentHistoryPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "history" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContentHistoryType" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<DocumentContentHistoryPayloadFragment, unknown>;
export const DocumentPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "DocumentPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "document" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<DocumentPayloadFragment, unknown>;
export const ArchiveResponseFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ArchiveResponse" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ArchiveResponse" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "archive" } },
          { kind: "Field", name: { kind: "Name", value: "totalCount" } },
          { kind: "Field", name: { kind: "Name", value: "databaseVersion" } },
          { kind: "Field", name: { kind: "Name", value: "includesDependencies" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ArchiveResponseFragment, unknown>;
export const DocumentSearchResultFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "DocumentSearchResult" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentSearchResult" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "trashed" } },
          { kind: "Field", name: { kind: "Name", value: "metadata" } },
          { kind: "Field", name: { kind: "Name", value: "documentContentId" } },
          { kind: "Field", name: { kind: "Name", value: "url" } },
          { kind: "Field", name: { kind: "Name", value: "color" } },
          { kind: "Field", name: { kind: "Name", value: "title" } },
          { kind: "Field", name: { kind: "Name", value: "slugId" } },
          { kind: "Field", name: { kind: "Name", value: "content" } },
          { kind: "Field", name: { kind: "Name", value: "icon" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "initiative" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "lastAppliedTemplate" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "hiddenAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "creator" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "updatedBy" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<DocumentSearchResultFragment, unknown>;
export const DocumentSearchPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "DocumentSearchPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentSearchPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "archivePayload" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchiveResponse" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "totalCount" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentSearchResult" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<DocumentSearchPayloadFragment, unknown>;
export const DraftFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "Draft" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Draft" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "data" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "parentComment" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "customerNeed" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "initiative" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "initiativeUpdate" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "projectUpdate" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "bodyData" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "isAutogenerated" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<DraftFragment, unknown>;
export const DraftConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "DraftConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DraftConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Draft" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<DraftConnectionFragment, unknown>;
export const EmailIntakeAddressPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "EmailIntakeAddressPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmailIntakeAddressPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "emailIntakeAddress" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<EmailIntakeAddressPayloadFragment, unknown>;
export const EmailUnsubscribePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "EmailUnsubscribePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmailUnsubscribePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<EmailUnsubscribePayloadFragment, unknown>;
export const EmailUserAccountAuthChallengeResponseFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "EmailUserAccountAuthChallengeResponse" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmailUserAccountAuthChallengeResponse" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "authType" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<EmailUserAccountAuthChallengeResponseFragment, unknown>;
export const EmojiFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "Emoji" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Emoji" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "url" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "source" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "creator" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<EmojiFragment, unknown>;
export const EmojiConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "EmojiConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmojiConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Emoji" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<EmojiConnectionFragment, unknown>;
export const EmojiPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "EmojiPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmojiPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "emoji" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<EmojiPayloadFragment, unknown>;
export const EntityExternalLinkFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "EntityExternalLink" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EntityExternalLink" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "initiative" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "url" } },
          { kind: "Field", name: { kind: "Name", value: "label" } },
          { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "creator" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<EntityExternalLinkFragment, unknown>;
export const EntityExternalLinkConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "EntityExternalLinkConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EntityExternalLinkConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EntityExternalLink" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<EntityExternalLinkConnectionFragment, unknown>;
export const EntityExternalLinkPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "EntityExternalLinkPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EntityExternalLinkPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "entityExternalLink" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<EntityExternalLinkPayloadFragment, unknown>;
export const ExternalUserFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ExternalUser" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ExternalUser" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "avatarUrl" } },
          { kind: "Field", name: { kind: "Name", value: "displayName" } },
          { kind: "Field", name: { kind: "Name", value: "email" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "lastSeen" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ExternalUserFragment, unknown>;
export const ExternalUserConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ExternalUserConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ExternalUserConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ExternalUser" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ExternalUserConnectionFragment, unknown>;
export const FavoriteFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "Favorite" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Favorite" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "customView" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "customer" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "cycle" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "document" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "initiative" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "label" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "projectLabel" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "folderName" } },
          { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "owner" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "parent" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "initiativeTab" } },
          { kind: "Field", name: { kind: "Name", value: "projectTab" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "predefinedViewTeam" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "predefinedViewType" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "url" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "projectTeam" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<FavoriteFragment, unknown>;
export const FavoriteConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "FavoriteConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FavoriteConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Favorite" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<FavoriteConnectionFragment, unknown>;
export const FavoritePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "FavoritePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FavoritePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "favorite" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<FavoritePayloadFragment, unknown>;
export const FetchDataPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "FetchDataPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FetchDataPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "data" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<FetchDataPayloadFragment, unknown>;
export const FrontAttachmentPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "FrontAttachmentPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FrontAttachmentPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "attachment" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<FrontAttachmentPayloadFragment, unknown>;
export const GitAutomationTargetBranchFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "GitAutomationTargetBranch" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationTargetBranch" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "branchPattern" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "isRegex" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<GitAutomationTargetBranchFragment, unknown>;
export const GitAutomationStateFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "GitAutomationState" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationState" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "state" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "event" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "targetBranch" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationTargetBranch" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "branchPattern" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<GitAutomationStateFragment, unknown>;
export const GitAutomationStateConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "GitAutomationStateConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationStateConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationState" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<GitAutomationStateConnectionFragment, unknown>;
export const GitAutomationStatePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "GitAutomationStatePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationStatePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "gitAutomationState" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationState" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<GitAutomationStatePayloadFragment, unknown>;
export const GitAutomationTargetBranchPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "GitAutomationTargetBranchPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationTargetBranchPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "targetBranch" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationTargetBranch" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<GitAutomationTargetBranchPayloadFragment, unknown>;
export const GitHubCommitIntegrationPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "GitHubCommitIntegrationPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitHubCommitIntegrationPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "integration" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "webhookSecret" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<GitHubCommitIntegrationPayloadFragment, unknown>;
export const GitHubEnterpriseServerInstallVerificationPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "GitHubEnterpriseServerInstallVerificationPayload" },
      typeCondition: {
        kind: "NamedType",
        name: { kind: "Name", value: "GitHubEnterpriseServerInstallVerificationPayload" },
      },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<GitHubEnterpriseServerInstallVerificationPayloadFragment, unknown>;
export const GitHubEnterpriseServerPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "GitHubEnterpriseServerPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitHubEnterpriseServerPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "installUrl" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "integration" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "setupUrl" } },
          { kind: "Field", name: { kind: "Name", value: "webhookSecret" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<GitHubEnterpriseServerPayloadFragment, unknown>;
export const GitLabIntegrationCreatePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "GitLabIntegrationCreatePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitLabIntegrationCreatePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "integration" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "webhookSecret" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<GitLabIntegrationCreatePayloadFragment, unknown>;
export const ImageUploadFromUrlPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ImageUploadFromUrlPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ImageUploadFromUrlPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "url" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ImageUploadFromUrlPayloadFragment, unknown>;
export const InitiativeFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "Initiative" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Initiative" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "trashed" } },
          { kind: "Field", name: { kind: "Name", value: "url" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "parentInitiative" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationsSettings" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "documentContent" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updateRemindersDay" } },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "targetDate" } },
          { kind: "Field", name: { kind: "Name", value: "updateReminderFrequency" } },
          { kind: "Field", name: { kind: "Name", value: "health" } },
          { kind: "Field", name: { kind: "Name", value: "updateRemindersHour" } },
          { kind: "Field", name: { kind: "Name", value: "icon" } },
          { kind: "Field", name: { kind: "Name", value: "color" } },
          { kind: "Field", name: { kind: "Name", value: "content" } },
          { kind: "Field", name: { kind: "Name", value: "slugId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "lastUpdate" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "updateReminderFrequencyInWeeks" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "targetDateResolution" } },
          { kind: "Field", name: { kind: "Name", value: "frequencyResolution" } },
          { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
          { kind: "Field", name: { kind: "Name", value: "status" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "healthUpdatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "startedAt" } },
          { kind: "Field", name: { kind: "Name", value: "completedAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "creator" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "owner" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<InitiativeFragment, unknown>;
export const InitiativeConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "InitiativeConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Initiative" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<InitiativeConnectionFragment, unknown>;
export const InitiativeHistoryFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "InitiativeHistory" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeHistory" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "entries" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "initiative" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<InitiativeHistoryFragment, unknown>;
export const InitiativeHistoryConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "InitiativeHistoryConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeHistoryConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeHistory" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<InitiativeHistoryConnectionFragment, unknown>;
export const InitiativeRelationFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "InitiativeRelation" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeRelation" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "relatedInitiative" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "initiative" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<InitiativeRelationFragment, unknown>;
export const InitiativeRelationConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "InitiativeRelationConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeRelationConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeRelation" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<InitiativeRelationConnectionFragment, unknown>;
export const InitiativeRelationPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "InitiativeRelationPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeRelationPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "initiativeRelation" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeRelation" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<InitiativeRelationPayloadFragment, unknown>;
export const InitiativeToProjectFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "InitiativeToProject" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeToProject" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "initiative" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<InitiativeToProjectFragment, unknown>;
export const InitiativeToProjectConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "InitiativeToProjectConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeToProjectConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeToProject" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<InitiativeToProjectConnectionFragment, unknown>;
export const InitiativeUpdateFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "InitiativeUpdate" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdate" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "reactionData" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "reactions" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Reaction" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "url" } },
          { kind: "Field", name: { kind: "Name", value: "diffMarkdown" } },
          { kind: "Field", name: { kind: "Name", value: "diff" } },
          { kind: "Field", name: { kind: "Name", value: "health" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "initiative" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "editedAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "body" } },
          { kind: "Field", name: { kind: "Name", value: "slugId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "isDiffHidden" } },
          { kind: "Field", name: { kind: "Name", value: "isStale" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<InitiativeUpdateFragment, unknown>;
export const InitiativeUpdateConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "InitiativeUpdateConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdateConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeUpdate" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<InitiativeUpdateConnectionFragment, unknown>;
export const InitiativeUpdatePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "InitiativeUpdatePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdatePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "initiativeUpdate" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<InitiativeUpdatePayloadFragment, unknown>;
export const InitiativeUpdateReminderPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "InitiativeUpdateReminderPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdateReminderPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<InitiativeUpdateReminderPayloadFragment, unknown>;
export const IntegrationFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "Integration" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Integration" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "service" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "creator" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IntegrationFragment, unknown>;
export const IntegrationConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IntegrationConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Integration" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IntegrationConnectionFragment, unknown>;
export const IntegrationHasScopesPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IntegrationHasScopesPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationHasScopesPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "missingScopes" } },
          { kind: "Field", name: { kind: "Name", value: "hasAllScopes" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IntegrationHasScopesPayloadFragment, unknown>;
export const IntegrationPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IntegrationPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "integration" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IntegrationPayloadFragment, unknown>;
export const IntegrationRequestPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IntegrationRequestPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationRequestPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IntegrationRequestPayloadFragment, unknown>;
export const IntegrationSlackWorkspaceNamePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IntegrationSlackWorkspaceNamePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationSlackWorkspaceNamePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IntegrationSlackWorkspaceNamePayloadFragment, unknown>;
export const IntegrationTemplateFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IntegrationTemplate" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationTemplate" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "foreignEntityId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "integration" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "template" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IntegrationTemplateFragment, unknown>;
export const IntegrationTemplateConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IntegrationTemplateConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationTemplateConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationTemplate" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IntegrationTemplateConnectionFragment, unknown>;
export const IntegrationTemplatePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IntegrationTemplatePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationTemplatePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationTemplate" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IntegrationTemplatePayloadFragment, unknown>;
export const IntegrationsSettingsPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IntegrationsSettingsPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationsSettingsPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationsSettings" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IntegrationsSettingsPayloadFragment, unknown>;
export const IssueFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "Issue" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Issue" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "trashed" } },
          { kind: "Field", name: { kind: "Name", value: "reactionData" } },
          { kind: "Field", name: { kind: "Name", value: "labelIds" } },
          { kind: "Field", name: { kind: "Name", value: "integrationSourceType" } },
          { kind: "Field", name: { kind: "Name", value: "url" } },
          { kind: "Field", name: { kind: "Name", value: "identifier" } },
          { kind: "Field", name: { kind: "Name", value: "priorityLabel" } },
          { kind: "Field", name: { kind: "Name", value: "previousIdentifiers" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "reactions" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Reaction" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "customerTicketCount" } },
          { kind: "Field", name: { kind: "Name", value: "branchName" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "delegate" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "botActor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "sourceComment" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "cycle" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "dueDate" } },
          { kind: "Field", name: { kind: "Name", value: "estimate" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "syncedWith" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ExternalEntityInfo" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "externalUserCreator" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "title" } },
          { kind: "Field", name: { kind: "Name", value: "number" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "lastAppliedTemplate" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "boardOrder" } },
          { kind: "Field", name: { kind: "Name", value: "prioritySortOrder" } },
          { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
          { kind: "Field", name: { kind: "Name", value: "subIssueSortOrder" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "parent" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "priority" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "projectMilestone" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "recurringIssueTemplate" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "startedTriageAt" } },
          { kind: "Field", name: { kind: "Name", value: "triagedAt" } },
          { kind: "Field", name: { kind: "Name", value: "addedToCycleAt" } },
          { kind: "Field", name: { kind: "Name", value: "addedToProjectAt" } },
          { kind: "Field", name: { kind: "Name", value: "addedToTeamAt" } },
          { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "autoClosedAt" } },
          { kind: "Field", name: { kind: "Name", value: "canceledAt" } },
          { kind: "Field", name: { kind: "Name", value: "completedAt" } },
          { kind: "Field", name: { kind: "Name", value: "startedAt" } },
          { kind: "Field", name: { kind: "Name", value: "slaStartedAt" } },
          { kind: "Field", name: { kind: "Name", value: "slaBreachesAt" } },
          { kind: "Field", name: { kind: "Name", value: "slaHighRiskAt" } },
          { kind: "Field", name: { kind: "Name", value: "slaMediumRiskAt" } },
          { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } },
          { kind: "Field", name: { kind: "Name", value: "slaType" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "assignee" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "creator" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "snoozedBy" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "favorite" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "state" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueFragment, unknown>;
export const IssueBatchPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueBatchPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueBatchPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "issues" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Issue" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueBatchPayloadFragment, unknown>;
export const IssueConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Issue" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueConnectionFragment, unknown>;
export const IssueFilterSuggestionPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueFilterSuggestionPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueFilterSuggestionPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "filter" } },
          { kind: "Field", name: { kind: "Name", value: "logId" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueFilterSuggestionPayloadFragment, unknown>;
export const IssueRelationHistoryPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueRelationHistoryPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationHistoryPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "identifier" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueRelationHistoryPayloadFragment, unknown>;
export const UserFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "User" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "User" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "statusUntilAt" } },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "avatarUrl" } },
          { kind: "Field", name: { kind: "Name", value: "createdIssueCount" } },
          { kind: "Field", name: { kind: "Name", value: "disableReason" } },
          { kind: "Field", name: { kind: "Name", value: "avatarBackgroundColor" } },
          { kind: "Field", name: { kind: "Name", value: "statusEmoji" } },
          { kind: "Field", name: { kind: "Name", value: "initials" } },
          { kind: "Field", name: { kind: "Name", value: "statusLabel" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "lastSeen" } },
          { kind: "Field", name: { kind: "Name", value: "timezone" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "gitHubUserId" } },
          { kind: "Field", name: { kind: "Name", value: "displayName" } },
          { kind: "Field", name: { kind: "Name", value: "email" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "url" } },
          { kind: "Field", name: { kind: "Name", value: "active" } },
          { kind: "Field", name: { kind: "Name", value: "guest" } },
          { kind: "Field", name: { kind: "Name", value: "app" } },
          { kind: "Field", name: { kind: "Name", value: "admin" } },
          { kind: "Field", name: { kind: "Name", value: "isAssignable" } },
          { kind: "Field", name: { kind: "Name", value: "isMentionable" } },
          { kind: "Field", name: { kind: "Name", value: "isMe" } },
          { kind: "Field", name: { kind: "Name", value: "calendarHash" } },
          { kind: "Field", name: { kind: "Name", value: "inviteHash" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<UserFragment, unknown>;
export const IssueImportFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueImport" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImport" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "progress" } },
          { kind: "Field", name: { kind: "Name", value: "errorMetadata" } },
          { kind: "Field", name: { kind: "Name", value: "csvFileUrl" } },
          { kind: "Field", name: { kind: "Name", value: "serviceMetadata" } },
          { kind: "Field", name: { kind: "Name", value: "teamName" } },
          { kind: "Field", name: { kind: "Name", value: "mapping" } },
          { kind: "Field", name: { kind: "Name", value: "displayName" } },
          { kind: "Field", name: { kind: "Name", value: "creatorId" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "service" } },
          { kind: "Field", name: { kind: "Name", value: "status" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "error" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueImportFragment, unknown>;
export const IssueLabelFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueLabel" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueLabel" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastAppliedAt" } },
          { kind: "Field", name: { kind: "Name", value: "color" } },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "inheritedFrom" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "parent" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "creator" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "isGroup" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueLabelFragment, unknown>;
export const IssueHistoryFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueHistory" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueHistory" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "relationChanges" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationHistoryPayload" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "addedLabelIds" } },
          { kind: "Field", name: { kind: "Name", value: "removedLabelIds" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "actor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "descriptionUpdatedBy" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "actors" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "fromDelegate" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "toDelegate" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "botActor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "fromCycle" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "toCycle" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "attachmentId" } },
          { kind: "Field", name: { kind: "Name", value: "customerNeedId" } },
          { kind: "Field", name: { kind: "Name", value: "toCycleId" } },
          { kind: "Field", name: { kind: "Name", value: "toParentId" } },
          { kind: "Field", name: { kind: "Name", value: "toConvertedProjectId" } },
          { kind: "Field", name: { kind: "Name", value: "toProjectId" } },
          { kind: "Field", name: { kind: "Name", value: "toStateId" } },
          { kind: "Field", name: { kind: "Name", value: "fromCycleId" } },
          { kind: "Field", name: { kind: "Name", value: "fromParentId" } },
          { kind: "Field", name: { kind: "Name", value: "fromProjectId" } },
          { kind: "Field", name: { kind: "Name", value: "fromStateId" } },
          { kind: "Field", name: { kind: "Name", value: "fromTeamId" } },
          { kind: "Field", name: { kind: "Name", value: "toTeamId" } },
          { kind: "Field", name: { kind: "Name", value: "fromAssigneeId" } },
          { kind: "Field", name: { kind: "Name", value: "toAssigneeId" } },
          { kind: "Field", name: { kind: "Name", value: "actorId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "issueImport" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImport" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "addedLabels" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabel" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "removedLabels" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabel" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "attachment" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "toConvertedProject" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "fromParent" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "toParent" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "fromProject" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "toProject" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "fromState" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "toState" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "fromTeam" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "toTeam" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "toAssignee" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "fromAssignee" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "triageResponsibilityNotifiedUsers" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "fromDueDate" } },
          { kind: "Field", name: { kind: "Name", value: "toDueDate" } },
          { kind: "Field", name: { kind: "Name", value: "fromEstimate" } },
          { kind: "Field", name: { kind: "Name", value: "toEstimate" } },
          { kind: "Field", name: { kind: "Name", value: "fromPriority" } },
          { kind: "Field", name: { kind: "Name", value: "toPriority" } },
          { kind: "Field", name: { kind: "Name", value: "fromTitle" } },
          { kind: "Field", name: { kind: "Name", value: "toTitle" } },
          { kind: "Field", name: { kind: "Name", value: "archived" } },
          { kind: "Field", name: { kind: "Name", value: "autoArchived" } },
          { kind: "Field", name: { kind: "Name", value: "autoClosed" } },
          { kind: "Field", name: { kind: "Name", value: "trashed" } },
          { kind: "Field", name: { kind: "Name", value: "updatedDescription" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueHistoryFragment, unknown>;
export const IssueHistoryConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueHistoryConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueHistoryConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueHistory" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueHistoryConnectionFragment, unknown>;
export const IssueImportCheckPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueImportCheckPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImportCheckPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueImportCheckPayloadFragment, unknown>;
export const IssueImportDeletePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueImportDeletePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImportDeletePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "issueImport" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImport" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueImportDeletePayloadFragment, unknown>;
export const IssueImportPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueImportPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImportPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "issueImport" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImport" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueImportPayloadFragment, unknown>;
export const IssueLabelConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueLabelConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabel" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueLabelConnectionFragment, unknown>;
export const IssueLabelMoveToTeamLabelsPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueLabelMoveToTeamLabelsPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelMoveToTeamLabelsPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueLabelMoveToTeamLabelsPayloadFragment, unknown>;
export const IssueLabelPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueLabelPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "issueLabel" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueLabelPayloadFragment, unknown>;
export const IssuePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssuePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssuePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssuePayloadFragment, unknown>;
export const IssuePriorityValueFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssuePriorityValue" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssuePriorityValue" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "label" } },
          { kind: "Field", name: { kind: "Name", value: "priority" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssuePriorityValueFragment, unknown>;
export const IssueRelationFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueRelation" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueRelation" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "relatedIssue" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueRelationFragment, unknown>;
export const IssueRelationConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueRelationConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelation" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueRelationConnectionFragment, unknown>;
export const IssueRelationPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueRelationPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "issueRelation" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueRelationPayloadFragment, unknown>;
export const IssueSearchResultFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueSearchResult" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueSearchResult" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "trashed" } },
          { kind: "Field", name: { kind: "Name", value: "reactionData" } },
          { kind: "Field", name: { kind: "Name", value: "labelIds" } },
          { kind: "Field", name: { kind: "Name", value: "integrationSourceType" } },
          { kind: "Field", name: { kind: "Name", value: "url" } },
          { kind: "Field", name: { kind: "Name", value: "identifier" } },
          { kind: "Field", name: { kind: "Name", value: "priorityLabel" } },
          { kind: "Field", name: { kind: "Name", value: "metadata" } },
          { kind: "Field", name: { kind: "Name", value: "previousIdentifiers" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "reactions" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Reaction" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "customerTicketCount" } },
          { kind: "Field", name: { kind: "Name", value: "branchName" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "delegate" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "botActor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "sourceComment" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "cycle" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "dueDate" } },
          { kind: "Field", name: { kind: "Name", value: "estimate" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "syncedWith" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ExternalEntityInfo" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "externalUserCreator" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "title" } },
          { kind: "Field", name: { kind: "Name", value: "number" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "lastAppliedTemplate" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "boardOrder" } },
          { kind: "Field", name: { kind: "Name", value: "prioritySortOrder" } },
          { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
          { kind: "Field", name: { kind: "Name", value: "subIssueSortOrder" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "parent" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "priority" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "projectMilestone" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "recurringIssueTemplate" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "startedTriageAt" } },
          { kind: "Field", name: { kind: "Name", value: "triagedAt" } },
          { kind: "Field", name: { kind: "Name", value: "addedToCycleAt" } },
          { kind: "Field", name: { kind: "Name", value: "addedToProjectAt" } },
          { kind: "Field", name: { kind: "Name", value: "addedToTeamAt" } },
          { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "autoClosedAt" } },
          { kind: "Field", name: { kind: "Name", value: "canceledAt" } },
          { kind: "Field", name: { kind: "Name", value: "completedAt" } },
          { kind: "Field", name: { kind: "Name", value: "startedAt" } },
          { kind: "Field", name: { kind: "Name", value: "slaStartedAt" } },
          { kind: "Field", name: { kind: "Name", value: "slaBreachesAt" } },
          { kind: "Field", name: { kind: "Name", value: "slaHighRiskAt" } },
          { kind: "Field", name: { kind: "Name", value: "slaMediumRiskAt" } },
          { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } },
          { kind: "Field", name: { kind: "Name", value: "slaType" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "assignee" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "creator" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "snoozedBy" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "favorite" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "state" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueSearchResultFragment, unknown>;
export const IssueSearchPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueSearchPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueSearchPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "archivePayload" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchiveResponse" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "totalCount" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueSearchResult" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueSearchPayloadFragment, unknown>;
export const IssueSuggestionMetadataFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueSuggestionMetadata" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueSuggestionMetadata" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "classification" } },
          { kind: "Field", name: { kind: "Name", value: "evalLogId" } },
          { kind: "Field", name: { kind: "Name", value: "rank" } },
          { kind: "Field", name: { kind: "Name", value: "reasons" } },
          { kind: "Field", name: { kind: "Name", value: "score" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueSuggestionMetadataFragment, unknown>;
export const IssueSuggestionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueSuggestion" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueSuggestion" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "issueId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "metadata" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueSuggestionMetadata" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "state" } },
          { kind: "Field", name: { kind: "Name", value: "stateChangedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "suggestedIssue" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "suggestedIssueId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "suggestedLabel" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "suggestedLabelId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "suggestedProject" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "suggestedTeam" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "suggestedUser" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "suggestedUserId" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueSuggestionFragment, unknown>;
export const IssueSuggestionConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueSuggestionConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueSuggestionConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueSuggestion" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueSuggestionConnectionFragment, unknown>;
export const IssueTitleSuggestionFromCustomerRequestPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueTitleSuggestionFromCustomerRequestPayload" },
      typeCondition: {
        kind: "NamedType",
        name: { kind: "Name", value: "IssueTitleSuggestionFromCustomerRequestPayload" },
      },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "title" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueTitleSuggestionFromCustomerRequestPayloadFragment, unknown>;
export const LogoutResponseFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "LogoutResponse" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "LogoutResponse" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<LogoutResponseFragment, unknown>;
export const NodeFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "Node" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Node" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<NodeFragment, unknown>;
export const NotificationBatchActionPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "NotificationBatchActionPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationBatchActionPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "notifications" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Notification" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<NotificationBatchActionPayloadFragment, unknown>;
export const NotificationConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "NotificationConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Notification" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<NotificationConnectionFragment, unknown>;
export const NotificationPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "NotificationPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "notification" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Notification" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<NotificationPayloadFragment, unknown>;
export const NotificationSubscriptionConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "NotificationSubscriptionConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscriptionConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscription" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<NotificationSubscriptionConnectionFragment, unknown>;
export const NotificationSubscriptionPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "NotificationSubscriptionPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscriptionPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "notificationSubscription" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscription" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<NotificationSubscriptionPayloadFragment, unknown>;
export const OrganizationAcceptedOrExpiredInviteDetailsPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "OrganizationAcceptedOrExpiredInviteDetailsPayload" },
      typeCondition: {
        kind: "NamedType",
        name: { kind: "Name", value: "OrganizationAcceptedOrExpiredInviteDetailsPayload" },
      },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "status" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<OrganizationAcceptedOrExpiredInviteDetailsPayloadFragment, unknown>;
export const OrganizationCancelDeletePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "OrganizationCancelDeletePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationCancelDeletePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<OrganizationCancelDeletePayloadFragment, unknown>;
export const OrganizationDeletePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "OrganizationDeletePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationDeletePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<OrganizationDeletePayloadFragment, unknown>;
export const OrganizationExistsPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "OrganizationExistsPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationExistsPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
          { kind: "Field", name: { kind: "Name", value: "exists" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<OrganizationExistsPayloadFragment, unknown>;
export const OrganizationInviteFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "OrganizationInvite" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInvite" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "metadata" } },
          { kind: "Field", name: { kind: "Name", value: "external" } },
          { kind: "Field", name: { kind: "Name", value: "email" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "acceptedAt" } },
          { kind: "Field", name: { kind: "Name", value: "expiresAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "role" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "inviter" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "invitee" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<OrganizationInviteFragment, unknown>;
export const OrganizationInviteConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "OrganizationInviteConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInviteConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInvite" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<OrganizationInviteConnectionFragment, unknown>;
export const OrganizationInviteFullDetailsPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "OrganizationInviteFullDetailsPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInviteFullDetailsPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "allowedAuthServices" } },
          { kind: "Field", name: { kind: "Name", value: "organizationId" } },
          { kind: "Field", name: { kind: "Name", value: "organizationName" } },
          { kind: "Field", name: { kind: "Name", value: "email" } },
          { kind: "Field", name: { kind: "Name", value: "inviter" } },
          { kind: "Field", name: { kind: "Name", value: "status" } },
          { kind: "Field", name: { kind: "Name", value: "organizationLogoUrl" } },
          { kind: "Field", name: { kind: "Name", value: "role" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "accepted" } },
          { kind: "Field", name: { kind: "Name", value: "expired" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<OrganizationInviteFullDetailsPayloadFragment, unknown>;
export const OrganizationInvitePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "OrganizationInvitePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInvitePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "organizationInvite" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<OrganizationInvitePayloadFragment, unknown>;
export const OrganizationMetaFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "OrganizationMeta" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationMeta" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "allowedAuthServices" } },
          { kind: "Field", name: { kind: "Name", value: "region" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<OrganizationMetaFragment, unknown>;
export const OrganizationPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "OrganizationPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<OrganizationPayloadFragment, unknown>;
export const OrganizationStartTrialPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "OrganizationStartTrialPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationStartTrialPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<OrganizationStartTrialPayloadFragment, unknown>;
export const PasskeyLoginStartResponseFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "PasskeyLoginStartResponse" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PasskeyLoginStartResponse" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "options" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<PasskeyLoginStartResponseFragment, unknown>;
export const ProjectFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "Project" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Project" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "trashed" } },
          { kind: "Field", name: { kind: "Name", value: "labelIds" } },
          { kind: "Field", name: { kind: "Name", value: "url" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationsSettings" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "documentContent" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updateRemindersDay" } },
          { kind: "Field", name: { kind: "Name", value: "targetDate" } },
          { kind: "Field", name: { kind: "Name", value: "startDate" } },
          { kind: "Field", name: { kind: "Name", value: "updateReminderFrequency" } },
          { kind: "Field", name: { kind: "Name", value: "health" } },
          { kind: "Field", name: { kind: "Name", value: "updateRemindersHour" } },
          { kind: "Field", name: { kind: "Name", value: "icon" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "lastUpdate" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "lastAppliedTemplate" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "updateReminderFrequencyInWeeks" } },
          { kind: "Field", name: { kind: "Name", value: "completedScopeHistory" } },
          { kind: "Field", name: { kind: "Name", value: "completedIssueCountHistory" } },
          { kind: "Field", name: { kind: "Name", value: "inProgressScopeHistory" } },
          { kind: "Field", name: { kind: "Name", value: "progress" } },
          { kind: "Field", name: { kind: "Name", value: "scope" } },
          { kind: "Field", name: { kind: "Name", value: "priorityLabel" } },
          { kind: "Field", name: { kind: "Name", value: "priority" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "lead" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "convertedFromIssue" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "color" } },
          { kind: "Field", name: { kind: "Name", value: "content" } },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "slugId" } },
          { kind: "Field", name: { kind: "Name", value: "targetDateResolution" } },
          { kind: "Field", name: { kind: "Name", value: "startDateResolution" } },
          { kind: "Field", name: { kind: "Name", value: "frequencyResolution" } },
          { kind: "Field", name: { kind: "Name", value: "prioritySortOrder" } },
          { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "status" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "healthUpdatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "canceledAt" } },
          { kind: "Field", name: { kind: "Name", value: "completedAt" } },
          { kind: "Field", name: { kind: "Name", value: "startedAt" } },
          { kind: "Field", name: { kind: "Name", value: "projectUpdateRemindersPausedUntilAt" } },
          { kind: "Field", name: { kind: "Name", value: "scopeHistory" } },
          { kind: "Field", name: { kind: "Name", value: "issueCountHistory" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "creator" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "favorite" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "slackIssueComments" } },
          { kind: "Field", name: { kind: "Name", value: "slackNewIssue" } },
          { kind: "Field", name: { kind: "Name", value: "slackIssueStatuses" } },
          { kind: "Field", name: { kind: "Name", value: "state" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectFragment, unknown>;
export const ProjectConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Project" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectConnectionFragment, unknown>;
export const ProjectFilterSuggestionPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectFilterSuggestionPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilterSuggestionPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "filter" } },
          { kind: "Field", name: { kind: "Name", value: "logId" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectFilterSuggestionPayloadFragment, unknown>;
export const ProjectHistoryFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectHistory" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectHistory" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "entries" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectHistoryFragment, unknown>;
export const ProjectHistoryConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectHistoryConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectHistoryConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectHistory" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectHistoryConnectionFragment, unknown>;
export const ProjectLabelFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectLabel" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectLabel" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastAppliedAt" } },
          { kind: "Field", name: { kind: "Name", value: "color" } },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "parent" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "creator" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "isGroup" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectLabelFragment, unknown>;
export const ProjectLabelConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectLabelConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectLabelConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLabel" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectLabelConnectionFragment, unknown>;
export const ProjectLabelPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectLabelPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectLabelPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "projectLabel" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectLabelPayloadFragment, unknown>;
export const ProjectMilestoneFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectMilestone" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestone" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "documentContent" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
          { kind: "Field", name: { kind: "Name", value: "targetDate" } },
          { kind: "Field", name: { kind: "Name", value: "progress" } },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "status" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectMilestoneFragment, unknown>;
export const ProjectMilestoneConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectMilestoneConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestone" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectMilestoneConnectionFragment, unknown>;
export const ProjectMilestoneMoveIssueToTeamFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectMilestoneMoveIssueToTeam" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneMoveIssueToTeam" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "issueId" } },
          { kind: "Field", name: { kind: "Name", value: "teamId" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectMilestoneMoveIssueToTeamFragment, unknown>;
export const ProjectMilestoneMoveProjectTeamsFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectMilestoneMoveProjectTeams" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneMoveProjectTeams" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "projectId" } },
          { kind: "Field", name: { kind: "Name", value: "teamIds" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectMilestoneMoveProjectTeamsFragment, unknown>;
export const ProjectMilestoneMovePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectMilestoneMovePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneMovePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "previousIssueTeamIds" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestoneMoveIssueToTeam" } },
              ],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "previousProjectTeamIds" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestoneMoveProjectTeams" } },
              ],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "projectMilestone" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectMilestoneMovePayloadFragment, unknown>;
export const ProjectMilestonePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectMilestonePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestonePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "projectMilestone" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectMilestonePayloadFragment, unknown>;
export const ProjectPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectPayloadFragment, unknown>;
export const ProjectRelationFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectRelation" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectRelation" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "projectMilestone" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "relatedProjectMilestone" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "relatedProject" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "anchorType" } },
          { kind: "Field", name: { kind: "Name", value: "relatedAnchorType" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectRelationFragment, unknown>;
export const ProjectRelationConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectRelationConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectRelationConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectRelation" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectRelationConnectionFragment, unknown>;
export const ProjectRelationPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectRelationPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectRelationPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "projectRelation" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectRelationPayloadFragment, unknown>;
export const ProjectSearchResultFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectSearchResult" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectSearchResult" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "trashed" } },
          { kind: "Field", name: { kind: "Name", value: "labelIds" } },
          { kind: "Field", name: { kind: "Name", value: "metadata" } },
          { kind: "Field", name: { kind: "Name", value: "url" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationsSettings" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "documentContent" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updateRemindersDay" } },
          { kind: "Field", name: { kind: "Name", value: "targetDate" } },
          { kind: "Field", name: { kind: "Name", value: "startDate" } },
          { kind: "Field", name: { kind: "Name", value: "updateReminderFrequency" } },
          { kind: "Field", name: { kind: "Name", value: "health" } },
          { kind: "Field", name: { kind: "Name", value: "updateRemindersHour" } },
          { kind: "Field", name: { kind: "Name", value: "icon" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "lastUpdate" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "lastAppliedTemplate" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "updateReminderFrequencyInWeeks" } },
          { kind: "Field", name: { kind: "Name", value: "completedScopeHistory" } },
          { kind: "Field", name: { kind: "Name", value: "completedIssueCountHistory" } },
          { kind: "Field", name: { kind: "Name", value: "inProgressScopeHistory" } },
          { kind: "Field", name: { kind: "Name", value: "progress" } },
          { kind: "Field", name: { kind: "Name", value: "scope" } },
          { kind: "Field", name: { kind: "Name", value: "priorityLabel" } },
          { kind: "Field", name: { kind: "Name", value: "priority" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "lead" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "convertedFromIssue" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "color" } },
          { kind: "Field", name: { kind: "Name", value: "content" } },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "slugId" } },
          { kind: "Field", name: { kind: "Name", value: "targetDateResolution" } },
          { kind: "Field", name: { kind: "Name", value: "startDateResolution" } },
          { kind: "Field", name: { kind: "Name", value: "frequencyResolution" } },
          { kind: "Field", name: { kind: "Name", value: "prioritySortOrder" } },
          { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "status" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "healthUpdatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "canceledAt" } },
          { kind: "Field", name: { kind: "Name", value: "completedAt" } },
          { kind: "Field", name: { kind: "Name", value: "startedAt" } },
          { kind: "Field", name: { kind: "Name", value: "projectUpdateRemindersPausedUntilAt" } },
          { kind: "Field", name: { kind: "Name", value: "scopeHistory" } },
          { kind: "Field", name: { kind: "Name", value: "issueCountHistory" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "creator" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "favorite" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "slackIssueComments" } },
          { kind: "Field", name: { kind: "Name", value: "slackNewIssue" } },
          { kind: "Field", name: { kind: "Name", value: "slackIssueStatuses" } },
          { kind: "Field", name: { kind: "Name", value: "state" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectSearchResultFragment, unknown>;
export const ProjectSearchPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectSearchPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectSearchPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "archivePayload" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchiveResponse" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "totalCount" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectSearchResult" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectSearchPayloadFragment, unknown>;
export const ProjectStatusConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectStatusConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectStatusConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatus" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectStatusConnectionFragment, unknown>;
export const ProjectStatusCountPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectStatusCountPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectStatusCountPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "privateCount" } },
          { kind: "Field", name: { kind: "Name", value: "archivedTeamCount" } },
          { kind: "Field", name: { kind: "Name", value: "count" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectStatusCountPayloadFragment, unknown>;
export const ProjectStatusPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectStatusPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectStatusPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "status" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectStatusPayloadFragment, unknown>;
export const ProjectUpdateFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectUpdate" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdate" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "reactionData" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "reactions" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Reaction" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "url" } },
          { kind: "Field", name: { kind: "Name", value: "diffMarkdown" } },
          { kind: "Field", name: { kind: "Name", value: "diff" } },
          { kind: "Field", name: { kind: "Name", value: "health" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "editedAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "body" } },
          { kind: "Field", name: { kind: "Name", value: "slugId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "isDiffHidden" } },
          { kind: "Field", name: { kind: "Name", value: "isStale" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectUpdateFragment, unknown>;
export const ProjectUpdateConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectUpdateConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdate" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectUpdateConnectionFragment, unknown>;
export const ProjectUpdatePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectUpdatePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdatePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "projectUpdate" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectUpdatePayloadFragment, unknown>;
export const ProjectUpdateReminderPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectUpdateReminderPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateReminderPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectUpdateReminderPayloadFragment, unknown>;
export const PushSubscriptionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "PushSubscription" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PushSubscription" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<PushSubscriptionFragment, unknown>;
export const PushSubscriptionPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "PushSubscriptionPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PushSubscriptionPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "entity" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PushSubscription" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<PushSubscriptionPayloadFragment, unknown>;
export const PushSubscriptionTestPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "PushSubscriptionTestPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PushSubscriptionTestPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<PushSubscriptionTestPayloadFragment, unknown>;
export const RateLimitResultPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "RateLimitResultPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RateLimitResultPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "period" } },
          { kind: "Field", name: { kind: "Name", value: "remainingAmount" } },
          { kind: "Field", name: { kind: "Name", value: "requestedAmount" } },
          { kind: "Field", name: { kind: "Name", value: "reset" } },
          { kind: "Field", name: { kind: "Name", value: "allowedAmount" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<RateLimitResultPayloadFragment, unknown>;
export const RateLimitPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "RateLimitPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RateLimitPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "identifier" } },
          { kind: "Field", name: { kind: "Name", value: "kind" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "limits" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RateLimitResultPayload" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<RateLimitPayloadFragment, unknown>;
export const ReactionPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ReactionPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ReactionPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "reaction" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Reaction" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ReactionPayloadFragment, unknown>;
export const RoadmapFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "Roadmap" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Roadmap" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "url" } },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "color" } },
          { kind: "Field", name: { kind: "Name", value: "slugId" } },
          { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "creator" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "owner" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<RoadmapFragment, unknown>;
export const RoadmapConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "RoadmapConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Roadmap" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<RoadmapConnectionFragment, unknown>;
export const RoadmapPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "RoadmapPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "roadmap" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<RoadmapPayloadFragment, unknown>;
export const RoadmapToProjectFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "RoadmapToProject" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapToProject" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "roadmap" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<RoadmapToProjectFragment, unknown>;
export const RoadmapToProjectConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "RoadmapToProjectConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapToProjectConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapToProject" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<RoadmapToProjectConnectionFragment, unknown>;
export const RoadmapToProjectPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "RoadmapToProjectPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapToProjectPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "roadmapToProject" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<RoadmapToProjectPayloadFragment, unknown>;
export const SlackChannelConnectPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "SlackChannelConnectPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SlackChannelConnectPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "integration" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "nudgeToConnectMainSlackIntegration" } },
          { kind: "Field", name: { kind: "Name", value: "nudgeToUpdateMainSlackIntegration" } },
          { kind: "Field", name: { kind: "Name", value: "addBot" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<SlackChannelConnectPayloadFragment, unknown>;
export const SsoUrlFromEmailResponseFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "SsoUrlFromEmailResponse" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SsoUrlFromEmailResponse" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "samlSsoUrl" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<SsoUrlFromEmailResponseFragment, unknown>;
export const SuccessPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "SuccessPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SuccessPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<SuccessPayloadFragment, unknown>;
export const SummaryPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "SummaryPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SummaryPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "summary" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<SummaryPayloadFragment, unknown>;
export const TeamFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "Team" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Team" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "cycleIssueAutoAssignCompleted" } },
          { kind: "Field", name: { kind: "Name", value: "cycleLockToActive" } },
          { kind: "Field", name: { kind: "Name", value: "cycleIssueAutoAssignStarted" } },
          { kind: "Field", name: { kind: "Name", value: "cycleCalenderUrl" } },
          { kind: "Field", name: { kind: "Name", value: "upcomingCycleCount" } },
          { kind: "Field", name: { kind: "Name", value: "issueCount" } },
          { kind: "Field", name: { kind: "Name", value: "autoArchivePeriod" } },
          { kind: "Field", name: { kind: "Name", value: "autoClosePeriod" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationsSettings" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "activeCycle" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "triageResponsibility" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "scimGroupName" } },
          { kind: "Field", name: { kind: "Name", value: "autoCloseStateId" } },
          { kind: "Field", name: { kind: "Name", value: "cycleCooldownTime" } },
          { kind: "Field", name: { kind: "Name", value: "cycleStartDay" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "defaultTemplateForMembers" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "defaultTemplateForNonMembers" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "defaultProjectTemplate" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "defaultIssueState" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "cycleDuration" } },
          { kind: "Field", name: { kind: "Name", value: "icon" } },
          { kind: "Field", name: { kind: "Name", value: "defaultTemplateForMembersId" } },
          { kind: "Field", name: { kind: "Name", value: "defaultTemplateForNonMembersId" } },
          { kind: "Field", name: { kind: "Name", value: "issueEstimationType" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "displayName" } },
          { kind: "Field", name: { kind: "Name", value: "color" } },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "key" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "timezone" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "mergeWorkflowState" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "draftWorkflowState" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "startWorkflowState" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "mergeableWorkflowState" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "reviewWorkflowState" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "markedAsDuplicateWorkflowState" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "triageIssueState" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "inviteHash" } },
          { kind: "Field", name: { kind: "Name", value: "defaultIssueEstimate" } },
          { kind: "Field", name: { kind: "Name", value: "setIssueSortOrderOnStateChange" } },
          { kind: "Field", name: { kind: "Name", value: "requirePriorityToLeaveTriage" } },
          { kind: "Field", name: { kind: "Name", value: "autoCloseChildIssues" } },
          { kind: "Field", name: { kind: "Name", value: "autoCloseParentIssues" } },
          { kind: "Field", name: { kind: "Name", value: "scimManaged" } },
          { kind: "Field", name: { kind: "Name", value: "private" } },
          { kind: "Field", name: { kind: "Name", value: "inheritIssueEstimation" } },
          { kind: "Field", name: { kind: "Name", value: "inheritWorkflowStatuses" } },
          { kind: "Field", name: { kind: "Name", value: "cyclesEnabled" } },
          { kind: "Field", name: { kind: "Name", value: "issueEstimationExtended" } },
          { kind: "Field", name: { kind: "Name", value: "issueEstimationAllowZero" } },
          { kind: "Field", name: { kind: "Name", value: "aiThreadSummariesEnabled" } },
          { kind: "Field", name: { kind: "Name", value: "groupIssueHistory" } },
          { kind: "Field", name: { kind: "Name", value: "slackIssueComments" } },
          { kind: "Field", name: { kind: "Name", value: "slackNewIssue" } },
          { kind: "Field", name: { kind: "Name", value: "slackIssueStatuses" } },
          { kind: "Field", name: { kind: "Name", value: "triageEnabled" } },
          { kind: "Field", name: { kind: "Name", value: "issueOrderingNoPriorityFirst" } },
          { kind: "Field", name: { kind: "Name", value: "issueSortOrderDefaultToBottom" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<TeamFragment, unknown>;
export const TeamConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "TeamConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Team" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<TeamConnectionFragment, unknown>;
export const TeamMembershipFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "TeamMembership" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamMembership" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "owner" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<TeamMembershipFragment, unknown>;
export const TeamMembershipConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "TeamMembershipConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamMembershipConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembership" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<TeamMembershipConnectionFragment, unknown>;
export const TeamMembershipPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "TeamMembershipPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamMembershipPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "teamMembership" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<TeamMembershipPayloadFragment, unknown>;
export const TeamPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "TeamPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<TeamPayloadFragment, unknown>;
export const TemplateFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "Template" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Template" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "templateData" } },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "inheritedFrom" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "creator" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "lastUpdatedBy" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<TemplateFragment, unknown>;
export const TemplateConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "TemplateConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TemplateConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Template" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<TemplateConnectionFragment, unknown>;
export const TemplatePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "TemplatePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TemplatePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "template" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<TemplatePayloadFragment, unknown>;
export const TimeScheduleEntryFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "TimeScheduleEntry" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TimeScheduleEntry" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "userId" } },
          { kind: "Field", name: { kind: "Name", value: "userEmail" } },
          { kind: "Field", name: { kind: "Name", value: "endsAt" } },
          { kind: "Field", name: { kind: "Name", value: "startsAt" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<TimeScheduleEntryFragment, unknown>;
export const TimeScheduleFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "TimeSchedule" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TimeSchedule" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "externalUrl" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "integration" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "externalId" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "entries" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeScheduleEntry" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<TimeScheduleFragment, unknown>;
export const TimeScheduleConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "TimeScheduleConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TimeScheduleConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeSchedule" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<TimeScheduleConnectionFragment, unknown>;
export const TimeSchedulePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "TimeSchedulePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TimeSchedulePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "timeSchedule" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<TimeSchedulePayloadFragment, unknown>;
export const TriageResponsibilityManualSelectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "TriageResponsibilityManualSelection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TriageResponsibilityManualSelection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "userIds" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<TriageResponsibilityManualSelectionFragment, unknown>;
export const TriageResponsibilityFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "TriageResponsibility" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TriageResponsibility" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "manualSelection" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "TriageResponsibilityManualSelection" } },
              ],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "action" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "timeSchedule" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "currentUser" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<TriageResponsibilityFragment, unknown>;
export const TriageResponsibilityConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "TriageResponsibilityConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TriageResponsibilityConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TriageResponsibility" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<TriageResponsibilityConnectionFragment, unknown>;
export const TriageResponsibilityPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "TriageResponsibilityPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TriageResponsibilityPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "triageResponsibility" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<TriageResponsibilityPayloadFragment, unknown>;
export const UploadFileHeaderFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "UploadFileHeader" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UploadFileHeader" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "key" } },
          { kind: "Field", name: { kind: "Name", value: "value" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<UploadFileHeaderFragment, unknown>;
export const UploadFileFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "UploadFile" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UploadFile" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "assetUrl" } },
          { kind: "Field", name: { kind: "Name", value: "contentType" } },
          { kind: "Field", name: { kind: "Name", value: "filename" } },
          { kind: "Field", name: { kind: "Name", value: "uploadUrl" } },
          { kind: "Field", name: { kind: "Name", value: "size" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "headers" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UploadFileHeader" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "metaData" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<UploadFileFragment, unknown>;
export const UploadPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "UploadPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UploadPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "uploadFile" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UploadFile" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<UploadPayloadFragment, unknown>;
export const UserAdminPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "UserAdminPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserAdminPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<UserAdminPayloadFragment, unknown>;
export const UserConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "UserConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<UserConnectionFragment, unknown>;
export const UserPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "UserPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<UserPayloadFragment, unknown>;
export const UserSettingsFlagPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "UserSettingsFlagPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserSettingsFlagPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "flag" } },
          { kind: "Field", name: { kind: "Name", value: "value" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<UserSettingsFlagPayloadFragment, unknown>;
export const UserSettingsFlagsResetPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "UserSettingsFlagsResetPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserSettingsFlagsResetPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<UserSettingsFlagsResetPayloadFragment, unknown>;
export const UserSettingsPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "UserSettingsPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserSettingsPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<UserSettingsPayloadFragment, unknown>;
export const ViewPreferencesPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ViewPreferencesPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ViewPreferencesPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "viewPreferences" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferences" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ViewPreferencesPayloadFragment, unknown>;
export const WebhookFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "Webhook" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Webhook" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "secret" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "resourceTypes" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "creator" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "url" } },
          { kind: "Field", name: { kind: "Name", value: "label" } },
          { kind: "Field", name: { kind: "Name", value: "allPublicTeams" } },
          { kind: "Field", name: { kind: "Name", value: "enabled" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<WebhookFragment, unknown>;
export const WebhookConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "WebhookConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WebhookConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Webhook" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<WebhookConnectionFragment, unknown>;
export const WebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "WebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "webhook" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<WebhookPayloadFragment, unknown>;
export const WorkflowStateFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "WorkflowState" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowState" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "position" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "inheritedFrom" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "color" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<WorkflowStateFragment, unknown>;
export const WorkflowStateConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "WorkflowStateConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowState" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<WorkflowStateConnectionFragment, unknown>;
export const WorkflowStatePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "WorkflowStatePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStatePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "workflowState" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<WorkflowStatePayloadFragment, unknown>;
export const AdministrableTeamsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "administrableTeams" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "administrableTeams" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "filter" },
                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }],
            },
          },
        ],
      },
    },
    ...TeamConnectionFragmentDoc.definitions,
    ...TeamFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AdministrableTeamsQuery, AdministrableTeamsQueryVariables>;
export const AgentActivitiesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "agentActivities" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "agentActivities" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "filter" },
                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AgentActivityConnection" } }],
            },
          },
        ],
      },
    },
    ...AgentActivityConnectionFragmentDoc.definitions,
    ...AgentActivityFragmentDoc.definitions,
    ...AgentActivityActionContentFragmentDoc.definitions,
    ...AgentActivityElicitationContentFragmentDoc.definitions,
    ...AgentActivityErrorContentFragmentDoc.definitions,
    ...AgentActivityPromptContentFragmentDoc.definitions,
    ...AgentActivityResponseContentFragmentDoc.definitions,
    ...AgentActivityThoughtContentFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AgentActivitiesQuery, AgentActivitiesQueryVariables>;
export const AgentActivityDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "agentActivity" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "agentActivity" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AgentActivity" } }],
            },
          },
        ],
      },
    },
    ...AgentActivityFragmentDoc.definitions,
    ...AgentActivityActionContentFragmentDoc.definitions,
    ...AgentActivityElicitationContentFragmentDoc.definitions,
    ...AgentActivityErrorContentFragmentDoc.definitions,
    ...AgentActivityPromptContentFragmentDoc.definitions,
    ...AgentActivityResponseContentFragmentDoc.definitions,
    ...AgentActivityThoughtContentFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AgentActivityQuery, AgentActivityQueryVariables>;
export const AgentSessionDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "agentSession" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "agentSession" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AgentSession" } }],
            },
          },
        ],
      },
    },
    ...AgentSessionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AgentSessionQuery, AgentSessionQueryVariables>;
export const AgentSession_ActivitiesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "agentSession_activities" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "agentSession" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "activities" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AgentActivityConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...AgentActivityConnectionFragmentDoc.definitions,
    ...AgentActivityFragmentDoc.definitions,
    ...AgentActivityActionContentFragmentDoc.definitions,
    ...AgentActivityElicitationContentFragmentDoc.definitions,
    ...AgentActivityErrorContentFragmentDoc.definitions,
    ...AgentActivityPromptContentFragmentDoc.definitions,
    ...AgentActivityResponseContentFragmentDoc.definitions,
    ...AgentActivityThoughtContentFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AgentSession_ActivitiesQuery, AgentSession_ActivitiesQueryVariables>;
export const AgentSessionsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "agentSessions" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "agentSessions" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AgentSessionConnection" } }],
            },
          },
        ],
      },
    },
    ...AgentSessionConnectionFragmentDoc.definitions,
    ...AgentSessionFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AgentSessionsQuery, AgentSessionsQueryVariables>;
export const ApiKeysDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "apiKeys" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "apiKeys" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ApiKeyConnection" } }],
            },
          },
        ],
      },
    },
    ...ApiKeyConnectionFragmentDoc.definitions,
    ...ApiKeyFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ApiKeysQuery, ApiKeysQueryVariables>;
export const ApplicationInfoDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "applicationInfo" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "clientId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "applicationInfo" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "clientId" },
                value: { kind: "Variable", name: { kind: "Name", value: "clientId" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Application" } }],
            },
          },
        ],
      },
    },
    ...ApplicationFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ApplicationInfoQuery, ApplicationInfoQueryVariables>;
export const ApplicationWithAuthorizationDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "applicationWithAuthorization" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "actor" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "clientId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "scope" } },
          type: {
            kind: "NonNullType",
            type: {
              kind: "ListType",
              type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
            },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "applicationWithAuthorization" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "actor" },
                value: { kind: "Variable", name: { kind: "Name", value: "actor" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "clientId" },
                value: { kind: "Variable", name: { kind: "Name", value: "clientId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "redirectUri" },
                value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "scope" },
                value: { kind: "Variable", name: { kind: "Name", value: "scope" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAuthorizedApplication" } }],
            },
          },
        ],
      },
    },
    ...UserAuthorizedApplicationFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ApplicationWithAuthorizationQuery, ApplicationWithAuthorizationQueryVariables>;
export const AttachmentDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "attachment" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachment" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Attachment" } }],
            },
          },
        ],
      },
    },
    ...AttachmentFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AttachmentQuery, AttachmentQueryVariables>;
export const AttachmentIssueDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "attachmentIssue" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentIssue" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Issue" } }],
            },
          },
        ],
      },
    },
    ...IssueFragmentDoc.definitions,
    ...ReactionFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...ExternalEntityInfoFragmentDoc.definitions,
    ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
    ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
    ...ExternalEntitySlackMetadataFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AttachmentIssueQuery, AttachmentIssueQueryVariables>;
export const AttachmentIssue_AttachmentsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "attachmentIssue_attachments" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentIssue" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "attachments" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...AttachmentConnectionFragmentDoc.definitions,
    ...AttachmentFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AttachmentIssue_AttachmentsQuery, AttachmentIssue_AttachmentsQueryVariables>;
export const AttachmentIssue_BotActorDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "attachmentIssue_botActor" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentIssue" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "botActor" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...ActorBotFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AttachmentIssue_BotActorQuery, AttachmentIssue_BotActorQueryVariables>;
export const AttachmentIssue_ChildrenDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "attachmentIssue_children" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentIssue" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "children" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueConnectionFragmentDoc.definitions,
    ...IssueFragmentDoc.definitions,
    ...ReactionFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...ExternalEntityInfoFragmentDoc.definitions,
    ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
    ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
    ...ExternalEntitySlackMetadataFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AttachmentIssue_ChildrenQuery, AttachmentIssue_ChildrenQueryVariables>;
export const AttachmentIssue_CommentsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "attachmentIssue_comments" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentIssue" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "comments" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...CommentConnectionFragmentDoc.definitions,
    ...CommentFragmentDoc.definitions,
    ...ReactionFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...DocumentContentFragmentDoc.definitions,
    ...ExternalEntityInfoFragmentDoc.definitions,
    ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
    ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
    ...ExternalEntitySlackMetadataFragmentDoc.definitions,
    ...SyncedExternalThreadFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AttachmentIssue_CommentsQuery, AttachmentIssue_CommentsQueryVariables>;
export const AttachmentIssue_FormerAttachmentsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "attachmentIssue_formerAttachments" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentIssue" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "formerAttachments" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...AttachmentConnectionFragmentDoc.definitions,
    ...AttachmentFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AttachmentIssue_FormerAttachmentsQuery, AttachmentIssue_FormerAttachmentsQueryVariables>;
export const AttachmentIssue_FormerNeedsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "attachmentIssue_formerNeeds" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentIssue" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "formerNeeds" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...CustomerNeedConnectionFragmentDoc.definitions,
    ...CustomerNeedFragmentDoc.definitions,
    ...ProjectAttachmentFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AttachmentIssue_FormerNeedsQuery, AttachmentIssue_FormerNeedsQueryVariables>;
export const AttachmentIssue_HistoryDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "attachmentIssue_history" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentIssue" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "history" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueHistoryConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueHistoryConnectionFragmentDoc.definitions,
    ...IssueHistoryFragmentDoc.definitions,
    ...IssueRelationHistoryPayloadFragmentDoc.definitions,
    ...UserFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...IssueImportFragmentDoc.definitions,
    ...IssueLabelFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AttachmentIssue_HistoryQuery, AttachmentIssue_HistoryQueryVariables>;
export const AttachmentIssue_InverseRelationsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "attachmentIssue_inverseRelations" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentIssue" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "inverseRelations" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueRelationConnectionFragmentDoc.definitions,
    ...IssueRelationFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AttachmentIssue_InverseRelationsQuery, AttachmentIssue_InverseRelationsQueryVariables>;
export const AttachmentIssue_LabelsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "attachmentIssue_labels" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentIssue" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "labels" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueLabelConnectionFragmentDoc.definitions,
    ...IssueLabelFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AttachmentIssue_LabelsQuery, AttachmentIssue_LabelsQueryVariables>;
export const AttachmentIssue_NeedsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "attachmentIssue_needs" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentIssue" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "needs" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...CustomerNeedConnectionFragmentDoc.definitions,
    ...CustomerNeedFragmentDoc.definitions,
    ...ProjectAttachmentFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AttachmentIssue_NeedsQuery, AttachmentIssue_NeedsQueryVariables>;
export const AttachmentIssue_RelationsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "attachmentIssue_relations" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentIssue" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "relations" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueRelationConnectionFragmentDoc.definitions,
    ...IssueRelationFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AttachmentIssue_RelationsQuery, AttachmentIssue_RelationsQueryVariables>;
export const AttachmentIssue_SubscribersDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "attachmentIssue_subscribers" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentIssue" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "subscribers" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeDisabled" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...UserConnectionFragmentDoc.definitions,
    ...UserFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AttachmentIssue_SubscribersQuery, AttachmentIssue_SubscribersQueryVariables>;
export const AttachmentsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "attachments" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachments" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "filter" },
                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }],
            },
          },
        ],
      },
    },
    ...AttachmentConnectionFragmentDoc.definitions,
    ...AttachmentFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AttachmentsQuery, AttachmentsQueryVariables>;
export const AttachmentsForUrlDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "attachmentsForURL" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "url" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentsForURL" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "url" },
                value: { kind: "Variable", name: { kind: "Name", value: "url" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }],
            },
          },
        ],
      },
    },
    ...AttachmentConnectionFragmentDoc.definitions,
    ...AttachmentFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AttachmentsForUrlQuery, AttachmentsForUrlQueryVariables>;
export const AuditEntriesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "auditEntries" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "AuditEntryFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "auditEntries" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "filter" },
                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuditEntryConnection" } }],
            },
          },
        ],
      },
    },
    ...AuditEntryConnectionFragmentDoc.definitions,
    ...AuditEntryFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AuditEntriesQuery, AuditEntriesQueryVariables>;
export const AuditEntryTypesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "auditEntryTypes" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "auditEntryTypes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuditEntryType" } }],
            },
          },
        ],
      },
    },
    ...AuditEntryTypeFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AuditEntryTypesQuery, AuditEntryTypesQueryVariables>;
export const AuthenticationSessionsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "authenticationSessions" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "authenticationSessions" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthenticationSessionResponse" } }],
            },
          },
        ],
      },
    },
    ...AuthenticationSessionResponseFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AuthenticationSessionsQuery, AuthenticationSessionsQueryVariables>;
export const AvailableUsersDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "availableUsers" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "availableUsers" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthResolverResponse" } }],
            },
          },
        ],
      },
    },
    ...AuthResolverResponseFragmentDoc.definitions,
    ...AuthUserFragmentDoc.definitions,
    ...AuthOrganizationFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AvailableUsersQuery, AvailableUsersQueryVariables>;
export const CommentDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "comment" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "hash" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "comment" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "hash" },
                value: { kind: "Variable", name: { kind: "Name", value: "hash" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Comment" } }],
            },
          },
        ],
      },
    },
    ...CommentFragmentDoc.definitions,
    ...ReactionFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...DocumentContentFragmentDoc.definitions,
    ...ExternalEntityInfoFragmentDoc.definitions,
    ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
    ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
    ...ExternalEntitySlackMetadataFragmentDoc.definitions,
    ...SyncedExternalThreadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CommentQuery, CommentQueryVariables>;
export const Comment_BotActorDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "comment_botActor" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "hash" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "comment" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "hash" },
                value: { kind: "Variable", name: { kind: "Name", value: "hash" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "botActor" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...ActorBotFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Comment_BotActorQuery, Comment_BotActorQueryVariables>;
export const Comment_ChildrenDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "comment_children" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "hash" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "comment" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "hash" },
                value: { kind: "Variable", name: { kind: "Name", value: "hash" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "children" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...CommentConnectionFragmentDoc.definitions,
    ...CommentFragmentDoc.definitions,
    ...ReactionFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...DocumentContentFragmentDoc.definitions,
    ...ExternalEntityInfoFragmentDoc.definitions,
    ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
    ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
    ...ExternalEntitySlackMetadataFragmentDoc.definitions,
    ...SyncedExternalThreadFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Comment_ChildrenQuery, Comment_ChildrenQueryVariables>;
export const Comment_DocumentContentDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "comment_documentContent" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "hash" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "comment" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "hash" },
                value: { kind: "Variable", name: { kind: "Name", value: "hash" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "documentContent" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...DocumentContentFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Comment_DocumentContentQuery, Comment_DocumentContentQueryVariables>;
export const Comment_ExternalThreadDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "comment_externalThread" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "hash" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "comment" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "hash" },
                value: { kind: "Variable", name: { kind: "Name", value: "hash" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "externalThread" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SyncedExternalThread" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...SyncedExternalThreadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Comment_ExternalThreadQuery, Comment_ExternalThreadQueryVariables>;
export const CommentsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "comments" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "comments" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "filter" },
                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }],
            },
          },
        ],
      },
    },
    ...CommentConnectionFragmentDoc.definitions,
    ...CommentFragmentDoc.definitions,
    ...ReactionFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...DocumentContentFragmentDoc.definitions,
    ...ExternalEntityInfoFragmentDoc.definitions,
    ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
    ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
    ...ExternalEntitySlackMetadataFragmentDoc.definitions,
    ...SyncedExternalThreadFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CommentsQuery, CommentsQueryVariables>;
export const CustomViewDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "customView" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "customView" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomView" } }],
            },
          },
        ],
      },
    },
    ...CustomViewFragmentDoc.definitions,
    ...ViewPreferencesValuesFragmentDoc.definitions,
    ...ViewPreferencesFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CustomViewQuery, CustomViewQueryVariables>;
export const CustomView_InitiativesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "customView_initiatives" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "customView" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "initiatives" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...InitiativeConnectionFragmentDoc.definitions,
    ...InitiativeFragmentDoc.definitions,
    ...DocumentContentFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CustomView_InitiativesQuery, CustomView_InitiativesQueryVariables>;
export const CustomView_IssuesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "customView_issues" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeSubTeams" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "sort" } },
          type: {
            kind: "ListType",
            type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueSortInput" } } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "customView" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "issues" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeSubTeams" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeSubTeams" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "sort" },
                      value: { kind: "Variable", name: { kind: "Name", value: "sort" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueConnectionFragmentDoc.definitions,
    ...IssueFragmentDoc.definitions,
    ...ReactionFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...ExternalEntityInfoFragmentDoc.definitions,
    ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
    ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
    ...ExternalEntitySlackMetadataFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CustomView_IssuesQuery, CustomView_IssuesQueryVariables>;
export const CustomView_OrganizationViewPreferencesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "customView_organizationViewPreferences" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "customView" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "organizationViewPreferences" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferences" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...ViewPreferencesFragmentDoc.definitions,
    ...ViewPreferencesValuesFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  CustomView_OrganizationViewPreferencesQuery,
  CustomView_OrganizationViewPreferencesQueryVariables
>;
export const CustomView_OrganizationViewPreferences_PreferencesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "customView_organizationViewPreferences_preferences" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "customView" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "organizationViewPreferences" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "preferences" },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            { kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesValues" } },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...ViewPreferencesValuesFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  CustomView_OrganizationViewPreferences_PreferencesQuery,
  CustomView_OrganizationViewPreferences_PreferencesQueryVariables
>;
export const CustomView_ProjectsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "customView_projects" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeSubTeams" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "sort" } },
          type: {
            kind: "ListType",
            type: {
              kind: "NonNullType",
              type: { kind: "NamedType", name: { kind: "Name", value: "ProjectSortInput" } },
            },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "customView" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "projects" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeSubTeams" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeSubTeams" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "sort" },
                      value: { kind: "Variable", name: { kind: "Name", value: "sort" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...ProjectConnectionFragmentDoc.definitions,
    ...ProjectFragmentDoc.definitions,
    ...DocumentContentFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CustomView_ProjectsQuery, CustomView_ProjectsQueryVariables>;
export const CustomView_UserViewPreferencesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "customView_userViewPreferences" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "customView" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "userViewPreferences" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferences" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...ViewPreferencesFragmentDoc.definitions,
    ...ViewPreferencesValuesFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CustomView_UserViewPreferencesQuery, CustomView_UserViewPreferencesQueryVariables>;
export const CustomView_UserViewPreferences_PreferencesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "customView_userViewPreferences_preferences" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "customView" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "userViewPreferences" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "preferences" },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            { kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesValues" } },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...ViewPreferencesValuesFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  CustomView_UserViewPreferences_PreferencesQuery,
  CustomView_UserViewPreferences_PreferencesQueryVariables
>;
export const CustomView_ViewPreferencesValuesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "customView_viewPreferencesValues" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "customView" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "viewPreferencesValues" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesValues" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...ViewPreferencesValuesFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CustomView_ViewPreferencesValuesQuery, CustomView_ViewPreferencesValuesQueryVariables>;
export const CustomViewHasSubscribersDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "customViewHasSubscribers" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "customViewHasSubscribers" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "CustomViewHasSubscribersPayload" } },
              ],
            },
          },
        ],
      },
    },
    ...CustomViewHasSubscribersPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CustomViewHasSubscribersQuery, CustomViewHasSubscribersQueryVariables>;
export const CustomViewsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "customViews" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "CustomViewFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "sort" } },
          type: {
            kind: "ListType",
            type: {
              kind: "NonNullType",
              type: { kind: "NamedType", name: { kind: "Name", value: "CustomViewSortInput" } },
            },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "customViews" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "filter" },
                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "sort" },
                value: { kind: "Variable", name: { kind: "Name", value: "sort" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomViewConnection" } }],
            },
          },
        ],
      },
    },
    ...CustomViewConnectionFragmentDoc.definitions,
    ...CustomViewFragmentDoc.definitions,
    ...ViewPreferencesValuesFragmentDoc.definitions,
    ...ViewPreferencesFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CustomViewsQuery, CustomViewsQueryVariables>;
export const CustomerDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "customer" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "customer" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Customer" } }],
            },
          },
        ],
      },
    },
    ...CustomerFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CustomerQuery, CustomerQueryVariables>;
export const CustomerNeedDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "customerNeed" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "hash" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "customerNeed" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "hash" },
                value: { kind: "Variable", name: { kind: "Name", value: "hash" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeed" } }],
            },
          },
        ],
      },
    },
    ...CustomerNeedFragmentDoc.definitions,
    ...ProjectAttachmentFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CustomerNeedQuery, CustomerNeedQueryVariables>;
export const CustomerNeed_ProjectAttachmentDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "customerNeed_projectAttachment" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "hash" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "customerNeed" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "hash" },
                value: { kind: "Variable", name: { kind: "Name", value: "hash" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "projectAttachment" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectAttachment" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...ProjectAttachmentFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CustomerNeed_ProjectAttachmentQuery, CustomerNeed_ProjectAttachmentQueryVariables>;
export const CustomerNeedsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "customerNeeds" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "customerNeeds" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "filter" },
                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedConnection" } }],
            },
          },
        ],
      },
    },
    ...CustomerNeedConnectionFragmentDoc.definitions,
    ...CustomerNeedFragmentDoc.definitions,
    ...ProjectAttachmentFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CustomerNeedsQuery, CustomerNeedsQueryVariables>;
export const CustomerStatusDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "customerStatus" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "customerStatus" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerStatus" } }],
            },
          },
        ],
      },
    },
    ...CustomerStatusFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CustomerStatusQuery, CustomerStatusQueryVariables>;
export const CustomerStatusesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "customerStatuses" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "customerStatuses" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerStatusConnection" } }],
            },
          },
        ],
      },
    },
    ...CustomerStatusConnectionFragmentDoc.definitions,
    ...CustomerStatusFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CustomerStatusesQuery, CustomerStatusesQueryVariables>;
export const CustomerTierDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "customerTier" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "customerTier" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerTier" } }],
            },
          },
        ],
      },
    },
    ...CustomerTierFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CustomerTierQuery, CustomerTierQueryVariables>;
export const CustomerTiersDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "customerTiers" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "customerTiers" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerTierConnection" } }],
            },
          },
        ],
      },
    },
    ...CustomerTierConnectionFragmentDoc.definitions,
    ...CustomerTierFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CustomerTiersQuery, CustomerTiersQueryVariables>;
export const CustomersDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "customers" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "CustomerFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "sorts" } },
          type: {
            kind: "ListType",
            type: {
              kind: "NonNullType",
              type: { kind: "NamedType", name: { kind: "Name", value: "CustomerSortInput" } },
            },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "customers" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "filter" },
                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "sorts" },
                value: { kind: "Variable", name: { kind: "Name", value: "sorts" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerConnection" } }],
            },
          },
        ],
      },
    },
    ...CustomerConnectionFragmentDoc.definitions,
    ...CustomerFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CustomersQuery, CustomersQueryVariables>;
export const CycleDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "cycle" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "cycle" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Cycle" } }],
            },
          },
        ],
      },
    },
    ...CycleFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CycleQuery, CycleQueryVariables>;
export const Cycle_IssuesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "cycle_issues" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "cycle" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "issues" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueConnectionFragmentDoc.definitions,
    ...IssueFragmentDoc.definitions,
    ...ReactionFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...ExternalEntityInfoFragmentDoc.definitions,
    ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
    ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
    ...ExternalEntitySlackMetadataFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Cycle_IssuesQuery, Cycle_IssuesQueryVariables>;
export const Cycle_UncompletedIssuesUponCloseDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "cycle_uncompletedIssuesUponClose" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "cycle" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "uncompletedIssuesUponClose" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueConnectionFragmentDoc.definitions,
    ...IssueFragmentDoc.definitions,
    ...ReactionFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...ExternalEntityInfoFragmentDoc.definitions,
    ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
    ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
    ...ExternalEntitySlackMetadataFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Cycle_UncompletedIssuesUponCloseQuery, Cycle_UncompletedIssuesUponCloseQueryVariables>;
export const CyclesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "cycles" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "CycleFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "cycles" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "filter" },
                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CycleConnection" } }],
            },
          },
        ],
      },
    },
    ...CycleConnectionFragmentDoc.definitions,
    ...CycleFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CyclesQuery, CyclesQueryVariables>;
export const DocumentDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "document" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "document" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Document" } }],
            },
          },
        ],
      },
    },
    ...DocumentFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DocumentQuery, DocumentQueryVariables>;
export const Document_CommentsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "document_comments" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "document" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "comments" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...CommentConnectionFragmentDoc.definitions,
    ...CommentFragmentDoc.definitions,
    ...ReactionFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...DocumentContentFragmentDoc.definitions,
    ...ExternalEntityInfoFragmentDoc.definitions,
    ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
    ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
    ...ExternalEntitySlackMetadataFragmentDoc.definitions,
    ...SyncedExternalThreadFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Document_CommentsQuery, Document_CommentsQueryVariables>;
export const DocumentContentHistoryDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "documentContentHistory" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "documentContentHistory" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContentHistoryPayload" } }],
            },
          },
        ],
      },
    },
    ...DocumentContentHistoryPayloadFragmentDoc.definitions,
    ...DocumentContentHistoryTypeFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DocumentContentHistoryQuery, DocumentContentHistoryQueryVariables>;
export const DocumentsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "documents" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "DocumentFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "documents" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "filter" },
                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentConnection" } }],
            },
          },
        ],
      },
    },
    ...DocumentConnectionFragmentDoc.definitions,
    ...DocumentFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DocumentsQuery, DocumentsQueryVariables>;
export const EmailIntakeAddressDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "emailIntakeAddress" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "emailIntakeAddress" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmailIntakeAddress" } }],
            },
          },
        ],
      },
    },
    ...EmailIntakeAddressFragmentDoc.definitions,
    ...SesDomainIdentityFragmentDoc.definitions,
    ...SesDomainIdentityDnsRecordFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<EmailIntakeAddressQuery, EmailIntakeAddressQueryVariables>;
export const EmailIntakeAddress_SesDomainIdentityDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "emailIntakeAddress_sesDomainIdentity" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "emailIntakeAddress" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "sesDomainIdentity" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SesDomainIdentity" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...SesDomainIdentityFragmentDoc.definitions,
    ...SesDomainIdentityDnsRecordFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  EmailIntakeAddress_SesDomainIdentityQuery,
  EmailIntakeAddress_SesDomainIdentityQueryVariables
>;
export const EmojiDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "emoji" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "emoji" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Emoji" } }],
            },
          },
        ],
      },
    },
    ...EmojiFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<EmojiQuery, EmojiQueryVariables>;
export const EmojisDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "emojis" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "emojis" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmojiConnection" } }],
            },
          },
        ],
      },
    },
    ...EmojiConnectionFragmentDoc.definitions,
    ...EmojiFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<EmojisQuery, EmojisQueryVariables>;
export const EntityExternalLinkDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "entityExternalLink" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "entityExternalLink" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EntityExternalLink" } }],
            },
          },
        ],
      },
    },
    ...EntityExternalLinkFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<EntityExternalLinkQuery, EntityExternalLinkQueryVariables>;
export const ExternalUserDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "externalUser" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "externalUser" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ExternalUser" } }],
            },
          },
        ],
      },
    },
    ...ExternalUserFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ExternalUserQuery, ExternalUserQueryVariables>;
export const ExternalUsersDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "externalUsers" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "externalUsers" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ExternalUserConnection" } }],
            },
          },
        ],
      },
    },
    ...ExternalUserConnectionFragmentDoc.definitions,
    ...ExternalUserFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ExternalUsersQuery, ExternalUsersQueryVariables>;
export const FavoriteDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "favorite" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "favorite" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Favorite" } }],
            },
          },
        ],
      },
    },
    ...FavoriteFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<FavoriteQuery, FavoriteQueryVariables>;
export const Favorite_ChildrenDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "favorite_children" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "favorite" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "children" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FavoriteConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...FavoriteConnectionFragmentDoc.definitions,
    ...FavoriteFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Favorite_ChildrenQuery, Favorite_ChildrenQueryVariables>;
export const FavoritesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "favorites" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "favorites" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FavoriteConnection" } }],
            },
          },
        ],
      },
    },
    ...FavoriteConnectionFragmentDoc.definitions,
    ...FavoriteFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<FavoritesQuery, FavoritesQueryVariables>;
export const InitiativeDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "initiative" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "initiative" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Initiative" } }],
            },
          },
        ],
      },
    },
    ...InitiativeFragmentDoc.definitions,
    ...DocumentContentFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<InitiativeQuery, InitiativeQueryVariables>;
export const Initiative_DocumentContentDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "initiative_documentContent" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "initiative" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "documentContent" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...DocumentContentFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Initiative_DocumentContentQuery, Initiative_DocumentContentQueryVariables>;
export const Initiative_DocumentsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "initiative_documents" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "DocumentFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "initiative" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "documents" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...DocumentConnectionFragmentDoc.definitions,
    ...DocumentFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Initiative_DocumentsQuery, Initiative_DocumentsQueryVariables>;
export const Initiative_HistoryDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "initiative_history" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "initiative" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "history" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      { kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeHistoryConnection" } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...InitiativeHistoryConnectionFragmentDoc.definitions,
    ...InitiativeHistoryFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Initiative_HistoryQuery, Initiative_HistoryQueryVariables>;
export const Initiative_LinksDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "initiative_links" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "initiative" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "links" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      { kind: "FragmentSpread", name: { kind: "Name", value: "EntityExternalLinkConnection" } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...EntityExternalLinkConnectionFragmentDoc.definitions,
    ...EntityExternalLinkFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Initiative_LinksQuery, Initiative_LinksQueryVariables>;
export const Initiative_ProjectsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "initiative_projects" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeSubInitiatives" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "sort" } },
          type: {
            kind: "ListType",
            type: {
              kind: "NonNullType",
              type: { kind: "NamedType", name: { kind: "Name", value: "ProjectSortInput" } },
            },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "initiative" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "projects" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeSubInitiatives" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeSubInitiatives" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "sort" },
                      value: { kind: "Variable", name: { kind: "Name", value: "sort" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...ProjectConnectionFragmentDoc.definitions,
    ...ProjectFragmentDoc.definitions,
    ...DocumentContentFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Initiative_ProjectsQuery, Initiative_ProjectsQueryVariables>;
export const Initiative_SubInitiativesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "initiative_subInitiatives" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "sort" } },
          type: {
            kind: "ListType",
            type: {
              kind: "NonNullType",
              type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeSortInput" } },
            },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "initiative" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "subInitiatives" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "sort" },
                      value: { kind: "Variable", name: { kind: "Name", value: "sort" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...InitiativeConnectionFragmentDoc.definitions,
    ...InitiativeFragmentDoc.definitions,
    ...DocumentContentFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Initiative_SubInitiativesQuery, Initiative_SubInitiativesQueryVariables>;
export const InitiativeRelationDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "initiativeRelation" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "initiativeRelation" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectRelation" } }],
            },
          },
        ],
      },
    },
    ...ProjectRelationFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<InitiativeRelationQuery, InitiativeRelationQueryVariables>;
export const InitiativeRelationsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "initiativeRelations" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "initiativeRelations" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeRelationConnection" } }],
            },
          },
        ],
      },
    },
    ...InitiativeRelationConnectionFragmentDoc.definitions,
    ...InitiativeRelationFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<InitiativeRelationsQuery, InitiativeRelationsQueryVariables>;
export const InitiativeToProjectDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "initiativeToProject" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "initiativeToProject" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeToProject" } }],
            },
          },
        ],
      },
    },
    ...InitiativeToProjectFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<InitiativeToProjectQuery, InitiativeToProjectQueryVariables>;
export const InitiativeToProjectsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "initiativeToProjects" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "initiativeToProjects" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeToProjectConnection" } }],
            },
          },
        ],
      },
    },
    ...InitiativeToProjectConnectionFragmentDoc.definitions,
    ...InitiativeToProjectFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<InitiativeToProjectsQuery, InitiativeToProjectsQueryVariables>;
export const InitiativeUpdateDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "initiativeUpdate" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "initiativeUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeUpdate" } }],
            },
          },
        ],
      },
    },
    ...InitiativeUpdateFragmentDoc.definitions,
    ...ReactionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<InitiativeUpdateQuery, InitiativeUpdateQueryVariables>;
export const InitiativeUpdate_CommentsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "initiativeUpdate_comments" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "initiativeUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "comments" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...CommentConnectionFragmentDoc.definitions,
    ...CommentFragmentDoc.definitions,
    ...ReactionFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...DocumentContentFragmentDoc.definitions,
    ...ExternalEntityInfoFragmentDoc.definitions,
    ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
    ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
    ...ExternalEntitySlackMetadataFragmentDoc.definitions,
    ...SyncedExternalThreadFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<InitiativeUpdate_CommentsQuery, InitiativeUpdate_CommentsQueryVariables>;
export const InitiativeUpdatesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "initiativeUpdates" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdateFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "initiativeUpdates" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "filter" },
                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeUpdateConnection" } }],
            },
          },
        ],
      },
    },
    ...InitiativeUpdateConnectionFragmentDoc.definitions,
    ...InitiativeUpdateFragmentDoc.definitions,
    ...ReactionFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<InitiativeUpdatesQuery, InitiativeUpdatesQueryVariables>;
export const InitiativesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "initiatives" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "sort" } },
          type: {
            kind: "ListType",
            type: {
              kind: "NonNullType",
              type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeSortInput" } },
            },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "initiatives" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "filter" },
                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "sort" },
                value: { kind: "Variable", name: { kind: "Name", value: "sort" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeConnection" } }],
            },
          },
        ],
      },
    },
    ...InitiativeConnectionFragmentDoc.definitions,
    ...InitiativeFragmentDoc.definitions,
    ...DocumentContentFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<InitiativesQuery, InitiativesQueryVariables>;
export const IntegrationDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "integration" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integration" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Integration" } }],
            },
          },
        ],
      },
    },
    ...IntegrationFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationQuery, IntegrationQueryVariables>;
export const IntegrationHasScopesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "integrationHasScopes" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "integrationId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "scopes" } },
          type: {
            kind: "NonNullType",
            type: {
              kind: "ListType",
              type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
            },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationHasScopes" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "integrationId" },
                value: { kind: "Variable", name: { kind: "Name", value: "integrationId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "scopes" },
                value: { kind: "Variable", name: { kind: "Name", value: "scopes" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationHasScopesPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationHasScopesPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationHasScopesQuery, IntegrationHasScopesQueryVariables>;
export const IntegrationTemplateDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "integrationTemplate" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationTemplate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationTemplate" } }],
            },
          },
        ],
      },
    },
    ...IntegrationTemplateFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationTemplateQuery, IntegrationTemplateQueryVariables>;
export const IntegrationTemplatesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "integrationTemplates" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationTemplates" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationTemplateConnection" } }],
            },
          },
        ],
      },
    },
    ...IntegrationTemplateConnectionFragmentDoc.definitions,
    ...IntegrationTemplateFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationTemplatesQuery, IntegrationTemplatesQueryVariables>;
export const IntegrationsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "integrations" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrations" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationConnection" } }],
            },
          },
        ],
      },
    },
    ...IntegrationConnectionFragmentDoc.definitions,
    ...IntegrationFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationsQuery, IntegrationsQueryVariables>;
export const IntegrationsSettingsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "integrationsSettings" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationsSettings" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationsSettings" } }],
            },
          },
        ],
      },
    },
    ...IntegrationsSettingsFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationsSettingsQuery, IntegrationsSettingsQueryVariables>;
export const IssueDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issue" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Issue" } }],
            },
          },
        ],
      },
    },
    ...IssueFragmentDoc.definitions,
    ...ReactionFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...ExternalEntityInfoFragmentDoc.definitions,
    ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
    ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
    ...ExternalEntitySlackMetadataFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueQuery, IssueQueryVariables>;
export const Issue_AttachmentsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issue_attachments" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "attachments" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...AttachmentConnectionFragmentDoc.definitions,
    ...AttachmentFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Issue_AttachmentsQuery, Issue_AttachmentsQueryVariables>;
export const Issue_BotActorDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issue_botActor" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "botActor" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...ActorBotFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Issue_BotActorQuery, Issue_BotActorQueryVariables>;
export const Issue_ChildrenDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issue_children" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "children" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueConnectionFragmentDoc.definitions,
    ...IssueFragmentDoc.definitions,
    ...ReactionFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...ExternalEntityInfoFragmentDoc.definitions,
    ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
    ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
    ...ExternalEntitySlackMetadataFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Issue_ChildrenQuery, Issue_ChildrenQueryVariables>;
export const Issue_CommentsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issue_comments" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "comments" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...CommentConnectionFragmentDoc.definitions,
    ...CommentFragmentDoc.definitions,
    ...ReactionFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...DocumentContentFragmentDoc.definitions,
    ...ExternalEntityInfoFragmentDoc.definitions,
    ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
    ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
    ...ExternalEntitySlackMetadataFragmentDoc.definitions,
    ...SyncedExternalThreadFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Issue_CommentsQuery, Issue_CommentsQueryVariables>;
export const Issue_FormerAttachmentsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issue_formerAttachments" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "formerAttachments" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...AttachmentConnectionFragmentDoc.definitions,
    ...AttachmentFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Issue_FormerAttachmentsQuery, Issue_FormerAttachmentsQueryVariables>;
export const Issue_FormerNeedsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issue_formerNeeds" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "formerNeeds" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...CustomerNeedConnectionFragmentDoc.definitions,
    ...CustomerNeedFragmentDoc.definitions,
    ...ProjectAttachmentFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Issue_FormerNeedsQuery, Issue_FormerNeedsQueryVariables>;
export const Issue_HistoryDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issue_history" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "history" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueHistoryConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueHistoryConnectionFragmentDoc.definitions,
    ...IssueHistoryFragmentDoc.definitions,
    ...IssueRelationHistoryPayloadFragmentDoc.definitions,
    ...UserFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...IssueImportFragmentDoc.definitions,
    ...IssueLabelFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Issue_HistoryQuery, Issue_HistoryQueryVariables>;
export const Issue_InverseRelationsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issue_inverseRelations" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "inverseRelations" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueRelationConnectionFragmentDoc.definitions,
    ...IssueRelationFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Issue_InverseRelationsQuery, Issue_InverseRelationsQueryVariables>;
export const Issue_LabelsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issue_labels" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "labels" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueLabelConnectionFragmentDoc.definitions,
    ...IssueLabelFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Issue_LabelsQuery, Issue_LabelsQueryVariables>;
export const Issue_NeedsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issue_needs" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "needs" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...CustomerNeedConnectionFragmentDoc.definitions,
    ...CustomerNeedFragmentDoc.definitions,
    ...ProjectAttachmentFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Issue_NeedsQuery, Issue_NeedsQueryVariables>;
export const Issue_RelationsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issue_relations" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "relations" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueRelationConnectionFragmentDoc.definitions,
    ...IssueRelationFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Issue_RelationsQuery, Issue_RelationsQueryVariables>;
export const Issue_SubscribersDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issue_subscribers" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "subscribers" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeDisabled" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...UserConnectionFragmentDoc.definitions,
    ...UserFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Issue_SubscribersQuery, Issue_SubscribersQueryVariables>;
export const IssueFigmaFileKeySearchDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issueFigmaFileKeySearch" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "fileKey" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueFigmaFileKeySearch" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "fileKey" },
                value: { kind: "Variable", name: { kind: "Name", value: "fileKey" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
            },
          },
        ],
      },
    },
    ...IssueConnectionFragmentDoc.definitions,
    ...IssueFragmentDoc.definitions,
    ...ReactionFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...ExternalEntityInfoFragmentDoc.definitions,
    ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
    ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
    ...ExternalEntitySlackMetadataFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueFigmaFileKeySearchQuery, IssueFigmaFileKeySearchQueryVariables>;
export const IssueFilterSuggestionDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issueFilterSuggestion" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "projectId" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "prompt" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueFilterSuggestion" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "projectId" },
                value: { kind: "Variable", name: { kind: "Name", value: "projectId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "prompt" },
                value: { kind: "Variable", name: { kind: "Name", value: "prompt" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueFilterSuggestionPayload" } }],
            },
          },
        ],
      },
    },
    ...IssueFilterSuggestionPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueFilterSuggestionQuery, IssueFilterSuggestionQueryVariables>;
export const IssueImportCheckCsvDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issueImportCheckCSV" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "csvUrl" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "service" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueImportCheckCSV" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "csvUrl" },
                value: { kind: "Variable", name: { kind: "Name", value: "csvUrl" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "service" },
                value: { kind: "Variable", name: { kind: "Name", value: "service" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportCheckPayload" } }],
            },
          },
        ],
      },
    },
    ...IssueImportCheckPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueImportCheckCsvQuery, IssueImportCheckCsvQueryVariables>;
export const IssueImportCheckSyncDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issueImportCheckSync" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueImportCheckSync" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "issueImportId" },
                value: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportSyncCheckPayload" } }],
            },
          },
        ],
      },
    },
    ...IssueImportSyncCheckPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueImportCheckSyncQuery, IssueImportCheckSyncQueryVariables>;
export const IssueImportJqlCheckDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issueImportJqlCheck" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "jiraEmail" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "jiraHostname" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "jiraProject" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "jiraToken" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "jql" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueImportJqlCheck" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "jiraEmail" },
                value: { kind: "Variable", name: { kind: "Name", value: "jiraEmail" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "jiraHostname" },
                value: { kind: "Variable", name: { kind: "Name", value: "jiraHostname" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "jiraProject" },
                value: { kind: "Variable", name: { kind: "Name", value: "jiraProject" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "jiraToken" },
                value: { kind: "Variable", name: { kind: "Name", value: "jiraToken" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "jql" },
                value: { kind: "Variable", name: { kind: "Name", value: "jql" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportJqlCheckPayload" } }],
            },
          },
        ],
      },
    },
    ...IssueImportJqlCheckPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueImportJqlCheckQuery, IssueImportJqlCheckQueryVariables>;
export const IssueLabelDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issueLabel" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueLabel" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabel" } }],
            },
          },
        ],
      },
    },
    ...IssueLabelFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueLabelQuery, IssueLabelQueryVariables>;
export const IssueLabel_ChildrenDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issueLabel_children" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueLabel" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "children" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueLabelConnectionFragmentDoc.definitions,
    ...IssueLabelFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueLabel_ChildrenQuery, IssueLabel_ChildrenQueryVariables>;
export const IssueLabel_IssuesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issueLabel_issues" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueLabel" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "issues" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueConnectionFragmentDoc.definitions,
    ...IssueFragmentDoc.definitions,
    ...ReactionFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...ExternalEntityInfoFragmentDoc.definitions,
    ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
    ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
    ...ExternalEntitySlackMetadataFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueLabel_IssuesQuery, IssueLabel_IssuesQueryVariables>;
export const IssueLabelsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issueLabels" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueLabels" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "filter" },
                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }],
            },
          },
        ],
      },
    },
    ...IssueLabelConnectionFragmentDoc.definitions,
    ...IssueLabelFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueLabelsQuery, IssueLabelsQueryVariables>;
export const IssuePriorityValuesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issuePriorityValues" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issuePriorityValues" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePriorityValue" } }],
            },
          },
        ],
      },
    },
    ...IssuePriorityValueFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssuePriorityValuesQuery, IssuePriorityValuesQueryVariables>;
export const IssueRelationDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issueRelation" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueRelation" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelation" } }],
            },
          },
        ],
      },
    },
    ...IssueRelationFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueRelationQuery, IssueRelationQueryVariables>;
export const IssueRelationsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issueRelations" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueRelations" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }],
            },
          },
        ],
      },
    },
    ...IssueRelationConnectionFragmentDoc.definitions,
    ...IssueRelationFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueRelationsQuery, IssueRelationsQueryVariables>;
export const IssueSearchDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issueSearch" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "query" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueSearch" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "filter" },
                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "query" },
                value: { kind: "Variable", name: { kind: "Name", value: "query" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
            },
          },
        ],
      },
    },
    ...IssueConnectionFragmentDoc.definitions,
    ...IssueFragmentDoc.definitions,
    ...ReactionFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...ExternalEntityInfoFragmentDoc.definitions,
    ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
    ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
    ...ExternalEntitySlackMetadataFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueSearchQuery, IssueSearchQueryVariables>;
export const IssueTitleSuggestionFromCustomerRequestDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issueTitleSuggestionFromCustomerRequest" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "request" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueTitleSuggestionFromCustomerRequest" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "request" },
                value: { kind: "Variable", name: { kind: "Name", value: "request" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "FragmentSpread",
                  name: { kind: "Name", value: "IssueTitleSuggestionFromCustomerRequestPayload" },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueTitleSuggestionFromCustomerRequestPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  IssueTitleSuggestionFromCustomerRequestQuery,
  IssueTitleSuggestionFromCustomerRequestQueryVariables
>;
export const IssueVcsBranchSearchDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issueVcsBranchSearch" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueVcsBranchSearch" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "branchName" },
                value: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Issue" } }],
            },
          },
        ],
      },
    },
    ...IssueFragmentDoc.definitions,
    ...ReactionFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...ExternalEntityInfoFragmentDoc.definitions,
    ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
    ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
    ...ExternalEntitySlackMetadataFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueVcsBranchSearchQuery, IssueVcsBranchSearchQueryVariables>;
export const IssueVcsBranchSearch_AttachmentsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issueVcsBranchSearch_attachments" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueVcsBranchSearch" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "branchName" },
                value: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "attachments" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...AttachmentConnectionFragmentDoc.definitions,
    ...AttachmentFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueVcsBranchSearch_AttachmentsQuery, IssueVcsBranchSearch_AttachmentsQueryVariables>;
export const IssueVcsBranchSearch_BotActorDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issueVcsBranchSearch_botActor" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueVcsBranchSearch" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "branchName" },
                value: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "botActor" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...ActorBotFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueVcsBranchSearch_BotActorQuery, IssueVcsBranchSearch_BotActorQueryVariables>;
export const IssueVcsBranchSearch_ChildrenDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issueVcsBranchSearch_children" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueVcsBranchSearch" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "branchName" },
                value: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "children" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueConnectionFragmentDoc.definitions,
    ...IssueFragmentDoc.definitions,
    ...ReactionFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...ExternalEntityInfoFragmentDoc.definitions,
    ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
    ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
    ...ExternalEntitySlackMetadataFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueVcsBranchSearch_ChildrenQuery, IssueVcsBranchSearch_ChildrenQueryVariables>;
export const IssueVcsBranchSearch_CommentsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issueVcsBranchSearch_comments" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueVcsBranchSearch" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "branchName" },
                value: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "comments" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...CommentConnectionFragmentDoc.definitions,
    ...CommentFragmentDoc.definitions,
    ...ReactionFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...DocumentContentFragmentDoc.definitions,
    ...ExternalEntityInfoFragmentDoc.definitions,
    ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
    ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
    ...ExternalEntitySlackMetadataFragmentDoc.definitions,
    ...SyncedExternalThreadFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueVcsBranchSearch_CommentsQuery, IssueVcsBranchSearch_CommentsQueryVariables>;
export const IssueVcsBranchSearch_FormerAttachmentsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issueVcsBranchSearch_formerAttachments" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueVcsBranchSearch" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "branchName" },
                value: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "formerAttachments" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...AttachmentConnectionFragmentDoc.definitions,
    ...AttachmentFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  IssueVcsBranchSearch_FormerAttachmentsQuery,
  IssueVcsBranchSearch_FormerAttachmentsQueryVariables
>;
export const IssueVcsBranchSearch_FormerNeedsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issueVcsBranchSearch_formerNeeds" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueVcsBranchSearch" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "branchName" },
                value: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "formerNeeds" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...CustomerNeedConnectionFragmentDoc.definitions,
    ...CustomerNeedFragmentDoc.definitions,
    ...ProjectAttachmentFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueVcsBranchSearch_FormerNeedsQuery, IssueVcsBranchSearch_FormerNeedsQueryVariables>;
export const IssueVcsBranchSearch_HistoryDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issueVcsBranchSearch_history" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueVcsBranchSearch" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "branchName" },
                value: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "history" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueHistoryConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueHistoryConnectionFragmentDoc.definitions,
    ...IssueHistoryFragmentDoc.definitions,
    ...IssueRelationHistoryPayloadFragmentDoc.definitions,
    ...UserFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...IssueImportFragmentDoc.definitions,
    ...IssueLabelFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueVcsBranchSearch_HistoryQuery, IssueVcsBranchSearch_HistoryQueryVariables>;
export const IssueVcsBranchSearch_InverseRelationsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issueVcsBranchSearch_inverseRelations" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueVcsBranchSearch" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "branchName" },
                value: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "inverseRelations" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueRelationConnectionFragmentDoc.definitions,
    ...IssueRelationFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  IssueVcsBranchSearch_InverseRelationsQuery,
  IssueVcsBranchSearch_InverseRelationsQueryVariables
>;
export const IssueVcsBranchSearch_LabelsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issueVcsBranchSearch_labels" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueVcsBranchSearch" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "branchName" },
                value: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "labels" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueLabelConnectionFragmentDoc.definitions,
    ...IssueLabelFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueVcsBranchSearch_LabelsQuery, IssueVcsBranchSearch_LabelsQueryVariables>;
export const IssueVcsBranchSearch_NeedsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issueVcsBranchSearch_needs" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueVcsBranchSearch" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "branchName" },
                value: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "needs" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...CustomerNeedConnectionFragmentDoc.definitions,
    ...CustomerNeedFragmentDoc.definitions,
    ...ProjectAttachmentFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueVcsBranchSearch_NeedsQuery, IssueVcsBranchSearch_NeedsQueryVariables>;
export const IssueVcsBranchSearch_RelationsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issueVcsBranchSearch_relations" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueVcsBranchSearch" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "branchName" },
                value: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "relations" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueRelationConnectionFragmentDoc.definitions,
    ...IssueRelationFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueVcsBranchSearch_RelationsQuery, IssueVcsBranchSearch_RelationsQueryVariables>;
export const IssueVcsBranchSearch_SubscribersDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issueVcsBranchSearch_subscribers" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueVcsBranchSearch" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "branchName" },
                value: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "subscribers" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeDisabled" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...UserConnectionFragmentDoc.definitions,
    ...UserFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueVcsBranchSearch_SubscribersQuery, IssueVcsBranchSearch_SubscribersQueryVariables>;
export const IssuesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issues" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "sort" } },
          type: {
            kind: "ListType",
            type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueSortInput" } } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issues" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "filter" },
                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "sort" },
                value: { kind: "Variable", name: { kind: "Name", value: "sort" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
            },
          },
        ],
      },
    },
    ...IssueConnectionFragmentDoc.definitions,
    ...IssueFragmentDoc.definitions,
    ...ReactionFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...ExternalEntityInfoFragmentDoc.definitions,
    ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
    ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
    ...ExternalEntitySlackMetadataFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssuesQuery, IssuesQueryVariables>;
export const NotificationDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "notification" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "notification" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Notification" } }],
            },
          },
        ],
      },
    },
    ...NotificationFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...CustomerNeedNotificationFragmentDoc.definitions,
    ...CustomerNotificationFragmentDoc.definitions,
    ...DocumentNotificationFragmentDoc.definitions,
    ...InitiativeNotificationFragmentDoc.definitions,
    ...IssueNotificationFragmentDoc.definitions,
    ...NotificationSubscriptionFragmentDoc.definitions,
    ...OauthClientApprovalNotificationFragmentDoc.definitions,
    ...OauthClientApprovalFragmentDoc.definitions,
    ...PostNotificationFragmentDoc.definitions,
    ...ProjectNotificationFragmentDoc.definitions,
    ...PullRequestNotificationFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<NotificationQuery, NotificationQueryVariables>;
export const NotificationSubscriptionDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "notificationSubscription" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "notificationSubscription" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscription" } }],
            },
          },
        ],
      },
    },
    ...NotificationSubscriptionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<NotificationSubscriptionQuery, NotificationSubscriptionQueryVariables>;
export const NotificationSubscriptionsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "notificationSubscriptions" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "notificationSubscriptions" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscriptionConnection" } },
              ],
            },
          },
        ],
      },
    },
    ...NotificationSubscriptionConnectionFragmentDoc.definitions,
    ...NotificationSubscriptionFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<NotificationSubscriptionsQuery, NotificationSubscriptionsQueryVariables>;
export const NotificationsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "notifications" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "NotificationFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "notifications" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "filter" },
                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationConnection" } }],
            },
          },
        ],
      },
    },
    ...NotificationConnectionFragmentDoc.definitions,
    ...NotificationFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...CustomerNeedNotificationFragmentDoc.definitions,
    ...CustomerNotificationFragmentDoc.definitions,
    ...DocumentNotificationFragmentDoc.definitions,
    ...InitiativeNotificationFragmentDoc.definitions,
    ...IssueNotificationFragmentDoc.definitions,
    ...NotificationSubscriptionFragmentDoc.definitions,
    ...OauthClientApprovalNotificationFragmentDoc.definitions,
    ...OauthClientApprovalFragmentDoc.definitions,
    ...PostNotificationFragmentDoc.definitions,
    ...ProjectNotificationFragmentDoc.definitions,
    ...PullRequestNotificationFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<NotificationsQuery, NotificationsQueryVariables>;
export const OrganizationDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "organization" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "organization" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Organization" } }],
            },
          },
        ],
      },
    },
    ...OrganizationFragmentDoc.definitions,
    ...OrganizationIpRestrictionFragmentDoc.definitions,
    ...ProjectStatusFragmentDoc.definitions,
    ...PaidSubscriptionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<OrganizationQuery, OrganizationQueryVariables>;
export const Organization_IntegrationsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "organization_integrations" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "organization" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "integrations" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IntegrationConnectionFragmentDoc.definitions,
    ...IntegrationFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Organization_IntegrationsQuery, Organization_IntegrationsQueryVariables>;
export const Organization_LabelsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "organization_labels" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "organization" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "labels" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueLabelConnectionFragmentDoc.definitions,
    ...IssueLabelFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Organization_LabelsQuery, Organization_LabelsQueryVariables>;
export const Organization_ProjectLabelsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "organization_projectLabels" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "ProjectLabelFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "organization" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "projectLabels" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLabelConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...ProjectLabelConnectionFragmentDoc.definitions,
    ...ProjectLabelFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Organization_ProjectLabelsQuery, Organization_ProjectLabelsQueryVariables>;
export const Organization_SubscriptionDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "organization_subscription" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "organization" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "subscription" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PaidSubscription" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...PaidSubscriptionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Organization_SubscriptionQuery, Organization_SubscriptionQueryVariables>;
export const Organization_TeamsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "organization_teams" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "organization" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "teams" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...TeamConnectionFragmentDoc.definitions,
    ...TeamFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Organization_TeamsQuery, Organization_TeamsQueryVariables>;
export const Organization_TemplatesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "organization_templates" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "NullableTemplateFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "organization" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "templates" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TemplateConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...TemplateConnectionFragmentDoc.definitions,
    ...TemplateFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Organization_TemplatesQuery, Organization_TemplatesQueryVariables>;
export const Organization_UsersDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "organization_users" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "organization" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "users" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeDisabled" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...UserConnectionFragmentDoc.definitions,
    ...UserFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Organization_UsersQuery, Organization_UsersQueryVariables>;
export const OrganizationExistsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "organizationExists" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "urlKey" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "organizationExists" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "urlKey" },
                value: { kind: "Variable", name: { kind: "Name", value: "urlKey" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationExistsPayload" } }],
            },
          },
        ],
      },
    },
    ...OrganizationExistsPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<OrganizationExistsQuery, OrganizationExistsQueryVariables>;
export const OrganizationInviteDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "organizationInvite" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "organizationInvite" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInvite" } }],
            },
          },
        ],
      },
    },
    ...OrganizationInviteFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<OrganizationInviteQuery, OrganizationInviteQueryVariables>;
export const OrganizationInvitesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "organizationInvites" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "organizationInvites" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInviteConnection" } }],
            },
          },
        ],
      },
    },
    ...OrganizationInviteConnectionFragmentDoc.definitions,
    ...OrganizationInviteFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<OrganizationInvitesQuery, OrganizationInvitesQueryVariables>;
export const ProjectDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "project" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Project" } }],
            },
          },
        ],
      },
    },
    ...ProjectFragmentDoc.definitions,
    ...DocumentContentFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ProjectQuery, ProjectQueryVariables>;
export const Project_CommentsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "project_comments" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "comments" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...CommentConnectionFragmentDoc.definitions,
    ...CommentFragmentDoc.definitions,
    ...ReactionFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...DocumentContentFragmentDoc.definitions,
    ...ExternalEntityInfoFragmentDoc.definitions,
    ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
    ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
    ...ExternalEntitySlackMetadataFragmentDoc.definitions,
    ...SyncedExternalThreadFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Project_CommentsQuery, Project_CommentsQueryVariables>;
export const Project_DocumentContentDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "project_documentContent" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "documentContent" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...DocumentContentFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Project_DocumentContentQuery, Project_DocumentContentQueryVariables>;
export const Project_DocumentsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "project_documents" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "DocumentFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "documents" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...DocumentConnectionFragmentDoc.definitions,
    ...DocumentFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Project_DocumentsQuery, Project_DocumentsQueryVariables>;
export const Project_ExternalLinksDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "project_externalLinks" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "externalLinks" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      { kind: "FragmentSpread", name: { kind: "Name", value: "EntityExternalLinkConnection" } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...EntityExternalLinkConnectionFragmentDoc.definitions,
    ...EntityExternalLinkFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Project_ExternalLinksQuery, Project_ExternalLinksQueryVariables>;
export const Project_HistoryDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "project_history" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "history" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectHistoryConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...ProjectHistoryConnectionFragmentDoc.definitions,
    ...ProjectHistoryFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Project_HistoryQuery, Project_HistoryQueryVariables>;
export const Project_InitiativesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "project_initiatives" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "initiatives" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...InitiativeConnectionFragmentDoc.definitions,
    ...InitiativeFragmentDoc.definitions,
    ...DocumentContentFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Project_InitiativesQuery, Project_InitiativesQueryVariables>;
export const Project_InverseRelationsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "project_inverseRelations" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "inverseRelations" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      { kind: "FragmentSpread", name: { kind: "Name", value: "ProjectRelationConnection" } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...ProjectRelationConnectionFragmentDoc.definitions,
    ...ProjectRelationFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Project_InverseRelationsQuery, Project_InverseRelationsQueryVariables>;
export const Project_IssuesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "project_issues" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "issues" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueConnectionFragmentDoc.definitions,
    ...IssueFragmentDoc.definitions,
    ...ReactionFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...ExternalEntityInfoFragmentDoc.definitions,
    ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
    ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
    ...ExternalEntitySlackMetadataFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Project_IssuesQuery, Project_IssuesQueryVariables>;
export const Project_LabelsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "project_labels" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "ProjectLabelFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "labels" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLabelConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...ProjectLabelConnectionFragmentDoc.definitions,
    ...ProjectLabelFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Project_LabelsQuery, Project_LabelsQueryVariables>;
export const Project_MembersDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "project_members" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "members" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeDisabled" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...UserConnectionFragmentDoc.definitions,
    ...UserFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Project_MembersQuery, Project_MembersQueryVariables>;
export const Project_NeedsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "project_needs" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "needs" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...CustomerNeedConnectionFragmentDoc.definitions,
    ...CustomerNeedFragmentDoc.definitions,
    ...ProjectAttachmentFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Project_NeedsQuery, Project_NeedsQueryVariables>;
export const Project_ProjectMilestonesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "project_projectMilestones" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "projectMilestones" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      { kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestoneConnection" } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...ProjectMilestoneConnectionFragmentDoc.definitions,
    ...ProjectMilestoneFragmentDoc.definitions,
    ...DocumentContentFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Project_ProjectMilestonesQuery, Project_ProjectMilestonesQueryVariables>;
export const Project_ProjectUpdatesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "project_projectUpdates" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "projectUpdates" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...ProjectUpdateConnectionFragmentDoc.definitions,
    ...ProjectUpdateFragmentDoc.definitions,
    ...ReactionFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Project_ProjectUpdatesQuery, Project_ProjectUpdatesQueryVariables>;
export const Project_RelationsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "project_relations" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "relations" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      { kind: "FragmentSpread", name: { kind: "Name", value: "ProjectRelationConnection" } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...ProjectRelationConnectionFragmentDoc.definitions,
    ...ProjectRelationFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Project_RelationsQuery, Project_RelationsQueryVariables>;
export const Project_TeamsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "project_teams" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "teams" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...TeamConnectionFragmentDoc.definitions,
    ...TeamFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Project_TeamsQuery, Project_TeamsQueryVariables>;
export const ProjectFilterSuggestionDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "projectFilterSuggestion" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "prompt" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectFilterSuggestion" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "prompt" },
                value: { kind: "Variable", name: { kind: "Name", value: "prompt" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectFilterSuggestionPayload" } }],
            },
          },
        ],
      },
    },
    ...ProjectFilterSuggestionPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ProjectFilterSuggestionQuery, ProjectFilterSuggestionQueryVariables>;
export const ProjectLabelDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "projectLabel" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectLabel" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLabel" } }],
            },
          },
        ],
      },
    },
    ...ProjectLabelFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ProjectLabelQuery, ProjectLabelQueryVariables>;
export const ProjectLabel_ChildrenDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "projectLabel_children" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "ProjectLabelFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectLabel" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "children" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLabelConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...ProjectLabelConnectionFragmentDoc.definitions,
    ...ProjectLabelFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ProjectLabel_ChildrenQuery, ProjectLabel_ChildrenQueryVariables>;
export const ProjectLabel_ProjectsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "projectLabel_projects" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "sort" } },
          type: {
            kind: "ListType",
            type: {
              kind: "NonNullType",
              type: { kind: "NamedType", name: { kind: "Name", value: "ProjectSortInput" } },
            },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectLabel" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "projects" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "sort" },
                      value: { kind: "Variable", name: { kind: "Name", value: "sort" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...ProjectConnectionFragmentDoc.definitions,
    ...ProjectFragmentDoc.definitions,
    ...DocumentContentFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ProjectLabel_ProjectsQuery, ProjectLabel_ProjectsQueryVariables>;
export const ProjectLabelsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "projectLabels" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "ProjectLabelFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectLabels" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "filter" },
                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLabelConnection" } }],
            },
          },
        ],
      },
    },
    ...ProjectLabelConnectionFragmentDoc.definitions,
    ...ProjectLabelFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ProjectLabelsQuery, ProjectLabelsQueryVariables>;
export const ProjectMilestoneDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "projectMilestone" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectMilestone" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestone" } }],
            },
          },
        ],
      },
    },
    ...ProjectMilestoneFragmentDoc.definitions,
    ...DocumentContentFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ProjectMilestoneQuery, ProjectMilestoneQueryVariables>;
export const ProjectMilestone_DocumentContentDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "projectMilestone_documentContent" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectMilestone" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "documentContent" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...DocumentContentFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ProjectMilestone_DocumentContentQuery, ProjectMilestone_DocumentContentQueryVariables>;
export const ProjectMilestone_IssuesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "projectMilestone_issues" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectMilestone" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "issues" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueConnectionFragmentDoc.definitions,
    ...IssueFragmentDoc.definitions,
    ...ReactionFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...ExternalEntityInfoFragmentDoc.definitions,
    ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
    ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
    ...ExternalEntitySlackMetadataFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ProjectMilestone_IssuesQuery, ProjectMilestone_IssuesQueryVariables>;
export const ProjectMilestonesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "projectMilestones" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectMilestones" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "filter" },
                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestoneConnection" } }],
            },
          },
        ],
      },
    },
    ...ProjectMilestoneConnectionFragmentDoc.definitions,
    ...ProjectMilestoneFragmentDoc.definitions,
    ...DocumentContentFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ProjectMilestonesQuery, ProjectMilestonesQueryVariables>;
export const ProjectRelationDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "projectRelation" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectRelation" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectRelation" } }],
            },
          },
        ],
      },
    },
    ...ProjectRelationFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ProjectRelationQuery, ProjectRelationQueryVariables>;
export const ProjectRelationsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "projectRelations" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectRelations" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectRelationConnection" } }],
            },
          },
        ],
      },
    },
    ...ProjectRelationConnectionFragmentDoc.definitions,
    ...ProjectRelationFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ProjectRelationsQuery, ProjectRelationsQueryVariables>;
export const ProjectStatusDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "projectStatus" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectStatus" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatus" } }],
            },
          },
        ],
      },
    },
    ...ProjectStatusFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ProjectStatusQuery, ProjectStatusQueryVariables>;
export const ProjectStatusesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "projectStatuses" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectStatuses" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatusConnection" } }],
            },
          },
        ],
      },
    },
    ...ProjectStatusConnectionFragmentDoc.definitions,
    ...ProjectStatusFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ProjectStatusesQuery, ProjectStatusesQueryVariables>;
export const ProjectUpdateDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "projectUpdate" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdate" } }],
            },
          },
        ],
      },
    },
    ...ProjectUpdateFragmentDoc.definitions,
    ...ReactionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ProjectUpdateQuery, ProjectUpdateQueryVariables>;
export const ProjectUpdate_CommentsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "projectUpdate_comments" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "comments" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...CommentConnectionFragmentDoc.definitions,
    ...CommentFragmentDoc.definitions,
    ...ReactionFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...DocumentContentFragmentDoc.definitions,
    ...ExternalEntityInfoFragmentDoc.definitions,
    ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
    ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
    ...ExternalEntitySlackMetadataFragmentDoc.definitions,
    ...SyncedExternalThreadFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ProjectUpdate_CommentsQuery, ProjectUpdate_CommentsQueryVariables>;
export const ProjectUpdatesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "projectUpdates" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectUpdates" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "filter" },
                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateConnection" } }],
            },
          },
        ],
      },
    },
    ...ProjectUpdateConnectionFragmentDoc.definitions,
    ...ProjectUpdateFragmentDoc.definitions,
    ...ReactionFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ProjectUpdatesQuery, ProjectUpdatesQueryVariables>;
export const ProjectsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "projects" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "sort" } },
          type: {
            kind: "ListType",
            type: {
              kind: "NonNullType",
              type: { kind: "NamedType", name: { kind: "Name", value: "ProjectSortInput" } },
            },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projects" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "filter" },
                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "sort" },
                value: { kind: "Variable", name: { kind: "Name", value: "sort" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectConnection" } }],
            },
          },
        ],
      },
    },
    ...ProjectConnectionFragmentDoc.definitions,
    ...ProjectFragmentDoc.definitions,
    ...DocumentContentFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ProjectsQuery, ProjectsQueryVariables>;
export const PushSubscriptionTestDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "pushSubscriptionTest" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "sendStrategy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "SendStrategy" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "targetMobile" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "pushSubscriptionTest" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "sendStrategy" },
                value: { kind: "Variable", name: { kind: "Name", value: "sendStrategy" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "targetMobile" },
                value: { kind: "Variable", name: { kind: "Name", value: "targetMobile" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PushSubscriptionTestPayload" } }],
            },
          },
        ],
      },
    },
    ...PushSubscriptionTestPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<PushSubscriptionTestQuery, PushSubscriptionTestQueryVariables>;
export const RateLimitStatusDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "rateLimitStatus" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "rateLimitStatus" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RateLimitPayload" } }],
            },
          },
        ],
      },
    },
    ...RateLimitPayloadFragmentDoc.definitions,
    ...RateLimitResultPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<RateLimitStatusQuery, RateLimitStatusQueryVariables>;
export const RoadmapDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "roadmap" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "roadmap" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Roadmap" } }],
            },
          },
        ],
      },
    },
    ...RoadmapFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<RoadmapQuery, RoadmapQueryVariables>;
export const Roadmap_ProjectsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "roadmap_projects" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "roadmap" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "projects" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...ProjectConnectionFragmentDoc.definitions,
    ...ProjectFragmentDoc.definitions,
    ...DocumentContentFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Roadmap_ProjectsQuery, Roadmap_ProjectsQueryVariables>;
export const RoadmapToProjectDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "roadmapToProject" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "roadmapToProject" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapToProject" } }],
            },
          },
        ],
      },
    },
    ...RoadmapToProjectFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<RoadmapToProjectQuery, RoadmapToProjectQueryVariables>;
export const RoadmapToProjectsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "roadmapToProjects" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "roadmapToProjects" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapToProjectConnection" } }],
            },
          },
        ],
      },
    },
    ...RoadmapToProjectConnectionFragmentDoc.definitions,
    ...RoadmapToProjectFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<RoadmapToProjectsQuery, RoadmapToProjectsQueryVariables>;
export const RoadmapsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "roadmaps" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "roadmaps" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapConnection" } }],
            },
          },
        ],
      },
    },
    ...RoadmapConnectionFragmentDoc.definitions,
    ...RoadmapFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<RoadmapsQuery, RoadmapsQueryVariables>;
export const SearchDocumentsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "searchDocuments" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeComments" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "term" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "searchDocuments" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeComments" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeComments" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "teamId" },
                value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "term" },
                value: { kind: "Variable", name: { kind: "Name", value: "term" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentSearchPayload" } }],
            },
          },
        ],
      },
    },
    ...DocumentSearchPayloadFragmentDoc.definitions,
    ...ArchiveResponseFragmentDoc.definitions,
    ...DocumentSearchResultFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<SearchDocumentsQuery, SearchDocumentsQueryVariables>;
export const SearchDocuments_ArchivePayloadDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "searchDocuments_archivePayload" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeComments" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "term" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "searchDocuments" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeComments" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeComments" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "teamId" },
                value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "term" },
                value: { kind: "Variable", name: { kind: "Name", value: "term" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "archivePayload" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchiveResponse" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...ArchiveResponseFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<SearchDocuments_ArchivePayloadQuery, SearchDocuments_ArchivePayloadQueryVariables>;
export const SearchIssuesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "searchIssues" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeComments" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "term" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "searchIssues" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "filter" },
                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeComments" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeComments" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "teamId" },
                value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "term" },
                value: { kind: "Variable", name: { kind: "Name", value: "term" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueSearchPayload" } }],
            },
          },
        ],
      },
    },
    ...IssueSearchPayloadFragmentDoc.definitions,
    ...ArchiveResponseFragmentDoc.definitions,
    ...IssueSearchResultFragmentDoc.definitions,
    ...ReactionFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...ExternalEntityInfoFragmentDoc.definitions,
    ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
    ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
    ...ExternalEntitySlackMetadataFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<SearchIssuesQuery, SearchIssuesQueryVariables>;
export const SearchIssues_ArchivePayloadDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "searchIssues_archivePayload" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeComments" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "term" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "searchIssues" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "filter" },
                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeComments" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeComments" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "teamId" },
                value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "term" },
                value: { kind: "Variable", name: { kind: "Name", value: "term" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "archivePayload" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchiveResponse" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...ArchiveResponseFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<SearchIssues_ArchivePayloadQuery, SearchIssues_ArchivePayloadQueryVariables>;
export const SearchProjectsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "searchProjects" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeComments" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "term" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "searchProjects" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeComments" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeComments" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "teamId" },
                value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "term" },
                value: { kind: "Variable", name: { kind: "Name", value: "term" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectSearchPayload" } }],
            },
          },
        ],
      },
    },
    ...ProjectSearchPayloadFragmentDoc.definitions,
    ...ArchiveResponseFragmentDoc.definitions,
    ...ProjectSearchResultFragmentDoc.definitions,
    ...DocumentContentFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<SearchProjectsQuery, SearchProjectsQueryVariables>;
export const SearchProjects_ArchivePayloadDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "searchProjects_archivePayload" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeComments" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "term" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "searchProjects" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeComments" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeComments" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "teamId" },
                value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "term" },
                value: { kind: "Variable", name: { kind: "Name", value: "term" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "archivePayload" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchiveResponse" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...ArchiveResponseFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<SearchProjects_ArchivePayloadQuery, SearchProjects_ArchivePayloadQueryVariables>;
export const SsoUrlFromEmailDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "ssoUrlFromEmail" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "email" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "isDesktop" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "ssoUrlFromEmail" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "email" },
                value: { kind: "Variable", name: { kind: "Name", value: "email" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "isDesktop" },
                value: { kind: "Variable", name: { kind: "Name", value: "isDesktop" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SsoUrlFromEmailResponse" } }],
            },
          },
        ],
      },
    },
    ...SsoUrlFromEmailResponseFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<SsoUrlFromEmailQuery, SsoUrlFromEmailQueryVariables>;
export const TeamDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "team" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Team" } }],
            },
          },
        ],
      },
    },
    ...TeamFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<TeamQuery, TeamQueryVariables>;
export const Team_CyclesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "team_cycles" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "CycleFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "cycles" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CycleConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...CycleConnectionFragmentDoc.definitions,
    ...CycleFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Team_CyclesQuery, Team_CyclesQueryVariables>;
export const Team_GitAutomationStatesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "team_gitAutomationStates" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "gitAutomationStates" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      { kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationStateConnection" } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...GitAutomationStateConnectionFragmentDoc.definitions,
    ...GitAutomationStateFragmentDoc.definitions,
    ...GitAutomationTargetBranchFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Team_GitAutomationStatesQuery, Team_GitAutomationStatesQueryVariables>;
export const Team_IssuesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "team_issues" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeSubTeams" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "issues" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeSubTeams" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeSubTeams" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueConnectionFragmentDoc.definitions,
    ...IssueFragmentDoc.definitions,
    ...ReactionFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...ExternalEntityInfoFragmentDoc.definitions,
    ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
    ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
    ...ExternalEntitySlackMetadataFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Team_IssuesQuery, Team_IssuesQueryVariables>;
export const Team_LabelsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "team_labels" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "labels" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueLabelConnectionFragmentDoc.definitions,
    ...IssueLabelFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Team_LabelsQuery, Team_LabelsQueryVariables>;
export const Team_MembersDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "team_members" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "members" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeDisabled" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...UserConnectionFragmentDoc.definitions,
    ...UserFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Team_MembersQuery, Team_MembersQueryVariables>;
export const Team_MembershipsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "team_memberships" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "memberships" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...TeamMembershipConnectionFragmentDoc.definitions,
    ...TeamMembershipFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Team_MembershipsQuery, Team_MembershipsQueryVariables>;
export const Team_ProjectsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "team_projects" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeSubTeams" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "sort" } },
          type: {
            kind: "ListType",
            type: {
              kind: "NonNullType",
              type: { kind: "NamedType", name: { kind: "Name", value: "ProjectSortInput" } },
            },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "projects" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeSubTeams" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeSubTeams" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "sort" },
                      value: { kind: "Variable", name: { kind: "Name", value: "sort" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...ProjectConnectionFragmentDoc.definitions,
    ...ProjectFragmentDoc.definitions,
    ...DocumentContentFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Team_ProjectsQuery, Team_ProjectsQueryVariables>;
export const Team_StatesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "team_states" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "states" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStateConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...WorkflowStateConnectionFragmentDoc.definitions,
    ...WorkflowStateFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Team_StatesQuery, Team_StatesQueryVariables>;
export const Team_TemplatesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "team_templates" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "NullableTemplateFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "templates" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TemplateConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...TemplateConnectionFragmentDoc.definitions,
    ...TemplateFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Team_TemplatesQuery, Team_TemplatesQueryVariables>;
export const Team_WebhooksDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "team_webhooks" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "webhooks" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WebhookConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...WebhookConnectionFragmentDoc.definitions,
    ...WebhookFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Team_WebhooksQuery, Team_WebhooksQueryVariables>;
export const TeamMembershipDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "teamMembership" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "teamMembership" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembership" } }],
            },
          },
        ],
      },
    },
    ...TeamMembershipFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<TeamMembershipQuery, TeamMembershipQueryVariables>;
export const TeamMembershipsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "teamMemberships" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "teamMemberships" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipConnection" } }],
            },
          },
        ],
      },
    },
    ...TeamMembershipConnectionFragmentDoc.definitions,
    ...TeamMembershipFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<TeamMembershipsQuery, TeamMembershipsQueryVariables>;
export const TeamsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "teams" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "teams" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "filter" },
                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }],
            },
          },
        ],
      },
    },
    ...TeamConnectionFragmentDoc.definitions,
    ...TeamFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<TeamsQuery, TeamsQueryVariables>;
export const TemplateDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "template" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "template" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Template" } }],
            },
          },
        ],
      },
    },
    ...TemplateFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<TemplateQuery, TemplateQueryVariables>;
export const TemplatesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "templates" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "templates" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Template" } }],
            },
          },
        ],
      },
    },
    ...TemplateFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<TemplatesQuery, TemplatesQueryVariables>;
export const TemplatesForIntegrationDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "templatesForIntegration" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "integrationType" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "templatesForIntegration" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "integrationType" },
                value: { kind: "Variable", name: { kind: "Name", value: "integrationType" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Template" } }],
            },
          },
        ],
      },
    },
    ...TemplateFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<TemplatesForIntegrationQuery, TemplatesForIntegrationQueryVariables>;
export const TimeScheduleDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "timeSchedule" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "timeSchedule" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeSchedule" } }],
            },
          },
        ],
      },
    },
    ...TimeScheduleFragmentDoc.definitions,
    ...TimeScheduleEntryFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<TimeScheduleQuery, TimeScheduleQueryVariables>;
export const TimeSchedulesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "timeSchedules" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "timeSchedules" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeScheduleConnection" } }],
            },
          },
        ],
      },
    },
    ...TimeScheduleConnectionFragmentDoc.definitions,
    ...TimeScheduleFragmentDoc.definitions,
    ...TimeScheduleEntryFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<TimeSchedulesQuery, TimeSchedulesQueryVariables>;
export const TriageResponsibilitiesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "triageResponsibilities" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "triageResponsibilities" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TriageResponsibilityConnection" } }],
            },
          },
        ],
      },
    },
    ...TriageResponsibilityConnectionFragmentDoc.definitions,
    ...TriageResponsibilityFragmentDoc.definitions,
    ...TriageResponsibilityManualSelectionFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<TriageResponsibilitiesQuery, TriageResponsibilitiesQueryVariables>;
export const TriageResponsibilityDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "triageResponsibility" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "triageResponsibility" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TriageResponsibility" } }],
            },
          },
        ],
      },
    },
    ...TriageResponsibilityFragmentDoc.definitions,
    ...TriageResponsibilityManualSelectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<TriageResponsibilityQuery, TriageResponsibilityQueryVariables>;
export const TriageResponsibility_ManualSelectionDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "triageResponsibility_manualSelection" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "triageResponsibility" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "manualSelection" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      { kind: "FragmentSpread", name: { kind: "Name", value: "TriageResponsibilityManualSelection" } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...TriageResponsibilityManualSelectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  TriageResponsibility_ManualSelectionQuery,
  TriageResponsibility_ManualSelectionQueryVariables
>;
export const UserDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "user" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }],
            },
          },
        ],
      },
    },
    ...UserFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UserQuery, UserQueryVariables>;
export const User_AssignedIssuesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "user_assignedIssues" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "assignedIssues" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueConnectionFragmentDoc.definitions,
    ...IssueFragmentDoc.definitions,
    ...ReactionFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...ExternalEntityInfoFragmentDoc.definitions,
    ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
    ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
    ...ExternalEntitySlackMetadataFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<User_AssignedIssuesQuery, User_AssignedIssuesQueryVariables>;
export const User_CreatedIssuesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "user_createdIssues" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "createdIssues" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueConnectionFragmentDoc.definitions,
    ...IssueFragmentDoc.definitions,
    ...ReactionFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...ExternalEntityInfoFragmentDoc.definitions,
    ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
    ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
    ...ExternalEntitySlackMetadataFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<User_CreatedIssuesQuery, User_CreatedIssuesQueryVariables>;
export const User_DelegatedIssuesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "user_delegatedIssues" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "delegatedIssues" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueConnectionFragmentDoc.definitions,
    ...IssueFragmentDoc.definitions,
    ...ReactionFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...ExternalEntityInfoFragmentDoc.definitions,
    ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
    ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
    ...ExternalEntitySlackMetadataFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<User_DelegatedIssuesQuery, User_DelegatedIssuesQueryVariables>;
export const User_DraftsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "user_drafts" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "drafts" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DraftConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...DraftConnectionFragmentDoc.definitions,
    ...DraftFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<User_DraftsQuery, User_DraftsQueryVariables>;
export const User_TeamMembershipsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "user_teamMemberships" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "teamMemberships" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...TeamMembershipConnectionFragmentDoc.definitions,
    ...TeamMembershipFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<User_TeamMembershipsQuery, User_TeamMembershipsQueryVariables>;
export const User_TeamsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "user_teams" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "teams" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...TeamConnectionFragmentDoc.definitions,
    ...TeamFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<User_TeamsQuery, User_TeamsQueryVariables>;
export const UserSettingsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "userSettings" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userSettings" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettings" } }],
            },
          },
        ],
      },
    },
    ...UserSettingsFragmentDoc.definitions,
    ...NotificationDeliveryPreferencesFragmentDoc.definitions,
    ...NotificationDeliveryPreferencesChannelFragmentDoc.definitions,
    ...NotificationDeliveryPreferencesScheduleFragmentDoc.definitions,
    ...NotificationDeliveryPreferencesDayFragmentDoc.definitions,
    ...NotificationCategoryPreferencesFragmentDoc.definitions,
    ...NotificationChannelPreferencesFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UserSettingsQuery, UserSettingsQueryVariables>;
export const UserSettings_NotificationCategoryPreferencesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "userSettings_notificationCategoryPreferences" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userSettings" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "notificationCategoryPreferences" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationCategoryPreferences" } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...NotificationCategoryPreferencesFragmentDoc.definitions,
    ...NotificationChannelPreferencesFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  UserSettings_NotificationCategoryPreferencesQuery,
  UserSettings_NotificationCategoryPreferencesQueryVariables
>;
export const UserSettings_NotificationCategoryPreferences_AppsAndIntegrationsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_appsAndIntegrations" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userSettings" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "notificationCategoryPreferences" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "appsAndIntegrations" },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...NotificationChannelPreferencesFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  UserSettings_NotificationCategoryPreferences_AppsAndIntegrationsQuery,
  UserSettings_NotificationCategoryPreferences_AppsAndIntegrationsQueryVariables
>;
export const UserSettings_NotificationCategoryPreferences_AssignmentsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_assignments" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userSettings" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "notificationCategoryPreferences" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "assignments" },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...NotificationChannelPreferencesFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  UserSettings_NotificationCategoryPreferences_AssignmentsQuery,
  UserSettings_NotificationCategoryPreferences_AssignmentsQueryVariables
>;
export const UserSettings_NotificationCategoryPreferences_CommentsAndRepliesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_commentsAndReplies" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userSettings" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "notificationCategoryPreferences" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "commentsAndReplies" },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...NotificationChannelPreferencesFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  UserSettings_NotificationCategoryPreferences_CommentsAndRepliesQuery,
  UserSettings_NotificationCategoryPreferences_CommentsAndRepliesQueryVariables
>;
export const UserSettings_NotificationCategoryPreferences_CustomersDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_customers" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userSettings" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "notificationCategoryPreferences" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "customers" },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...NotificationChannelPreferencesFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  UserSettings_NotificationCategoryPreferences_CustomersQuery,
  UserSettings_NotificationCategoryPreferences_CustomersQueryVariables
>;
export const UserSettings_NotificationCategoryPreferences_DocumentChangesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_documentChanges" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userSettings" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "notificationCategoryPreferences" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "documentChanges" },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...NotificationChannelPreferencesFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  UserSettings_NotificationCategoryPreferences_DocumentChangesQuery,
  UserSettings_NotificationCategoryPreferences_DocumentChangesQueryVariables
>;
export const UserSettings_NotificationCategoryPreferences_FeedDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_feed" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userSettings" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "notificationCategoryPreferences" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "feed" },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...NotificationChannelPreferencesFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  UserSettings_NotificationCategoryPreferences_FeedQuery,
  UserSettings_NotificationCategoryPreferences_FeedQueryVariables
>;
export const UserSettings_NotificationCategoryPreferences_MentionsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_mentions" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userSettings" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "notificationCategoryPreferences" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "mentions" },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...NotificationChannelPreferencesFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  UserSettings_NotificationCategoryPreferences_MentionsQuery,
  UserSettings_NotificationCategoryPreferences_MentionsQueryVariables
>;
export const UserSettings_NotificationCategoryPreferences_PostsAndUpdatesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_postsAndUpdates" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userSettings" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "notificationCategoryPreferences" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "postsAndUpdates" },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...NotificationChannelPreferencesFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  UserSettings_NotificationCategoryPreferences_PostsAndUpdatesQuery,
  UserSettings_NotificationCategoryPreferences_PostsAndUpdatesQueryVariables
>;
export const UserSettings_NotificationCategoryPreferences_ReactionsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_reactions" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userSettings" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "notificationCategoryPreferences" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "reactions" },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...NotificationChannelPreferencesFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  UserSettings_NotificationCategoryPreferences_ReactionsQuery,
  UserSettings_NotificationCategoryPreferences_ReactionsQueryVariables
>;
export const UserSettings_NotificationCategoryPreferences_RemindersDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_reminders" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userSettings" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "notificationCategoryPreferences" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "reminders" },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...NotificationChannelPreferencesFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  UserSettings_NotificationCategoryPreferences_RemindersQuery,
  UserSettings_NotificationCategoryPreferences_RemindersQueryVariables
>;
export const UserSettings_NotificationCategoryPreferences_ReviewsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_reviews" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userSettings" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "notificationCategoryPreferences" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "reviews" },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...NotificationChannelPreferencesFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  UserSettings_NotificationCategoryPreferences_ReviewsQuery,
  UserSettings_NotificationCategoryPreferences_ReviewsQueryVariables
>;
export const UserSettings_NotificationCategoryPreferences_StatusChangesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_statusChanges" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userSettings" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "notificationCategoryPreferences" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "statusChanges" },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...NotificationChannelPreferencesFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  UserSettings_NotificationCategoryPreferences_StatusChangesQuery,
  UserSettings_NotificationCategoryPreferences_StatusChangesQueryVariables
>;
export const UserSettings_NotificationCategoryPreferences_SubscriptionsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_subscriptions" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userSettings" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "notificationCategoryPreferences" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "subscriptions" },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...NotificationChannelPreferencesFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  UserSettings_NotificationCategoryPreferences_SubscriptionsQuery,
  UserSettings_NotificationCategoryPreferences_SubscriptionsQueryVariables
>;
export const UserSettings_NotificationCategoryPreferences_SystemDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_system" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userSettings" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "notificationCategoryPreferences" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "system" },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...NotificationChannelPreferencesFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  UserSettings_NotificationCategoryPreferences_SystemQuery,
  UserSettings_NotificationCategoryPreferences_SystemQueryVariables
>;
export const UserSettings_NotificationCategoryPreferences_TriageDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_triage" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userSettings" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "notificationCategoryPreferences" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "triage" },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...NotificationChannelPreferencesFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  UserSettings_NotificationCategoryPreferences_TriageQuery,
  UserSettings_NotificationCategoryPreferences_TriageQueryVariables
>;
export const UserSettings_NotificationChannelPreferencesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "userSettings_notificationChannelPreferences" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userSettings" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "notificationChannelPreferences" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...NotificationChannelPreferencesFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  UserSettings_NotificationChannelPreferencesQuery,
  UserSettings_NotificationChannelPreferencesQueryVariables
>;
export const UserSettings_NotificationDeliveryPreferencesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userSettings" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "notificationDeliveryPreferences" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferences" } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...NotificationDeliveryPreferencesFragmentDoc.definitions,
    ...NotificationDeliveryPreferencesChannelFragmentDoc.definitions,
    ...NotificationDeliveryPreferencesScheduleFragmentDoc.definitions,
    ...NotificationDeliveryPreferencesDayFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  UserSettings_NotificationDeliveryPreferencesQuery,
  UserSettings_NotificationDeliveryPreferencesQueryVariables
>;
export const UserSettings_NotificationDeliveryPreferences_MobileDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userSettings" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "notificationDeliveryPreferences" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "mobile" },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            {
                              kind: "FragmentSpread",
                              name: { kind: "Name", value: "NotificationDeliveryPreferencesChannel" },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...NotificationDeliveryPreferencesChannelFragmentDoc.definitions,
    ...NotificationDeliveryPreferencesScheduleFragmentDoc.definitions,
    ...NotificationDeliveryPreferencesDayFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  UserSettings_NotificationDeliveryPreferences_MobileQuery,
  UserSettings_NotificationDeliveryPreferences_MobileQueryVariables
>;
export const UserSettings_NotificationDeliveryPreferences_Mobile_ScheduleDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userSettings" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "notificationDeliveryPreferences" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "mobile" },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "schedule" },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "FragmentSpread",
                                    name: { kind: "Name", value: "NotificationDeliveryPreferencesSchedule" },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...NotificationDeliveryPreferencesScheduleFragmentDoc.definitions,
    ...NotificationDeliveryPreferencesDayFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  UserSettings_NotificationDeliveryPreferences_Mobile_ScheduleQuery,
  UserSettings_NotificationDeliveryPreferences_Mobile_ScheduleQueryVariables
>;
export const UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_FridayDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule_friday" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userSettings" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "notificationDeliveryPreferences" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "mobile" },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "schedule" },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "friday" },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "FragmentSpread",
                                          name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...NotificationDeliveryPreferencesDayFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_FridayQuery,
  UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_FridayQueryVariables
>;
export const UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_MondayDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule_monday" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userSettings" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "notificationDeliveryPreferences" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "mobile" },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "schedule" },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "monday" },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "FragmentSpread",
                                          name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...NotificationDeliveryPreferencesDayFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_MondayQuery,
  UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_MondayQueryVariables
>;
export const UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SaturdayDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule_saturday" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userSettings" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "notificationDeliveryPreferences" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "mobile" },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "schedule" },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "saturday" },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "FragmentSpread",
                                          name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...NotificationDeliveryPreferencesDayFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SaturdayQuery,
  UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SaturdayQueryVariables
>;
export const UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SundayDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule_sunday" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userSettings" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "notificationDeliveryPreferences" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "mobile" },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "schedule" },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "sunday" },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "FragmentSpread",
                                          name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...NotificationDeliveryPreferencesDayFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SundayQuery,
  UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SundayQueryVariables
>;
export const UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_ThursdayDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule_thursday" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userSettings" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "notificationDeliveryPreferences" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "mobile" },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "schedule" },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "thursday" },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "FragmentSpread",
                                          name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...NotificationDeliveryPreferencesDayFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_ThursdayQuery,
  UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_ThursdayQueryVariables
>;
export const UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_TuesdayDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule_tuesday" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userSettings" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "notificationDeliveryPreferences" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "mobile" },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "schedule" },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "tuesday" },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "FragmentSpread",
                                          name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...NotificationDeliveryPreferencesDayFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_TuesdayQuery,
  UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_TuesdayQueryVariables
>;
export const UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_WednesdayDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule_wednesday" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userSettings" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "notificationDeliveryPreferences" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "mobile" },
                        selectionSet: {
                          kind: "SelectionSet",
                          selections: [
                            {
                              kind: "Field",
                              name: { kind: "Name", value: "schedule" },
                              selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                  {
                                    kind: "Field",
                                    name: { kind: "Name", value: "wednesday" },
                                    selectionSet: {
                                      kind: "SelectionSet",
                                      selections: [
                                        {
                                          kind: "FragmentSpread",
                                          name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...NotificationDeliveryPreferencesDayFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_WednesdayQuery,
  UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_WednesdayQueryVariables
>;
export const UsersDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "users" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "sort" } },
          type: {
            kind: "ListType",
            type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "UserSortInput" } } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "users" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "filter" },
                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeDisabled" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "sort" },
                value: { kind: "Variable", name: { kind: "Name", value: "sort" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }],
            },
          },
        ],
      },
    },
    ...UserConnectionFragmentDoc.definitions,
    ...UserFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UsersQuery, UsersQueryVariables>;
export const VerifyGitHubEnterpriseServerInstallationDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "verifyGitHubEnterpriseServerInstallation" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "integrationId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "verifyGitHubEnterpriseServerInstallation" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "integrationId" },
                value: { kind: "Variable", name: { kind: "Name", value: "integrationId" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "FragmentSpread",
                  name: { kind: "Name", value: "GitHubEnterpriseServerInstallVerificationPayload" },
                },
              ],
            },
          },
        ],
      },
    },
    ...GitHubEnterpriseServerInstallVerificationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  VerifyGitHubEnterpriseServerInstallationQuery,
  VerifyGitHubEnterpriseServerInstallationQueryVariables
>;
export const ViewerDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "viewer" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "viewer" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }],
            },
          },
        ],
      },
    },
    ...UserFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ViewerQuery, ViewerQueryVariables>;
export const Viewer_AssignedIssuesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "viewer_assignedIssues" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "viewer" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "assignedIssues" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueConnectionFragmentDoc.definitions,
    ...IssueFragmentDoc.definitions,
    ...ReactionFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...ExternalEntityInfoFragmentDoc.definitions,
    ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
    ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
    ...ExternalEntitySlackMetadataFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Viewer_AssignedIssuesQuery, Viewer_AssignedIssuesQueryVariables>;
export const Viewer_CreatedIssuesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "viewer_createdIssues" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "viewer" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "createdIssues" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueConnectionFragmentDoc.definitions,
    ...IssueFragmentDoc.definitions,
    ...ReactionFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...ExternalEntityInfoFragmentDoc.definitions,
    ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
    ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
    ...ExternalEntitySlackMetadataFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Viewer_CreatedIssuesQuery, Viewer_CreatedIssuesQueryVariables>;
export const Viewer_DelegatedIssuesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "viewer_delegatedIssues" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "viewer" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "delegatedIssues" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueConnectionFragmentDoc.definitions,
    ...IssueFragmentDoc.definitions,
    ...ReactionFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...ExternalEntityInfoFragmentDoc.definitions,
    ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
    ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
    ...ExternalEntitySlackMetadataFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Viewer_DelegatedIssuesQuery, Viewer_DelegatedIssuesQueryVariables>;
export const Viewer_DraftsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "viewer_drafts" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "viewer" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "drafts" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DraftConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...DraftConnectionFragmentDoc.definitions,
    ...DraftFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Viewer_DraftsQuery, Viewer_DraftsQueryVariables>;
export const Viewer_TeamMembershipsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "viewer_teamMemberships" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "viewer" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "teamMemberships" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...TeamMembershipConnectionFragmentDoc.definitions,
    ...TeamMembershipFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Viewer_TeamMembershipsQuery, Viewer_TeamMembershipsQueryVariables>;
export const Viewer_TeamsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "viewer_teams" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "viewer" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "teams" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...TeamConnectionFragmentDoc.definitions,
    ...TeamFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Viewer_TeamsQuery, Viewer_TeamsQueryVariables>;
export const WebhookDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "webhook" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "webhook" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Webhook" } }],
            },
          },
        ],
      },
    },
    ...WebhookFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<WebhookQuery, WebhookQueryVariables>;
export const WebhooksDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "webhooks" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "webhooks" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WebhookConnection" } }],
            },
          },
        ],
      },
    },
    ...WebhookConnectionFragmentDoc.definitions,
    ...WebhookFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<WebhooksQuery, WebhooksQueryVariables>;
export const WorkflowStateDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "workflowState" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "workflowState" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowState" } }],
            },
          },
        ],
      },
    },
    ...WorkflowStateFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<WorkflowStateQuery, WorkflowStateQueryVariables>;
export const WorkflowState_IssuesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "workflowState_issues" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "workflowState" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "issues" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueConnectionFragmentDoc.definitions,
    ...IssueFragmentDoc.definitions,
    ...ReactionFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...ExternalEntityInfoFragmentDoc.definitions,
    ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
    ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
    ...ExternalEntitySlackMetadataFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<WorkflowState_IssuesQuery, WorkflowState_IssuesQueryVariables>;
export const WorkflowStatesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "workflowStates" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "workflowStates" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "filter" },
                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStateConnection" } }],
            },
          },
        ],
      },
    },
    ...WorkflowStateConnectionFragmentDoc.definitions,
    ...WorkflowStateFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<WorkflowStatesQuery, WorkflowStatesQueryVariables>;
export const CreateAgentActivityDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createAgentActivity" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "agentActivityCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AgentActivityPayload" } }],
            },
          },
        ],
      },
    },
    ...AgentActivityPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateAgentActivityMutation, CreateAgentActivityMutationVariables>;
export const AgentSessionUpdateExternalUrlDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "agentSessionUpdateExternalUrl" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "AgentSessionUpdateExternalUrlInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "agentSessionUpdateExternalUrl" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AgentSessionPayload" } }],
            },
          },
        ],
      },
    },
    ...AgentSessionPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AgentSessionUpdateExternalUrlMutation, AgentSessionUpdateExternalUrlMutationVariables>;
export const AirbyteIntegrationConnectDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "airbyteIntegrationConnect" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "AirbyteConfigurationInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "airbyteIntegrationConnect" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AirbyteIntegrationConnectMutation, AirbyteIntegrationConnectMutationVariables>;
export const CreateAttachmentDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createAttachment" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
            },
          },
        ],
      },
    },
    ...AttachmentPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateAttachmentMutation, CreateAttachmentMutationVariables>;
export const DeleteAttachmentDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteAttachment" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
            },
          },
        ],
      },
    },
    ...DeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteAttachmentMutation, DeleteAttachmentMutationVariables>;
export const AttachmentLinkDiscordDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "attachmentLinkDiscord" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "channelId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "messageId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "title" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "url" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentLinkDiscord" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "channelId" },
                value: { kind: "Variable", name: { kind: "Name", value: "channelId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "createAsUser" },
                value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "displayIconUrl" },
                value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "issueId" },
                value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "messageId" },
                value: { kind: "Variable", name: { kind: "Name", value: "messageId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "title" },
                value: { kind: "Variable", name: { kind: "Name", value: "title" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "url" },
                value: { kind: "Variable", name: { kind: "Name", value: "url" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
            },
          },
        ],
      },
    },
    ...AttachmentPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AttachmentLinkDiscordMutation, AttachmentLinkDiscordMutationVariables>;
export const AttachmentLinkFrontDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "attachmentLinkFront" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "conversationId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "title" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentLinkFront" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "conversationId" },
                value: { kind: "Variable", name: { kind: "Name", value: "conversationId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "createAsUser" },
                value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "displayIconUrl" },
                value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "issueId" },
                value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "title" },
                value: { kind: "Variable", name: { kind: "Name", value: "title" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FrontAttachmentPayload" } }],
            },
          },
        ],
      },
    },
    ...FrontAttachmentPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AttachmentLinkFrontMutation, AttachmentLinkFrontMutationVariables>;
export const AttachmentLinkGitHubIssueDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "attachmentLinkGitHubIssue" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "title" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "url" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentLinkGitHubIssue" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "createAsUser" },
                value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "displayIconUrl" },
                value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "issueId" },
                value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "title" },
                value: { kind: "Variable", name: { kind: "Name", value: "title" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "url" },
                value: { kind: "Variable", name: { kind: "Name", value: "url" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
            },
          },
        ],
      },
    },
    ...AttachmentPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AttachmentLinkGitHubIssueMutation, AttachmentLinkGitHubIssueMutationVariables>;
export const AttachmentLinkGitHubPrDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "attachmentLinkGitHubPR" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "linkKind" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "GitLinkKind" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "title" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "url" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentLinkGitHubPR" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "createAsUser" },
                value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "displayIconUrl" },
                value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "issueId" },
                value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "linkKind" },
                value: { kind: "Variable", name: { kind: "Name", value: "linkKind" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "title" },
                value: { kind: "Variable", name: { kind: "Name", value: "title" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "url" },
                value: { kind: "Variable", name: { kind: "Name", value: "url" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
            },
          },
        ],
      },
    },
    ...AttachmentPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AttachmentLinkGitHubPrMutation, AttachmentLinkGitHubPrMutationVariables>;
export const AttachmentLinkGitLabMrDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "attachmentLinkGitLabMR" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "number" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "Float" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "projectPathWithNamespace" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "title" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "url" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentLinkGitLabMR" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "createAsUser" },
                value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "displayIconUrl" },
                value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "issueId" },
                value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "number" },
                value: { kind: "Variable", name: { kind: "Name", value: "number" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "projectPathWithNamespace" },
                value: { kind: "Variable", name: { kind: "Name", value: "projectPathWithNamespace" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "title" },
                value: { kind: "Variable", name: { kind: "Name", value: "title" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "url" },
                value: { kind: "Variable", name: { kind: "Name", value: "url" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
            },
          },
        ],
      },
    },
    ...AttachmentPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AttachmentLinkGitLabMrMutation, AttachmentLinkGitLabMrMutationVariables>;
export const AttachmentLinkIntercomDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "attachmentLinkIntercom" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "conversationId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "partId" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "title" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentLinkIntercom" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "conversationId" },
                value: { kind: "Variable", name: { kind: "Name", value: "conversationId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "createAsUser" },
                value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "displayIconUrl" },
                value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "issueId" },
                value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "partId" },
                value: { kind: "Variable", name: { kind: "Name", value: "partId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "title" },
                value: { kind: "Variable", name: { kind: "Name", value: "title" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
            },
          },
        ],
      },
    },
    ...AttachmentPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AttachmentLinkIntercomMutation, AttachmentLinkIntercomMutationVariables>;
export const AttachmentLinkJiraIssueDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "attachmentLinkJiraIssue" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "jiraIssueId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "title" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "url" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentLinkJiraIssue" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "createAsUser" },
                value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "displayIconUrl" },
                value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "issueId" },
                value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "jiraIssueId" },
                value: { kind: "Variable", name: { kind: "Name", value: "jiraIssueId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "title" },
                value: { kind: "Variable", name: { kind: "Name", value: "title" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "url" },
                value: { kind: "Variable", name: { kind: "Name", value: "url" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
            },
          },
        ],
      },
    },
    ...AttachmentPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AttachmentLinkJiraIssueMutation, AttachmentLinkJiraIssueMutationVariables>;
export const AttachmentLinkSalesforceDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "attachmentLinkSalesforce" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "title" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "url" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentLinkSalesforce" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "createAsUser" },
                value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "displayIconUrl" },
                value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "issueId" },
                value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "title" },
                value: { kind: "Variable", name: { kind: "Name", value: "title" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "url" },
                value: { kind: "Variable", name: { kind: "Name", value: "url" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
            },
          },
        ],
      },
    },
    ...AttachmentPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AttachmentLinkSalesforceMutation, AttachmentLinkSalesforceMutationVariables>;
export const AttachmentLinkSlackDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "attachmentLinkSlack" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "syncToCommentThread" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "title" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "url" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentLinkSlack" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "createAsUser" },
                value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "displayIconUrl" },
                value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "issueId" },
                value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "syncToCommentThread" },
                value: { kind: "Variable", name: { kind: "Name", value: "syncToCommentThread" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "title" },
                value: { kind: "Variable", name: { kind: "Name", value: "title" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "url" },
                value: { kind: "Variable", name: { kind: "Name", value: "url" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
            },
          },
        ],
      },
    },
    ...AttachmentPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AttachmentLinkSlackMutation, AttachmentLinkSlackMutationVariables>;
export const AttachmentLinkUrlDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "attachmentLinkURL" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "title" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "url" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentLinkURL" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "createAsUser" },
                value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "displayIconUrl" },
                value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "issueId" },
                value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "title" },
                value: { kind: "Variable", name: { kind: "Name", value: "title" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "url" },
                value: { kind: "Variable", name: { kind: "Name", value: "url" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
            },
          },
        ],
      },
    },
    ...AttachmentPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AttachmentLinkUrlMutation, AttachmentLinkUrlMutationVariables>;
export const AttachmentLinkZendeskDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "attachmentLinkZendesk" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "ticketId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "title" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "url" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentLinkZendesk" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "createAsUser" },
                value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "displayIconUrl" },
                value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "issueId" },
                value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "ticketId" },
                value: { kind: "Variable", name: { kind: "Name", value: "ticketId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "title" },
                value: { kind: "Variable", name: { kind: "Name", value: "title" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "url" },
                value: { kind: "Variable", name: { kind: "Name", value: "url" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
            },
          },
        ],
      },
    },
    ...AttachmentPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AttachmentLinkZendeskMutation, AttachmentLinkZendeskMutationVariables>;
export const AttachmentSyncToSlackDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "attachmentSyncToSlack" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentSyncToSlack" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
            },
          },
        ],
      },
    },
    ...AttachmentPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AttachmentSyncToSlackMutation, AttachmentSyncToSlackMutationVariables>;
export const UpdateAttachmentDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateAttachment" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
            },
          },
        ],
      },
    },
    ...AttachmentPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateAttachmentMutation, UpdateAttachmentMutationVariables>;
export const CreateCommentDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createComment" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "CommentCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "commentCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentPayload" } }],
            },
          },
        ],
      },
    },
    ...CommentPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateCommentMutation, CreateCommentMutationVariables>;
export const DeleteCommentDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteComment" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "commentDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
            },
          },
        ],
      },
    },
    ...DeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteCommentMutation, DeleteCommentMutationVariables>;
export const CommentResolveDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "commentResolve" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "resolvingCommentId" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "commentResolve" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "resolvingCommentId" },
                value: { kind: "Variable", name: { kind: "Name", value: "resolvingCommentId" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentPayload" } }],
            },
          },
        ],
      },
    },
    ...CommentPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CommentResolveMutation, CommentResolveMutationVariables>;
export const CommentUnresolveDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "commentUnresolve" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "commentUnresolve" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentPayload" } }],
            },
          },
        ],
      },
    },
    ...CommentPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CommentUnresolveMutation, CommentUnresolveMutationVariables>;
export const UpdateCommentDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateComment" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "CommentUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "commentUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentPayload" } }],
            },
          },
        ],
      },
    },
    ...CommentPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateCommentMutation, UpdateCommentMutationVariables>;
export const CreateContactDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createContact" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "ContactCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "contactCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ContactPayload" } }],
            },
          },
        ],
      },
    },
    ...ContactPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateContactMutation, CreateContactMutationVariables>;
export const CreateCsvExportReportDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createCsvExportReport" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includePrivateTeamIds" } },
          type: {
            kind: "ListType",
            type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "createCsvExportReport" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "includePrivateTeamIds" },
                value: { kind: "Variable", name: { kind: "Name", value: "includePrivateTeamIds" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CreateCsvExportReportPayload" } }],
            },
          },
        ],
      },
    },
    ...CreateCsvExportReportPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateCsvExportReportMutation, CreateCsvExportReportMutationVariables>;
export const CreateInitiativeUpdateReminderDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createInitiativeUpdateReminder" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "initiativeId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "userId" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "createInitiativeUpdateReminder" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "initiativeId" },
                value: { kind: "Variable", name: { kind: "Name", value: "initiativeId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "userId" },
                value: { kind: "Variable", name: { kind: "Name", value: "userId" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeUpdateReminderPayload" } },
              ],
            },
          },
        ],
      },
    },
    ...InitiativeUpdateReminderPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateInitiativeUpdateReminderMutation, CreateInitiativeUpdateReminderMutationVariables>;
export const CreateOrganizationFromOnboardingDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createOrganizationFromOnboarding" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "CreateOrganizationInput" } },
          },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "survey" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "OnboardingCustomerSurvey" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "createOrganizationFromOnboarding" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "survey" },
                value: { kind: "Variable", name: { kind: "Name", value: "survey" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" } },
              ],
            },
          },
        ],
      },
    },
    ...CreateOrJoinOrganizationResponseFragmentDoc.definitions,
    ...AuthOrganizationFragmentDoc.definitions,
    ...AuthUserFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  CreateOrganizationFromOnboardingMutation,
  CreateOrganizationFromOnboardingMutationVariables
>;
export const CreateProjectUpdateReminderDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createProjectUpdateReminder" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "projectId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "userId" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "createProjectUpdateReminder" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "projectId" },
                value: { kind: "Variable", name: { kind: "Name", value: "projectId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "userId" },
                value: { kind: "Variable", name: { kind: "Name", value: "userId" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateReminderPayload" } }],
            },
          },
        ],
      },
    },
    ...ProjectUpdateReminderPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateProjectUpdateReminderMutation, CreateProjectUpdateReminderMutationVariables>;
export const CreateCustomViewDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createCustomView" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "CustomViewCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "customViewCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomViewPayload" } }],
            },
          },
        ],
      },
    },
    ...CustomViewPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateCustomViewMutation, CreateCustomViewMutationVariables>;
export const DeleteCustomViewDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteCustomView" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "customViewDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
            },
          },
        ],
      },
    },
    ...DeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteCustomViewMutation, DeleteCustomViewMutationVariables>;
export const UpdateCustomViewDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateCustomView" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "CustomViewUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "customViewUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomViewPayload" } }],
            },
          },
        ],
      },
    },
    ...CustomViewPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateCustomViewMutation, UpdateCustomViewMutationVariables>;
export const CreateCustomerDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createCustomer" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "CustomerCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "customerCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerPayload" } }],
            },
          },
        ],
      },
    },
    ...CustomerPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateCustomerMutation, CreateCustomerMutationVariables>;
export const DeleteCustomerDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteCustomer" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "customerDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
            },
          },
        ],
      },
    },
    ...DeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteCustomerMutation, DeleteCustomerMutationVariables>;
export const CustomerMergeDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "customerMerge" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "sourceCustomerId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "targetCustomerId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "customerMerge" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "sourceCustomerId" },
                value: { kind: "Variable", name: { kind: "Name", value: "sourceCustomerId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "targetCustomerId" },
                value: { kind: "Variable", name: { kind: "Name", value: "targetCustomerId" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerPayload" } }],
            },
          },
        ],
      },
    },
    ...CustomerPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CustomerMergeMutation, CustomerMergeMutationVariables>;
export const ArchiveCustomerNeedDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "archiveCustomerNeed" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "customerNeedArchive" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...CustomerNeedArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ArchiveCustomerNeedMutation, ArchiveCustomerNeedMutationVariables>;
export const CreateCustomerNeedDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createCustomerNeed" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "customerNeedCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedPayload" } }],
            },
          },
        ],
      },
    },
    ...CustomerNeedPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateCustomerNeedMutation, CreateCustomerNeedMutationVariables>;
export const CustomerNeedCreateFromAttachmentDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "customerNeedCreateFromAttachment" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedCreateFromAttachmentInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "customerNeedCreateFromAttachment" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedPayload" } }],
            },
          },
        ],
      },
    },
    ...CustomerNeedPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  CustomerNeedCreateFromAttachmentMutation,
  CustomerNeedCreateFromAttachmentMutationVariables
>;
export const DeleteCustomerNeedDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteCustomerNeed" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "keepAttachment" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "customerNeedDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "keepAttachment" },
                value: { kind: "Variable", name: { kind: "Name", value: "keepAttachment" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
            },
          },
        ],
      },
    },
    ...DeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteCustomerNeedMutation, DeleteCustomerNeedMutationVariables>;
export const UnarchiveCustomerNeedDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "unarchiveCustomerNeed" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "customerNeedUnarchive" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...CustomerNeedArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UnarchiveCustomerNeedMutation, UnarchiveCustomerNeedMutationVariables>;
export const UpdateCustomerNeedDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateCustomerNeed" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "customerNeedUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedUpdatePayload" } }],
            },
          },
        ],
      },
    },
    ...CustomerNeedUpdatePayloadFragmentDoc.definitions,
    ...CustomerNeedFragmentDoc.definitions,
    ...ProjectAttachmentFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateCustomerNeedMutation, UpdateCustomerNeedMutationVariables>;
export const CreateCustomerStatusDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createCustomerStatus" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "CustomerStatusCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "customerStatusCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerStatusPayload" } }],
            },
          },
        ],
      },
    },
    ...CustomerStatusPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateCustomerStatusMutation, CreateCustomerStatusMutationVariables>;
export const DeleteCustomerStatusDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteCustomerStatus" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "customerStatusDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
            },
          },
        ],
      },
    },
    ...DeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteCustomerStatusMutation, DeleteCustomerStatusMutationVariables>;
export const UpdateCustomerStatusDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateCustomerStatus" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "CustomerStatusUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "customerStatusUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerStatusPayload" } }],
            },
          },
        ],
      },
    },
    ...CustomerStatusPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateCustomerStatusMutation, UpdateCustomerStatusMutationVariables>;
export const CreateCustomerTierDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createCustomerTier" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "CustomerTierCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "customerTierCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerTierPayload" } }],
            },
          },
        ],
      },
    },
    ...CustomerTierPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateCustomerTierMutation, CreateCustomerTierMutationVariables>;
export const DeleteCustomerTierDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteCustomerTier" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "customerTierDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
            },
          },
        ],
      },
    },
    ...DeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteCustomerTierMutation, DeleteCustomerTierMutationVariables>;
export const UpdateCustomerTierDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateCustomerTier" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "CustomerTierUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "customerTierUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerTierPayload" } }],
            },
          },
        ],
      },
    },
    ...CustomerTierPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateCustomerTierMutation, UpdateCustomerTierMutationVariables>;
export const UpdateCustomerDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateCustomer" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "CustomerUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "customerUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerPayload" } }],
            },
          },
        ],
      },
    },
    ...CustomerPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateCustomerMutation, UpdateCustomerMutationVariables>;
export const CustomerUpsertDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "customerUpsert" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "CustomerUpsertInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "customerUpsert" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerPayload" } }],
            },
          },
        ],
      },
    },
    ...CustomerPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CustomerUpsertMutation, CustomerUpsertMutationVariables>;
export const ArchiveCycleDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "archiveCycle" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "cycleArchive" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CycleArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...CycleArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ArchiveCycleMutation, ArchiveCycleMutationVariables>;
export const CreateCycleDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createCycle" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CycleCreateInput" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "cycleCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CyclePayload" } }],
            },
          },
        ],
      },
    },
    ...CyclePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateCycleMutation, CreateCycleMutationVariables>;
export const CycleShiftAllDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "cycleShiftAll" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "CycleShiftAllInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "cycleShiftAll" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CyclePayload" } }],
            },
          },
        ],
      },
    },
    ...CyclePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CycleShiftAllMutation, CycleShiftAllMutationVariables>;
export const CycleStartUpcomingCycleTodayDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "cycleStartUpcomingCycleToday" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "cycleStartUpcomingCycleToday" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CyclePayload" } }],
            },
          },
        ],
      },
    },
    ...CyclePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CycleStartUpcomingCycleTodayMutation, CycleStartUpcomingCycleTodayMutationVariables>;
export const UpdateCycleDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateCycle" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CycleUpdateInput" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "cycleUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CyclePayload" } }],
            },
          },
        ],
      },
    },
    ...CyclePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateCycleMutation, UpdateCycleMutationVariables>;
export const CreateDocumentDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createDocument" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "DocumentCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "documentCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentPayload" } }],
            },
          },
        ],
      },
    },
    ...DocumentPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateDocumentMutation, CreateDocumentMutationVariables>;
export const DeleteDocumentDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteDocument" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "documentDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...DocumentArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteDocumentMutation, DeleteDocumentMutationVariables>;
export const UnarchiveDocumentDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "unarchiveDocument" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "documentUnarchive" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...DocumentArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UnarchiveDocumentMutation, UnarchiveDocumentMutationVariables>;
export const UpdateDocumentDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateDocument" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "DocumentUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "documentUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentPayload" } }],
            },
          },
        ],
      },
    },
    ...DocumentPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateDocumentMutation, UpdateDocumentMutationVariables>;
export const CreateEmailIntakeAddressDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createEmailIntakeAddress" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "EmailIntakeAddressCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "emailIntakeAddressCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmailIntakeAddressPayload" } }],
            },
          },
        ],
      },
    },
    ...EmailIntakeAddressPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateEmailIntakeAddressMutation, CreateEmailIntakeAddressMutationVariables>;
export const DeleteEmailIntakeAddressDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteEmailIntakeAddress" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "emailIntakeAddressDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
            },
          },
        ],
      },
    },
    ...DeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteEmailIntakeAddressMutation, DeleteEmailIntakeAddressMutationVariables>;
export const EmailIntakeAddressRotateDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "emailIntakeAddressRotate" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "emailIntakeAddressRotate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmailIntakeAddressPayload" } }],
            },
          },
        ],
      },
    },
    ...EmailIntakeAddressPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<EmailIntakeAddressRotateMutation, EmailIntakeAddressRotateMutationVariables>;
export const UpdateEmailIntakeAddressDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateEmailIntakeAddress" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "EmailIntakeAddressUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "emailIntakeAddressUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmailIntakeAddressPayload" } }],
            },
          },
        ],
      },
    },
    ...EmailIntakeAddressPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateEmailIntakeAddressMutation, UpdateEmailIntakeAddressMutationVariables>;
export const EmailTokenUserAccountAuthDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "emailTokenUserAccountAuth" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "TokenUserAccountAuthInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "emailTokenUserAccountAuth" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthResolverResponse" } }],
            },
          },
        ],
      },
    },
    ...AuthResolverResponseFragmentDoc.definitions,
    ...AuthUserFragmentDoc.definitions,
    ...AuthOrganizationFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<EmailTokenUserAccountAuthMutation, EmailTokenUserAccountAuthMutationVariables>;
export const EmailUnsubscribeDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "emailUnsubscribe" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "EmailUnsubscribeInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "emailUnsubscribe" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmailUnsubscribePayload" } }],
            },
          },
        ],
      },
    },
    ...EmailUnsubscribePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<EmailUnsubscribeMutation, EmailUnsubscribeMutationVariables>;
export const EmailUserAccountAuthChallengeDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "emailUserAccountAuthChallenge" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "EmailUserAccountAuthChallengeInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "emailUserAccountAuthChallenge" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "EmailUserAccountAuthChallengeResponse" } },
              ],
            },
          },
        ],
      },
    },
    ...EmailUserAccountAuthChallengeResponseFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<EmailUserAccountAuthChallengeMutation, EmailUserAccountAuthChallengeMutationVariables>;
export const CreateEmojiDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createEmoji" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "EmojiCreateInput" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "emojiCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmojiPayload" } }],
            },
          },
        ],
      },
    },
    ...EmojiPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateEmojiMutation, CreateEmojiMutationVariables>;
export const DeleteEmojiDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteEmoji" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "emojiDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
            },
          },
        ],
      },
    },
    ...DeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteEmojiMutation, DeleteEmojiMutationVariables>;
export const CreateEntityExternalLinkDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createEntityExternalLink" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "EntityExternalLinkCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "entityExternalLinkCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EntityExternalLinkPayload" } }],
            },
          },
        ],
      },
    },
    ...EntityExternalLinkPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateEntityExternalLinkMutation, CreateEntityExternalLinkMutationVariables>;
export const DeleteEntityExternalLinkDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteEntityExternalLink" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "entityExternalLinkDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
            },
          },
        ],
      },
    },
    ...DeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteEntityExternalLinkMutation, DeleteEntityExternalLinkMutationVariables>;
export const UpdateEntityExternalLinkDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateEntityExternalLink" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "EntityExternalLinkUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "entityExternalLinkUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EntityExternalLinkPayload" } }],
            },
          },
        ],
      },
    },
    ...EntityExternalLinkPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateEntityExternalLinkMutation, UpdateEntityExternalLinkMutationVariables>;
export const CreateFavoriteDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createFavorite" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "FavoriteCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "favoriteCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FavoritePayload" } }],
            },
          },
        ],
      },
    },
    ...FavoritePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateFavoriteMutation, CreateFavoriteMutationVariables>;
export const DeleteFavoriteDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteFavorite" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "favoriteDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
            },
          },
        ],
      },
    },
    ...DeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteFavoriteMutation, DeleteFavoriteMutationVariables>;
export const UpdateFavoriteDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateFavorite" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "FavoriteUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "favoriteUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FavoritePayload" } }],
            },
          },
        ],
      },
    },
    ...FavoritePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateFavoriteMutation, UpdateFavoriteMutationVariables>;
export const FileUploadDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "fileUpload" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "contentType" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filename" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "makePublic" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "metaData" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "JSON" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "size" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "fileUpload" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "contentType" },
                value: { kind: "Variable", name: { kind: "Name", value: "contentType" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "filename" },
                value: { kind: "Variable", name: { kind: "Name", value: "filename" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "makePublic" },
                value: { kind: "Variable", name: { kind: "Name", value: "makePublic" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "metaData" },
                value: { kind: "Variable", name: { kind: "Name", value: "metaData" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "size" },
                value: { kind: "Variable", name: { kind: "Name", value: "size" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UploadPayload" } }],
            },
          },
        ],
      },
    },
    ...UploadPayloadFragmentDoc.definitions,
    ...UploadFileFragmentDoc.definitions,
    ...UploadFileHeaderFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<FileUploadMutation, FileUploadMutationVariables>;
export const CreateGitAutomationStateDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createGitAutomationState" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationStateCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "gitAutomationStateCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationStatePayload" } }],
            },
          },
        ],
      },
    },
    ...GitAutomationStatePayloadFragmentDoc.definitions,
    ...GitAutomationStateFragmentDoc.definitions,
    ...GitAutomationTargetBranchFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateGitAutomationStateMutation, CreateGitAutomationStateMutationVariables>;
export const DeleteGitAutomationStateDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteGitAutomationState" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "gitAutomationStateDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
            },
          },
        ],
      },
    },
    ...DeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteGitAutomationStateMutation, DeleteGitAutomationStateMutationVariables>;
export const UpdateGitAutomationStateDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateGitAutomationState" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationStateUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "gitAutomationStateUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationStatePayload" } }],
            },
          },
        ],
      },
    },
    ...GitAutomationStatePayloadFragmentDoc.definitions,
    ...GitAutomationStateFragmentDoc.definitions,
    ...GitAutomationTargetBranchFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateGitAutomationStateMutation, UpdateGitAutomationStateMutationVariables>;
export const CreateGitAutomationTargetBranchDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createGitAutomationTargetBranch" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationTargetBranchCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "gitAutomationTargetBranchCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationTargetBranchPayload" } },
              ],
            },
          },
        ],
      },
    },
    ...GitAutomationTargetBranchPayloadFragmentDoc.definitions,
    ...GitAutomationTargetBranchFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateGitAutomationTargetBranchMutation, CreateGitAutomationTargetBranchMutationVariables>;
export const DeleteGitAutomationTargetBranchDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteGitAutomationTargetBranch" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "gitAutomationTargetBranchDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
            },
          },
        ],
      },
    },
    ...DeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteGitAutomationTargetBranchMutation, DeleteGitAutomationTargetBranchMutationVariables>;
export const UpdateGitAutomationTargetBranchDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateGitAutomationTargetBranch" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationTargetBranchUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "gitAutomationTargetBranchUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationTargetBranchPayload" } },
              ],
            },
          },
        ],
      },
    },
    ...GitAutomationTargetBranchPayloadFragmentDoc.definitions,
    ...GitAutomationTargetBranchFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateGitAutomationTargetBranchMutation, UpdateGitAutomationTargetBranchMutationVariables>;
export const GoogleUserAccountAuthDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "googleUserAccountAuth" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "GoogleUserAccountAuthInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "googleUserAccountAuth" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthResolverResponse" } }],
            },
          },
        ],
      },
    },
    ...AuthResolverResponseFragmentDoc.definitions,
    ...AuthUserFragmentDoc.definitions,
    ...AuthOrganizationFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<GoogleUserAccountAuthMutation, GoogleUserAccountAuthMutationVariables>;
export const ImageUploadFromUrlDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "imageUploadFromUrl" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "url" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "imageUploadFromUrl" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "url" },
                value: { kind: "Variable", name: { kind: "Name", value: "url" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ImageUploadFromUrlPayload" } }],
            },
          },
        ],
      },
    },
    ...ImageUploadFromUrlPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ImageUploadFromUrlMutation, ImageUploadFromUrlMutationVariables>;
export const ImportFileUploadDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "importFileUpload" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "contentType" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filename" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "metaData" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "JSON" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "size" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "importFileUpload" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "contentType" },
                value: { kind: "Variable", name: { kind: "Name", value: "contentType" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "filename" },
                value: { kind: "Variable", name: { kind: "Name", value: "filename" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "metaData" },
                value: { kind: "Variable", name: { kind: "Name", value: "metaData" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "size" },
                value: { kind: "Variable", name: { kind: "Name", value: "size" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UploadPayload" } }],
            },
          },
        ],
      },
    },
    ...UploadPayloadFragmentDoc.definitions,
    ...UploadFileFragmentDoc.definitions,
    ...UploadFileHeaderFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ImportFileUploadMutation, ImportFileUploadMutationVariables>;
export const ArchiveInitiativeDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "archiveInitiative" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "initiativeArchive" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...InitiativeArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ArchiveInitiativeMutation, ArchiveInitiativeMutationVariables>;
export const CreateInitiativeDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createInitiative" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "initiativeCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativePayload" } }],
            },
          },
        ],
      },
    },
    ...InitiativePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateInitiativeMutation, CreateInitiativeMutationVariables>;
export const DeleteInitiativeDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteInitiative" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "initiativeDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
            },
          },
        ],
      },
    },
    ...DeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteInitiativeMutation, DeleteInitiativeMutationVariables>;
export const CreateInitiativeRelationDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createInitiativeRelation" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeRelationCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "initiativeRelationCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeRelationPayload" } }],
            },
          },
        ],
      },
    },
    ...InitiativeRelationPayloadFragmentDoc.definitions,
    ...InitiativeRelationFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateInitiativeRelationMutation, CreateInitiativeRelationMutationVariables>;
export const DeleteInitiativeRelationDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteInitiativeRelation" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "initiativeRelationDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
            },
          },
        ],
      },
    },
    ...DeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteInitiativeRelationMutation, DeleteInitiativeRelationMutationVariables>;
export const UpdateInitiativeRelationDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateInitiativeRelation" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeRelationUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "initiativeRelationUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
            },
          },
        ],
      },
    },
    ...DeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateInitiativeRelationMutation, UpdateInitiativeRelationMutationVariables>;
export const CreateInitiativeToProjectDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createInitiativeToProject" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeToProjectCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "initiativeToProjectCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeToProjectPayload" } }],
            },
          },
        ],
      },
    },
    ...InitiativeToProjectPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateInitiativeToProjectMutation, CreateInitiativeToProjectMutationVariables>;
export const DeleteInitiativeToProjectDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteInitiativeToProject" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "initiativeToProjectDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
            },
          },
        ],
      },
    },
    ...DeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteInitiativeToProjectMutation, DeleteInitiativeToProjectMutationVariables>;
export const UpdateInitiativeToProjectDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateInitiativeToProject" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeToProjectUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "initiativeToProjectUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeToProjectPayload" } }],
            },
          },
        ],
      },
    },
    ...InitiativeToProjectPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateInitiativeToProjectMutation, UpdateInitiativeToProjectMutationVariables>;
export const UnarchiveInitiativeDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "unarchiveInitiative" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "initiativeUnarchive" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...InitiativeArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UnarchiveInitiativeMutation, UnarchiveInitiativeMutationVariables>;
export const UpdateInitiativeDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateInitiative" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "initiativeUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativePayload" } }],
            },
          },
        ],
      },
    },
    ...InitiativePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateInitiativeMutation, UpdateInitiativeMutationVariables>;
export const ArchiveInitiativeUpdateDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "archiveInitiativeUpdate" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "initiativeUpdateArchive" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeUpdateArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...InitiativeUpdateArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ArchiveInitiativeUpdateMutation, ArchiveInitiativeUpdateMutationVariables>;
export const CreateInitiativeUpdateDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createInitiativeUpdate" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdateCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "initiativeUpdateCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeUpdatePayload" } }],
            },
          },
        ],
      },
    },
    ...InitiativeUpdatePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateInitiativeUpdateMutation, CreateInitiativeUpdateMutationVariables>;
export const UnarchiveInitiativeUpdateDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "unarchiveInitiativeUpdate" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "initiativeUpdateUnarchive" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeUpdateArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...InitiativeUpdateArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UnarchiveInitiativeUpdateMutation, UnarchiveInitiativeUpdateMutationVariables>;
export const UpdateInitiativeUpdateDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateInitiativeUpdate" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdateUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "initiativeUpdateUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeUpdatePayload" } }],
            },
          },
        ],
      },
    },
    ...InitiativeUpdatePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateInitiativeUpdateMutation, UpdateInitiativeUpdateMutationVariables>;
export const ArchiveIntegrationDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "archiveIntegration" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationArchive" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
            },
          },
        ],
      },
    },
    ...DeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ArchiveIntegrationMutation, ArchiveIntegrationMutationVariables>;
export const IntegrationAsksConnectChannelDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "integrationAsksConnectChannel" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationAsksConnectChannel" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "code" },
                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "redirectUri" },
                value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AsksChannelConnectPayload" } }],
            },
          },
        ],
      },
    },
    ...AsksChannelConnectPayloadFragmentDoc.definitions,
    ...SlackChannelNameMappingFragmentDoc.definitions,
    ...SlackAsksTeamSettingsFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationAsksConnectChannelMutation, IntegrationAsksConnectChannelMutationVariables>;
export const DeleteIntegrationDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteIntegration" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "skipInstallationDeletion" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "skipInstallationDeletion" },
                value: { kind: "Variable", name: { kind: "Name", value: "skipInstallationDeletion" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
            },
          },
        ],
      },
    },
    ...DeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteIntegrationMutation, DeleteIntegrationMutationVariables>;
export const IntegrationDiscordDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "integrationDiscord" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationDiscord" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "code" },
                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "redirectUri" },
                value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationDiscordMutation, IntegrationDiscordMutationVariables>;
export const IntegrationFigmaDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "integrationFigma" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationFigma" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "code" },
                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "redirectUri" },
                value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationFigmaMutation, IntegrationFigmaMutationVariables>;
export const IntegrationFrontDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "integrationFront" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationFront" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "code" },
                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "redirectUri" },
                value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationFrontMutation, IntegrationFrontMutationVariables>;
export const IntegrationGitHubEnterpriseServerConnectDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "integrationGitHubEnterpriseServerConnect" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "githubUrl" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "organizationName" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationGitHubEnterpriseServerConnect" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "githubUrl" },
                value: { kind: "Variable", name: { kind: "Name", value: "githubUrl" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "organizationName" },
                value: { kind: "Variable", name: { kind: "Name", value: "organizationName" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitHubEnterpriseServerPayload" } }],
            },
          },
        ],
      },
    },
    ...GitHubEnterpriseServerPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  IntegrationGitHubEnterpriseServerConnectMutation,
  IntegrationGitHubEnterpriseServerConnectMutationVariables
>;
export const IntegrationGitHubPersonalDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "integrationGitHubPersonal" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "codeAccess" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationGitHubPersonal" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "code" },
                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "codeAccess" },
                value: { kind: "Variable", name: { kind: "Name", value: "codeAccess" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationGitHubPersonalMutation, IntegrationGitHubPersonalMutationVariables>;
export const CreateIntegrationGithubCommitDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createIntegrationGithubCommit" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationGithubCommitCreate" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitHubCommitIntegrationPayload" } }],
            },
          },
        ],
      },
    },
    ...GitHubCommitIntegrationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateIntegrationGithubCommitMutation, CreateIntegrationGithubCommitMutationVariables>;
export const IntegrationGithubConnectDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "integrationGithubConnect" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "codeAccess" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "installationId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationGithubConnect" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "code" },
                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "codeAccess" },
                value: { kind: "Variable", name: { kind: "Name", value: "codeAccess" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "installationId" },
                value: { kind: "Variable", name: { kind: "Name", value: "installationId" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationGithubConnectMutation, IntegrationGithubConnectMutationVariables>;
export const IntegrationGithubImportConnectDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "integrationGithubImportConnect" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "installationId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationGithubImportConnect" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "code" },
                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "installationId" },
                value: { kind: "Variable", name: { kind: "Name", value: "installationId" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationGithubImportConnectMutation, IntegrationGithubImportConnectMutationVariables>;
export const IntegrationGithubImportRefreshDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "integrationGithubImportRefresh" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationGithubImportRefresh" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationGithubImportRefreshMutation, IntegrationGithubImportRefreshMutationVariables>;
export const IntegrationGitlabConnectDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "integrationGitlabConnect" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "accessToken" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "gitlabUrl" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationGitlabConnect" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "accessToken" },
                value: { kind: "Variable", name: { kind: "Name", value: "accessToken" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "gitlabUrl" },
                value: { kind: "Variable", name: { kind: "Name", value: "gitlabUrl" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitLabIntegrationCreatePayload" } }],
            },
          },
        ],
      },
    },
    ...GitLabIntegrationCreatePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationGitlabConnectMutation, IntegrationGitlabConnectMutationVariables>;
export const IntegrationGoogleSheetsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "integrationGoogleSheets" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationGoogleSheets" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "code" },
                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationGoogleSheetsMutation, IntegrationGoogleSheetsMutationVariables>;
export const IntegrationIntercomDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "integrationIntercom" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "domainUrl" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationIntercom" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "code" },
                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "domainUrl" },
                value: { kind: "Variable", name: { kind: "Name", value: "domainUrl" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "redirectUri" },
                value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationIntercomMutation, IntegrationIntercomMutationVariables>;
export const DeleteIntegrationIntercomDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteIntegrationIntercom" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationIntercomDelete" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteIntegrationIntercomMutation, DeleteIntegrationIntercomMutationVariables>;
export const UpdateIntegrationIntercomSettingsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateIntegrationIntercomSettings" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "IntercomSettingsInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationIntercomSettingsUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  UpdateIntegrationIntercomSettingsMutation,
  UpdateIntegrationIntercomSettingsMutationVariables
>;
export const IntegrationJiraPersonalDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "integrationJiraPersonal" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "accessToken" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationJiraPersonal" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "accessToken" },
                value: { kind: "Variable", name: { kind: "Name", value: "accessToken" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "code" },
                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationJiraPersonalMutation, IntegrationJiraPersonalMutationVariables>;
export const IntegrationLoomDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "integrationLoom" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationLoom" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationLoomMutation, IntegrationLoomMutationVariables>;
export const IntegrationRequestDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "integrationRequest" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "IntegrationRequestInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationRequest" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationRequestPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationRequestPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationRequestMutation, IntegrationRequestMutationVariables>;
export const IntegrationSalesforceDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "integrationSalesforce" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "subdomain" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationSalesforce" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "code" },
                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "redirectUri" },
                value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "subdomain" },
                value: { kind: "Variable", name: { kind: "Name", value: "subdomain" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationSalesforceMutation, IntegrationSalesforceMutationVariables>;
export const IntegrationSentryConnectDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "integrationSentryConnect" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "installationId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "organizationSlug" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationSentryConnect" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "code" },
                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "installationId" },
                value: { kind: "Variable", name: { kind: "Name", value: "installationId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "organizationSlug" },
                value: { kind: "Variable", name: { kind: "Name", value: "organizationSlug" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationSentryConnectMutation, IntegrationSentryConnectMutationVariables>;
export const IntegrationSlackDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "integrationSlack" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "shouldUseV2Auth" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationSlack" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "code" },
                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "redirectUri" },
                value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "shouldUseV2Auth" },
                value: { kind: "Variable", name: { kind: "Name", value: "shouldUseV2Auth" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationSlackMutation, IntegrationSlackMutationVariables>;
export const IntegrationSlackAsksDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "integrationSlackAsks" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationSlackAsks" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "code" },
                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "redirectUri" },
                value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationSlackAsksMutation, IntegrationSlackAsksMutationVariables>;
export const IntegrationSlackCustomViewNotificationsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "integrationSlackCustomViewNotifications" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "customViewId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationSlackCustomViewNotifications" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "code" },
                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "customViewId" },
                value: { kind: "Variable", name: { kind: "Name", value: "customViewId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "redirectUri" },
                value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackChannelConnectPayload" } }],
            },
          },
        ],
      },
    },
    ...SlackChannelConnectPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  IntegrationSlackCustomViewNotificationsMutation,
  IntegrationSlackCustomViewNotificationsMutationVariables
>;
export const IntegrationSlackCustomerChannelLinkDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "integrationSlackCustomerChannelLink" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "customerId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationSlackCustomerChannelLink" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "code" },
                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "customerId" },
                value: { kind: "Variable", name: { kind: "Name", value: "customerId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "redirectUri" },
                value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SuccessPayload" } }],
            },
          },
        ],
      },
    },
    ...SuccessPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  IntegrationSlackCustomerChannelLinkMutation,
  IntegrationSlackCustomerChannelLinkMutationVariables
>;
export const IntegrationSlackImportEmojisDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "integrationSlackImportEmojis" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationSlackImportEmojis" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "code" },
                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "redirectUri" },
                value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationSlackImportEmojisMutation, IntegrationSlackImportEmojisMutationVariables>;
export const IntegrationSlackOrAsksUpdateSlackTeamNameDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "integrationSlackOrAsksUpdateSlackTeamName" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "integrationId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationSlackOrAsksUpdateSlackTeamName" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "integrationId" },
                value: { kind: "Variable", name: { kind: "Name", value: "integrationId" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationSlackWorkspaceNamePayload" } },
              ],
            },
          },
        ],
      },
    },
    ...IntegrationSlackWorkspaceNamePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  IntegrationSlackOrAsksUpdateSlackTeamNameMutation,
  IntegrationSlackOrAsksUpdateSlackTeamNameMutationVariables
>;
export const IntegrationSlackOrgProjectUpdatesPostDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "integrationSlackOrgProjectUpdatesPost" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationSlackOrgProjectUpdatesPost" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "code" },
                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "redirectUri" },
                value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackChannelConnectPayload" } }],
            },
          },
        ],
      },
    },
    ...SlackChannelConnectPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  IntegrationSlackOrgProjectUpdatesPostMutation,
  IntegrationSlackOrgProjectUpdatesPostMutationVariables
>;
export const IntegrationSlackPersonalDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "integrationSlackPersonal" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationSlackPersonal" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "code" },
                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "redirectUri" },
                value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationSlackPersonalMutation, IntegrationSlackPersonalMutationVariables>;
export const IntegrationSlackPostDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "integrationSlackPost" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "shouldUseV2Auth" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationSlackPost" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "code" },
                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "redirectUri" },
                value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "shouldUseV2Auth" },
                value: { kind: "Variable", name: { kind: "Name", value: "shouldUseV2Auth" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "teamId" },
                value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackChannelConnectPayload" } }],
            },
          },
        ],
      },
    },
    ...SlackChannelConnectPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationSlackPostMutation, IntegrationSlackPostMutationVariables>;
export const IntegrationSlackProjectPostDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "integrationSlackProjectPost" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "projectId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "service" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationSlackProjectPost" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "code" },
                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "projectId" },
                value: { kind: "Variable", name: { kind: "Name", value: "projectId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "redirectUri" },
                value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "service" },
                value: { kind: "Variable", name: { kind: "Name", value: "service" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackChannelConnectPayload" } }],
            },
          },
        ],
      },
    },
    ...SlackChannelConnectPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationSlackProjectPostMutation, IntegrationSlackProjectPostMutationVariables>;
export const CreateIntegrationTemplateDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createIntegrationTemplate" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "IntegrationTemplateCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationTemplateCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationTemplatePayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationTemplatePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateIntegrationTemplateMutation, CreateIntegrationTemplateMutationVariables>;
export const DeleteIntegrationTemplateDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteIntegrationTemplate" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationTemplateDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
            },
          },
        ],
      },
    },
    ...DeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteIntegrationTemplateMutation, DeleteIntegrationTemplateMutationVariables>;
export const IntegrationZendeskDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "integrationZendesk" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "scope" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "subdomain" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationZendesk" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "code" },
                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "redirectUri" },
                value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "scope" },
                value: { kind: "Variable", name: { kind: "Name", value: "scope" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "subdomain" },
                value: { kind: "Variable", name: { kind: "Name", value: "subdomain" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationZendeskMutation, IntegrationZendeskMutationVariables>;
export const CreateIntegrationsSettingsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createIntegrationsSettings" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "IntegrationsSettingsCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationsSettingsCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationsSettingsPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationsSettingsPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateIntegrationsSettingsMutation, CreateIntegrationsSettingsMutationVariables>;
export const UpdateIntegrationsSettingsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateIntegrationsSettings" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "IntegrationsSettingsUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationsSettingsUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationsSettingsPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationsSettingsPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateIntegrationsSettingsMutation, UpdateIntegrationsSettingsMutationVariables>;
export const IssueAddLabelDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "issueAddLabel" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "labelId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueAddLabel" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "labelId" },
                value: { kind: "Variable", name: { kind: "Name", value: "labelId" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }],
            },
          },
        ],
      },
    },
    ...IssuePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueAddLabelMutation, IssueAddLabelMutationVariables>;
export const ArchiveIssueDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "archiveIssue" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "trash" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueArchive" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "trash" },
                value: { kind: "Variable", name: { kind: "Name", value: "trash" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...IssueArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ArchiveIssueMutation, ArchiveIssueMutationVariables>;
export const CreateIssueBatchDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createIssueBatch" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "IssueBatchCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueBatchCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueBatchPayload" } }],
            },
          },
        ],
      },
    },
    ...IssueBatchPayloadFragmentDoc.definitions,
    ...IssueFragmentDoc.definitions,
    ...ReactionFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...ExternalEntityInfoFragmentDoc.definitions,
    ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
    ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
    ...ExternalEntitySlackMetadataFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateIssueBatchMutation, CreateIssueBatchMutationVariables>;
export const UpdateIssueBatchDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateIssueBatch" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "ids" } },
          type: {
            kind: "NonNullType",
            type: {
              kind: "ListType",
              type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "UUID" } } },
            },
          },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueUpdateInput" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueBatchUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "ids" },
                value: { kind: "Variable", name: { kind: "Name", value: "ids" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueBatchPayload" } }],
            },
          },
        ],
      },
    },
    ...IssueBatchPayloadFragmentDoc.definitions,
    ...IssueFragmentDoc.definitions,
    ...ReactionFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...ExternalEntityInfoFragmentDoc.definitions,
    ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
    ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
    ...ExternalEntitySlackMetadataFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateIssueBatchMutation, UpdateIssueBatchMutationVariables>;
export const CreateIssueDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createIssue" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueCreateInput" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }],
            },
          },
        ],
      },
    },
    ...IssuePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateIssueMutation, CreateIssueMutationVariables>;
export const DeleteIssueDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteIssue" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "permanentlyDelete" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "permanentlyDelete" },
                value: { kind: "Variable", name: { kind: "Name", value: "permanentlyDelete" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...IssueArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteIssueMutation, DeleteIssueMutationVariables>;
export const IssueImportCreateAsanaDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "issueImportCreateAsana" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "asanaTeamName" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "asanaToken" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "teamName" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueImportCreateAsana" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "asanaTeamName" },
                value: { kind: "Variable", name: { kind: "Name", value: "asanaTeamName" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "asanaToken" },
                value: { kind: "Variable", name: { kind: "Name", value: "asanaToken" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeClosedIssues" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "instantProcess" },
                value: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "teamId" },
                value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "teamName" },
                value: { kind: "Variable", name: { kind: "Name", value: "teamName" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }],
            },
          },
        ],
      },
    },
    ...IssueImportPayloadFragmentDoc.definitions,
    ...IssueImportFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueImportCreateAsanaMutation, IssueImportCreateAsanaMutationVariables>;
export const IssueImportCreateCsvJiraDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "issueImportCreateCSVJira" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "csvUrl" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "jiraEmail" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "jiraHostname" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "jiraToken" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "teamName" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueImportCreateCSVJira" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "csvUrl" },
                value: { kind: "Variable", name: { kind: "Name", value: "csvUrl" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "jiraEmail" },
                value: { kind: "Variable", name: { kind: "Name", value: "jiraEmail" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "jiraHostname" },
                value: { kind: "Variable", name: { kind: "Name", value: "jiraHostname" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "jiraToken" },
                value: { kind: "Variable", name: { kind: "Name", value: "jiraToken" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "teamId" },
                value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "teamName" },
                value: { kind: "Variable", name: { kind: "Name", value: "teamName" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }],
            },
          },
        ],
      },
    },
    ...IssueImportPayloadFragmentDoc.definitions,
    ...IssueImportFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueImportCreateCsvJiraMutation, IssueImportCreateCsvJiraMutationVariables>;
export const IssueImportCreateClubhouseDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "issueImportCreateClubhouse" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "clubhouseGroupName" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "clubhouseToken" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "teamName" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueImportCreateClubhouse" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "clubhouseGroupName" },
                value: { kind: "Variable", name: { kind: "Name", value: "clubhouseGroupName" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "clubhouseToken" },
                value: { kind: "Variable", name: { kind: "Name", value: "clubhouseToken" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeClosedIssues" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "instantProcess" },
                value: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "teamId" },
                value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "teamName" },
                value: { kind: "Variable", name: { kind: "Name", value: "teamName" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }],
            },
          },
        ],
      },
    },
    ...IssueImportPayloadFragmentDoc.definitions,
    ...IssueImportFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueImportCreateClubhouseMutation, IssueImportCreateClubhouseMutationVariables>;
export const IssueImportCreateGithubDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "issueImportCreateGithub" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "githubLabels" } },
          type: {
            kind: "ListType",
            type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
          },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "githubRepoIds" } },
          type: {
            kind: "ListType",
            type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } },
          },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "teamName" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueImportCreateGithub" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "githubLabels" },
                value: { kind: "Variable", name: { kind: "Name", value: "githubLabels" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "githubRepoIds" },
                value: { kind: "Variable", name: { kind: "Name", value: "githubRepoIds" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeClosedIssues" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "instantProcess" },
                value: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "teamId" },
                value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "teamName" },
                value: { kind: "Variable", name: { kind: "Name", value: "teamName" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }],
            },
          },
        ],
      },
    },
    ...IssueImportPayloadFragmentDoc.definitions,
    ...IssueImportFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueImportCreateGithubMutation, IssueImportCreateGithubMutationVariables>;
export const IssueImportCreateJiraDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "issueImportCreateJira" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "jiraEmail" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "jiraHostname" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "jiraProject" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "jiraToken" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "jql" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "teamName" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueImportCreateJira" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeClosedIssues" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "instantProcess" },
                value: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "jiraEmail" },
                value: { kind: "Variable", name: { kind: "Name", value: "jiraEmail" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "jiraHostname" },
                value: { kind: "Variable", name: { kind: "Name", value: "jiraHostname" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "jiraProject" },
                value: { kind: "Variable", name: { kind: "Name", value: "jiraProject" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "jiraToken" },
                value: { kind: "Variable", name: { kind: "Name", value: "jiraToken" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "jql" },
                value: { kind: "Variable", name: { kind: "Name", value: "jql" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "teamId" },
                value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "teamName" },
                value: { kind: "Variable", name: { kind: "Name", value: "teamName" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }],
            },
          },
        ],
      },
    },
    ...IssueImportPayloadFragmentDoc.definitions,
    ...IssueImportFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueImportCreateJiraMutation, IssueImportCreateJiraMutationVariables>;
export const DeleteIssueImportDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteIssueImport" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueImportDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "issueImportId" },
                value: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportDeletePayload" } }],
            },
          },
        ],
      },
    },
    ...IssueImportDeletePayloadFragmentDoc.definitions,
    ...IssueImportFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteIssueImportMutation, DeleteIssueImportMutationVariables>;
export const IssueImportProcessDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "issueImportProcess" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "mapping" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "JSONObject" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueImportProcess" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "issueImportId" },
                value: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "mapping" },
                value: { kind: "Variable", name: { kind: "Name", value: "mapping" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }],
            },
          },
        ],
      },
    },
    ...IssueImportPayloadFragmentDoc.definitions,
    ...IssueImportFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueImportProcessMutation, IssueImportProcessMutationVariables>;
export const UpdateIssueImportDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateIssueImport" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "IssueImportUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueImportUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }],
            },
          },
        ],
      },
    },
    ...IssueImportPayloadFragmentDoc.definitions,
    ...IssueImportFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateIssueImportMutation, UpdateIssueImportMutationVariables>;
export const CreateIssueLabelDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createIssueLabel" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelCreateInput" } },
          },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "replaceTeamLabels" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueLabelCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "replaceTeamLabels" },
                value: { kind: "Variable", name: { kind: "Name", value: "replaceTeamLabels" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelPayload" } }],
            },
          },
        ],
      },
    },
    ...IssueLabelPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateIssueLabelMutation, CreateIssueLabelMutationVariables>;
export const DeleteIssueLabelDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteIssueLabel" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueLabelDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
            },
          },
        ],
      },
    },
    ...DeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteIssueLabelMutation, DeleteIssueLabelMutationVariables>;
export const IssueLabelMoveToTeamLabelsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "issueLabelMoveToTeamLabels" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelMoveToTeamLabelsInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueLabelMoveToTeamLabels" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelMoveToTeamLabelsPayload" } },
              ],
            },
          },
        ],
      },
    },
    ...IssueLabelMoveToTeamLabelsPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueLabelMoveToTeamLabelsMutation, IssueLabelMoveToTeamLabelsMutationVariables>;
export const UpdateIssueLabelDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateIssueLabel" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelUpdateInput" } },
          },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "replaceTeamLabels" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueLabelUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "replaceTeamLabels" },
                value: { kind: "Variable", name: { kind: "Name", value: "replaceTeamLabels" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelPayload" } }],
            },
          },
        ],
      },
    },
    ...IssueLabelPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateIssueLabelMutation, UpdateIssueLabelMutationVariables>;
export const IssueLabelsMergeDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "issueLabelsMerge" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "LabelsMergeInput" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueLabelsMerge" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelPayload" } }],
            },
          },
        ],
      },
    },
    ...IssueLabelPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueLabelsMergeMutation, IssueLabelsMergeMutationVariables>;
export const CreateIssueRelationDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createIssueRelation" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationCreateInput" } },
          },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "overrideCreatedAt" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "DateTime" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueRelationCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "overrideCreatedAt" },
                value: { kind: "Variable", name: { kind: "Name", value: "overrideCreatedAt" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationPayload" } }],
            },
          },
        ],
      },
    },
    ...IssueRelationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateIssueRelationMutation, CreateIssueRelationMutationVariables>;
export const DeleteIssueRelationDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteIssueRelation" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueRelationDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
            },
          },
        ],
      },
    },
    ...DeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteIssueRelationMutation, DeleteIssueRelationMutationVariables>;
export const UpdateIssueRelationDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateIssueRelation" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueRelationUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationPayload" } }],
            },
          },
        ],
      },
    },
    ...IssueRelationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateIssueRelationMutation, UpdateIssueRelationMutationVariables>;
export const IssueReminderDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "issueReminder" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "reminderAt" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "DateTime" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueReminder" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "reminderAt" },
                value: { kind: "Variable", name: { kind: "Name", value: "reminderAt" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }],
            },
          },
        ],
      },
    },
    ...IssuePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueReminderMutation, IssueReminderMutationVariables>;
export const IssueRemoveLabelDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "issueRemoveLabel" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "labelId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueRemoveLabel" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "labelId" },
                value: { kind: "Variable", name: { kind: "Name", value: "labelId" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }],
            },
          },
        ],
      },
    },
    ...IssuePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueRemoveLabelMutation, IssueRemoveLabelMutationVariables>;
export const IssueSubscribeDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "issueSubscribe" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "userId" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueSubscribe" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "userId" },
                value: { kind: "Variable", name: { kind: "Name", value: "userId" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }],
            },
          },
        ],
      },
    },
    ...IssuePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueSubscribeMutation, IssueSubscribeMutationVariables>;
export const UnarchiveIssueDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "unarchiveIssue" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueUnarchive" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...IssueArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UnarchiveIssueMutation, UnarchiveIssueMutationVariables>;
export const IssueUnsubscribeDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "issueUnsubscribe" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "userId" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueUnsubscribe" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "userId" },
                value: { kind: "Variable", name: { kind: "Name", value: "userId" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }],
            },
          },
        ],
      },
    },
    ...IssuePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueUnsubscribeMutation, IssueUnsubscribeMutationVariables>;
export const UpdateIssueDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateIssue" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueUpdateInput" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }],
            },
          },
        ],
      },
    },
    ...IssuePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateIssueMutation, UpdateIssueMutationVariables>;
export const JoinOrganizationFromOnboardingDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "joinOrganizationFromOnboarding" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "JoinOrganizationInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "joinOrganizationFromOnboarding" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" } },
              ],
            },
          },
        ],
      },
    },
    ...CreateOrJoinOrganizationResponseFragmentDoc.definitions,
    ...AuthOrganizationFragmentDoc.definitions,
    ...AuthUserFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<JoinOrganizationFromOnboardingMutation, JoinOrganizationFromOnboardingMutationVariables>;
export const LeaveOrganizationDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "leaveOrganization" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "organizationId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "leaveOrganization" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "organizationId" },
                value: { kind: "Variable", name: { kind: "Name", value: "organizationId" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" } },
              ],
            },
          },
        ],
      },
    },
    ...CreateOrJoinOrganizationResponseFragmentDoc.definitions,
    ...AuthOrganizationFragmentDoc.definitions,
    ...AuthUserFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<LeaveOrganizationMutation, LeaveOrganizationMutationVariables>;
export const LogoutDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "logout" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "reason" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "logout" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "reason" },
                value: { kind: "Variable", name: { kind: "Name", value: "reason" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "LogoutResponse" } }],
            },
          },
        ],
      },
    },
    ...LogoutResponseFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<LogoutMutation, LogoutMutationVariables>;
export const LogoutAllSessionsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "logoutAllSessions" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "reason" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "logoutAllSessions" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "reason" },
                value: { kind: "Variable", name: { kind: "Name", value: "reason" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "LogoutResponse" } }],
            },
          },
        ],
      },
    },
    ...LogoutResponseFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<LogoutAllSessionsMutation, LogoutAllSessionsMutationVariables>;
export const LogoutOtherSessionsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "logoutOtherSessions" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "reason" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "logoutOtherSessions" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "reason" },
                value: { kind: "Variable", name: { kind: "Name", value: "reason" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "LogoutResponse" } }],
            },
          },
        ],
      },
    },
    ...LogoutResponseFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<LogoutOtherSessionsMutation, LogoutOtherSessionsMutationVariables>;
export const LogoutSessionDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "logoutSession" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "sessionId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "logoutSession" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "sessionId" },
                value: { kind: "Variable", name: { kind: "Name", value: "sessionId" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "LogoutResponse" } }],
            },
          },
        ],
      },
    },
    ...LogoutResponseFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<LogoutSessionMutation, LogoutSessionMutationVariables>;
export const ArchiveNotificationDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "archiveNotification" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "notificationArchive" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...NotificationArchivePayloadFragmentDoc.definitions,
    ...NotificationFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...CustomerNeedNotificationFragmentDoc.definitions,
    ...CustomerNotificationFragmentDoc.definitions,
    ...DocumentNotificationFragmentDoc.definitions,
    ...InitiativeNotificationFragmentDoc.definitions,
    ...IssueNotificationFragmentDoc.definitions,
    ...NotificationSubscriptionFragmentDoc.definitions,
    ...OauthClientApprovalNotificationFragmentDoc.definitions,
    ...OauthClientApprovalFragmentDoc.definitions,
    ...PostNotificationFragmentDoc.definitions,
    ...ProjectNotificationFragmentDoc.definitions,
    ...PullRequestNotificationFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ArchiveNotificationMutation, ArchiveNotificationMutationVariables>;
export const NotificationArchiveAllDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "notificationArchiveAll" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "NotificationEntityInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "notificationArchiveAll" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationBatchActionPayload" } }],
            },
          },
        ],
      },
    },
    ...NotificationBatchActionPayloadFragmentDoc.definitions,
    ...NotificationFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...CustomerNeedNotificationFragmentDoc.definitions,
    ...CustomerNotificationFragmentDoc.definitions,
    ...DocumentNotificationFragmentDoc.definitions,
    ...InitiativeNotificationFragmentDoc.definitions,
    ...IssueNotificationFragmentDoc.definitions,
    ...NotificationSubscriptionFragmentDoc.definitions,
    ...OauthClientApprovalNotificationFragmentDoc.definitions,
    ...OauthClientApprovalFragmentDoc.definitions,
    ...PostNotificationFragmentDoc.definitions,
    ...ProjectNotificationFragmentDoc.definitions,
    ...PullRequestNotificationFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<NotificationArchiveAllMutation, NotificationArchiveAllMutationVariables>;
export const UpdateNotificationCategoryChannelSubscriptionDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateNotificationCategoryChannelSubscription" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "category" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "NotificationCategory" } },
          },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "channel" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "NotificationChannel" } },
          },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "subscribe" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "notificationCategoryChannelSubscriptionUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "category" },
                value: { kind: "Variable", name: { kind: "Name", value: "category" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "channel" },
                value: { kind: "Variable", name: { kind: "Name", value: "channel" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "subscribe" },
                value: { kind: "Variable", name: { kind: "Name", value: "subscribe" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettingsPayload" } }],
            },
          },
        ],
      },
    },
    ...UserSettingsPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  UpdateNotificationCategoryChannelSubscriptionMutation,
  UpdateNotificationCategoryChannelSubscriptionMutationVariables
>;
export const NotificationMarkReadAllDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "notificationMarkReadAll" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "NotificationEntityInput" } },
          },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "readAt" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "DateTime" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "notificationMarkReadAll" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "readAt" },
                value: { kind: "Variable", name: { kind: "Name", value: "readAt" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationBatchActionPayload" } }],
            },
          },
        ],
      },
    },
    ...NotificationBatchActionPayloadFragmentDoc.definitions,
    ...NotificationFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...CustomerNeedNotificationFragmentDoc.definitions,
    ...CustomerNotificationFragmentDoc.definitions,
    ...DocumentNotificationFragmentDoc.definitions,
    ...InitiativeNotificationFragmentDoc.definitions,
    ...IssueNotificationFragmentDoc.definitions,
    ...NotificationSubscriptionFragmentDoc.definitions,
    ...OauthClientApprovalNotificationFragmentDoc.definitions,
    ...OauthClientApprovalFragmentDoc.definitions,
    ...PostNotificationFragmentDoc.definitions,
    ...ProjectNotificationFragmentDoc.definitions,
    ...PullRequestNotificationFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<NotificationMarkReadAllMutation, NotificationMarkReadAllMutationVariables>;
export const NotificationMarkUnreadAllDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "notificationMarkUnreadAll" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "NotificationEntityInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "notificationMarkUnreadAll" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationBatchActionPayload" } }],
            },
          },
        ],
      },
    },
    ...NotificationBatchActionPayloadFragmentDoc.definitions,
    ...NotificationFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...CustomerNeedNotificationFragmentDoc.definitions,
    ...CustomerNotificationFragmentDoc.definitions,
    ...DocumentNotificationFragmentDoc.definitions,
    ...InitiativeNotificationFragmentDoc.definitions,
    ...IssueNotificationFragmentDoc.definitions,
    ...NotificationSubscriptionFragmentDoc.definitions,
    ...OauthClientApprovalNotificationFragmentDoc.definitions,
    ...OauthClientApprovalFragmentDoc.definitions,
    ...PostNotificationFragmentDoc.definitions,
    ...ProjectNotificationFragmentDoc.definitions,
    ...PullRequestNotificationFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<NotificationMarkUnreadAllMutation, NotificationMarkUnreadAllMutationVariables>;
export const NotificationSnoozeAllDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "notificationSnoozeAll" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "NotificationEntityInput" } },
          },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "snoozedUntilAt" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "DateTime" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "notificationSnoozeAll" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "snoozedUntilAt" },
                value: { kind: "Variable", name: { kind: "Name", value: "snoozedUntilAt" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationBatchActionPayload" } }],
            },
          },
        ],
      },
    },
    ...NotificationBatchActionPayloadFragmentDoc.definitions,
    ...NotificationFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...CustomerNeedNotificationFragmentDoc.definitions,
    ...CustomerNotificationFragmentDoc.definitions,
    ...DocumentNotificationFragmentDoc.definitions,
    ...InitiativeNotificationFragmentDoc.definitions,
    ...IssueNotificationFragmentDoc.definitions,
    ...NotificationSubscriptionFragmentDoc.definitions,
    ...OauthClientApprovalNotificationFragmentDoc.definitions,
    ...OauthClientApprovalFragmentDoc.definitions,
    ...PostNotificationFragmentDoc.definitions,
    ...ProjectNotificationFragmentDoc.definitions,
    ...PullRequestNotificationFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<NotificationSnoozeAllMutation, NotificationSnoozeAllMutationVariables>;
export const CreateNotificationSubscriptionDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createNotificationSubscription" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscriptionCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "notificationSubscriptionCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscriptionPayload" } },
              ],
            },
          },
        ],
      },
    },
    ...NotificationSubscriptionPayloadFragmentDoc.definitions,
    ...NotificationSubscriptionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateNotificationSubscriptionMutation, CreateNotificationSubscriptionMutationVariables>;
export const DeleteNotificationSubscriptionDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteNotificationSubscription" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "notificationSubscriptionDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
            },
          },
        ],
      },
    },
    ...DeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteNotificationSubscriptionMutation, DeleteNotificationSubscriptionMutationVariables>;
export const UpdateNotificationSubscriptionDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateNotificationSubscription" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscriptionUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "notificationSubscriptionUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscriptionPayload" } },
              ],
            },
          },
        ],
      },
    },
    ...NotificationSubscriptionPayloadFragmentDoc.definitions,
    ...NotificationSubscriptionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateNotificationSubscriptionMutation, UpdateNotificationSubscriptionMutationVariables>;
export const UnarchiveNotificationDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "unarchiveNotification" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "notificationUnarchive" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...NotificationArchivePayloadFragmentDoc.definitions,
    ...NotificationFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...CustomerNeedNotificationFragmentDoc.definitions,
    ...CustomerNotificationFragmentDoc.definitions,
    ...DocumentNotificationFragmentDoc.definitions,
    ...InitiativeNotificationFragmentDoc.definitions,
    ...IssueNotificationFragmentDoc.definitions,
    ...NotificationSubscriptionFragmentDoc.definitions,
    ...OauthClientApprovalNotificationFragmentDoc.definitions,
    ...OauthClientApprovalFragmentDoc.definitions,
    ...PostNotificationFragmentDoc.definitions,
    ...ProjectNotificationFragmentDoc.definitions,
    ...PullRequestNotificationFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UnarchiveNotificationMutation, UnarchiveNotificationMutationVariables>;
export const NotificationUnsnoozeAllDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "notificationUnsnoozeAll" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "NotificationEntityInput" } },
          },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "unsnoozedAt" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "DateTime" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "notificationUnsnoozeAll" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "unsnoozedAt" },
                value: { kind: "Variable", name: { kind: "Name", value: "unsnoozedAt" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationBatchActionPayload" } }],
            },
          },
        ],
      },
    },
    ...NotificationBatchActionPayloadFragmentDoc.definitions,
    ...NotificationFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...CustomerNeedNotificationFragmentDoc.definitions,
    ...CustomerNotificationFragmentDoc.definitions,
    ...DocumentNotificationFragmentDoc.definitions,
    ...InitiativeNotificationFragmentDoc.definitions,
    ...IssueNotificationFragmentDoc.definitions,
    ...NotificationSubscriptionFragmentDoc.definitions,
    ...OauthClientApprovalNotificationFragmentDoc.definitions,
    ...OauthClientApprovalFragmentDoc.definitions,
    ...PostNotificationFragmentDoc.definitions,
    ...ProjectNotificationFragmentDoc.definitions,
    ...PullRequestNotificationFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<NotificationUnsnoozeAllMutation, NotificationUnsnoozeAllMutationVariables>;
export const UpdateNotificationDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateNotification" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "NotificationUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "notificationUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationPayload" } }],
            },
          },
        ],
      },
    },
    ...NotificationPayloadFragmentDoc.definitions,
    ...NotificationFragmentDoc.definitions,
    ...ActorBotFragmentDoc.definitions,
    ...CustomerNeedNotificationFragmentDoc.definitions,
    ...CustomerNotificationFragmentDoc.definitions,
    ...DocumentNotificationFragmentDoc.definitions,
    ...InitiativeNotificationFragmentDoc.definitions,
    ...IssueNotificationFragmentDoc.definitions,
    ...NotificationSubscriptionFragmentDoc.definitions,
    ...OauthClientApprovalNotificationFragmentDoc.definitions,
    ...OauthClientApprovalFragmentDoc.definitions,
    ...PostNotificationFragmentDoc.definitions,
    ...ProjectNotificationFragmentDoc.definitions,
    ...PullRequestNotificationFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateNotificationMutation, UpdateNotificationMutationVariables>;
export const DeleteOrganizationCancelDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteOrganizationCancel" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "organizationCancelDelete" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationCancelDeletePayload" } },
              ],
            },
          },
        ],
      },
    },
    ...OrganizationCancelDeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteOrganizationCancelMutation, DeleteOrganizationCancelMutationVariables>;
export const DeleteOrganizationDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteOrganization" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "DeleteOrganizationInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "organizationDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationDeletePayload" } }],
            },
          },
        ],
      },
    },
    ...OrganizationDeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteOrganizationMutation, DeleteOrganizationMutationVariables>;
export const OrganizationDeleteChallengeDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "organizationDeleteChallenge" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "organizationDeleteChallenge" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationDeletePayload" } }],
            },
          },
        ],
      },
    },
    ...OrganizationDeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<OrganizationDeleteChallengeMutation, OrganizationDeleteChallengeMutationVariables>;
export const DeleteOrganizationDomainDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteOrganizationDomain" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "organizationDomainDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
            },
          },
        ],
      },
    },
    ...DeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteOrganizationDomainMutation, DeleteOrganizationDomainMutationVariables>;
export const CreateOrganizationInviteDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createOrganizationInvite" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInviteCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "organizationInviteCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInvitePayload" } }],
            },
          },
        ],
      },
    },
    ...OrganizationInvitePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateOrganizationInviteMutation, CreateOrganizationInviteMutationVariables>;
export const DeleteOrganizationInviteDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteOrganizationInvite" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "organizationInviteDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
            },
          },
        ],
      },
    },
    ...DeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteOrganizationInviteMutation, DeleteOrganizationInviteMutationVariables>;
export const UpdateOrganizationInviteDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateOrganizationInvite" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInviteUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "organizationInviteUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInvitePayload" } }],
            },
          },
        ],
      },
    },
    ...OrganizationInvitePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateOrganizationInviteMutation, UpdateOrganizationInviteMutationVariables>;
export const OrganizationStartTrialDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "organizationStartTrial" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "organizationStartTrial" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationStartTrialPayload" } }],
            },
          },
        ],
      },
    },
    ...OrganizationStartTrialPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<OrganizationStartTrialMutation, OrganizationStartTrialMutationVariables>;
export const OrganizationStartTrialForPlanDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "organizationStartTrialForPlan" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "OrganizationStartTrialInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "organizationStartTrialForPlan" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationStartTrialPayload" } }],
            },
          },
        ],
      },
    },
    ...OrganizationStartTrialPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<OrganizationStartTrialForPlanMutation, OrganizationStartTrialForPlanMutationVariables>;
export const UpdateOrganizationDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateOrganization" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "OrganizationUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "organizationUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationPayload" } }],
            },
          },
        ],
      },
    },
    ...OrganizationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateOrganizationMutation, UpdateOrganizationMutationVariables>;
export const ProjectAddLabelDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "projectAddLabel" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "labelId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectAddLabel" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "labelId" },
                value: { kind: "Variable", name: { kind: "Name", value: "labelId" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectPayload" } }],
            },
          },
        ],
      },
    },
    ...ProjectPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ProjectAddLabelMutation, ProjectAddLabelMutationVariables>;
export const ArchiveProjectDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "archiveProject" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "trash" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectArchive" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "trash" },
                value: { kind: "Variable", name: { kind: "Name", value: "trash" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...ProjectArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ArchiveProjectMutation, ArchiveProjectMutationVariables>;
export const CreateProjectDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createProject" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "connectSlackChannel" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "ProjectCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "connectSlackChannel" },
                value: { kind: "Variable", name: { kind: "Name", value: "connectSlackChannel" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectPayload" } }],
            },
          },
        ],
      },
    },
    ...ProjectPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateProjectMutation, CreateProjectMutationVariables>;
export const DeleteProjectDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteProject" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...ProjectArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteProjectMutation, DeleteProjectMutationVariables>;
export const CreateProjectLabelDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createProjectLabel" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "ProjectLabelCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectLabelCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLabelPayload" } }],
            },
          },
        ],
      },
    },
    ...ProjectLabelPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateProjectLabelMutation, CreateProjectLabelMutationVariables>;
export const DeleteProjectLabelDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteProjectLabel" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectLabelDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
            },
          },
        ],
      },
    },
    ...DeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteProjectLabelMutation, DeleteProjectLabelMutationVariables>;
export const UpdateProjectLabelDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateProjectLabel" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "ProjectLabelUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectLabelUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLabelPayload" } }],
            },
          },
        ],
      },
    },
    ...ProjectLabelPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateProjectLabelMutation, UpdateProjectLabelMutationVariables>;
export const ProjectLabelsMergeDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "projectLabelsMerge" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "LabelsMergeInput" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectLabelsMerge" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLabelPayload" } }],
            },
          },
        ],
      },
    },
    ...ProjectLabelPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ProjectLabelsMergeMutation, ProjectLabelsMergeMutationVariables>;
export const CreateProjectMilestoneDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createProjectMilestone" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectMilestoneCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestonePayload" } }],
            },
          },
        ],
      },
    },
    ...ProjectMilestonePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateProjectMilestoneMutation, CreateProjectMilestoneMutationVariables>;
export const DeleteProjectMilestoneDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteProjectMilestone" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectMilestoneDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
            },
          },
        ],
      },
    },
    ...DeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteProjectMilestoneMutation, DeleteProjectMilestoneMutationVariables>;
export const UpdateProjectMilestoneDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateProjectMilestone" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectMilestoneUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestonePayload" } }],
            },
          },
        ],
      },
    },
    ...ProjectMilestonePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateProjectMilestoneMutation, UpdateProjectMilestoneMutationVariables>;
export const CreateProjectRelationDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createProjectRelation" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "ProjectRelationCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectRelationCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectRelationPayload" } }],
            },
          },
        ],
      },
    },
    ...ProjectRelationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateProjectRelationMutation, CreateProjectRelationMutationVariables>;
export const DeleteProjectRelationDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteProjectRelation" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectRelationDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
            },
          },
        ],
      },
    },
    ...DeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteProjectRelationMutation, DeleteProjectRelationMutationVariables>;
export const UpdateProjectRelationDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateProjectRelation" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "ProjectRelationUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectRelationUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectRelationPayload" } }],
            },
          },
        ],
      },
    },
    ...ProjectRelationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateProjectRelationMutation, UpdateProjectRelationMutationVariables>;
export const ProjectRemoveLabelDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "projectRemoveLabel" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "labelId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectRemoveLabel" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "labelId" },
                value: { kind: "Variable", name: { kind: "Name", value: "labelId" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectPayload" } }],
            },
          },
        ],
      },
    },
    ...ProjectPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ProjectRemoveLabelMutation, ProjectRemoveLabelMutationVariables>;
export const ArchiveProjectStatusDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "archiveProjectStatus" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectStatusArchive" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatusArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...ProjectStatusArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ArchiveProjectStatusMutation, ArchiveProjectStatusMutationVariables>;
export const CreateProjectStatusDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createProjectStatus" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "ProjectStatusCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectStatusCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatusPayload" } }],
            },
          },
        ],
      },
    },
    ...ProjectStatusPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateProjectStatusMutation, CreateProjectStatusMutationVariables>;
export const UnarchiveProjectStatusDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "unarchiveProjectStatus" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectStatusUnarchive" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatusArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...ProjectStatusArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UnarchiveProjectStatusMutation, UnarchiveProjectStatusMutationVariables>;
export const UpdateProjectStatusDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateProjectStatus" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "ProjectStatusUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectStatusUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatusPayload" } }],
            },
          },
        ],
      },
    },
    ...ProjectStatusPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateProjectStatusMutation, UpdateProjectStatusMutationVariables>;
export const UnarchiveProjectDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "unarchiveProject" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectUnarchive" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...ProjectArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UnarchiveProjectMutation, UnarchiveProjectMutationVariables>;
export const UpdateProjectDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateProject" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectPayload" } }],
            },
          },
        ],
      },
    },
    ...ProjectPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateProjectMutation, UpdateProjectMutationVariables>;
export const ArchiveProjectUpdateDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "archiveProjectUpdate" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectUpdateArchive" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...ProjectUpdateArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ArchiveProjectUpdateMutation, ArchiveProjectUpdateMutationVariables>;
export const CreateProjectUpdateDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createProjectUpdate" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectUpdateCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdatePayload" } }],
            },
          },
        ],
      },
    },
    ...ProjectUpdatePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateProjectUpdateMutation, CreateProjectUpdateMutationVariables>;
export const DeleteProjectUpdateDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteProjectUpdate" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectUpdateDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
            },
          },
        ],
      },
    },
    ...DeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteProjectUpdateMutation, DeleteProjectUpdateMutationVariables>;
export const UnarchiveProjectUpdateDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "unarchiveProjectUpdate" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectUpdateUnarchive" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...ProjectUpdateArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UnarchiveProjectUpdateMutation, UnarchiveProjectUpdateMutationVariables>;
export const UpdateProjectUpdateDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateProjectUpdate" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectUpdateUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdatePayload" } }],
            },
          },
        ],
      },
    },
    ...ProjectUpdatePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateProjectUpdateMutation, UpdateProjectUpdateMutationVariables>;
export const CreatePushSubscriptionDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createPushSubscription" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "PushSubscriptionCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "pushSubscriptionCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PushSubscriptionPayload" } }],
            },
          },
        ],
      },
    },
    ...PushSubscriptionPayloadFragmentDoc.definitions,
    ...PushSubscriptionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreatePushSubscriptionMutation, CreatePushSubscriptionMutationVariables>;
export const DeletePushSubscriptionDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deletePushSubscription" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "pushSubscriptionDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PushSubscriptionPayload" } }],
            },
          },
        ],
      },
    },
    ...PushSubscriptionPayloadFragmentDoc.definitions,
    ...PushSubscriptionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeletePushSubscriptionMutation, DeletePushSubscriptionMutationVariables>;
export const CreateReactionDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createReaction" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "ReactionCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "reactionCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ReactionPayload" } }],
            },
          },
        ],
      },
    },
    ...ReactionPayloadFragmentDoc.definitions,
    ...ReactionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateReactionMutation, CreateReactionMutationVariables>;
export const DeleteReactionDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteReaction" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "reactionDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
            },
          },
        ],
      },
    },
    ...DeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteReactionMutation, DeleteReactionMutationVariables>;
export const RefreshGoogleSheetsDataDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "refreshGoogleSheetsData" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "type" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "refreshGoogleSheetsData" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "type" },
                value: { kind: "Variable", name: { kind: "Name", value: "type" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<RefreshGoogleSheetsDataMutation, RefreshGoogleSheetsDataMutationVariables>;
export const ResendOrganizationInviteDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "resendOrganizationInvite" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "resendOrganizationInvite" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
            },
          },
        ],
      },
    },
    ...DeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ResendOrganizationInviteMutation, ResendOrganizationInviteMutationVariables>;
export const ResendOrganizationInviteByEmailDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "resendOrganizationInviteByEmail" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "email" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "resendOrganizationInviteByEmail" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "email" },
                value: { kind: "Variable", name: { kind: "Name", value: "email" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
            },
          },
        ],
      },
    },
    ...DeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ResendOrganizationInviteByEmailMutation, ResendOrganizationInviteByEmailMutationVariables>;
export const ArchiveRoadmapDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "archiveRoadmap" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "roadmapArchive" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...RoadmapArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ArchiveRoadmapMutation, ArchiveRoadmapMutationVariables>;
export const CreateRoadmapDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createRoadmap" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "RoadmapCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "roadmapCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapPayload" } }],
            },
          },
        ],
      },
    },
    ...RoadmapPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateRoadmapMutation, CreateRoadmapMutationVariables>;
export const DeleteRoadmapDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteRoadmap" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "roadmapDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
            },
          },
        ],
      },
    },
    ...DeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteRoadmapMutation, DeleteRoadmapMutationVariables>;
export const CreateRoadmapToProjectDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createRoadmapToProject" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "RoadmapToProjectCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "roadmapToProjectCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapToProjectPayload" } }],
            },
          },
        ],
      },
    },
    ...RoadmapToProjectPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateRoadmapToProjectMutation, CreateRoadmapToProjectMutationVariables>;
export const DeleteRoadmapToProjectDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteRoadmapToProject" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "roadmapToProjectDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
            },
          },
        ],
      },
    },
    ...DeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteRoadmapToProjectMutation, DeleteRoadmapToProjectMutationVariables>;
export const UpdateRoadmapToProjectDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateRoadmapToProject" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "RoadmapToProjectUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "roadmapToProjectUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapToProjectPayload" } }],
            },
          },
        ],
      },
    },
    ...RoadmapToProjectPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateRoadmapToProjectMutation, UpdateRoadmapToProjectMutationVariables>;
export const UnarchiveRoadmapDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "unarchiveRoadmap" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "roadmapUnarchive" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...RoadmapArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UnarchiveRoadmapMutation, UnarchiveRoadmapMutationVariables>;
export const UpdateRoadmapDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateRoadmap" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "RoadmapUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "roadmapUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapPayload" } }],
            },
          },
        ],
      },
    },
    ...RoadmapPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateRoadmapMutation, UpdateRoadmapMutationVariables>;
export const SamlTokenUserAccountAuthDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "samlTokenUserAccountAuth" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "TokenUserAccountAuthInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "samlTokenUserAccountAuth" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthResolverResponse" } }],
            },
          },
        ],
      },
    },
    ...AuthResolverResponseFragmentDoc.definitions,
    ...AuthUserFragmentDoc.definitions,
    ...AuthOrganizationFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<SamlTokenUserAccountAuthMutation, SamlTokenUserAccountAuthMutationVariables>;
export const CreateTeamDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createTeam" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "copySettingsFromTeamId" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TeamCreateInput" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "teamCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "copySettingsFromTeamId" },
                value: { kind: "Variable", name: { kind: "Name", value: "copySettingsFromTeamId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamPayload" } }],
            },
          },
        ],
      },
    },
    ...TeamPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateTeamMutation, CreateTeamMutationVariables>;
export const DeleteTeamCyclesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteTeamCycles" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "teamCyclesDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamPayload" } }],
            },
          },
        ],
      },
    },
    ...TeamPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteTeamCyclesMutation, DeleteTeamCyclesMutationVariables>;
export const DeleteTeamDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteTeam" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "teamDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
            },
          },
        ],
      },
    },
    ...DeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteTeamMutation, DeleteTeamMutationVariables>;
export const DeleteTeamKeyDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteTeamKey" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "teamKeyDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
            },
          },
        ],
      },
    },
    ...DeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteTeamKeyMutation, DeleteTeamKeyMutationVariables>;
export const CreateTeamMembershipDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createTeamMembership" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "TeamMembershipCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "teamMembershipCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipPayload" } }],
            },
          },
        ],
      },
    },
    ...TeamMembershipPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateTeamMembershipMutation, CreateTeamMembershipMutationVariables>;
export const DeleteTeamMembershipDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteTeamMembership" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "alsoLeaveParentTeams" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "teamMembershipDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "alsoLeaveParentTeams" },
                value: { kind: "Variable", name: { kind: "Name", value: "alsoLeaveParentTeams" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
            },
          },
        ],
      },
    },
    ...DeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteTeamMembershipMutation, DeleteTeamMembershipMutationVariables>;
export const UpdateTeamMembershipDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateTeamMembership" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "TeamMembershipUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "teamMembershipUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipPayload" } }],
            },
          },
        ],
      },
    },
    ...TeamMembershipPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateTeamMembershipMutation, UpdateTeamMembershipMutationVariables>;
export const UnarchiveTeamDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "unarchiveTeam" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "teamUnarchive" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...TeamArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UnarchiveTeamMutation, UnarchiveTeamMutationVariables>;
export const UpdateTeamDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateTeam" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TeamUpdateInput" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "mapping" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "InheritanceEntityMapping" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "teamUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "mapping" },
                value: { kind: "Variable", name: { kind: "Name", value: "mapping" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamPayload" } }],
            },
          },
        ],
      },
    },
    ...TeamPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateTeamMutation, UpdateTeamMutationVariables>;
export const CreateTemplateDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createTemplate" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "TemplateCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "templateCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TemplatePayload" } }],
            },
          },
        ],
      },
    },
    ...TemplatePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateTemplateMutation, CreateTemplateMutationVariables>;
export const DeleteTemplateDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteTemplate" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "templateDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
            },
          },
        ],
      },
    },
    ...DeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteTemplateMutation, DeleteTemplateMutationVariables>;
export const UpdateTemplateDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateTemplate" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "TemplateUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "templateUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TemplatePayload" } }],
            },
          },
        ],
      },
    },
    ...TemplatePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateTemplateMutation, UpdateTemplateMutationVariables>;
export const CreateTimeScheduleDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createTimeSchedule" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "TimeScheduleCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "timeScheduleCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeSchedulePayload" } }],
            },
          },
        ],
      },
    },
    ...TimeSchedulePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateTimeScheduleMutation, CreateTimeScheduleMutationVariables>;
export const DeleteTimeScheduleDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteTimeSchedule" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "timeScheduleDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
            },
          },
        ],
      },
    },
    ...DeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteTimeScheduleMutation, DeleteTimeScheduleMutationVariables>;
export const TimeScheduleRefreshIntegrationScheduleDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "timeScheduleRefreshIntegrationSchedule" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "timeScheduleRefreshIntegrationSchedule" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeSchedulePayload" } }],
            },
          },
        ],
      },
    },
    ...TimeSchedulePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  TimeScheduleRefreshIntegrationScheduleMutation,
  TimeScheduleRefreshIntegrationScheduleMutationVariables
>;
export const UpdateTimeScheduleDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateTimeSchedule" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "TimeScheduleUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "timeScheduleUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeSchedulePayload" } }],
            },
          },
        ],
      },
    },
    ...TimeSchedulePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateTimeScheduleMutation, UpdateTimeScheduleMutationVariables>;
export const TimeScheduleUpsertExternalDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "timeScheduleUpsertExternal" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "externalId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "TimeScheduleUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "timeScheduleUpsertExternal" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "externalId" },
                value: { kind: "Variable", name: { kind: "Name", value: "externalId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeSchedulePayload" } }],
            },
          },
        ],
      },
    },
    ...TimeSchedulePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<TimeScheduleUpsertExternalMutation, TimeScheduleUpsertExternalMutationVariables>;
export const CreateTriageResponsibilityDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createTriageResponsibility" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "TriageResponsibilityCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "triageResponsibilityCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TriageResponsibilityPayload" } }],
            },
          },
        ],
      },
    },
    ...TriageResponsibilityPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateTriageResponsibilityMutation, CreateTriageResponsibilityMutationVariables>;
export const DeleteTriageResponsibilityDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteTriageResponsibility" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "triageResponsibilityDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
            },
          },
        ],
      },
    },
    ...DeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteTriageResponsibilityMutation, DeleteTriageResponsibilityMutationVariables>;
export const UpdateTriageResponsibilityDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateTriageResponsibility" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "TriageResponsibilityUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "triageResponsibilityUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TriageResponsibilityPayload" } }],
            },
          },
        ],
      },
    },
    ...TriageResponsibilityPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateTriageResponsibilityMutation, UpdateTriageResponsibilityMutationVariables>;
export const UserDemoteAdminDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "userDemoteAdmin" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userDemoteAdmin" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }],
            },
          },
        ],
      },
    },
    ...UserAdminPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UserDemoteAdminMutation, UserDemoteAdminMutationVariables>;
export const UserDemoteMemberDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "userDemoteMember" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userDemoteMember" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }],
            },
          },
        ],
      },
    },
    ...UserAdminPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UserDemoteMemberMutation, UserDemoteMemberMutationVariables>;
export const UserDiscordConnectDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "userDiscordConnect" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userDiscordConnect" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "code" },
                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "redirectUri" },
                value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserPayload" } }],
            },
          },
        ],
      },
    },
    ...UserPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UserDiscordConnectMutation, UserDiscordConnectMutationVariables>;
export const UserExternalUserDisconnectDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "userExternalUserDisconnect" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "service" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userExternalUserDisconnect" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "service" },
                value: { kind: "Variable", name: { kind: "Name", value: "service" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserPayload" } }],
            },
          },
        ],
      },
    },
    ...UserPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UserExternalUserDisconnectMutation, UserExternalUserDisconnectMutationVariables>;
export const UpdateUserFlagDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateUserFlag" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "flag" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "UserFlagType" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "operation" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "UserFlagUpdateOperation" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userFlagUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "flag" },
                value: { kind: "Variable", name: { kind: "Name", value: "flag" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "operation" },
                value: { kind: "Variable", name: { kind: "Name", value: "operation" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettingsFlagPayload" } }],
            },
          },
        ],
      },
    },
    ...UserSettingsFlagPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateUserFlagMutation, UpdateUserFlagMutationVariables>;
export const UserPromoteAdminDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "userPromoteAdmin" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userPromoteAdmin" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }],
            },
          },
        ],
      },
    },
    ...UserAdminPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UserPromoteAdminMutation, UserPromoteAdminMutationVariables>;
export const UserPromoteMemberDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "userPromoteMember" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userPromoteMember" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }],
            },
          },
        ],
      },
    },
    ...UserAdminPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UserPromoteMemberMutation, UserPromoteMemberMutationVariables>;
export const UserSettingsFlagsResetDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "userSettingsFlagsReset" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "flags" } },
          type: {
            kind: "ListType",
            type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "UserFlagType" } } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userSettingsFlagsReset" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "flags" },
                value: { kind: "Variable", name: { kind: "Name", value: "flags" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettingsFlagsResetPayload" } }],
            },
          },
        ],
      },
    },
    ...UserSettingsFlagsResetPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UserSettingsFlagsResetMutation, UserSettingsFlagsResetMutationVariables>;
export const UpdateUserSettingsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateUserSettings" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "UserSettingsUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userSettingsUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettingsPayload" } }],
            },
          },
        ],
      },
    },
    ...UserSettingsPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateUserSettingsMutation, UpdateUserSettingsMutationVariables>;
export const SuspendUserDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "suspendUser" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userSuspend" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }],
            },
          },
        ],
      },
    },
    ...UserAdminPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<SuspendUserMutation, SuspendUserMutationVariables>;
export const UnsuspendUserDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "unsuspendUser" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userUnsuspend" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }],
            },
          },
        ],
      },
    },
    ...UserAdminPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UnsuspendUserMutation, UnsuspendUserMutationVariables>;
export const UpdateUserDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateUser" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "UserUpdateInput" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserPayload" } }],
            },
          },
        ],
      },
    },
    ...UserPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateUserMutation, UpdateUserMutationVariables>;
export const CreateViewPreferencesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createViewPreferences" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "ViewPreferencesCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "viewPreferencesCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesPayload" } }],
            },
          },
        ],
      },
    },
    ...ViewPreferencesPayloadFragmentDoc.definitions,
    ...ViewPreferencesFragmentDoc.definitions,
    ...ViewPreferencesValuesFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateViewPreferencesMutation, CreateViewPreferencesMutationVariables>;
export const DeleteViewPreferencesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteViewPreferences" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "viewPreferencesDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
            },
          },
        ],
      },
    },
    ...DeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteViewPreferencesMutation, DeleteViewPreferencesMutationVariables>;
export const UpdateViewPreferencesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateViewPreferences" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "ViewPreferencesUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "viewPreferencesUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesPayload" } }],
            },
          },
        ],
      },
    },
    ...ViewPreferencesPayloadFragmentDoc.definitions,
    ...ViewPreferencesFragmentDoc.definitions,
    ...ViewPreferencesValuesFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateViewPreferencesMutation, UpdateViewPreferencesMutationVariables>;
export const CreateWebhookDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createWebhook" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "WebhookCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "webhookCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WebhookPayload" } }],
            },
          },
        ],
      },
    },
    ...WebhookPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateWebhookMutation, CreateWebhookMutationVariables>;
export const DeleteWebhookDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteWebhook" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "webhookDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
            },
          },
        ],
      },
    },
    ...DeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteWebhookMutation, DeleteWebhookMutationVariables>;
export const UpdateWebhookDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateWebhook" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "WebhookUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "webhookUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WebhookPayload" } }],
            },
          },
        ],
      },
    },
    ...WebhookPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateWebhookMutation, UpdateWebhookMutationVariables>;
export const ArchiveWorkflowStateDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "archiveWorkflowState" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "workflowStateArchive" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStateArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...WorkflowStateArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ArchiveWorkflowStateMutation, ArchiveWorkflowStateMutationVariables>;
export const CreateWorkflowStateDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createWorkflowState" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "workflowStateCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStatePayload" } }],
            },
          },
        ],
      },
    },
    ...WorkflowStatePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateWorkflowStateMutation, CreateWorkflowStateMutationVariables>;
export const UpdateWorkflowStateDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateWorkflowState" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "workflowStateUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStatePayload" } }],
            },
          },
        ],
      },
    },
    ...WorkflowStatePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateWorkflowStateMutation, UpdateWorkflowStateMutationVariables>;
