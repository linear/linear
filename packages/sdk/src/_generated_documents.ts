import { TypedDocumentNode as DocumentNode } from "@graphql-typed-document-node/core";
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** Represents a date and time in ISO 8601 format. Accepts shortcuts like `2021` to represent midnight Fri Jan 01 2021. Also accepts ISO 8601 durations strings which are added to the current date to create the represented date (e.g '-P2W1D' represents the date that was two weeks and 1 day ago) */
  DateTime: Date;
  /** The `JSON` scalar type represents arbitrary values as *stringified* JSON */
  JSON: Record<string, unknown>;
  /** The `JSONObject` scalar type represents arbitrary values as *embedded* JSON */
  JSONObject: Record<string, unknown>;
  /** Represents a date in ISO 8601 format. Accepts shortcuts like `2021` to represent midnight Fri Jan 01 2021. Also accepts ISO 8601 durations strings which are added to the current date to create the represented date (e.g '-P2W1D' represents the date that was two weeks and 1 day ago) */
  TimelessDate: any;
  /** A universally unique identifier as specified by RFC 4122. */
  UUID: any;
};

export type AdminJobConfiguration = {
  currentJob?: Maybe<Scalars["String"]>;
  delay?: Maybe<Scalars["Float"]>;
  enabled: Scalars["Boolean"];
  param?: Maybe<Scalars["String"]>;
};

export type AdminJobConfigurationPayload = {
  __typename?: "AdminJobConfigurationPayload";
  currentJob?: Maybe<Scalars["String"]>;
  delay: Scalars["Float"];
  enabled: Scalars["Boolean"];
  param?: Maybe<Scalars["String"]>;
};

export type AdminJobStatusPayload = {
  __typename?: "AdminJobStatusPayload";
  availableJobs: Array<Scalars["String"]>;
  configuration: AdminJobConfigurationPayload;
  cursor?: Maybe<Scalars["String"]>;
  startedAt?: Maybe<Scalars["DateTime"]>;
};

export type AirbyteConfigurationInput = {
  /** Linear export API key. */
  apiKey: Scalars["String"];
};

/** An API key. Grants access to the user's resources. */
export type ApiKey = Node & {
  __typename?: "ApiKey";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The label of the API key. */
  label: Scalars["String"];
  /**
   * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
   *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

export type ApiKeyConnection = {
  __typename?: "ApiKeyConnection";
  edges: Array<ApiKeyEdge>;
  nodes: Array<ApiKey>;
  pageInfo: PageInfo;
};

export type ApiKeyCreateInput = {
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The API key value. */
  key: Scalars["String"];
  /** The label for the API key. */
  label: Scalars["String"];
};

export type ApiKeyEdge = {
  __typename?: "ApiKeyEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: ApiKey;
};

export type ApiKeyPayload = {
  __typename?: "ApiKeyPayload";
  /** The API key that was created. */
  apiKey: ApiKey;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** Public information of the OAuth application. */
export type Application = {
  __typename?: "Application";
  /** OAuth application's client ID. */
  clientId: Scalars["String"];
  /** Information about the application. */
  description?: Maybe<Scalars["String"]>;
  /** Name of the developer. */
  developer: Scalars["String"];
  /** Url of the developer (homepage or docs). */
  developerUrl: Scalars["String"];
  /** OAuth application's ID. */
  id: Scalars["String"];
  /** Image of the application. */
  imageUrl?: Maybe<Scalars["String"]>;
  /** Application name. */
  name: Scalars["String"];
};

export type ArchivePayload = {
  __typename?: "ArchivePayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** Issue attachment (e.g. support ticket, pull request). */
export type Attachment = Node & {
  __typename?: "Attachment";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The creator of the attachment. */
  creator?: Maybe<User>;
  /** Indicates if attachments for the same source application should be grouped in the Linear UI. */
  groupBySource: Scalars["Boolean"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The issue this attachment belongs to. */
  issue: Issue;
  /** Custom metadata related to the attachment. */
  metadata: Scalars["JSONObject"];
  /** Information about the source which created the attachment. */
  source?: Maybe<Scalars["JSONObject"]>;
  /** An accessor helper to source.type, defines the source type of the attachment. */
  sourceType?: Maybe<Scalars["JSONObject"]>;
  /** Content for the subtitle line in the Linear attachment widget. */
  subtitle?: Maybe<Scalars["String"]>;
  /** Content for the title line in the Linear attachment widget. */
  title: Scalars["String"];
  /**
   * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
   *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** Location of the attachment which is also used as an identifier. */
  url: Scalars["String"];
};

/** Attachment collection filtering options. */
export type AttachmentCollectionFilter = {
  /** Compound filters, all of which need to be matched by the attachment. */
  and?: Maybe<Array<AttachmentCollectionFilter>>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Filters that the attachments creator must satisfy. */
  creator?: Maybe<NullableUserFilter>;
  /** Filters that needs to be matched by all attachments. */
  every?: Maybe<AttachmentFilter>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Comparator for the collection length. */
  length?: Maybe<NumberComparator>;
  /** Compound filters, one of which need to be matched by the attachment. */
  or?: Maybe<Array<AttachmentCollectionFilter>>;
  /** Filters that needs to be matched by some attachments. */
  some?: Maybe<AttachmentFilter>;
  /** Comparator for the source type. */
  sourceType?: Maybe<SourceTypeComparator>;
  /** Comparator for the subtitle. */
  subtitle?: Maybe<NullableStringComparator>;
  /** Comparator for the title. */
  title?: Maybe<StringComparator>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
  /** Comparator for the url. */
  url?: Maybe<StringComparator>;
};

export type AttachmentConnection = {
  __typename?: "AttachmentConnection";
  edges: Array<AttachmentEdge>;
  nodes: Array<Attachment>;
  pageInfo: PageInfo;
};

export type AttachmentCreateInput = {
  /** Create a linked comment with markdown body. */
  commentBody?: Maybe<Scalars["String"]>;
  /** Create a linked comment with Prosemirror body. Please use `commentBody` instead */
  commentBodyData?: Maybe<Scalars["JSONObject"]>;
  /** Create attachment as a user with the provided name. This option is only available to OAuth applications creating attachments in `actor=application` mode. */
  createAsUser?: Maybe<Scalars["String"]>;
  /** Indicates if attachments for the same source application should be grouped in the Linear UI. */
  groupBySource?: Maybe<Scalars["Boolean"]>;
  /** An icon url to display with the attachment. Should be of jpg or png format. Maximum of 1MB in size. Dimensions should be 20x20px for optimal display quality. */
  iconUrl?: Maybe<Scalars["String"]>;
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The issue to associate the attachment with. */
  issueId: Scalars["String"];
  /** Attachment metadata object with string and number values. */
  metadata?: Maybe<Scalars["JSONObject"]>;
  /** The attachment subtitle. */
  subtitle?: Maybe<Scalars["String"]>;
  /** The attachment title. */
  title: Scalars["String"];
  /** Attachment location which is also used as an unique identifier for the attachment. If another attachment is created with the same `url` value, existing record is updated instead. */
  url: Scalars["String"];
};

export type AttachmentEdge = {
  __typename?: "AttachmentEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: Attachment;
};

/** Attachment filtering options. */
export type AttachmentFilter = {
  /** Compound filters, all of which need to be matched by the attachment. */
  and?: Maybe<Array<AttachmentFilter>>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Filters that the attachments creator must satisfy. */
  creator?: Maybe<NullableUserFilter>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Compound filters, one of which need to be matched by the attachment. */
  or?: Maybe<Array<AttachmentFilter>>;
  /** Comparator for the source type. */
  sourceType?: Maybe<SourceTypeComparator>;
  /** Comparator for the subtitle. */
  subtitle?: Maybe<NullableStringComparator>;
  /** Comparator for the title. */
  title?: Maybe<StringComparator>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
  /** Comparator for the url. */
  url?: Maybe<StringComparator>;
};

export type AttachmentPayload = {
  __typename?: "AttachmentPayload";
  /** The issue attachment that was created. */
  attachment: Attachment;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type AttachmentUpdateInput = {
  /** An icon url to display with the attachment. Should be of jpg or png format. Maximum of 1MB in size. Dimensions should be 20x20px for optimal display quality. */
  iconUrl?: Maybe<Scalars["String"]>;
  /** Attachment metadata object with string and number values. */
  metadata?: Maybe<Scalars["JSONObject"]>;
  /** The attachment subtitle. */
  subtitle?: Maybe<Scalars["String"]>;
  /** The attachment title. */
  title: Scalars["String"];
};

/** Workspace audit log entry object. */
export type AuditEntry = Node & {
  __typename?: "AuditEntry";
  /** The user that caused the audit entry to be created. */
  actor?: Maybe<User>;
  /** The ID of the user that caused the audit entry to be created. */
  actorId?: Maybe<Scalars["String"]>;
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** Country code of request resulting to audit entry. */
  countryCode?: Maybe<Scalars["String"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** IP from actor when entry was recorded. */
  ip?: Maybe<Scalars["String"]>;
  /** Additional metadata related to the audit entry. */
  metadata?: Maybe<Scalars["JSONObject"]>;
  /** The organization the audit log belongs to. */
  organization?: Maybe<Organization>;
  /** Additional information related to the request which performed the action. */
  requestInformation?: Maybe<Scalars["JSONObject"]>;
  type: Scalars["String"];
  /**
   * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
   *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

export type AuditEntryConnection = {
  __typename?: "AuditEntryConnection";
  edges: Array<AuditEntryEdge>;
  nodes: Array<AuditEntry>;
  pageInfo: PageInfo;
};

export type AuditEntryEdge = {
  __typename?: "AuditEntryEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: AuditEntry;
};

/** Audit entry filtering options. */
export type AuditEntryFilter = {
  /** Filters that the audit entry actor must satisfy. */
  actor?: Maybe<NullableUserFilter>;
  /** Comparator for the country code. */
  countryCode?: Maybe<StringComparator>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Comparator for the IP address. */
  ip?: Maybe<StringComparator>;
  /** Comparator for the type. */
  type?: Maybe<StringComparator>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

export type AuditEntryType = {
  __typename?: "AuditEntryType";
  /** Description of the audit entry type. */
  description: Scalars["String"];
  /** The audit entry type. */
  type: Scalars["String"];
};

/** [INTERNAL] An OAuth userId/createdDate tuple */
export type AuthMembership = {
  __typename?: "AuthMembership";
  /** The date of the authorization */
  createdAt: Scalars["DateTime"];
  /** The authorizing userId */
  userId: Scalars["String"];
};

export type AuthResolverResponse = {
  __typename?: "AuthResolverResponse";
  /** Should the signup flow allow access for the domain. */
  allowDomainAccess?: Maybe<Scalars["Boolean"]>;
  /** Organizations this account has access to, but is not yet a member. */
  availableOrganizations?: Maybe<Array<Organization>>;
  /** Email for the authenticated account. */
  email?: Maybe<Scalars["String"]>;
  /** User account ID. */
  id: Scalars["String"];
  /** ID of the organization last accessed by the user. */
  lastUsedOrganizationId?: Maybe<Scalars["String"]>;
  /** JWT token for authentication of the account. */
  token?: Maybe<Scalars["String"]>;
  /** Users belonging to this account. */
  users: Array<User>;
};

/** [INTERNAL] Public information of the OAuth application, plus the authorized scopes for a given user. */
export type AuthorizedApplication = {
  __typename?: "AuthorizedApplication";
  /** OAuth application's ID. */
  appId: Scalars["String"];
  /** OAuth application's client ID. */
  clientId: Scalars["String"];
  /** Image of the application. */
  imageUrl?: Maybe<Scalars["String"]>;
  /** Application name. */
  name: Scalars["String"];
  /** Scopes that are authorized for this application for a given user. */
  scope: Array<Scalars["String"]>;
  /** Whether or not webhooks are enabled for the application. */
  webhooksEnabled: Scalars["Boolean"];
};

/** Comparator for booleans. */
export type BooleanComparator = {
  /** Equals constraint. */
  eq?: Maybe<Scalars["Boolean"]>;
  /** Not equals constraint. */
  neq?: Maybe<Scalars["Boolean"]>;
};

/** A comment associated with an issue. */
export type Comment = Node & {
  __typename?: "Comment";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The comment content in markdown format. */
  body: Scalars["String"];
  /** The comment content as a Prosemirror document. */
  bodyData: Scalars["String"];
  /** The children of the comment. */
  children: CommentConnection;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The time user edited the comment. */
  editedAt?: Maybe<Scalars["DateTime"]>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The issue that the comment is associated with. */
  issue: Issue;
  /** The parent comment under which the current comment is nested. */
  parent?: Maybe<Comment>;
  /** Emoji reaction summary, grouped by emoji type */
  reactionData: Scalars["JSONObject"];
  /**
   * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
   *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** Comment's URL. */
  url: Scalars["String"];
  /** The user who wrote the comment. */
  user?: Maybe<User>;
};

/** A comment associated with an issue. */
export type CommentChildrenArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CommentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** Comment filtering options. */
export type CommentCollectionFilter = {
  /** Compound filters, all of which need to be matched by the comment. */
  and?: Maybe<Array<CommentCollectionFilter>>;
  /** Comparator for the comments body. */
  body?: Maybe<StringComparator>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Filters that needs to be matched by all comments. */
  every?: Maybe<CommentFilter>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Filters that the comments issue must satisfy. */
  issue?: Maybe<IssueFilter>;
  /** Comparator for the collection length. */
  length?: Maybe<NumberComparator>;
  /** Compound filters, one of which need to be matched by the comment. */
  or?: Maybe<Array<CommentCollectionFilter>>;
  /** Filters that needs to be matched by some comments. */
  some?: Maybe<CommentFilter>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
  /** Filters that the comments creator must satisfy. */
  user?: Maybe<UserFilter>;
};

export type CommentConnection = {
  __typename?: "CommentConnection";
  edges: Array<CommentEdge>;
  nodes: Array<Comment>;
  pageInfo: PageInfo;
};

export type CommentCreateInput = {
  /** The comment content in markdown format. */
  body?: Maybe<Scalars["String"]>;
  /** The comment content as a Prosemirror document. */
  bodyData?: Maybe<Scalars["JSON"]>;
  /** Create comment as a user with the provided name. This option is only available to OAuth applications creating comments in `actor=application` mode. */
  createAsUser?: Maybe<Scalars["String"]>;
  /** The date when the comment was created (e.g. if importing from another system). Must be a date in the past. If none is provided, the backend will generate the time as now. */
  createdAt?: Maybe<Scalars["DateTime"]>;
  /** Provide an external user avatar URL. Can only be used in conjunction with the `createAsUser` options. This option is only available to OAuth applications creating comments in `actor=application` mode. */
  displayIconUrl?: Maybe<Scalars["String"]>;
  /** Flag to prevent auto subscription to the issue the comment is created on. */
  doNotSubscribeToIssue?: Maybe<Scalars["Boolean"]>;
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The issue to associate the comment with. */
  issueId: Scalars["String"];
  /** The parent comment under which to nest a current comment. */
  parentId?: Maybe<Scalars["String"]>;
};

export type CommentEdge = {
  __typename?: "CommentEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: Comment;
};

/** Comment filtering options. */
export type CommentFilter = {
  /** Compound filters, all of which need to be matched by the comment. */
  and?: Maybe<Array<CommentFilter>>;
  /** Comparator for the comments body. */
  body?: Maybe<StringComparator>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Filters that the comments issue must satisfy. */
  issue?: Maybe<IssueFilter>;
  /** Compound filters, one of which need to be matched by the comment. */
  or?: Maybe<Array<CommentFilter>>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
  /** Filters that the comments creator must satisfy. */
  user?: Maybe<UserFilter>;
};

export type CommentPayload = {
  __typename?: "CommentPayload";
  /** The comment that was created or updated. */
  comment: Comment;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type CommentUpdateInput = {
  /** The comment content. */
  body?: Maybe<Scalars["String"]>;
  /** The comment content as a Prosemirror document. */
  bodyData?: Maybe<Scalars["JSON"]>;
};

export type ContactCreateInput = {
  /** User's browser information. */
  browser?: Maybe<Scalars["String"]>;
  /** User's Linear client information. */
  clientVersion?: Maybe<Scalars["String"]>;
  /** User's device information. */
  device?: Maybe<Scalars["String"]>;
  /** How disappointed the user would be if they could no longer use Linear. */
  disappointmentRating?: Maybe<Scalars["Int"]>;
  /** The message the user sent. */
  message: Scalars["String"];
  /** User's operating system. */
  operatingSystem?: Maybe<Scalars["String"]>;
  /** The type of support contact. */
  type: Scalars["String"];
};

export type ContactPayload = {
  __typename?: "ContactPayload";
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** [INTERNAL] Input for sending a message to the Linear Sales team */
export type ContactSalesCreateInput = {
  /** Work email of the person requesting information. */
  email: Scalars["String"];
  /** The message the user sent. */
  message?: Maybe<Scalars["String"]>;
  /** Name of the person requesting information. */
  name: Scalars["String"];
};

/** [Internal] Comparator for content. */
export type ContentComparator = {
  /** [Internal] Contains constraint. */
  contains?: Maybe<Scalars["String"]>;
  /** [Internal] Not-contains constraint. */
  notContains?: Maybe<Scalars["String"]>;
};

export type CreateCsvExportReportPayload = {
  __typename?: "CreateCsvExportReportPayload";
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type CreateOrJoinOrganizationResponse = {
  __typename?: "CreateOrJoinOrganizationResponse";
  organization: Organization;
  user: User;
};

export type CreateOrganizationInput = {
  /** Whether the organization should allow email domain access. */
  domainAccess?: Maybe<Scalars["Boolean"]>;
  /** The name of the organization. */
  name: Scalars["String"];
  /** The timezone of the organization, passed in by client. */
  timezone?: Maybe<Scalars["String"]>;
  /** The URL key of the organization. */
  urlKey: Scalars["String"];
  /** JSON serialized UTM parameters associated with the creation of the workspace. */
  utm?: Maybe<Scalars["String"]>;
};

/** A custom view that has been saved by a user. */
export type CustomView = Node & {
  __typename?: "CustomView";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The color of the icon of the custom view. */
  color?: Maybe<Scalars["String"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The user who created the custom view. */
  creator: User;
  /** The description of the custom view. */
  description?: Maybe<Scalars["String"]>;
  /** The filter applied to issues in the custom view. */
  filterData: Scalars["JSONObject"];
  /**
   * The filters applied to issues in the custom view.
   * @deprecated Will be replaced by `filterData` in a future update
   */
  filters: Scalars["JSONObject"];
  /** The icon of the custom view. */
  icon?: Maybe<Scalars["String"]>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The name of the custom view. */
  name: Scalars["String"];
  /** The organization of the custom view. */
  organization: Organization;
  /** Whether the custom view is shared with everyone in the organization. */
  shared: Scalars["Boolean"];
  /** The team associated with the custom view. */
  team?: Maybe<Team>;
  /**
   * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
   *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

export type CustomViewConnection = {
  __typename?: "CustomViewConnection";
  edges: Array<CustomViewEdge>;
  nodes: Array<CustomView>;
  pageInfo: PageInfo;
};

export type CustomViewCreateInput = {
  /** The color of the icon of the custom view. */
  color?: Maybe<Scalars["String"]>;
  /** The description of the custom view. */
  description?: Maybe<Scalars["String"]>;
  /** The filter applied to issues in the custom view. */
  filterData?: Maybe<Scalars["JSONObject"]>;
  /** The filters applied to issues in the custom view. */
  filters?: Maybe<Scalars["JSONObject"]>;
  /** The icon of the custom view. */
  icon?: Maybe<Scalars["String"]>;
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The name of the custom view. */
  name: Scalars["String"];
  /** Whether the custom view is shared with everyone in the organization. */
  shared?: Maybe<Scalars["Boolean"]>;
  /** The id of the team associated with the custom view. */
  teamId?: Maybe<Scalars["String"]>;
};

export type CustomViewEdge = {
  __typename?: "CustomViewEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: CustomView;
};

export type CustomViewPayload = {
  __typename?: "CustomViewPayload";
  /** The custom view that was created or updated. */
  customView: CustomView;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type CustomViewUpdateInput = {
  /** The color of the icon of the custom view. */
  color?: Maybe<Scalars["String"]>;
  /** The description of the custom view. */
  description?: Maybe<Scalars["String"]>;
  /** The filter applied to issues in the custom view. */
  filterData?: Maybe<Scalars["JSONObject"]>;
  /** The filters applied to issues in the custom view. */
  filters?: Maybe<Scalars["JSONObject"]>;
  /** The icon of the custom view. */
  icon?: Maybe<Scalars["String"]>;
  /** The name of the custom view. */
  name?: Maybe<Scalars["String"]>;
  /** Whether the custom view is shared with everyone in the organization. */
  shared?: Maybe<Scalars["Boolean"]>;
  /** The id of the team associated with the custom view. */
  teamId?: Maybe<Scalars["String"]>;
};

/** A set of issues to be resolved in a specified amount of time. */
export type Cycle = Node & {
  __typename?: "Cycle";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the cycle was automatically archived by the auto pruning process. */
  autoArchivedAt?: Maybe<Scalars["DateTime"]>;
  /** The completion time of the cycle. If null, the cycle hasn't been completed. */
  completedAt?: Maybe<Scalars["DateTime"]>;
  /** The number of completed issues in the cycle after each day. */
  completedIssueCountHistory: Array<Scalars["Float"]>;
  /** The number of completed estimation points after each day. */
  completedScopeHistory: Array<Scalars["Float"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The cycle's description. */
  description?: Maybe<Scalars["String"]>;
  /** The end time of the cycle. */
  endsAt: Scalars["DateTime"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The number of in progress estimation points after each day. */
  inProgressScopeHistory: Array<Scalars["Float"]>;
  /** The total number of issues in the cycle after each day. */
  issueCountHistory: Array<Scalars["Float"]>;
  /** Issues associated with the cycle. */
  issues: IssueConnection;
  /** The custom name of the cycle. */
  name?: Maybe<Scalars["String"]>;
  /** The number of the cycle. */
  number: Scalars["Float"];
  /** The overall progress of the cycle. This is the (completed estimate points + 0.25 * in progress estimate points) / total estimate points. */
  progress: Scalars["Float"];
  /** The total number of estimation points after each day. */
  scopeHistory: Array<Scalars["Float"]>;
  /** The start time of the cycle. */
  startsAt: Scalars["DateTime"];
  /** The team that the cycle is associated with. */
  team: Team;
  /** Issues that weren't completed when the cycle was closed. */
  uncompletedIssuesUponClose: IssueConnection;
  /**
   * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
   *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

/** A set of issues to be resolved in a specified amount of time. */
export type CycleIssuesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** A set of issues to be resolved in a specified amount of time. */
export type CycleUncompletedIssuesUponCloseArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type CycleConnection = {
  __typename?: "CycleConnection";
  edges: Array<CycleEdge>;
  nodes: Array<Cycle>;
  pageInfo: PageInfo;
};

export type CycleCreateInput = {
  /** The completion time of the cycle. If null, the cycle hasn't been completed. */
  completedAt?: Maybe<Scalars["DateTime"]>;
  /** The description of the cycle. */
  description?: Maybe<Scalars["String"]>;
  /** The end date of the cycle. */
  endsAt: Scalars["DateTime"];
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The custom name of the cycle. */
  name?: Maybe<Scalars["String"]>;
  /** The start date of the cycle. */
  startsAt: Scalars["DateTime"];
  /** The team to associate the cycle with. */
  teamId: Scalars["String"];
};

export type CycleEdge = {
  __typename?: "CycleEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: Cycle;
};

/** Cycle filtering options. */
export type CycleFilter = {
  /** Compound filters, all of which need to be matched by the cycle. */
  and?: Maybe<Array<CycleFilter>>;
  /** Comparator for the cycle completed at date. */
  completedAt?: Maybe<DateComparator>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Comparator for the cycle ends at date. */
  endsAt?: Maybe<DateComparator>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Comparator for the filtering active cycle. */
  isActive?: Maybe<BooleanComparator>;
  /** Comparator for the filtering future cycles. */
  isFuture?: Maybe<BooleanComparator>;
  /** Comparator for the filtering next cycle. */
  isNext?: Maybe<BooleanComparator>;
  /** Comparator for the filtering past cycles. */
  isPast?: Maybe<BooleanComparator>;
  /** Comparator for the filtering previous cycle. */
  isPrevious?: Maybe<BooleanComparator>;
  /** Filters that the cycles issues must satisfy. */
  issues?: Maybe<IssueCollectionFilter>;
  /** Comparator for the cycle name. */
  name?: Maybe<StringComparator>;
  /** Comparator for the cycle number. */
  number?: Maybe<NumberComparator>;
  /** Compound filters, one of which need to be matched by the cycle. */
  or?: Maybe<Array<CycleFilter>>;
  /** Comparator for the cycle start date. */
  startsAt?: Maybe<DateComparator>;
  /** Filters that the cycles team must satisfy. */
  team?: Maybe<TeamFilter>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

export type CyclePayload = {
  __typename?: "CyclePayload";
  /** The Cycle that was created or updated. */
  cycle?: Maybe<Cycle>;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type CycleUpdateInput = {
  /** The end date of the cycle. */
  completedAt?: Maybe<Scalars["DateTime"]>;
  /** The description of the cycle. */
  description?: Maybe<Scalars["String"]>;
  /** The end date of the cycle. */
  endsAt?: Maybe<Scalars["DateTime"]>;
  /** The custom name of the cycle. */
  name?: Maybe<Scalars["String"]>;
  /** The start date of the cycle. */
  startsAt?: Maybe<Scalars["DateTime"]>;
};

/** Comparator for dates. */
export type DateComparator = {
  /** Equals constraint. */
  eq?: Maybe<Scalars["DateTime"]>;
  /** Greater-than constraint. Matches any values that are greater than the given value. */
  gt?: Maybe<Scalars["DateTime"]>;
  /** Greater-than-or-equal constraint. Matches any values that are greater than or equal to the given value. */
  gte?: Maybe<Scalars["DateTime"]>;
  /** In-array constraint. */
  in?: Maybe<Array<Scalars["DateTime"]>>;
  /** Less-than constraint. Matches any values that are less than the given value. */
  lt?: Maybe<Scalars["DateTime"]>;
  /** Less-than-or-equal constraint. Matches any values that are less than or equal to the given value. */
  lte?: Maybe<Scalars["DateTime"]>;
  /** Not-equals constraint. */
  neq?: Maybe<Scalars["DateTime"]>;
  /** Not-in-array constraint. */
  nin?: Maybe<Array<Scalars["DateTime"]>>;
};

/** The day of the week. */
export enum Day {
  Friday = "Friday",
  Monday = "Monday",
  Saturday = "Saturday",
  Sunday = "Sunday",
  Thursday = "Thursday",
  Tuesday = "Tuesday",
  Wednesday = "Wednesday",
}

export type DeleteOrganizationInput = {
  /** The deletion code to confirm operation. */
  deletionCode: Scalars["String"];
};

/** A document for a project. */
export type Document = Node & {
  __typename?: "Document";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The color of the icon. */
  color?: Maybe<Scalars["String"]>;
  /** The document content in markdown format. */
  content?: Maybe<Scalars["String"]>;
  /** The document content as JSON. */
  contentData?: Maybe<Scalars["JSONObject"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The user who created the document. */
  creator: User;
  /** The icon of the document. */
  icon?: Maybe<Scalars["String"]>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The project that the document is associated with. */
  project: Project;
  /** The document's unique URL slug. */
  slugId: Scalars["String"];
  /** The document title. */
  title: Scalars["String"];
  /**
   * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
   *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** The user who last updated the document. */
  updatedBy: User;
};

export type DocumentConnection = {
  __typename?: "DocumentConnection";
  edges: Array<DocumentEdge>;
  nodes: Array<Document>;
  pageInfo: PageInfo;
};

export type DocumentCreateInput = {
  /** The color of the icon. */
  color?: Maybe<Scalars["String"]>;
  /** The document content as markdown. */
  content?: Maybe<Scalars["String"]>;
  /** The document content as a Prosemirror document. */
  contentData?: Maybe<Scalars["JSONObject"]>;
  /** The icon of the document. */
  icon?: Maybe<Scalars["String"]>;
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** Related project for the document. */
  projectId: Scalars["String"];
  /** The title of the document. */
  title: Scalars["String"];
};

export type DocumentEdge = {
  __typename?: "DocumentEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: Document;
};

export type DocumentPayload = {
  __typename?: "DocumentPayload";
  /** The document that was created or updated. */
  document: Document;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type DocumentUpdateInput = {
  /** The color of the icon. */
  color?: Maybe<Scalars["String"]>;
  /** The document content as markdown. */
  content?: Maybe<Scalars["String"]>;
  /** The document content as a Prosemirror document. */
  contentData?: Maybe<Scalars["JSONObject"]>;
  /** The icon of the document. */
  icon?: Maybe<Scalars["String"]>;
  /** Related project for the document. */
  projectId?: Maybe<Scalars["String"]>;
  /** The title of the document. */
  title?: Maybe<Scalars["String"]>;
};

export type EmailSubscribeInput = {
  /** [INTERNAL] Email to subscribe. */
  email: Scalars["String"];
};

export type EmailSubscribePayload = {
  __typename?: "EmailSubscribePayload";
  /** [INTERNAL] Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type EmailUnsubscribeInput = {
  /** The user's email validation token. */
  token: Scalars["String"];
  /** Email type to unsubscribed from. */
  type: Scalars["String"];
  /** The identifier of the user. */
  userId: Scalars["String"];
};

export type EmailUnsubscribePayload = {
  __typename?: "EmailUnsubscribePayload";
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type EmailUserAccountAuthChallengeInput = {
  /** Auth code for the client initiating the sequence. */
  clientAuthCode?: Maybe<Scalars["String"]>;
  /** The email for which to generate the magic login code. */
  email: Scalars["String"];
  /** Whether the login was requested from the desktop app. */
  isDesktop?: Maybe<Scalars["Boolean"]>;
  /** Signup code. */
  signupCode?: Maybe<Scalars["String"]>;
};

export type EmailUserAccountAuthChallengeResponse = {
  __typename?: "EmailUserAccountAuthChallengeResponse";
  /** Supported challenge for this user account. Can be either verificationCode or password. */
  authType: Scalars["String"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** A custom emoji. */
export type Emoji = Node & {
  __typename?: "Emoji";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The user who created the emoji. */
  creator: User;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The emoji's name. */
  name: Scalars["String"];
  /** The organization that the emoji belongs to. */
  organization: Organization;
  /** The source of the emoji. */
  source: Scalars["String"];
  /**
   * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
   *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** The emoji image URL. */
  url: Scalars["String"];
};

export type EmojiConnection = {
  __typename?: "EmojiConnection";
  edges: Array<EmojiEdge>;
  nodes: Array<Emoji>;
  pageInfo: PageInfo;
};

export type EmojiCreateInput = {
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The name of the custom emoji. */
  name: Scalars["String"];
  /** The URL for the emoji. */
  url: Scalars["String"];
};

export type EmojiEdge = {
  __typename?: "EmojiEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: Emoji;
};

export type EmojiPayload = {
  __typename?: "EmojiPayload";
  /** The emoji that was created. */
  emoji: Emoji;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** A basic entity. */
export type Entity = {
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /**
   * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
   *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

/** Comparator for estimates. */
export type EstimateComparator = {
  /** Compound filters, one of which need to be matched by the estimate. */
  and?: Maybe<Array<NullableNumberComparator>>;
  /** Equals constraint. */
  eq?: Maybe<Scalars["Float"]>;
  /** Greater-than constraint. Matches any values that are greater than the given value. */
  gt?: Maybe<Scalars["Float"]>;
  /** Greater-than-or-equal constraint. Matches any values that are greater than or equal to the given value. */
  gte?: Maybe<Scalars["Float"]>;
  /** In-array constraint. */
  in?: Maybe<Array<Scalars["Float"]>>;
  /** Less-than constraint. Matches any values that are less than the given value. */
  lt?: Maybe<Scalars["Float"]>;
  /** Less-than-or-equal constraint. Matches any values that are less than or equal to the given value. */
  lte?: Maybe<Scalars["Float"]>;
  /** Not-equals constraint. */
  neq?: Maybe<Scalars["Float"]>;
  /** Not-in-array constraint. */
  nin?: Maybe<Array<Scalars["Float"]>>;
  /** Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values. */
  null?: Maybe<Scalars["Boolean"]>;
  /** Compound filters, all of which need to be matched by the estimate. */
  or?: Maybe<Array<NullableNumberComparator>>;
};

export type EventCreateInput = {
  /** The category of the event to create. */
  category: Scalars["String"];
  /** Additional data of the event, encoded as JSON. */
  data?: Maybe<Scalars["JSON"]>;
  /** The subject of the event. */
  subject: Scalars["String"];
  /** The target identifier of the event. */
  targetId?: Maybe<Scalars["String"]>;
  /** The value of the event. */
  value?: Maybe<Scalars["Float"]>;
};

export type EventPayload = {
  __typename?: "EventPayload";
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** User favorites presented in the sidebar. */
export type Favorite = Node & {
  __typename?: "Favorite";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** Children of the favorite. Only applies to favorites of type folder. */
  children: FavoriteConnection;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The favorited custom view. */
  customView?: Maybe<CustomView>;
  /** The favorited cycle. */
  cycle?: Maybe<Cycle>;
  /** The favorited document. */
  document?: Maybe<Document>;
  /** The name of the folder. Only applies to favorites of type folder. */
  folderName?: Maybe<Scalars["String"]>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The favorited issue. */
  issue?: Maybe<Issue>;
  /** The favorited label. */
  label?: Maybe<IssueLabel>;
  /** The parent folder of the favorite. */
  parent?: Maybe<Favorite>;
  /** The team of the favorited predefiend view. */
  predefinedViewTeam?: Maybe<Team>;
  /** The type of favorited predefiend view. */
  predefinedViewType?: Maybe<Scalars["String"]>;
  /** The favorited project. */
  project?: Maybe<Project>;
  /** The favorited team of the project. */
  projectTeam?: Maybe<Team>;
  /** The favorited roadmap. */
  roadmap?: Maybe<Roadmap>;
  /** The order of the item in the favorites list. */
  sortOrder: Scalars["Float"];
  /** The type of the favorite. */
  type: Scalars["String"];
  /**
   * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
   *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** The owner of the favorite. */
  user: User;
};

/** User favorites presented in the sidebar. */
export type FavoriteChildrenArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type FavoriteConnection = {
  __typename?: "FavoriteConnection";
  edges: Array<FavoriteEdge>;
  nodes: Array<Favorite>;
  pageInfo: PageInfo;
};

export type FavoriteCreateInput = {
  /** The identifier of the custom view to favorite. */
  customViewId?: Maybe<Scalars["String"]>;
  /** The identifier of the cycle to favorite. */
  cycleId?: Maybe<Scalars["String"]>;
  /** The identifier of the document to favorite. */
  documentId?: Maybe<Scalars["String"]>;
  /** The name of the favorite folder. */
  folderName?: Maybe<Scalars["String"]>;
  /** The identifier. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The identifier of the issue to favorite. */
  issueId?: Maybe<Scalars["String"]>;
  /** The identifier of the label to favorite. */
  labelId?: Maybe<Scalars["String"]>;
  /** The parent folder of the favorite. */
  parentId?: Maybe<Scalars["String"]>;
  /** The identifier of team for the predefined view to favorite. */
  predefinedViewTeamId?: Maybe<Scalars["String"]>;
  /** The type of the predefined view to favorite. */
  predefinedViewType?: Maybe<Scalars["String"]>;
  /** The identifier of the project to favorite. */
  projectId?: Maybe<Scalars["String"]>;
  /** The identifier of the project team to favorite. */
  projectTeamId?: Maybe<Scalars["String"]>;
  /** The identifier of the roadmap to favorite. */
  roadmapId?: Maybe<Scalars["String"]>;
  /** The position of the item in the favorites list. */
  sortOrder?: Maybe<Scalars["Float"]>;
};

export type FavoriteEdge = {
  __typename?: "FavoriteEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: Favorite;
};

export type FavoritePayload = {
  __typename?: "FavoritePayload";
  /** The object that was added as a favorite. */
  favorite: Favorite;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type FavoriteUpdateInput = {
  /** The name of the favorite folder. */
  folderName?: Maybe<Scalars["String"]>;
  /** The identifier (in UUID v4 format) of the folder to move the favorite under. */
  parentId?: Maybe<Scalars["String"]>;
  /** The position of the item in the favorites list. */
  sortOrder?: Maybe<Scalars["Float"]>;
};

/** Object representing Figma preview information. */
export type FigmaEmbed = {
  __typename?: "FigmaEmbed";
  /** Date when the file was updated at the time of embedding. */
  lastModified: Scalars["DateTime"];
  /** Figma file name. */
  name: Scalars["String"];
  /** Node name. */
  nodeName?: Maybe<Scalars["String"]>;
  /** Figma screenshot URL. */
  url?: Maybe<Scalars["String"]>;
};

export type FigmaEmbedPayload = {
  __typename?: "FigmaEmbedPayload";
  /** Figma embed information. */
  figmaEmbed?: Maybe<FigmaEmbed>;
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type FrontAttachmentPayload = {
  __typename?: "FrontAttachmentPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** Front specific settings. */
export type FrontSettings = {
  __typename?: "FrontSettings";
  /** Whether a ticket should be automatically reopened when its linked Linear issue is cancelled. */
  automateTicketReopeningOnCancellation?: Maybe<Scalars["Boolean"]>;
  /** Whether a ticket should be automatically reopened when a comment is posted on its linked Linear issue */
  automateTicketReopeningOnComment?: Maybe<Scalars["Boolean"]>;
  /** Whether a ticket should be automatically reopened when its linked Linear issue is completed. */
  automateTicketReopeningOnCompletion?: Maybe<Scalars["Boolean"]>;
  /** Whether an internal message should be added when someone comments on an issue. */
  sendNoteOnComment?: Maybe<Scalars["Boolean"]>;
  /** Whether an internal message should be added when a Linear issue changes status (for status types except completed or canceled). */
  sendNoteOnStatusChange?: Maybe<Scalars["Boolean"]>;
};

export type FrontSettingsInput = {
  /** Whether a ticket should be automatically reopened when its linked Linear issue is cancelled. */
  automateTicketReopeningOnCancellation?: Maybe<Scalars["Boolean"]>;
  /** Whether a ticket should be automatically reopened when a comment is posted on its linked Linear issue */
  automateTicketReopeningOnComment?: Maybe<Scalars["Boolean"]>;
  /** Whether a ticket should be automatically reopened when its linked Linear issue is completed. */
  automateTicketReopeningOnCompletion?: Maybe<Scalars["Boolean"]>;
  /** Whether an internal message should be added when someone comments on an issue. */
  sendNoteOnComment?: Maybe<Scalars["Boolean"]>;
  /** Whether an internal message should be added when a Linear issue changes status (for status types except completed or canceled). */
  sendNoteOnStatusChange?: Maybe<Scalars["Boolean"]>;
};

export type GitHubCommitIntegrationPayload = {
  __typename?: "GitHubCommitIntegrationPayload";
  /** The integration that was created or updated. */
  integration?: Maybe<Integration>;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
  /** The webhook secret to provide to GitHub. */
  webhookSecret: Scalars["String"];
};

/** Metadata and settings for a GitHub integration. */
export type GitHubSettings = {
  __typename?: "GitHubSettings";
  /** The avatar URL for the GitHub organization */
  orgAvatarUrl: Scalars["String"];
  /** The GitHub organization's name */
  orgLogin: Scalars["String"];
};

export type GitHubSettingsInput = {
  /** The avatar URL for the GitHub organization */
  orgAvatarUrl: Scalars["String"];
  /** The GitHub organization's name */
  orgLogin: Scalars["String"];
};

/** GitHub OAuth token, plus information about the organizations the user is a member of. */
export type GithubOAuthTokenPayload = {
  __typename?: "GithubOAuthTokenPayload";
  /** A list of the GitHub organizations the user is a member of with attached repositories. */
  organizations?: Maybe<Array<GithubOrg>>;
  /** The OAuth token if the operation to fetch it was successful. */
  token?: Maybe<Scalars["String"]>;
};

/** Relevant information for the GitHub organization. */
export type GithubOrg = {
  __typename?: "GithubOrg";
  /** GitHub organization id. */
  id: Scalars["String"];
  /** Whether or not this org is the user's personal repositories. */
  isPersonal?: Maybe<Scalars["Boolean"]>;
  /** The login for the GitHub organization. */
  login: Scalars["String"];
  /** The name of the GitHub organization. */
  name: Scalars["String"];
  /** Repositories that the organization owns. */
  repositories: Array<GithubRepo>;
};

/** Relevant information for the GitHub repository. */
export type GithubRepo = {
  __typename?: "GithubRepo";
  /** The id of the GitHub repository. */
  id: Scalars["String"];
  /** The name of the GitHub repository. */
  name: Scalars["String"];
};

/** Google Sheets specific settings. */
export type GoogleSheetsSettings = {
  __typename?: "GoogleSheetsSettings";
  sheetId: Scalars["Float"];
  spreadsheetId: Scalars["String"];
  spreadsheetUrl: Scalars["String"];
  updatedIssuesAt: Scalars["DateTime"];
};

export type GoogleSheetsSettingsInput = {
  sheetId: Scalars["Float"];
  spreadsheetId: Scalars["String"];
  spreadsheetUrl: Scalars["String"];
  updatedIssuesAt: Scalars["DateTime"];
};

export type GoogleUserAccountAuthInput = {
  /** Code returned from Google's OAuth flow. */
  code: Scalars["String"];
  /** The URI to redirect the user to. */
  redirectUri?: Maybe<Scalars["String"]>;
  /** Signup code. */
  signupCode?: Maybe<Scalars["String"]>;
  /** The identifiers of the teams to auto-join. */
  teamIdsToJoin?: Maybe<Array<Scalars["String"]>>;
  /** The timezone of the user's browser. */
  timezone: Scalars["String"];
};

/** Comparator for identifiers. */
export type IdComparator = {
  /** Equals constraint. */
  eq?: Maybe<Scalars["ID"]>;
  /** In-array constraint. */
  in?: Maybe<Array<Scalars["ID"]>>;
  /** Not-equals constraint. */
  neq?: Maybe<Scalars["ID"]>;
  /** Not-in-array constraint. */
  nin?: Maybe<Array<Scalars["ID"]>>;
};

export type ImageUploadFromUrlPayload = {
  __typename?: "ImageUploadFromUrlPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
  /** The URL containing the image. */
  url?: Maybe<Scalars["String"]>;
};

/** An integration with an external service. */
export type Integration = Node & {
  __typename?: "Integration";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The user that added the integration. */
  creator: User;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The organization that the integration is associated with. */
  organization: Organization;
  /** The integration's type. */
  service: Scalars["String"];
  /** The team that the integration is associated with. */
  team?: Maybe<Team>;
  /**
   * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
   *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

export type IntegrationConnection = {
  __typename?: "IntegrationConnection";
  edges: Array<IntegrationEdge>;
  nodes: Array<Integration>;
  pageInfo: PageInfo;
};

export type IntegrationEdge = {
  __typename?: "IntegrationEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: Integration;
};

export type IntegrationPayload = {
  __typename?: "IntegrationPayload";
  /** The integration that was created or updated. */
  integration?: Maybe<Integration>;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type IntegrationRequestInput = {
  /** Email associated with the request. */
  email?: Maybe<Scalars["String"]>;
  /** Name of the requested integration. */
  name: Scalars["String"];
};

export type IntegrationRequestPayload = {
  __typename?: "IntegrationRequestPayload";
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** The integration resource's settings */
export type IntegrationSettings = {
  __typename?: "IntegrationSettings";
  front?: Maybe<FrontSettings>;
  gitHub?: Maybe<GitHubSettings>;
  googleSheets?: Maybe<GoogleSheetsSettings>;
  intercom?: Maybe<IntercomSettings>;
  jira?: Maybe<JiraSettings>;
  notion?: Maybe<NotionSettings>;
  sentry?: Maybe<SentrySettings>;
  slackOrgProjectUpdatesPost?: Maybe<SlackPostSettings>;
  slackPost?: Maybe<SlackPostSettings>;
  slackProjectPost?: Maybe<SlackPostSettings>;
  zendesk?: Maybe<ZendeskSettings>;
};

export type IntegrationSettingsInput = {
  front?: Maybe<FrontSettingsInput>;
  gitHub?: Maybe<GitHubSettingsInput>;
  googleSheets?: Maybe<GoogleSheetsSettingsInput>;
  intercom?: Maybe<IntercomSettingsInput>;
  jira?: Maybe<JiraSettingsInput>;
  notion?: Maybe<NotionSettingsInput>;
  sentry?: Maybe<SentrySettingsInput>;
  slackOrgProjectUpdatesPost?: Maybe<SlackPostSettingsInput>;
  slackPost?: Maybe<SlackPostSettingsInput>;
  slackProjectPost?: Maybe<SlackPostSettingsInput>;
  zendesk?: Maybe<ZendeskSettingsInput>;
};

/** Join table between templates and integrations */
export type IntegrationTemplate = Node & {
  __typename?: "IntegrationTemplate";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The integration that the template is associated with. */
  integration: Integration;
  /** The template that the integration is associated with. */
  template: Template;
  /**
   * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
   *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

export type IntegrationTemplateConnection = {
  __typename?: "IntegrationTemplateConnection";
  edges: Array<IntegrationTemplateEdge>;
  nodes: Array<IntegrationTemplate>;
  pageInfo: PageInfo;
};

export type IntegrationTemplateCreateInput = {
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The identifier of the integration. */
  integrationId: Scalars["String"];
  /** The identifier of the template. */
  templateId: Scalars["String"];
};

export type IntegrationTemplateEdge = {
  __typename?: "IntegrationTemplateEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: IntegrationTemplate;
};

export type IntegrationTemplatePayload = {
  __typename?: "IntegrationTemplatePayload";
  /** The IntegrationTemplate that was created or updated. */
  integrationTemplate: IntegrationTemplate;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** The configuration of all integrations for a project or a team. */
export type IntegrationsSettings = Node & {
  __typename?: "IntegrationsSettings";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** Project which those settings apply to. */
  project?: Maybe<Project>;
  /** Whether to send a Slack message when a new issue is added to triage. */
  slackIssueAddedToTriage?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when a new issue is created for the project or the team. */
  slackIssueCreated?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when a comment is created on any of the project or team's issues. */
  slackIssueNewComment?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when an SLA is breached */
  slackIssueSlaBreached?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when an SLA is at high risk */
  slackIssueSlaHighRisk?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when any of the project or team's issues has a change in status. */
  slackIssueStatusChangedAll?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when any of the project or team's issues change to completed or cancelled. */
  slackIssueStatusChangedDone?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when a project update is created. */
  slackProjectUpdateCreated?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a new project update to team Slack channels. */
  slackProjectUpdateCreatedToTeam?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a new project update to workspace Slack channel. */
  slackProjectUpdateCreatedToWorkspace?: Maybe<Scalars["Boolean"]>;
  /** Team which those settings apply to. */
  team?: Maybe<Team>;
  /**
   * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
   *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

export type IntegrationsSettingsConnection = {
  __typename?: "IntegrationsSettingsConnection";
  edges: Array<IntegrationsSettingsEdge>;
  nodes: Array<IntegrationsSettings>;
  pageInfo: PageInfo;
};

export type IntegrationsSettingsCreateInput = {
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The identifier of the project to create settings for. */
  projectId?: Maybe<Scalars["String"]>;
  /** Whether to send a Slack message when a new issue is added to triage. */
  slackIssueAddedToTriage?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when a new issue is created for the project or the team. */
  slackIssueCreated?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when a comment is created on any of the project or team's issues. */
  slackIssueNewComment?: Maybe<Scalars["Boolean"]>;
  /** Whether to receive notification when an SLA has breached on Slack. */
  slackIssueSlaBreached?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when an SLA is at high risk */
  slackIssueSlaHighRisk?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when any of the project or team's issues has a change in status. */
  slackIssueStatusChangedAll?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when any of the project or team's issues change to completed or cancelled. */
  slackIssueStatusChangedDone?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when a project update is created. */
  slackProjectUpdateCreated?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when a project update is created to team channels. */
  slackProjectUpdateCreatedToTeam?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when a project update is created to workspace channel. */
  slackProjectUpdateCreatedToWorkspace?: Maybe<Scalars["Boolean"]>;
  /** The identifier of the team to create settings for. */
  teamId?: Maybe<Scalars["String"]>;
};

export type IntegrationsSettingsEdge = {
  __typename?: "IntegrationsSettingsEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: IntegrationsSettings;
};

export type IntegrationsSettingsPayload = {
  __typename?: "IntegrationsSettingsPayload";
  /** The settings that were created or updated. */
  integrationsSettings: IntegrationsSettings;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type IntegrationsSettingsUpdateInput = {
  /** Whether to send a Slack message when a new issue is added to triage. */
  slackIssueAddedToTriage?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when a new issue is created for the project or the team. */
  slackIssueCreated?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when a comment is created on any of the project or team's issues. */
  slackIssueNewComment?: Maybe<Scalars["Boolean"]>;
  /** Whether to receive notification when an SLA has breached on Slack. */
  slackIssueSlaBreached?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when an SLA is at high risk */
  slackIssueSlaHighRisk?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when any of the project or team's issues has a change in status. */
  slackIssueStatusChangedAll?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when any of the project or team's issues change to completed or cancelled. */
  slackIssueStatusChangedDone?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when a project update is created. */
  slackProjectUpdateCreated?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when a project update is created to team channels. */
  slackProjectUpdateCreatedToTeam?: Maybe<Scalars["Boolean"]>;
  /** Whether to send a Slack message when a project update is created to workspace channel. */
  slackProjectUpdateCreatedToWorkspace?: Maybe<Scalars["Boolean"]>;
};

/** Intercom specific settings. */
export type IntercomSettings = {
  __typename?: "IntercomSettings";
  /** Whether a ticket should be automatically reopened when its linked Linear issue is cancelled. */
  automateTicketReopeningOnCancellation?: Maybe<Scalars["Boolean"]>;
  /** Whether a ticket should be automatically reopened when a comment is posted on its linked Linear issue */
  automateTicketReopeningOnComment?: Maybe<Scalars["Boolean"]>;
  /** Whether a ticket should be automatically reopened when its linked Linear issue is completed. */
  automateTicketReopeningOnCompletion?: Maybe<Scalars["Boolean"]>;
  /** Whether an internal message should be added when someone comments on an issue. */
  sendNoteOnComment?: Maybe<Scalars["Boolean"]>;
  /** Whether an internal message should be added when a Linear issue changes status (for status types except completed or canceled). */
  sendNoteOnStatusChange?: Maybe<Scalars["Boolean"]>;
};

export type IntercomSettingsInput = {
  /** Whether a ticket should be automatically reopened when its linked Linear issue is cancelled. */
  automateTicketReopeningOnCancellation?: Maybe<Scalars["Boolean"]>;
  /** Whether a ticket should be automatically reopened when a comment is posted on its linked Linear issue */
  automateTicketReopeningOnComment?: Maybe<Scalars["Boolean"]>;
  /** Whether a ticket should be automatically reopened when its linked Linear issue is completed. */
  automateTicketReopeningOnCompletion?: Maybe<Scalars["Boolean"]>;
  /** Whether an internal message should be added when someone comments on an issue. */
  sendNoteOnComment?: Maybe<Scalars["Boolean"]>;
  /** Whether an internal message should be added when a Linear issue changes status (for status types except completed or canceled). */
  sendNoteOnStatusChange?: Maybe<Scalars["Boolean"]>;
};

/** An issue. */
export type Issue = Node & {
  __typename?: "Issue";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The user to whom the issue is assigned to. */
  assignee?: Maybe<User>;
  /** Attachments associated with the issue. */
  attachments: AttachmentConnection;
  /** The time at which the issue was automatically archived by the auto pruning process. */
  autoArchivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the issue was automatically closed by the auto pruning process. */
  autoClosedAt?: Maybe<Scalars["DateTime"]>;
  /**
   * The order of the item in its column on the board.
   * @deprecated Will be removed in near future, please use `sortOrder` instead
   */
  boardOrder: Scalars["Float"];
  /** Suggested branch name for the issue. */
  branchName: Scalars["String"];
  /** The time at which the issue was moved into canceled state. */
  canceledAt?: Maybe<Scalars["DateTime"]>;
  /** Children of the issue. */
  children: IssueConnection;
  /** Comments associated with the issue. */
  comments: CommentConnection;
  /** The time at which the issue was moved into completed state. */
  completedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The user who created the issue. */
  creator?: Maybe<User>;
  /** Returns the number of Attachment resources which are created by customer support ticketing systems (e.g. Zendesk). */
  customerTicketCount: Scalars["Int"];
  /** The cycle that the issue is associated with. */
  cycle?: Maybe<Cycle>;
  /** The issue's description in markdown format. */
  description?: Maybe<Scalars["String"]>;
  /** [Internal] The issue's description as a Prosemirror document. */
  descriptionData?: Maybe<Scalars["JSON"]>;
  /** The date at which the issue is due. */
  dueDate?: Maybe<Scalars["TimelessDate"]>;
  /** The estimate of the complexity of the issue.. */
  estimate?: Maybe<Scalars["Float"]>;
  /** History entries associated with the issue. */
  history: IssueHistoryConnection;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** Issue's human readable identifier (e.g. ENG-123). */
  identifier: Scalars["String"];
  /** Inverse relations associated with this issue. */
  inverseRelations: IssueRelationConnection;
  /** Labels associated with this issue. */
  labels: IssueLabelConnection;
  /** The issue's unique number. */
  number: Scalars["Float"];
  /** The parent of the issue. */
  parent?: Maybe<Issue>;
  /** Previous identifiers of the issue if it has been moved between teams. */
  previousIdentifiers: Array<Scalars["String"]>;
  /** The priority of the issue. */
  priority: Scalars["Float"];
  /** Label for the priority. */
  priorityLabel: Scalars["String"];
  /** The project that the issue is associated with. */
  project?: Maybe<Project>;
  /** [ALPHA] The projectMilestone that the issue is associated with. */
  projectMilestone?: Maybe<ProjectMilestone>;
  /** Relations associated with this issue. */
  relations: IssueRelationConnection;
  /** [Internal] The time at which the issue's SLA will breach. */
  slaBreachesAt?: Maybe<Scalars["DateTime"]>;
  /** [Internal] The time at which the issue's SLA began. */
  slaStartedAt?: Maybe<Scalars["DateTime"]>;
  /** The user who snoozed the issue. */
  snoozedBy?: Maybe<User>;
  /** The time until an issue will be snoozed in Triage view. */
  snoozedUntilAt?: Maybe<Scalars["DateTime"]>;
  /** The order of the item in relation to other items in the organization. */
  sortOrder: Scalars["Float"];
  /** The time at which the issue was moved into started state. */
  startedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the issue entered triage. */
  startedTriageAt?: Maybe<Scalars["DateTime"]>;
  /** The workflow state that the issue is associated with. */
  state: WorkflowState;
  /** The order of the item in the sub-issue list. Only set if the issue has a parent. */
  subIssueSortOrder?: Maybe<Scalars["Float"]>;
  /** Users who are subscribed to the issue. */
  subscribers: UserConnection;
  /** The team that the issue is associated with. */
  team: Team;
  /** The issue's title. */
  title: Scalars["String"];
  /** A flag that indicates whether the issue is in the trash bin. */
  trashed?: Maybe<Scalars["Boolean"]>;
  /** The time at which the issue left triage. */
  triagedAt?: Maybe<Scalars["DateTime"]>;
  /**
   * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
   *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** Issue URL. */
  url: Scalars["String"];
};

/** An issue. */
export type IssueAttachmentsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<AttachmentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** An issue. */
export type IssueChildrenArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** An issue. */
export type IssueCommentsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CommentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** An issue. */
export type IssueHistoryArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** An issue. */
export type IssueInverseRelationsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** An issue. */
export type IssueLabelsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueLabelFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** An issue. */
export type IssueRelationsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** An issue. */
export type IssueSubscribersArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<UserFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  includeDisabled?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type IssueBatchPayload = {
  __typename?: "IssueBatchPayload";
  /** The issues that were updated. */
  issues: Array<Issue>;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** Issue filtering options. */
export type IssueCollectionFilter = {
  /** Compound filters, all of which need to be matched by the issue. */
  and?: Maybe<Array<IssueCollectionFilter>>;
  /** Filters that the issues assignee must satisfy. */
  assignee?: Maybe<NullableUserFilter>;
  /** Filters that the issues attachments must satisfy. */
  attachments?: Maybe<AttachmentCollectionFilter>;
  /** Comparator for the issues auto archived at date. */
  autoArchivedAt?: Maybe<NullableDateComparator>;
  /** Comparator for the issues auto closed at date. */
  autoClosedAt?: Maybe<NullableDateComparator>;
  /** Comparator for the issues canceled at date. */
  canceledAt?: Maybe<NullableDateComparator>;
  /** Filters that the child issues must satisfy. */
  children?: Maybe<IssueCollectionFilter>;
  /** Filters that the issues comments must satisfy. */
  comments?: Maybe<CommentCollectionFilter>;
  /** Comparator for the issues completed at date. */
  completedAt?: Maybe<NullableDateComparator>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Filters that the issues creator must satisfy. */
  creator?: Maybe<NullableUserFilter>;
  /** Filters that the issues cycle must satisfy. */
  cycle?: Maybe<NullableCycleFilter>;
  /** Comparator for the issues description. */
  description?: Maybe<NullableStringComparator>;
  /** Comparator for the issues due date. */
  dueDate?: Maybe<NullableTimelessDateComparator>;
  /** Comparator for the issues estimate. */
  estimate?: Maybe<EstimateComparator>;
  /** Filters that needs to be matched by all issues. */
  every?: Maybe<IssueFilter>;
  /** Comparator for filtering issues which are blocked. */
  hasBlockedByRelations?: Maybe<RelationExistsComparator>;
  /** Comparator for filtering issues which are blocking. */
  hasBlockingRelations?: Maybe<RelationExistsComparator>;
  /** Comparator for filtering issues which are duplicates. */
  hasDuplicateRelations?: Maybe<RelationExistsComparator>;
  /** Comparator for filtering issues with relations. */
  hasRelatedRelations?: Maybe<RelationExistsComparator>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Filters that issue labels must satisfy. */
  labels?: Maybe<IssueLabelCollectionFilter>;
  /** Comparator for the collection length. */
  length?: Maybe<NumberComparator>;
  /** Comparator for the issues number. */
  number?: Maybe<NumberComparator>;
  /** Compound filters, one of which need to be matched by the issue. */
  or?: Maybe<Array<IssueCollectionFilter>>;
  /** Filters that the issue parent must satisfy. */
  parent?: Maybe<NullableIssueFilter>;
  /** Comparator for the issues priority. */
  priority?: Maybe<NullableNumberComparator>;
  /** Filters that the issues project must satisfy. */
  project?: Maybe<NullableProjectFilter>;
  /** [Internal] Comparator for the issues content. */
  searchableContent?: Maybe<ContentComparator>;
  /** Comparator for the issues sla status. */
  slaStatus?: Maybe<SlaStatusComparator>;
  /** Filters that the issues snoozer must satisfy. */
  snoozedBy?: Maybe<NullableUserFilter>;
  /** Comparator for the issues snoozed until date. */
  snoozedUntilAt?: Maybe<NullableDateComparator>;
  /** Filters that needs to be matched by some issues. */
  some?: Maybe<IssueFilter>;
  /** Comparator for the issues started at date. */
  startedAt?: Maybe<NullableDateComparator>;
  /** Filters that the issues state must satisfy. */
  state?: Maybe<WorkflowStateFilter>;
  /** Filters that issue subscribers must satisfy. */
  subscribers?: Maybe<UserCollectionFilter>;
  /** Filters that the issues team must satisfy. */
  team?: Maybe<TeamFilter>;
  /** Comparator for the issues title. */
  title?: Maybe<StringComparator>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

export type IssueConnection = {
  __typename?: "IssueConnection";
  edges: Array<IssueEdge>;
  nodes: Array<Issue>;
  pageInfo: PageInfo;
};

export type IssueCreateInput = {
  /** The identifier of the user to assign the issue to. */
  assigneeId?: Maybe<Scalars["String"]>;
  /** The position of the issue in its column on the board view. */
  boardOrder?: Maybe<Scalars["Float"]>;
  /** Create issue as a user with the provided name. This option is only available to OAuth applications creating issues in `actor=application` mode. */
  createAsUser?: Maybe<Scalars["String"]>;
  /** The date when the issue was created (e.g. if importing from another system). Must be a date in the past. If none is provided, the backend will generate the time as now. */
  createdAt?: Maybe<Scalars["DateTime"]>;
  /** The cycle associated with the issue. */
  cycleId?: Maybe<Scalars["String"]>;
  /** The issue description in markdown format. */
  description?: Maybe<Scalars["String"]>;
  /** The issue description as a Prosemirror document. */
  descriptionData?: Maybe<Scalars["JSON"]>;
  /** Provide an external user avatar URL. Can only be used in conjunction with the `createAsUser` options. This option is only available to OAuth applications creating comments in `actor=application` mode. */
  displayIconUrl?: Maybe<Scalars["String"]>;
  /** The date at which the issue is due. */
  dueDate?: Maybe<Scalars["TimelessDate"]>;
  /** The estimated complexity of the issue. */
  estimate?: Maybe<Scalars["Int"]>;
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The identifiers of the issue labels associated with this ticket. */
  labelIds?: Maybe<Array<Scalars["String"]>>;
  /** The identifier of the parent issue. */
  parentId?: Maybe<Scalars["String"]>;
  /** The priority of the issue. */
  priority?: Maybe<Scalars["Int"]>;
  /** The project associated with the issue. */
  projectId?: Maybe<Scalars["String"]>;
  /** [ALPHA] The project milestone associated with the issue. */
  projectMilestoneId?: Maybe<Scalars["String"]>;
  /** The comment the issue is referencing. */
  referenceCommentId?: Maybe<Scalars["String"]>;
  /** The position of the issue related to other issues. */
  sortOrder?: Maybe<Scalars["Float"]>;
  /** The team state of the issue. */
  stateId?: Maybe<Scalars["String"]>;
  /** The position of the issue in parent's sub-issue list. */
  subIssueSortOrder?: Maybe<Scalars["Float"]>;
  /** The identifiers of the users subscribing to this ticket. */
  subscriberIds?: Maybe<Array<Scalars["String"]>>;
  /** The identifier or key of the team associated with the issue. */
  teamId: Scalars["String"];
  /** The title of the issue. */
  title: Scalars["String"];
};

/** [Internal] A draft issue. */
export type IssueDraft = Node & {
  __typename?: "IssueDraft";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The user assigned to the draft. */
  assigneeId?: Maybe<Scalars["String"]>;
  /** Serialized array of JSONs representing attachments. */
  attachments: Scalars["JSONObject"];
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The user who created the draft. */
  creator: User;
  /** The cycle associated with the draft. */
  cycleId?: Maybe<Scalars["String"]>;
  /** The draft's description in markdown format. */
  description?: Maybe<Scalars["String"]>;
  /** [Internal] The draft's description as a Prosemirror document. */
  descriptionData?: Maybe<Scalars["JSON"]>;
  /** The date at which the issue would be due. */
  dueDate?: Maybe<Scalars["TimelessDate"]>;
  /** The estimate of the complexity of the draft. */
  estimate?: Maybe<Scalars["Float"]>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The parent draft of the draft. */
  parent?: Maybe<IssueDraft>;
  /** The parent issue of the draft. */
  parentIssue?: Maybe<Issue>;
  /** The priority of the draft. */
  priority: Scalars["Float"];
  /** Label for the priority. */
  priorityLabel: Scalars["String"];
  /** The project associated with the draft. */
  projectId?: Maybe<Scalars["String"]>;
  /** The workflow state associated with the draft. */
  stateId: Scalars["String"];
  /** The order of items in the sub-draft list. Only set if the draft has `parent` set. */
  subIssueSortOrder?: Maybe<Scalars["Float"]>;
  /** The team associated with the draft. */
  teamId: Scalars["String"];
  /** The draft's title. */
  title: Scalars["String"];
  /**
   * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
   *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

export type IssueEdge = {
  __typename?: "IssueEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: Issue;
};

/** Issue filtering options. */
export type IssueFilter = {
  /** Compound filters, all of which need to be matched by the issue. */
  and?: Maybe<Array<IssueFilter>>;
  /** Filters that the issues assignee must satisfy. */
  assignee?: Maybe<NullableUserFilter>;
  /** Filters that the issues attachments must satisfy. */
  attachments?: Maybe<AttachmentCollectionFilter>;
  /** Comparator for the issues auto archived at date. */
  autoArchivedAt?: Maybe<NullableDateComparator>;
  /** Comparator for the issues auto closed at date. */
  autoClosedAt?: Maybe<NullableDateComparator>;
  /** Comparator for the issues canceled at date. */
  canceledAt?: Maybe<NullableDateComparator>;
  /** Filters that the child issues must satisfy. */
  children?: Maybe<IssueCollectionFilter>;
  /** Filters that the issues comments must satisfy. */
  comments?: Maybe<CommentCollectionFilter>;
  /** Comparator for the issues completed at date. */
  completedAt?: Maybe<NullableDateComparator>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Filters that the issues creator must satisfy. */
  creator?: Maybe<NullableUserFilter>;
  /** Filters that the issues cycle must satisfy. */
  cycle?: Maybe<NullableCycleFilter>;
  /** Comparator for the issues description. */
  description?: Maybe<NullableStringComparator>;
  /** Comparator for the issues due date. */
  dueDate?: Maybe<NullableTimelessDateComparator>;
  /** Comparator for the issues estimate. */
  estimate?: Maybe<EstimateComparator>;
  /** Comparator for filtering issues which are blocked. */
  hasBlockedByRelations?: Maybe<RelationExistsComparator>;
  /** Comparator for filtering issues which are blocking. */
  hasBlockingRelations?: Maybe<RelationExistsComparator>;
  /** Comparator for filtering issues which are duplicates. */
  hasDuplicateRelations?: Maybe<RelationExistsComparator>;
  /** Comparator for filtering issues with relations. */
  hasRelatedRelations?: Maybe<RelationExistsComparator>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Filters that issue labels must satisfy. */
  labels?: Maybe<IssueLabelCollectionFilter>;
  /** Comparator for the issues number. */
  number?: Maybe<NumberComparator>;
  /** Compound filters, one of which need to be matched by the issue. */
  or?: Maybe<Array<IssueFilter>>;
  /** Filters that the issue parent must satisfy. */
  parent?: Maybe<NullableIssueFilter>;
  /** Comparator for the issues priority. */
  priority?: Maybe<NullableNumberComparator>;
  /** Filters that the issues project must satisfy. */
  project?: Maybe<NullableProjectFilter>;
  /** [Internal] Comparator for the issues content. */
  searchableContent?: Maybe<ContentComparator>;
  /** Comparator for the issues sla status. */
  slaStatus?: Maybe<SlaStatusComparator>;
  /** Filters that the issues snoozer must satisfy. */
  snoozedBy?: Maybe<NullableUserFilter>;
  /** Comparator for the issues snoozed until date. */
  snoozedUntilAt?: Maybe<NullableDateComparator>;
  /** Comparator for the issues started at date. */
  startedAt?: Maybe<NullableDateComparator>;
  /** Filters that the issues state must satisfy. */
  state?: Maybe<WorkflowStateFilter>;
  /** Filters that issue subscribers must satisfy. */
  subscribers?: Maybe<UserCollectionFilter>;
  /** Filters that the issues team must satisfy. */
  team?: Maybe<TeamFilter>;
  /** Comparator for the issues title. */
  title?: Maybe<StringComparator>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

/** A record of changes to an issue. */
export type IssueHistory = Node & {
  __typename?: "IssueHistory";
  /** The user who made these changes. If null, possibly means that the change made by an integration. */
  actor?: Maybe<User>;
  /** The id of user who made these changes. If null, possibly means that the change made by an integration. */
  actorId?: Maybe<Scalars["String"]>;
  /** ID's of labels that were added. */
  addedLabelIds?: Maybe<Array<Scalars["String"]>>;
  /** Whether the issue was archived or un-archived. */
  archived?: Maybe<Scalars["Boolean"]>;
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The linked attachment. */
  attachment?: Maybe<Attachment>;
  /** The id of linked attachment. */
  attachmentId?: Maybe<Scalars["String"]>;
  /** Whether the issue was auto-archived. */
  autoArchived?: Maybe<Scalars["Boolean"]>;
  /** Whether the issue was auto-closed. */
  autoClosed?: Maybe<Scalars["Boolean"]>;
  /** [Internal] Serialized JSON representing changes for certain non-relational properties. */
  changes?: Maybe<Scalars["JSONObject"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The user from whom the issue was re-assigned from. */
  fromAssignee?: Maybe<User>;
  /** The id of user from whom the issue was re-assigned from. */
  fromAssigneeId?: Maybe<Scalars["String"]>;
  /** The previous cycle of the issue. */
  fromCycle?: Maybe<Cycle>;
  /** The id of previous cycle of the issue. */
  fromCycleId?: Maybe<Scalars["String"]>;
  /** What the due date was changed from */
  fromDueDate?: Maybe<Scalars["TimelessDate"]>;
  /** What the estimate was changed from. */
  fromEstimate?: Maybe<Scalars["Float"]>;
  /** The previous parent of the issue. */
  fromParent?: Maybe<Issue>;
  /** The id of previous parent of the issue. */
  fromParentId?: Maybe<Scalars["String"]>;
  /** What the priority was changed from. */
  fromPriority?: Maybe<Scalars["Float"]>;
  /** The previous project of the issue. */
  fromProject?: Maybe<Project>;
  /** The id of previous project of the issue. */
  fromProjectId?: Maybe<Scalars["String"]>;
  /** The previous workflow state of the issue. */
  fromState?: Maybe<WorkflowState>;
  /** The id of previous workflow state of the issue. */
  fromStateId?: Maybe<Scalars["String"]>;
  /** The team from which the issue was moved from. */
  fromTeam?: Maybe<Team>;
  /** The id of team from which the issue was moved from. */
  fromTeamId?: Maybe<Scalars["String"]>;
  /** What the title was changed from. */
  fromTitle?: Maybe<Scalars["String"]>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The issue that was changed. */
  issue: Issue;
  /** The import record. */
  issueImport?: Maybe<IssueImport>;
  /** Changed issue relationships. */
  relationChanges?: Maybe<Array<IssueRelationHistoryPayload>>;
  /** ID's of labels that were removed. */
  removedLabelIds?: Maybe<Array<Scalars["String"]>>;
  /** The user to whom the issue was assigned to. */
  toAssignee?: Maybe<User>;
  /** The id of user to whom the issue was assigned to. */
  toAssigneeId?: Maybe<Scalars["String"]>;
  /** The new project created from the issue. */
  toConvertedProject?: Maybe<Project>;
  /** The id of new project created from the issue. */
  toConvertedProjectId?: Maybe<Scalars["String"]>;
  /** The new cycle of the issue. */
  toCycle?: Maybe<Cycle>;
  /** The id of new cycle of the issue. */
  toCycleId?: Maybe<Scalars["String"]>;
  /** What the due date was changed to */
  toDueDate?: Maybe<Scalars["TimelessDate"]>;
  /** What the estimate was changed to. */
  toEstimate?: Maybe<Scalars["Float"]>;
  /** The new parent of the issue. */
  toParent?: Maybe<Issue>;
  /** The id of new parent of the issue. */
  toParentId?: Maybe<Scalars["String"]>;
  /** What the priority was changed to. */
  toPriority?: Maybe<Scalars["Float"]>;
  /** The new project of the issue. */
  toProject?: Maybe<Project>;
  /** The id of new project of the issue. */
  toProjectId?: Maybe<Scalars["String"]>;
  /** The new workflow state of the issue. */
  toState?: Maybe<WorkflowState>;
  /** The id of new workflow state of the issue. */
  toStateId?: Maybe<Scalars["String"]>;
  /** The team to which the issue was moved to. */
  toTeam?: Maybe<Team>;
  /** The id of team to which the issue was moved to. */
  toTeamId?: Maybe<Scalars["String"]>;
  /** What the title was changed to. */
  toTitle?: Maybe<Scalars["String"]>;
  /** Whether the issue was trashed or un-trashed. */
  trashed?: Maybe<Scalars["Boolean"]>;
  /**
   * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
   *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** Whether the issue's description was updated. */
  updatedDescription?: Maybe<Scalars["Boolean"]>;
};

export type IssueHistoryConnection = {
  __typename?: "IssueHistoryConnection";
  edges: Array<IssueHistoryEdge>;
  nodes: Array<IssueHistory>;
  pageInfo: PageInfo;
};

export type IssueHistoryEdge = {
  __typename?: "IssueHistoryEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: IssueHistory;
};

/** An import job for data from an external service */
export type IssueImport = Node & {
  __typename?: "IssueImport";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The id for the user that started the job. */
  creatorId: Scalars["String"];
  /** User readable error message, if one has occurred during the import. */
  error?: Maybe<Scalars["String"]>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The data mapping configuration for the import job. */
  mapping?: Maybe<Scalars["JSONObject"]>;
  /** Current step progress in % (0-100). */
  progress?: Maybe<Scalars["Float"]>;
  /** The service from which data will be imported. */
  service: Scalars["String"];
  /** The status for the import job. */
  status: Scalars["String"];
  /** New team's name in cases when teamId not set */
  teamName?: Maybe<Scalars["String"]>;
  /**
   * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
   *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

export type IssueImportDeletePayload = {
  __typename?: "IssueImportDeletePayload";
  /** The import job that was deleted. */
  issueImport?: Maybe<IssueImport>;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** Issue import mapping input */
export type IssueImportMappingInput = {
  /** The mapping configuration for epics */
  epics?: Maybe<Scalars["JSONObject"]>;
  /** The mapping configuration for users */
  users?: Maybe<Scalars["JSONObject"]>;
  /** The mapping configuration for workflow states */
  workflowStates?: Maybe<Scalars["JSONObject"]>;
};

export type IssueImportPayload = {
  __typename?: "IssueImportPayload";
  /** The import job that was created or updated. */
  issueImport?: Maybe<IssueImport>;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type IssueImportUpdateInput = {
  /** The mapping configuration for the import. */
  mapping: Scalars["JSONObject"];
};

/** Labels that can be associated with issues. */
export type IssueLabel = Node & {
  __typename?: "IssueLabel";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** Children of the label. */
  children: IssueLabelConnection;
  /** The label's color as a HEX string. */
  color: Scalars["String"];
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The user who created the label. */
  creator?: Maybe<User>;
  /** The label's description. */
  description?: Maybe<Scalars["String"]>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** Issues associated with the label. */
  issues: IssueConnection;
  /** The label's name. */
  name: Scalars["String"];
  /** @deprecated Workspace labels are identified by their team being null. */
  organization: Organization;
  /** The parent label. */
  parent?: Maybe<IssueLabel>;
  /** The team that the label is associated with. If null, the label is associated with the global workspace. */
  team?: Maybe<Team>;
  /**
   * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
   *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

/** Labels that can be associated with issues. */
export type IssueLabelChildrenArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueLabelFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** Labels that can be associated with issues. */
export type IssueLabelIssuesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** Issue label filtering options. */
export type IssueLabelCollectionFilter = {
  /** Compound filters, all of which need to be matched by the label. */
  and?: Maybe<Array<IssueLabelCollectionFilter>>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Filters that the issue labels creator must satisfy. */
  creator?: Maybe<NullableUserFilter>;
  /** Filters that needs to be matched by all issue labels. */
  every?: Maybe<IssueLabelFilter>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Comparator for the collection length. */
  length?: Maybe<NumberComparator>;
  /** Comparator for the name. */
  name?: Maybe<StringComparator>;
  /** Compound filters, one of which need to be matched by the label. */
  or?: Maybe<Array<IssueLabelCollectionFilter>>;
  /** Filters that the issue label's parent label must satisfy. */
  parent?: Maybe<IssueLabelFilter>;
  /** Filters that needs to be matched by some issue labels. */
  some?: Maybe<IssueLabelFilter>;
  /** Filters that the issue labels team must satisfy. */
  team?: Maybe<TeamFilter>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

export type IssueLabelConnection = {
  __typename?: "IssueLabelConnection";
  edges: Array<IssueLabelEdge>;
  nodes: Array<IssueLabel>;
  pageInfo: PageInfo;
};

export type IssueLabelCreateInput = {
  /** The color of the label. */
  color?: Maybe<Scalars["String"]>;
  /** The description of the label. */
  description?: Maybe<Scalars["String"]>;
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The name of the label. */
  name: Scalars["String"];
  /** The identifier of the parent label. */
  parentId?: Maybe<Scalars["String"]>;
  /** The team associated with the label. If not given, the label will be associated with the entire workspace. */
  teamId?: Maybe<Scalars["String"]>;
};

export type IssueLabelEdge = {
  __typename?: "IssueLabelEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: IssueLabel;
};

/** Issue label filtering options. */
export type IssueLabelFilter = {
  /** Compound filters, all of which need to be matched by the label. */
  and?: Maybe<Array<IssueLabelFilter>>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Filters that the issue labels creator must satisfy. */
  creator?: Maybe<NullableUserFilter>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Comparator for the name. */
  name?: Maybe<StringComparator>;
  /** Compound filters, one of which need to be matched by the label. */
  or?: Maybe<Array<IssueLabelFilter>>;
  /** Filters that the issue label's parent label must satisfy. */
  parent?: Maybe<IssueLabelFilter>;
  /** Filters that the issue labels team must satisfy. */
  team?: Maybe<TeamFilter>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

export type IssueLabelPayload = {
  __typename?: "IssueLabelPayload";
  /** The label that was created or updated. */
  issueLabel: IssueLabel;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type IssueLabelUpdateInput = {
  /** The color of the label. */
  color?: Maybe<Scalars["String"]>;
  /** The description of the label. */
  description?: Maybe<Scalars["String"]>;
  /** The name of the label. */
  name?: Maybe<Scalars["String"]>;
  /** The identifier of the parent label. */
  parentId?: Maybe<Scalars["String"]>;
};

/** An issue related notification */
export type IssueNotification = Entity &
  Node &
  Notification & {
    __typename?: "IssueNotification";
    /** The user that caused the notification. If empty it's Linear itself. */
    actor?: Maybe<User>;
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: Maybe<Scalars["DateTime"]>;
    /** The comment related to the notification. */
    comment?: Maybe<Comment>;
    /** The time at which the entity was created. */
    createdAt: Scalars["DateTime"];
    /**
     * The time at when an email reminder for this notification was sent to the user. Null, if no email
     *     reminder has been sent.
     */
    emailedAt?: Maybe<Scalars["DateTime"]>;
    /** The unique identifier of the entity. */
    id: Scalars["ID"];
    /** The issue related to the notification. */
    issue: Issue;
    /** Name of the reaction emoji related to the notification. */
    reactionEmoji?: Maybe<Scalars["String"]>;
    /** The time at when the user marked the notification as read. Null, if the the user hasn't read the notification */
    readAt?: Maybe<Scalars["DateTime"]>;
    /** The time until a notification will be snoozed. After that it will appear in the inbox again. */
    snoozedUntilAt?: Maybe<Scalars["DateTime"]>;
    /** The team related to the notification. */
    team: Team;
    /** Notification type */
    type: Scalars["String"];
    /** The time at which a notification was unsnoozed.. */
    unsnoozedAt?: Maybe<Scalars["DateTime"]>;
    /**
     * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
     *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars["DateTime"];
    /** The user that received the notification. */
    user: User;
  };

export type IssuePayload = {
  __typename?: "IssuePayload";
  /** The issue that was created or updated. */
  issue?: Maybe<Issue>;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type IssuePriorityValue = {
  __typename?: "IssuePriorityValue";
  /** Priority's label. */
  label: Scalars["String"];
  /** Priority's number value. */
  priority: Scalars["Int"];
};

/** A relation between two issues. */
export type IssueRelation = Node & {
  __typename?: "IssueRelation";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The issue whose relationship is being described. */
  issue: Issue;
  /** The related issue. */
  relatedIssue: Issue;
  /** The relationship of the issue with the related issue. */
  type: Scalars["String"];
  /**
   * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
   *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

export type IssueRelationConnection = {
  __typename?: "IssueRelationConnection";
  edges: Array<IssueRelationEdge>;
  nodes: Array<IssueRelation>;
  pageInfo: PageInfo;
};

export type IssueRelationCreateInput = {
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The identifier of the issue that is related to another issue. */
  issueId: Scalars["String"];
  /** The identifier of the related issue. */
  relatedIssueId: Scalars["String"];
  /** The type of relation of the issue to the related issue. */
  type: IssueRelationType;
};

export type IssueRelationEdge = {
  __typename?: "IssueRelationEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: IssueRelation;
};

/** Issue relation history's payload */
export type IssueRelationHistoryPayload = {
  __typename?: "IssueRelationHistoryPayload";
  /** The identifier of the related issue. */
  identifier: Scalars["String"];
  /** The type of the change. */
  type: Scalars["String"];
};

export type IssueRelationPayload = {
  __typename?: "IssueRelationPayload";
  /** The issue relation that was created or updated. */
  issueRelation: IssueRelation;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** The type of the issue relation. */
export enum IssueRelationType {
  Blocks = "blocks",
  Duplicate = "duplicate",
  Related = "related",
}

export type IssueRelationUpdateInput = {
  /** The identifier of the issue that is related to another issue. */
  issueId?: Maybe<Scalars["String"]>;
  /** The identifier of the related issue. */
  relatedIssueId?: Maybe<Scalars["String"]>;
  /** The type of relation of the issue to the related issue. */
  type?: Maybe<Scalars["String"]>;
};

export type IssueUpdateInput = {
  /** The identifier of the user to assign the issue to. */
  assigneeId?: Maybe<Scalars["String"]>;
  /** The position of the issue in its column on the board view. */
  boardOrder?: Maybe<Scalars["Float"]>;
  /** The cycle associated with the issue. */
  cycleId?: Maybe<Scalars["String"]>;
  /** The issue description in markdown format. */
  description?: Maybe<Scalars["String"]>;
  /** The issue description as a Prosemirror document. */
  descriptionData?: Maybe<Scalars["JSON"]>;
  /** The date at which the issue is due. */
  dueDate?: Maybe<Scalars["TimelessDate"]>;
  /** The estimated complexity of the issue. */
  estimate?: Maybe<Scalars["Int"]>;
  /** The identifiers of the issue labels associated with this ticket. */
  labelIds?: Maybe<Array<Scalars["String"]>>;
  /** The identifier of the parent issue. */
  parentId?: Maybe<Scalars["String"]>;
  /** The priority of the issue. */
  priority?: Maybe<Scalars["Int"]>;
  /** The project associated with the issue. */
  projectId?: Maybe<Scalars["String"]>;
  /** [ALPHA] The project milestone associated with the issue. */
  projectMilestoneId?: Maybe<Scalars["String"]>;
  /** [Internal] The timestamp at which an issue will be considered in breach of SLA. */
  slaBreachesAt?: Maybe<Scalars["DateTime"]>;
  /** The identifier of the user who snoozed the issue. */
  snoozedById?: Maybe<Scalars["String"]>;
  /** The time until an issue will be snoozed in Triage view. */
  snoozedUntilAt?: Maybe<Scalars["DateTime"]>;
  /** The position of the issue related to other issues. */
  sortOrder?: Maybe<Scalars["Float"]>;
  /** The team state of the issue. */
  stateId?: Maybe<Scalars["String"]>;
  /** The position of the issue in parent's sub-issue list. */
  subIssueSortOrder?: Maybe<Scalars["Float"]>;
  /** The identifiers of the users subscribing to this ticket. */
  subscriberIds?: Maybe<Array<Scalars["String"]>>;
  /** The identifier or key of the team associated with the issue. */
  teamId?: Maybe<Scalars["String"]>;
  /** The issue title. */
  title?: Maybe<Scalars["String"]>;
  /** Wether the issue has been trashed. */
  trashed?: Maybe<Scalars["Boolean"]>;
};

export type JiraConfigurationInput = {
  /** The Jira personal access token. */
  accessToken: Scalars["String"];
  /** The Jira user's email address. */
  email: Scalars["String"];
  /** The Jira installation hostname. */
  hostname: Scalars["String"];
  /** The Jira project keys to scope the integration to. */
  project?: Maybe<Scalars["String"]>;
};

/** Tuple for mapping Jira projects to Linear teams. */
export type JiraLinearMapping = {
  __typename?: "JiraLinearMapping";
  /** The Jira id for this project. */
  jiraProjectId: Scalars["String"];
  /** The Linear team id to map to the given project. */
  linearTeamId: Scalars["String"];
};

export type JiraLinearMappingInput = {
  /** The Jira id for this project. */
  jiraProjectId: Scalars["String"];
  /** The Linear team id to map to the given project. */
  linearTeamId: Scalars["String"];
};

/** Metadata about a Jira project. */
export type JiraProjectData = {
  __typename?: "JiraProjectData";
  /** The Jira id for this project. */
  id: Scalars["String"];
  /** The Jira key for this project, such as ENG. */
  key: Scalars["String"];
  /** The Jira name for this project, such as Engineering. */
  name: Scalars["String"];
};

export type JiraProjectDataInput = {
  /** The Jira id for this project. */
  id: Scalars["String"];
  /** The Jira key for this project, such as ENG. */
  key: Scalars["String"];
  /** The Jira name for this project, such as Engineering. */
  name: Scalars["String"];
};

/** Jira specific settings. */
export type JiraSettings = {
  __typename?: "JiraSettings";
  /** The mapping of Jira project id => Linear team id. */
  projectMapping?: Maybe<Array<JiraLinearMapping>>;
  /** The Jira projects for the organization. */
  projects: Array<JiraProjectData>;
};

export type JiraSettingsInput = {
  /** The mapping of Jira project id => Linear team id. */
  projectMapping?: Maybe<Array<JiraLinearMappingInput>>;
  /** The Jira projects for the organization. */
  projects: Array<JiraProjectDataInput>;
};

export type JoinOrganizationInput = {
  /** The identifier of the organization. */
  organizationId: Scalars["String"];
};

export type LogoutResponse = {
  __typename?: "LogoutResponse";
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type Mutation = {
  __typename?: "Mutation";
  /** Creates an integration api key for Airbyte to connect with Linear */
  airbyteIntegrationConnect: IntegrationPayload;
  /** Creates a new API key. */
  apiKeyCreate: ApiKeyPayload;
  /** Deletes an API key. */
  apiKeyDelete: ArchivePayload;
  /**
   * [DEPRECATED] Archives an issue attachment.
   * @deprecated This mutation is deprecated, please use `attachmentDelete` instead
   */
  attachmentArchive: ArchivePayload;
  /** Creates a new attachment, or updates existing if the same `url` and `issueId` is used. */
  attachmentCreate: AttachmentPayload;
  /** Deletes an issue attachment. */
  attachmentDelete: ArchivePayload;
  /** Link an existing Discord message to an issue. */
  attachmentLinkDiscord: AttachmentPayload;
  /** Link an existing Front conversation to an issue. */
  attachmentLinkFront: FrontAttachmentPayload;
  /** Link an existing Intercom conversation to an issue. */
  attachmentLinkIntercom: AttachmentPayload;
  /** Link an existing Jira issue to an issue. */
  attachmentLinkJiraIssue: AttachmentPayload;
  /** Link any url to an issue. */
  attachmentLinkURL: AttachmentPayload;
  /** Link an existing Zendesk ticket to an issue. */
  attachmentLinkZendesk: AttachmentPayload;
  /** Updates an existing issue attachment. */
  attachmentUpdate: AttachmentPayload;
  /** Creates a new comment. */
  commentCreate: CommentPayload;
  /** Deletes a comment. */
  commentDelete: ArchivePayload;
  /** Updates a comment. */
  commentUpdate: CommentPayload;
  /** Saves user message. */
  contactCreate: ContactPayload;
  /** [INTERNAL] Saves sales pricing inquiry to Front. */
  contactSalesCreate: ContactPayload;
  /** Create CSV export report for the organization. */
  createCsvExportReport: CreateCsvExportReportPayload;
  /** Creates an organization from onboarding. */
  createOrganizationFromOnboarding: CreateOrJoinOrganizationResponse;
  /** Creates a new custom view. */
  customViewCreate: CustomViewPayload;
  /** Deletes a custom view. */
  customViewDelete: ArchivePayload;
  /** Updates a custom view. */
  customViewUpdate: CustomViewPayload;
  /** Archives a cycle. */
  cycleArchive: ArchivePayload;
  /** Creates a new cycle. */
  cycleCreate: CyclePayload;
  /** Updates a cycle. */
  cycleUpdate: CyclePayload;
  /** Creates a new document. */
  documentCreate: DocumentPayload;
  /** Deletes a document. */
  documentDelete: ArchivePayload;
  /** Updates a document. */
  documentUpdate: DocumentPayload;
  /** [INTERNAL] Subscribes the email to the newsletter. */
  emailSubscribe: EmailSubscribePayload;
  /** Authenticates a user account via email and authentication token. */
  emailTokenUserAccountAuth: AuthResolverResponse;
  /** Unsubscribes the user from one type of emails. */
  emailUnsubscribe: EmailUnsubscribePayload;
  /** Finds or creates a new user account by email and sends an email with token. */
  emailUserAccountAuthChallenge: EmailUserAccountAuthChallengeResponse;
  /** Creates a custom emoji. */
  emojiCreate: EmojiPayload;
  /** Deletes an emoji. */
  emojiDelete: ArchivePayload;
  /** [Deprecated] Creates a new event. */
  eventCreate: EventPayload;
  /** Creates a new favorite (project, cycle etc). */
  favoriteCreate: FavoritePayload;
  /** Deletes a favorite reference. */
  favoriteDelete: ArchivePayload;
  /** Updates a favorite. */
  favoriteUpdate: FavoritePayload;
  /** XHR request payload to upload an images, video and other attachments directly to Linear's cloud storage. */
  fileUpload: UploadPayload;
  /** Authenticate user account through Google OAuth. This is the 2nd step of OAuth flow. */
  googleUserAccountAuth: AuthResolverResponse;
  /** Upload an image from an URL to Linear. */
  imageUploadFromUrl: ImageUploadFromUrlPayload;
  /** Deletes an integration. */
  integrationDelete: ArchivePayload;
  /** Integrates the organization with Discord. */
  integrationDiscord: IntegrationPayload;
  /** Integrates the organization with Figma. */
  integrationFigma: IntegrationPayload;
  /** Integrates the organization with Front. */
  integrationFront: IntegrationPayload;
  /** Generates a webhook for the GitHub commit integration. */
  integrationGithubCommitCreate: GitHubCommitIntegrationPayload;
  /** Connects the organization with the GitHub App. */
  integrationGithubConnect: IntegrationPayload;
  /** Connects the organization with a GitLab Access Token. */
  integrationGitlabConnect: IntegrationPayload;
  /** Integrates the organization with Google Sheets. */
  integrationGoogleSheets: IntegrationPayload;
  /** Integrates the organization with Intercom. */
  integrationIntercom: IntegrationPayload;
  /** Disconnects the organization from Intercom. */
  integrationIntercomDelete: IntegrationPayload;
  /**
   * [DEPRECATED] Updates settings on the Intercom integration.
   * @deprecated This mutation is deprecated, please use `integrationSettingsUpdate` instead
   */
  integrationIntercomSettingsUpdate: IntegrationPayload;
  /**
   * Enables Loom integration for the organization.
   * @deprecated Not available.
   */
  integrationLoom: IntegrationPayload;
  /** Requests a currently unavailable integration. */
  integrationRequest: IntegrationRequestPayload;
  /** Integrates the organization with Sentry. */
  integrationSentryConnect: IntegrationPayload;
  /** [INTERNAL] Updates the integration. */
  integrationSettingsUpdate: IntegrationPayload;
  /** Integrates the organization with Slack. */
  integrationSlack: IntegrationPayload;
  /** Imports custom emojis from your Slack workspace. */
  integrationSlackImportEmojis: IntegrationPayload;
  /** Slack integration for organization level project update notifications. */
  integrationSlackOrgProjectUpdatesPost: IntegrationPayload;
  /** Integrates your personal notifications with Slack. */
  integrationSlackPersonal: IntegrationPayload;
  /** Slack webhook integration. */
  integrationSlackPost: IntegrationPayload;
  /** Slack integration for project notifications. */
  integrationSlackProjectPost: IntegrationPayload;
  /** Creates a new integrationTemplate join. */
  integrationTemplateCreate: IntegrationTemplatePayload;
  /** Deletes a integrationTemplate. */
  integrationTemplateDelete: ArchivePayload;
  /** Integrates the organization with Zendesk. */
  integrationZendesk: IntegrationPayload;
  /** Creates new settings for one or more integrations. */
  integrationsSettingsCreate: IntegrationsSettingsPayload;
  /** Updates settings related to integrations for a project or a team. */
  integrationsSettingsUpdate: IntegrationsSettingsPayload;
  /** Archives an issue. */
  issueArchive: ArchivePayload;
  /** Updates multiple issues at once. */
  issueBatchUpdate: IssueBatchPayload;
  /** Creates a new issue. */
  issueCreate: IssuePayload;
  /** Deletes (trashes) an issue. */
  issueDelete: ArchivePayload;
  /** [INTERNAL] Updates an issue description from the Front app to handle Front attachments correctly. */
  issueDescriptionUpdateFromFront: IssuePayload;
  /** Kicks off an Asana import job. */
  issueImportCreateAsana: IssueImportPayload;
  /** Kicks off a Shortcut (formerly Clubhouse) import job. */
  issueImportCreateClubhouse: IssueImportPayload;
  /** Kicks off a GitHub import job. */
  issueImportCreateGithub: IssueImportPayload;
  /** Kicks off a Jira import job. */
  issueImportCreateJira: IssueImportPayload;
  /** Deletes an import job. */
  issueImportDelete: IssueImportDeletePayload;
  /** Kicks off import processing. */
  issueImportProcess: IssueImportPayload;
  /** Updates the mapping for the issue import. */
  issueImportUpdate: IssueImportPayload;
  /**
   * Deletes an issue label.
   * @deprecated Labels are deleted instead of archived now!
   */
  issueLabelArchive: ArchivePayload;
  /** Creates a new label. */
  issueLabelCreate: IssueLabelPayload;
  /** Deletes an issue label. */
  issueLabelDelete: ArchivePayload;
  /** Updates an label. */
  issueLabelUpdate: IssueLabelPayload;
  /** Creates a new issue relation. */
  issueRelationCreate: IssueRelationPayload;
  /** Deletes an issue relation. */
  issueRelationDelete: ArchivePayload;
  /** Updates an issue relation. */
  issueRelationUpdate: IssueRelationPayload;
  /** Adds an issue reminder. Will cause a notification to be sent when the issue reminder time is reached. */
  issueReminder: IssuePayload;
  /** Unarchives an issue. */
  issueUnarchive: ArchivePayload;
  /** Updates an issue. */
  issueUpdate: IssuePayload;
  /** [INTERNAL] Connects the organization with a Jira Personal Access Token. */
  jiraIntegrationConnect: IntegrationPayload;
  /** Join an organization from onboarding. */
  joinOrganizationFromOnboarding: CreateOrJoinOrganizationResponse;
  /** Leave an organization. */
  leaveOrganization: CreateOrJoinOrganizationResponse;
  /** Logout of all clients. */
  logout: LogoutResponse;
  /** Archives a notification. */
  notificationArchive: ArchivePayload;
  /** Creates a new notification subscription for a team or a project. */
  notificationSubscriptionCreate: NotificationSubscriptionPayload;
  /** Deletes a notification subscription reference. */
  notificationSubscriptionDelete: ArchivePayload;
  /** Updates a notification subscription. */
  notificationSubscriptionUpdate: NotificationSubscriptionPayload;
  /** Unarchives a notification. */
  notificationUnarchive: ArchivePayload;
  /** Updates a notification. */
  notificationUpdate: NotificationPayload;
  /** Cancels the deletion of an organization. Administrator privileges required. */
  organizationCancelDelete: OrganizationCancelDeletePayload;
  /** Delete's an organization. Administrator privileges required. */
  organizationDelete: OrganizationDeletePayload;
  /** Get an organization's delete confirmation token. Administrator privileges required. */
  organizationDeleteChallenge: OrganizationDeletePayload;
  /** [INTERNAL] Verifies a domain claim. */
  organizationDomainClaim: OrganizationDomainSimplePayload;
  /** [INTERNAL] Adds a domain to be allowed for an organization. */
  organizationDomainCreate: OrganizationDomainPayload;
  /** Deletes a domain. */
  organizationDomainDelete: ArchivePayload;
  /** [INTERNAL] Verifies a domain to be added to an organization. */
  organizationDomainVerify: OrganizationDomainPayload;
  /** Creates a new organization invite. */
  organizationInviteCreate: OrganizationInvitePayload;
  /** Deletes an organization invite. */
  organizationInviteDelete: ArchivePayload;
  /** Updates an organization invite. */
  organizationInviteUpdate: OrganizationInvitePayload;
  /** Updates the user's organization. */
  organizationUpdate: OrganizationPayload;
  /**
   * Archives a project.
   * @deprecated Deprecated in favor of projectDelete.
   */
  projectArchive: ArchivePayload;
  /** Creates a new project. */
  projectCreate: ProjectPayload;
  /** Deletes a project. All issues will be disassociated from the deleted project. */
  projectDelete: ArchivePayload;
  /** Creates a new project link. */
  projectLinkCreate: ProjectLinkPayload;
  /** Deletes a project link. */
  projectLinkDelete: ArchivePayload;
  /** Updates a project link. */
  projectLinkUpdate: ProjectLinkPayload;
  /** Creates a new project milestone. */
  projectMilestoneCreate: ProjectMilestonePayload;
  /** Deletes a project milestone. */
  projectMilestoneDelete: ArchivePayload;
  /** Updates a project milestone. */
  projectMilestoneUpdate: ProjectMilestonePayload;
  /** Unarchives a project. */
  projectUnarchive: ArchivePayload;
  /** Updates a project. */
  projectUpdate: ProjectPayload;
  /** Creates a new project update. */
  projectUpdateCreate: ProjectUpdatePayload;
  /** Deletes a project update. */
  projectUpdateDelete: ArchivePayload;
  /** Creates a new interaction on a project update. */
  projectUpdateInteractionCreate: ProjectUpdateInteractionPayload;
  /** Mark a project update as read. */
  projectUpdateMarkAsRead: ProjectUpdateWithInteractionPayload;
  /** Updates a project update. */
  projectUpdateUpdate: ProjectUpdatePayload;
  /** Creates a push subscription. */
  pushSubscriptionCreate: PushSubscriptionPayload;
  /** Deletes a push subscription. */
  pushSubscriptionDelete: PushSubscriptionPayload;
  /** Creates a new reaction. */
  reactionCreate: ReactionPayload;
  /** Deletes a reaction. */
  reactionDelete: ArchivePayload;
  /** Manually update Google Sheets data. */
  refreshGoogleSheetsData: IntegrationPayload;
  /** Re-send an organization invite. */
  resendOrganizationInvite: ArchivePayload;
  /** Creates a new roadmap. */
  roadmapCreate: RoadmapPayload;
  /** Deletes a roadmap. */
  roadmapDelete: ArchivePayload;
  /** Creates a new roadmapToProject join. */
  roadmapToProjectCreate: RoadmapToProjectPayload;
  /** Deletes a roadmapToProject. */
  roadmapToProjectDelete: ArchivePayload;
  /** Updates a roadmapToProject. */
  roadmapToProjectUpdate: RoadmapToProjectPayload;
  /** Updates a roadmap. */
  roadmapUpdate: RoadmapPayload;
  /** Authenticates a user account via email and authentication token for SAML. */
  samlTokenUserAccountAuth: AuthResolverResponse;
  /** Creates a new team. The user who creates the team will automatically be added as a member to the newly created team. */
  teamCreate: TeamPayload;
  /** Deletes team's cycles data */
  teamCyclesDelete: TeamPayload;
  /** Deletes a team. */
  teamDelete: ArchivePayload;
  /** Deletes a previously used team key. */
  teamKeyDelete: ArchivePayload;
  /** Creates a new team membership. */
  teamMembershipCreate: TeamMembershipPayload;
  /** Deletes a team membership. */
  teamMembershipDelete: ArchivePayload;
  /** Updates a team membership. */
  teamMembershipUpdate: TeamMembershipPayload;
  /** Updates a team. */
  teamUpdate: TeamPayload;
  /** Creates a new template. */
  templateCreate: TemplatePayload;
  /** Deletes a template. */
  templateDelete: ArchivePayload;
  /** Updates an existing template. */
  templateUpdate: TemplatePayload;
  /** Makes user a regular user. Can only be called by an admin. */
  userDemoteAdmin: UserAdminPayload;
  /** Makes user a guest. Can only be called by an admin. */
  userDemoteMember: UserAdminPayload;
  /** Connects the Discord user to this Linear account via OAuth2. */
  userDiscordConnect: UserPayload;
  /** Disconnects the external user from this Linear account. */
  userExternalUserDisconnect: UserPayload;
  /** Updates a user's settings flag. */
  userFlagUpdate: UserSettingsFlagPayload;
  /** Connects the GitHub user to this Linear account via OAuth2. */
  userGitHubConnect: UserPayload;
  /** Connects the Google Calendar to the user to this Linear account via OAuth2. */
  userGoogleCalendarConnect: UserPayload;
  /** Makes user an admin. Can only be called by an admin. */
  userPromoteAdmin: UserAdminPayload;
  /** Makes user a regular user. Can only be called by an admin. */
  userPromoteMember: UserAdminPayload;
  /** [Deprecated] Updates a user's settings flag. */
  userSettingsFlagIncrement: UserSettingsFlagPayload;
  /** Resets user's setting flags. */
  userSettingsFlagsReset: UserSettingsFlagsResetPayload;
  /** Updates the user's settings. */
  userSettingsUpdate: UserSettingsPayload;
  /** Suspends a user. Can only be called by an admin. */
  userSuspend: UserAdminPayload;
  /** Un-suspends a user. Can only be called by an admin. */
  userUnsuspend: UserAdminPayload;
  /** Updates a user. Only available to organization admins and the user themselves. */
  userUpdate: UserPayload;
  /** Creates a new ViewPreferences object. */
  viewPreferencesCreate: ViewPreferencesPayload;
  /** Deletes a ViewPreferences. */
  viewPreferencesDelete: ArchivePayload;
  /** Updates an existing ViewPreferences object. */
  viewPreferencesUpdate: ViewPreferencesPayload;
  /** Creates a new webhook. */
  webhookCreate: WebhookPayload;
  /** Deletes a Webhook. */
  webhookDelete: ArchivePayload;
  /** Updates an existing Webhook. */
  webhookUpdate: WebhookPayload;
  /** Archives a state. Only states with issues that have all been archived can be archived. */
  workflowStateArchive: ArchivePayload;
  /** Creates a new state, adding it to the workflow of a team. */
  workflowStateCreate: WorkflowStatePayload;
  /** Updates a state. */
  workflowStateUpdate: WorkflowStatePayload;
};

export type MutationAirbyteIntegrationConnectArgs = {
  input: AirbyteConfigurationInput;
};

export type MutationApiKeyCreateArgs = {
  input: ApiKeyCreateInput;
};

export type MutationApiKeyDeleteArgs = {
  id: Scalars["String"];
};

export type MutationAttachmentArchiveArgs = {
  id: Scalars["String"];
};

export type MutationAttachmentCreateArgs = {
  input: AttachmentCreateInput;
};

export type MutationAttachmentDeleteArgs = {
  id: Scalars["String"];
};

export type MutationAttachmentLinkDiscordArgs = {
  channelId: Scalars["String"];
  issueId: Scalars["String"];
  messageId: Scalars["String"];
  url: Scalars["String"];
};

export type MutationAttachmentLinkFrontArgs = {
  conversationId: Scalars["String"];
  issueId: Scalars["String"];
};

export type MutationAttachmentLinkIntercomArgs = {
  conversationId: Scalars["String"];
  issueId: Scalars["String"];
};

export type MutationAttachmentLinkJiraIssueArgs = {
  issueId: Scalars["String"];
  jiraIssueId: Scalars["String"];
};

export type MutationAttachmentLinkUrlArgs = {
  id?: Maybe<Scalars["String"]>;
  issueId: Scalars["String"];
  title?: Maybe<Scalars["String"]>;
  url: Scalars["String"];
};

export type MutationAttachmentLinkZendeskArgs = {
  issueId: Scalars["String"];
  ticketId: Scalars["String"];
};

export type MutationAttachmentUpdateArgs = {
  id: Scalars["String"];
  input: AttachmentUpdateInput;
};

export type MutationCommentCreateArgs = {
  input: CommentCreateInput;
};

export type MutationCommentDeleteArgs = {
  id: Scalars["String"];
};

export type MutationCommentUpdateArgs = {
  id: Scalars["String"];
  input: CommentUpdateInput;
};

export type MutationContactCreateArgs = {
  input: ContactCreateInput;
};

export type MutationContactSalesCreateArgs = {
  input: ContactSalesCreateInput;
};

export type MutationCreateCsvExportReportArgs = {
  includePrivateTeamIds?: Maybe<Array<Scalars["String"]>>;
};

export type MutationCreateOrganizationFromOnboardingArgs = {
  input: CreateOrganizationInput;
  survey?: Maybe<OnboardingCustomerSurvey>;
};

export type MutationCustomViewCreateArgs = {
  input: CustomViewCreateInput;
};

export type MutationCustomViewDeleteArgs = {
  id: Scalars["String"];
};

export type MutationCustomViewUpdateArgs = {
  id: Scalars["String"];
  input: CustomViewUpdateInput;
};

export type MutationCycleArchiveArgs = {
  id: Scalars["String"];
};

export type MutationCycleCreateArgs = {
  input: CycleCreateInput;
};

export type MutationCycleUpdateArgs = {
  id: Scalars["String"];
  input: CycleUpdateInput;
};

export type MutationDocumentCreateArgs = {
  input: DocumentCreateInput;
};

export type MutationDocumentDeleteArgs = {
  id: Scalars["String"];
};

export type MutationDocumentUpdateArgs = {
  id: Scalars["String"];
  input: DocumentUpdateInput;
};

export type MutationEmailSubscribeArgs = {
  input: EmailSubscribeInput;
};

export type MutationEmailTokenUserAccountAuthArgs = {
  input: TokenUserAccountAuthInput;
};

export type MutationEmailUnsubscribeArgs = {
  input: EmailUnsubscribeInput;
};

export type MutationEmailUserAccountAuthChallengeArgs = {
  input: EmailUserAccountAuthChallengeInput;
};

export type MutationEmojiCreateArgs = {
  input: EmojiCreateInput;
};

export type MutationEmojiDeleteArgs = {
  id: Scalars["String"];
};

export type MutationEventCreateArgs = {
  input: EventCreateInput;
};

export type MutationFavoriteCreateArgs = {
  input: FavoriteCreateInput;
};

export type MutationFavoriteDeleteArgs = {
  id: Scalars["String"];
};

export type MutationFavoriteUpdateArgs = {
  id: Scalars["String"];
  input: FavoriteUpdateInput;
};

export type MutationFileUploadArgs = {
  contentType: Scalars["String"];
  filename: Scalars["String"];
  makePublic?: Maybe<Scalars["Boolean"]>;
  metaData?: Maybe<Scalars["JSON"]>;
  size: Scalars["Int"];
};

export type MutationGoogleUserAccountAuthArgs = {
  input: GoogleUserAccountAuthInput;
};

export type MutationImageUploadFromUrlArgs = {
  url: Scalars["String"];
};

export type MutationIntegrationDeleteArgs = {
  id: Scalars["String"];
};

export type MutationIntegrationDiscordArgs = {
  code: Scalars["String"];
  redirectUri: Scalars["String"];
};

export type MutationIntegrationFigmaArgs = {
  code: Scalars["String"];
  redirectUri: Scalars["String"];
};

export type MutationIntegrationFrontArgs = {
  code: Scalars["String"];
  redirectUri: Scalars["String"];
};

export type MutationIntegrationGithubConnectArgs = {
  installationId: Scalars["String"];
};

export type MutationIntegrationGitlabConnectArgs = {
  accessToken: Scalars["String"];
  gitlabUrl: Scalars["String"];
};

export type MutationIntegrationGoogleSheetsArgs = {
  code: Scalars["String"];
};

export type MutationIntegrationIntercomArgs = {
  code: Scalars["String"];
  domainUrl?: Maybe<Scalars["String"]>;
  redirectUri: Scalars["String"];
};

export type MutationIntegrationIntercomSettingsUpdateArgs = {
  input: IntercomSettingsInput;
};

export type MutationIntegrationRequestArgs = {
  input: IntegrationRequestInput;
};

export type MutationIntegrationSentryConnectArgs = {
  code: Scalars["String"];
  installationId: Scalars["String"];
  organizationSlug: Scalars["String"];
};

export type MutationIntegrationSettingsUpdateArgs = {
  id: Scalars["String"];
  input: IntegrationSettingsInput;
};

export type MutationIntegrationSlackArgs = {
  code: Scalars["String"];
  redirectUri: Scalars["String"];
  shouldUseV2Auth?: Maybe<Scalars["Boolean"]>;
};

export type MutationIntegrationSlackImportEmojisArgs = {
  code: Scalars["String"];
  redirectUri: Scalars["String"];
};

export type MutationIntegrationSlackOrgProjectUpdatesPostArgs = {
  code: Scalars["String"];
  redirectUri: Scalars["String"];
};

export type MutationIntegrationSlackPersonalArgs = {
  code: Scalars["String"];
  redirectUri: Scalars["String"];
};

export type MutationIntegrationSlackPostArgs = {
  code: Scalars["String"];
  redirectUri: Scalars["String"];
  shouldUseV2Auth?: Maybe<Scalars["Boolean"]>;
  teamId: Scalars["String"];
};

export type MutationIntegrationSlackProjectPostArgs = {
  code: Scalars["String"];
  projectId: Scalars["String"];
  redirectUri: Scalars["String"];
  service: Scalars["String"];
};

export type MutationIntegrationTemplateCreateArgs = {
  input: IntegrationTemplateCreateInput;
};

export type MutationIntegrationTemplateDeleteArgs = {
  id: Scalars["String"];
};

export type MutationIntegrationZendeskArgs = {
  code: Scalars["String"];
  redirectUri: Scalars["String"];
  scope: Scalars["String"];
  subdomain: Scalars["String"];
};

export type MutationIntegrationsSettingsCreateArgs = {
  input: IntegrationsSettingsCreateInput;
};

export type MutationIntegrationsSettingsUpdateArgs = {
  id: Scalars["String"];
  input: IntegrationsSettingsUpdateInput;
};

export type MutationIssueArchiveArgs = {
  id: Scalars["String"];
  trash?: Maybe<Scalars["Boolean"]>;
};

export type MutationIssueBatchUpdateArgs = {
  ids: Array<Scalars["UUID"]>;
  input: IssueUpdateInput;
};

export type MutationIssueCreateArgs = {
  input: IssueCreateInput;
};

export type MutationIssueDeleteArgs = {
  id: Scalars["String"];
};

export type MutationIssueDescriptionUpdateFromFrontArgs = {
  description: Scalars["String"];
  id: Scalars["String"];
};

export type MutationIssueImportCreateAsanaArgs = {
  asanaTeamName: Scalars["String"];
  asanaToken: Scalars["String"];
  id?: Maybe<Scalars["String"]>;
  includeClosedIssues?: Maybe<Scalars["Boolean"]>;
  instantProcess?: Maybe<Scalars["Boolean"]>;
  organizationId?: Maybe<Scalars["String"]>;
  teamId?: Maybe<Scalars["String"]>;
  teamName?: Maybe<Scalars["String"]>;
};

export type MutationIssueImportCreateClubhouseArgs = {
  clubhouseTeamName: Scalars["String"];
  clubhouseToken: Scalars["String"];
  id?: Maybe<Scalars["String"]>;
  includeClosedIssues?: Maybe<Scalars["Boolean"]>;
  instantProcess?: Maybe<Scalars["Boolean"]>;
  organizationId?: Maybe<Scalars["String"]>;
  teamId?: Maybe<Scalars["String"]>;
  teamName?: Maybe<Scalars["String"]>;
};

export type MutationIssueImportCreateGithubArgs = {
  githubRepoName: Scalars["String"];
  githubRepoOwner: Scalars["String"];
  githubShouldImportOrgProjects?: Maybe<Scalars["Boolean"]>;
  githubToken: Scalars["String"];
  id?: Maybe<Scalars["String"]>;
  includeClosedIssues?: Maybe<Scalars["Boolean"]>;
  instantProcess?: Maybe<Scalars["Boolean"]>;
  organizationId?: Maybe<Scalars["String"]>;
  teamId?: Maybe<Scalars["String"]>;
  teamName?: Maybe<Scalars["String"]>;
};

export type MutationIssueImportCreateJiraArgs = {
  id?: Maybe<Scalars["String"]>;
  includeClosedIssues?: Maybe<Scalars["Boolean"]>;
  instantProcess?: Maybe<Scalars["Boolean"]>;
  jiraEmail: Scalars["String"];
  jiraHostname: Scalars["String"];
  jiraProject: Scalars["String"];
  jiraToken: Scalars["String"];
  organizationId?: Maybe<Scalars["String"]>;
  teamId?: Maybe<Scalars["String"]>;
  teamName?: Maybe<Scalars["String"]>;
};

export type MutationIssueImportDeleteArgs = {
  issueImportId: Scalars["String"];
};

export type MutationIssueImportProcessArgs = {
  issueImportId: Scalars["String"];
  mapping: Scalars["JSONObject"];
};

export type MutationIssueImportUpdateArgs = {
  id: Scalars["String"];
  input: IssueImportUpdateInput;
};

export type MutationIssueLabelArchiveArgs = {
  id: Scalars["String"];
};

export type MutationIssueLabelCreateArgs = {
  input: IssueLabelCreateInput;
  replaceTeamLabels?: Maybe<Scalars["Boolean"]>;
};

export type MutationIssueLabelDeleteArgs = {
  id: Scalars["String"];
};

export type MutationIssueLabelUpdateArgs = {
  id: Scalars["String"];
  input: IssueLabelUpdateInput;
};

export type MutationIssueRelationCreateArgs = {
  input: IssueRelationCreateInput;
};

export type MutationIssueRelationDeleteArgs = {
  id: Scalars["String"];
};

export type MutationIssueRelationUpdateArgs = {
  id: Scalars["String"];
  input: IssueRelationUpdateInput;
};

export type MutationIssueReminderArgs = {
  id: Scalars["String"];
  reminderAt: Scalars["DateTime"];
};

export type MutationIssueUnarchiveArgs = {
  id: Scalars["String"];
};

export type MutationIssueUpdateArgs = {
  id: Scalars["String"];
  input: IssueUpdateInput;
};

export type MutationJiraIntegrationConnectArgs = {
  input: JiraConfigurationInput;
};

export type MutationJoinOrganizationFromOnboardingArgs = {
  input: JoinOrganizationInput;
};

export type MutationLeaveOrganizationArgs = {
  organizationId: Scalars["String"];
};

export type MutationNotificationArchiveArgs = {
  id: Scalars["String"];
};

export type MutationNotificationSubscriptionCreateArgs = {
  input: NotificationSubscriptionCreateInput;
};

export type MutationNotificationSubscriptionDeleteArgs = {
  id: Scalars["String"];
};

export type MutationNotificationSubscriptionUpdateArgs = {
  id: Scalars["String"];
  input: NotificationSubscriptionUpdateInput;
};

export type MutationNotificationUnarchiveArgs = {
  id: Scalars["String"];
};

export type MutationNotificationUpdateArgs = {
  id: Scalars["String"];
  input: NotificationUpdateInput;
};

export type MutationOrganizationDeleteArgs = {
  input: DeleteOrganizationInput;
};

export type MutationOrganizationDomainClaimArgs = {
  id: Scalars["String"];
};

export type MutationOrganizationDomainCreateArgs = {
  input: OrganizationDomainCreateInput;
  triggerEmailVerification?: Maybe<Scalars["Boolean"]>;
};

export type MutationOrganizationDomainDeleteArgs = {
  id: Scalars["String"];
};

export type MutationOrganizationDomainVerifyArgs = {
  input: OrganizationDomainVerificationInput;
};

export type MutationOrganizationInviteCreateArgs = {
  input: OrganizationInviteCreateInput;
};

export type MutationOrganizationInviteDeleteArgs = {
  id: Scalars["String"];
};

export type MutationOrganizationInviteUpdateArgs = {
  id: Scalars["String"];
  input: OrganizationInviteUpdateInput;
};

export type MutationOrganizationUpdateArgs = {
  input: UpdateOrganizationInput;
};

export type MutationProjectArchiveArgs = {
  id: Scalars["String"];
};

export type MutationProjectCreateArgs = {
  input: ProjectCreateInput;
};

export type MutationProjectDeleteArgs = {
  id: Scalars["String"];
};

export type MutationProjectLinkCreateArgs = {
  input: ProjectLinkCreateInput;
};

export type MutationProjectLinkDeleteArgs = {
  id: Scalars["String"];
};

export type MutationProjectLinkUpdateArgs = {
  id: Scalars["String"];
  input: ProjectLinkUpdateInput;
};

export type MutationProjectMilestoneCreateArgs = {
  input: ProjectMilestoneCreateInput;
};

export type MutationProjectMilestoneDeleteArgs = {
  id: Scalars["String"];
};

export type MutationProjectMilestoneUpdateArgs = {
  id: Scalars["String"];
  input: ProjectMilestoneUpdateInput;
};

export type MutationProjectUnarchiveArgs = {
  id: Scalars["String"];
};

export type MutationProjectUpdateArgs = {
  id: Scalars["String"];
  input: ProjectUpdateInput;
};

export type MutationProjectUpdateCreateArgs = {
  input: ProjectUpdateCreateInput;
};

export type MutationProjectUpdateDeleteArgs = {
  id: Scalars["String"];
};

export type MutationProjectUpdateInteractionCreateArgs = {
  input: ProjectUpdateInteractionCreateInput;
};

export type MutationProjectUpdateMarkAsReadArgs = {
  id: Scalars["String"];
};

export type MutationProjectUpdateUpdateArgs = {
  id: Scalars["String"];
  input: ProjectUpdateUpdateInput;
};

export type MutationPushSubscriptionCreateArgs = {
  input: PushSubscriptionCreateInput;
};

export type MutationPushSubscriptionDeleteArgs = {
  id: Scalars["String"];
};

export type MutationReactionCreateArgs = {
  input: ReactionCreateInput;
};

export type MutationReactionDeleteArgs = {
  id: Scalars["String"];
};

export type MutationRefreshGoogleSheetsDataArgs = {
  id: Scalars["String"];
};

export type MutationResendOrganizationInviteArgs = {
  id: Scalars["String"];
};

export type MutationRoadmapCreateArgs = {
  input: RoadmapCreateInput;
};

export type MutationRoadmapDeleteArgs = {
  id: Scalars["String"];
};

export type MutationRoadmapToProjectCreateArgs = {
  input: RoadmapToProjectCreateInput;
};

export type MutationRoadmapToProjectDeleteArgs = {
  id: Scalars["String"];
};

export type MutationRoadmapToProjectUpdateArgs = {
  id: Scalars["String"];
  input: RoadmapToProjectUpdateInput;
};

export type MutationRoadmapUpdateArgs = {
  id: Scalars["String"];
  input: RoadmapUpdateInput;
};

export type MutationSamlTokenUserAccountAuthArgs = {
  input: TokenUserAccountAuthInput;
};

export type MutationTeamCreateArgs = {
  copySettingsFromTeamId?: Maybe<Scalars["String"]>;
  input: TeamCreateInput;
};

export type MutationTeamCyclesDeleteArgs = {
  id: Scalars["String"];
};

export type MutationTeamDeleteArgs = {
  id: Scalars["String"];
};

export type MutationTeamKeyDeleteArgs = {
  id: Scalars["String"];
};

export type MutationTeamMembershipCreateArgs = {
  input: TeamMembershipCreateInput;
};

export type MutationTeamMembershipDeleteArgs = {
  id: Scalars["String"];
};

export type MutationTeamMembershipUpdateArgs = {
  id: Scalars["String"];
  input: TeamMembershipUpdateInput;
};

export type MutationTeamUpdateArgs = {
  id: Scalars["String"];
  input: TeamUpdateInput;
};

export type MutationTemplateCreateArgs = {
  input: TemplateCreateInput;
};

export type MutationTemplateDeleteArgs = {
  id: Scalars["String"];
};

export type MutationTemplateUpdateArgs = {
  id: Scalars["String"];
  input: TemplateUpdateInput;
};

export type MutationUserDemoteAdminArgs = {
  id: Scalars["String"];
};

export type MutationUserDemoteMemberArgs = {
  id: Scalars["String"];
};

export type MutationUserDiscordConnectArgs = {
  code: Scalars["String"];
  redirectUri: Scalars["String"];
};

export type MutationUserExternalUserDisconnectArgs = {
  service: Scalars["String"];
};

export type MutationUserFlagUpdateArgs = {
  flag: UserFlagType;
  operation: UserFlagUpdateOperation;
};

export type MutationUserGitHubConnectArgs = {
  code: Scalars["String"];
};

export type MutationUserGoogleCalendarConnectArgs = {
  code: Scalars["String"];
};

export type MutationUserPromoteAdminArgs = {
  id: Scalars["String"];
};

export type MutationUserPromoteMemberArgs = {
  id: Scalars["String"];
};

export type MutationUserSettingsFlagIncrementArgs = {
  flag: Scalars["String"];
};

export type MutationUserSettingsFlagsResetArgs = {
  flags?: Maybe<Array<UserFlagType>>;
};

export type MutationUserSettingsUpdateArgs = {
  id: Scalars["String"];
  input: UserSettingsUpdateInput;
};

export type MutationUserSuspendArgs = {
  id: Scalars["String"];
};

export type MutationUserUnsuspendArgs = {
  id: Scalars["String"];
};

export type MutationUserUpdateArgs = {
  id: Scalars["String"];
  input: UpdateUserInput;
};

export type MutationViewPreferencesCreateArgs = {
  input: ViewPreferencesCreateInput;
};

export type MutationViewPreferencesDeleteArgs = {
  id: Scalars["String"];
};

export type MutationViewPreferencesUpdateArgs = {
  id: Scalars["String"];
  input: ViewPreferencesUpdateInput;
};

export type MutationWebhookCreateArgs = {
  input: WebhookCreateInput;
};

export type MutationWebhookDeleteArgs = {
  id: Scalars["String"];
};

export type MutationWebhookUpdateArgs = {
  id: Scalars["String"];
  input: WebhookUpdateInput;
};

export type MutationWorkflowStateArchiveArgs = {
  id: Scalars["String"];
};

export type MutationWorkflowStateCreateArgs = {
  input: WorkflowStateCreateInput;
};

export type MutationWorkflowStateUpdateArgs = {
  id: Scalars["String"];
  input: WorkflowStateUpdateInput;
};

export type Node = {
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
};

/** A notification sent to a user. */
export type Notification = {
  /** The user that caused the notification. If empty it's Linear itself. */
  actor?: Maybe<User>;
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /**
   * The time at when an email reminder for this notification was sent to the user. Null, if no email
   *     reminder has been sent.
   */
  emailedAt?: Maybe<Scalars["DateTime"]>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The time at when the user marked the notification as read. Null, if the the user hasn't read the notification */
  readAt?: Maybe<Scalars["DateTime"]>;
  /** The time until a notification will be snoozed. After that it will appear in the inbox again. */
  snoozedUntilAt?: Maybe<Scalars["DateTime"]>;
  /** Notification type */
  type: Scalars["String"];
  /** The time at which a notification was unsnoozed.. */
  unsnoozedAt?: Maybe<Scalars["DateTime"]>;
  /**
   * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
   *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** The user that received the notification. */
  user: User;
};

export type NotificationConnection = {
  __typename?: "NotificationConnection";
  edges: Array<NotificationEdge>;
  nodes: Array<Notification>;
  pageInfo: PageInfo;
};

export type NotificationEdge = {
  __typename?: "NotificationEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: Notification;
};

export type NotificationPayload = {
  __typename?: "NotificationPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** The notification that was created or updated. */
  notification: Notification;
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** Notification subscriptions for models. */
export type NotificationSubscription = {
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** Subscribed project. */
  project?: Maybe<Project>;
  /** Subscribed team. */
  team?: Maybe<Team>;
  /** The type of the subscription. */
  type: Scalars["String"];
  /**
   * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
   *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** The user associated with notification subscriptions. */
  user: User;
};

export type NotificationSubscriptionConnection = {
  __typename?: "NotificationSubscriptionConnection";
  edges: Array<NotificationSubscriptionEdge>;
  nodes: Array<NotificationSubscription>;
  pageInfo: PageInfo;
};

export type NotificationSubscriptionCreateInput = {
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The identifier of the project to subscribe to. */
  projectId?: Maybe<Scalars["String"]>;
  /** The type of the project subscription. */
  projectNotificationSubscriptionType?: Maybe<ProjectNotificationSubscriptionType>;
  /** The identifier of the team to subscribe to. */
  teamId?: Maybe<Scalars["String"]>;
  /** The types of notifications of the team subscription. */
  teamNotificationSubscriptionTypes?: Maybe<Array<Scalars["String"]>>;
};

export type NotificationSubscriptionEdge = {
  __typename?: "NotificationSubscriptionEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: NotificationSubscription;
};

export type NotificationSubscriptionPayload = {
  __typename?: "NotificationSubscriptionPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** The notification subscription that was created or updated. */
  notificationSubscription: NotificationSubscription;
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type NotificationSubscriptionUpdateInput = {
  /** The type of the project subscription. */
  projectNotificationSubscriptionType?: Maybe<ProjectNotificationSubscriptionType>;
  /** The types of notifications of the team subscription. */
  teamNotificationSubscriptionTypes?: Maybe<Array<Scalars["String"]>>;
};

export type NotificationUpdateInput = {
  /** The id of the project update related to the notification. */
  projectUpdateId?: Maybe<Scalars["String"]>;
  /** The time when notification was marked as read. */
  readAt?: Maybe<Scalars["DateTime"]>;
  /** The time until a notification will be snoozed. After that it will appear in the inbox again. */
  snoozedUntilAt?: Maybe<Scalars["DateTime"]>;
};

/** Notion specific settings. */
export type NotionSettings = {
  __typename?: "NotionSettings";
  /** The ID of the Notion workspace being connected. */
  workspaceId: Scalars["String"];
  /** The name of the Notion workspace being connected. */
  workspaceName: Scalars["String"];
};

export type NotionSettingsInput = {
  /** The ID of the Notion workspace being connected. */
  workspaceId: Scalars["String"];
  /** The name of the Notion workspace being connected. */
  workspaceName: Scalars["String"];
};

/** Cycle filtering options. */
export type NullableCycleFilter = {
  /** Compound filters, one of which need to be matched by the cycle. */
  and?: Maybe<Array<NullableCycleFilter>>;
  /** Comparator for the cycle completed at date. */
  completedAt?: Maybe<DateComparator>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Comparator for the cycle ends at date. */
  endsAt?: Maybe<DateComparator>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Comparator for the filtering active cycle. */
  isActive?: Maybe<BooleanComparator>;
  /** Comparator for the filtering future cycles. */
  isFuture?: Maybe<BooleanComparator>;
  /** Comparator for the filtering next cycle. */
  isNext?: Maybe<BooleanComparator>;
  /** Comparator for the filtering past cycles. */
  isPast?: Maybe<BooleanComparator>;
  /** Comparator for the filtering previous cycle. */
  isPrevious?: Maybe<BooleanComparator>;
  /** Filters that the cycles issues must satisfy. */
  issues?: Maybe<IssueCollectionFilter>;
  /** Comparator for the cycle name. */
  name?: Maybe<StringComparator>;
  /** Filter based on the existence of the relation. */
  null?: Maybe<Scalars["Boolean"]>;
  /** Comparator for the cycle number. */
  number?: Maybe<NumberComparator>;
  /** Compound filters, one of which need to be matched by the cycle. */
  or?: Maybe<Array<NullableCycleFilter>>;
  /** Comparator for the cycle start date. */
  startsAt?: Maybe<DateComparator>;
  /** Filters that the cycles team must satisfy. */
  team?: Maybe<TeamFilter>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

/** Comparator for optional dates. */
export type NullableDateComparator = {
  /** Equals constraint. */
  eq?: Maybe<Scalars["DateTime"]>;
  /** Greater-than constraint. Matches any values that are greater than the given value. */
  gt?: Maybe<Scalars["DateTime"]>;
  /** Greater-than-or-equal constraint. Matches any values that are greater than or equal to the given value. */
  gte?: Maybe<Scalars["DateTime"]>;
  /** In-array constraint. */
  in?: Maybe<Array<Scalars["DateTime"]>>;
  /** Less-than constraint. Matches any values that are less than the given value. */
  lt?: Maybe<Scalars["DateTime"]>;
  /** Less-than-or-equal constraint. Matches any values that are less than or equal to the given value. */
  lte?: Maybe<Scalars["DateTime"]>;
  /** Not-equals constraint. */
  neq?: Maybe<Scalars["DateTime"]>;
  /** Not-in-array constraint. */
  nin?: Maybe<Array<Scalars["DateTime"]>>;
  /** Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values. */
  null?: Maybe<Scalars["Boolean"]>;
};

/** Issue filtering options. */
export type NullableIssueFilter = {
  /** Compound filters, all of which need to be matched by the issue. */
  and?: Maybe<Array<NullableIssueFilter>>;
  /** Filters that the issues assignee must satisfy. */
  assignee?: Maybe<NullableUserFilter>;
  /** Filters that the issues attachments must satisfy. */
  attachments?: Maybe<AttachmentCollectionFilter>;
  /** Comparator for the issues auto archived at date. */
  autoArchivedAt?: Maybe<NullableDateComparator>;
  /** Comparator for the issues auto closed at date. */
  autoClosedAt?: Maybe<NullableDateComparator>;
  /** Comparator for the issues canceled at date. */
  canceledAt?: Maybe<NullableDateComparator>;
  /** Filters that the child issues must satisfy. */
  children?: Maybe<IssueCollectionFilter>;
  /** Filters that the issues comments must satisfy. */
  comments?: Maybe<CommentCollectionFilter>;
  /** Comparator for the issues completed at date. */
  completedAt?: Maybe<NullableDateComparator>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Filters that the issues creator must satisfy. */
  creator?: Maybe<NullableUserFilter>;
  /** Filters that the issues cycle must satisfy. */
  cycle?: Maybe<NullableCycleFilter>;
  /** Comparator for the issues description. */
  description?: Maybe<NullableStringComparator>;
  /** Comparator for the issues due date. */
  dueDate?: Maybe<NullableTimelessDateComparator>;
  /** Comparator for the issues estimate. */
  estimate?: Maybe<EstimateComparator>;
  /** Comparator for filtering issues which are blocked. */
  hasBlockedByRelations?: Maybe<RelationExistsComparator>;
  /** Comparator for filtering issues which are blocking. */
  hasBlockingRelations?: Maybe<RelationExistsComparator>;
  /** Comparator for filtering issues which are duplicates. */
  hasDuplicateRelations?: Maybe<RelationExistsComparator>;
  /** Comparator for filtering issues with relations. */
  hasRelatedRelations?: Maybe<RelationExistsComparator>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Filters that issue labels must satisfy. */
  labels?: Maybe<IssueLabelCollectionFilter>;
  /** Filter based on the existence of the relation. */
  null?: Maybe<Scalars["Boolean"]>;
  /** Comparator for the issues number. */
  number?: Maybe<NumberComparator>;
  /** Compound filters, one of which need to be matched by the issue. */
  or?: Maybe<Array<NullableIssueFilter>>;
  /** Filters that the issue parent must satisfy. */
  parent?: Maybe<NullableIssueFilter>;
  /** Comparator for the issues priority. */
  priority?: Maybe<NullableNumberComparator>;
  /** Filters that the issues project must satisfy. */
  project?: Maybe<NullableProjectFilter>;
  /** [Internal] Comparator for the issues content. */
  searchableContent?: Maybe<ContentComparator>;
  /** Comparator for the issues sla status. */
  slaStatus?: Maybe<SlaStatusComparator>;
  /** Filters that the issues snoozer must satisfy. */
  snoozedBy?: Maybe<NullableUserFilter>;
  /** Comparator for the issues snoozed until date. */
  snoozedUntilAt?: Maybe<NullableDateComparator>;
  /** Comparator for the issues started at date. */
  startedAt?: Maybe<NullableDateComparator>;
  /** Filters that the issues state must satisfy. */
  state?: Maybe<WorkflowStateFilter>;
  /** Filters that issue subscribers must satisfy. */
  subscribers?: Maybe<UserCollectionFilter>;
  /** Filters that the issues team must satisfy. */
  team?: Maybe<TeamFilter>;
  /** Comparator for the issues title. */
  title?: Maybe<StringComparator>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

/** Comparator for optional numbers. */
export type NullableNumberComparator = {
  /** Equals constraint. */
  eq?: Maybe<Scalars["Float"]>;
  /** Greater-than constraint. Matches any values that are greater than the given value. */
  gt?: Maybe<Scalars["Float"]>;
  /** Greater-than-or-equal constraint. Matches any values that are greater than or equal to the given value. */
  gte?: Maybe<Scalars["Float"]>;
  /** In-array constraint. */
  in?: Maybe<Array<Scalars["Float"]>>;
  /** Less-than constraint. Matches any values that are less than the given value. */
  lt?: Maybe<Scalars["Float"]>;
  /** Less-than-or-equal constraint. Matches any values that are less than or equal to the given value. */
  lte?: Maybe<Scalars["Float"]>;
  /** Not-equals constraint. */
  neq?: Maybe<Scalars["Float"]>;
  /** Not-in-array constraint. */
  nin?: Maybe<Array<Scalars["Float"]>>;
  /** Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values. */
  null?: Maybe<Scalars["Boolean"]>;
};

/** Project filtering options. */
export type NullableProjectFilter = {
  /** Compound filters, all of which need to be matched by the project. */
  and?: Maybe<Array<NullableProjectFilter>>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Filters that the projects creator must satisfy. */
  creator?: Maybe<UserFilter>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Filters that the projects issues must satisfy. */
  issues?: Maybe<IssueCollectionFilter>;
  /** Filters that the projects lead must satisfy. */
  lead?: Maybe<NullableUserFilter>;
  /** Filters that the projects members must satisfy. */
  members?: Maybe<UserFilter>;
  /** Comparator for the project name. */
  name?: Maybe<StringComparator>;
  /** Filter based on the existence of the relation. */
  null?: Maybe<Scalars["Boolean"]>;
  /** Compound filters, one of which need to be matched by the project. */
  or?: Maybe<Array<NullableProjectFilter>>;
  /** Filters that the projects roadmaps must satisfy. */
  roadmaps?: Maybe<RoadmapCollectionFilter>;
  /** Comparator for the project slug ID. */
  slugId?: Maybe<StringComparator>;
  /** Comparator for the project start date. */
  startDate?: Maybe<NullableDateComparator>;
  /** Comparator for the project state. */
  state?: Maybe<StringComparator>;
  /** Comparator for the project target date. */
  targetDate?: Maybe<NullableDateComparator>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

/** Comparator for optional strings. */
export type NullableStringComparator = {
  /** Contains constraint. Matches any values that contain the given string. */
  contains?: Maybe<Scalars["String"]>;
  /** Contains case insensitive constraint. Matches any values that contain the given string case insensitive. */
  containsIgnoreCase?: Maybe<Scalars["String"]>;
  /** Ends with constraint. Matches any values that end with the given string. */
  endsWith?: Maybe<Scalars["String"]>;
  /** Equals constraint. */
  eq?: Maybe<Scalars["String"]>;
  /** Equals case insensitive. Matches any values that matches the given string case insensitive. */
  eqIgnoreCase?: Maybe<Scalars["String"]>;
  /** In-array constraint. */
  in?: Maybe<Array<Scalars["String"]>>;
  /** Not-equals constraint. */
  neq?: Maybe<Scalars["String"]>;
  /** Not-equals case insensitive. Matches any values that don't match the given string case insensitive. */
  neqIgnoreCase?: Maybe<Scalars["String"]>;
  /** Not-in-array constraint. */
  nin?: Maybe<Array<Scalars["String"]>>;
  /** Doesn't contain constraint. Matches any values that don't contain the given string. */
  notContains?: Maybe<Scalars["String"]>;
  /** Doesn't contain case insensitive constraint. Matches any values that don't contain the given string case insensitive. */
  notContainsIgnoreCase?: Maybe<Scalars["String"]>;
  /** Doesn't end with constraint. Matches any values that don't end with the given string. */
  notEndsWith?: Maybe<Scalars["String"]>;
  /** Doesn't start with constraint. Matches any values that don't start with the given string. */
  notStartsWith?: Maybe<Scalars["String"]>;
  /** Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values. */
  null?: Maybe<Scalars["Boolean"]>;
  /** Starts with constraint. Matches any values that start with the given string. */
  startsWith?: Maybe<Scalars["String"]>;
};

export type NullableTimelessDateComparator = {
  /** Equals constraint. */
  eq?: Maybe<Scalars["TimelessDate"]>;
  /** Greater-than constraint. Matches any values that are greater than the given value. */
  gt?: Maybe<Scalars["TimelessDate"]>;
  /** Greater-than-or-equal constraint. Matches any values that are greater than or equal to the given value. */
  gte?: Maybe<Scalars["TimelessDate"]>;
  /** In-array constraint. */
  in?: Maybe<Array<Scalars["TimelessDate"]>>;
  /** Less-than constraint. Matches any values that are less than the given value. */
  lt?: Maybe<Scalars["TimelessDate"]>;
  /** Less-than-or-equal constraint. Matches any values that are less than or equal to the given value. */
  lte?: Maybe<Scalars["TimelessDate"]>;
  /** Not-equals constraint. */
  neq?: Maybe<Scalars["TimelessDate"]>;
  /** Not-in-array constraint. */
  nin?: Maybe<Array<Scalars["TimelessDate"]>>;
  /** Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values. */
  null?: Maybe<Scalars["Boolean"]>;
};

/** User filtering options. */
export type NullableUserFilter = {
  /** Comparator for the user's activity status. */
  active?: Maybe<BooleanComparator>;
  /** Comparator for the user's admin status. */
  admin?: Maybe<BooleanComparator>;
  /** Compound filters, all of which need to be matched by the user. */
  and?: Maybe<Array<NullableUserFilter>>;
  /** Filters that the users assigned issues must satisfy. */
  assignedIssues?: Maybe<IssueCollectionFilter>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Comparator for the user's display name. */
  displayName?: Maybe<StringComparator>;
  /** Comparator for the user's email. */
  email?: Maybe<StringComparator>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Filter based on the currently authenticated user. Set to true to filter for the authenticated user, false for any other user. */
  isMe?: Maybe<BooleanComparator>;
  /** Comparator for the user's name. */
  name?: Maybe<StringComparator>;
  /** Filter based on the existence of the relation. */
  null?: Maybe<Scalars["Boolean"]>;
  /** Compound filters, one of which need to be matched by the user. */
  or?: Maybe<Array<NullableUserFilter>>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

/** Comparator for numbers. */
export type NumberComparator = {
  /** Equals constraint. */
  eq?: Maybe<Scalars["Float"]>;
  /** Greater-than constraint. Matches any values that are greater than the given value. */
  gt?: Maybe<Scalars["Float"]>;
  /** Greater-than-or-equal constraint. Matches any values that are greater than or equal to the given value. */
  gte?: Maybe<Scalars["Float"]>;
  /** In-array constraint. */
  in?: Maybe<Array<Scalars["Float"]>>;
  /** Less-than constraint. Matches any values that are less than the given value. */
  lt?: Maybe<Scalars["Float"]>;
  /** Less-than-or-equal constraint. Matches any values that are less than or equal to the given value. */
  lte?: Maybe<Scalars["Float"]>;
  /** Not-equals constraint. */
  neq?: Maybe<Scalars["Float"]>;
  /** Not-in-array constraint. */
  nin?: Maybe<Array<Scalars["Float"]>>;
};

/** The different requests statuses possible for an OAuth client approval request */
export enum OAuthClientApprovalStatus {
  Approved = "approved",
  Denied = "denied",
  Requested = "requested",
}

/** OAuth2 client application */
export type OauthClient = Node & {
  __typename?: "OauthClient";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** OAuth application's client ID. */
  clientId: Scalars["String"];
  /** OAuth application's client secret. */
  clientSecret: Scalars["String"];
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The user who created the OAuthClient. */
  creator: User;
  /** Information about the application. */
  description?: Maybe<Scalars["String"]>;
  /** Name of the developer. */
  developer: Scalars["String"];
  /** Url of the developer. */
  developerUrl: Scalars["String"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** Image of the application. */
  imageUrl?: Maybe<Scalars["String"]>;
  /** OAuth application's client name. */
  name: Scalars["String"];
  /** The organization that the OAuthClient is associated with. */
  organization: Organization;
  /** Whether the OAuth application is publicly visible, or only visible to the creating workspace. */
  publicEnabled: Scalars["Boolean"];
  /** List of allowed redirect URIs for the application. */
  redirectUris: Array<Scalars["String"]>;
  /**
   * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
   *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** The resource types to request when creating new webhooks. */
  webhookResourceTypes: Array<Scalars["String"]>;
  /** Webhook URL */
  webhookUrl?: Maybe<Scalars["String"]>;
};

/** Request to install OAuth clients on organizations and the response to the request. */
export type OauthClientApproval = Node & {
  __typename?: "OauthClientApproval";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The reason the request for the OAuth client approval was denied. */
  denyReason?: Maybe<Scalars["String"]>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The uuid of the OAuth client being requested for installation. */
  oauthClientId: Scalars["String"];
  /** The reason the person wants to install this OAuth client. */
  requestReason?: Maybe<Scalars["String"]>;
  /** The person who requested installing the OAuth client. */
  requesterId: Scalars["String"];
  /** The person who responded to the request to install the OAuth client. */
  responderId?: Maybe<Scalars["String"]>;
  /** The scopes the app has requested. */
  scopes: Array<Scalars["String"]>;
  /** The status for the OAuth client approval request. */
  status: OAuthClientApprovalStatus;
  /**
   * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
   *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

/** An oauth client approval related notification */
export type OauthClientApprovalNotification = Entity &
  Node &
  Notification & {
    __typename?: "OauthClientApprovalNotification";
    /** The user that caused the notification. If empty it's Linear itself. */
    actor?: Maybe<User>;
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: Maybe<Scalars["DateTime"]>;
    /** The time at which the entity was created. */
    createdAt: Scalars["DateTime"];
    /**
     * The time at when an email reminder for this notification was sent to the user. Null, if no email
     *     reminder has been sent.
     */
    emailedAt?: Maybe<Scalars["DateTime"]>;
    /** The unique identifier of the entity. */
    id: Scalars["ID"];
    /** The OAuth client approval request related to the notification. */
    oauthClientApproval: OauthClientApproval;
    /** The time at when the user marked the notification as read. Null, if the the user hasn't read the notification */
    readAt?: Maybe<Scalars["DateTime"]>;
    /** The time until a notification will be snoozed. After that it will appear in the inbox again. */
    snoozedUntilAt?: Maybe<Scalars["DateTime"]>;
    /** Notification type */
    type: Scalars["String"];
    /** The time at which a notification was unsnoozed.. */
    unsnoozedAt?: Maybe<Scalars["DateTime"]>;
    /**
     * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
     *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars["DateTime"];
    /** The user that received the notification. */
    user: User;
  };

export type OnboardingCustomerSurvey = {
  companyRole?: Maybe<Scalars["String"]>;
  companySize?: Maybe<Scalars["String"]>;
};

/** An organization. Organizations are root-level objects that contain user accounts and teams. */
export type Organization = Node & {
  __typename?: "Organization";
  /** Allowed authentication providers, empty array means all are allowed */
  allowedAuthServices: Array<Scalars["String"]>;
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** Number of issues in the organization. */
  createdIssueCount: Scalars["Int"];
  /** The time at which deletion of the organization was requested. */
  deletionRequestedAt?: Maybe<Scalars["DateTime"]>;
  /** How git branches are formatted. If null, default formatting will be used. */
  gitBranchFormat?: Maybe<Scalars["String"]>;
  /** Whether the Git integration linkback messages should be sent to private repositories. */
  gitLinkbackMessagesEnabled: Scalars["Boolean"];
  /** Whether the Git integration linkback messages should be sent to public repositories. */
  gitPublicLinkbackMessagesEnabled: Scalars["Boolean"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** Integrations associated with the organization. */
  integrations: IntegrationConnection;
  /** Labels associated with the organization. */
  labels: IssueLabelConnection;
  /** The organization's logo URL. */
  logoUrl?: Maybe<Scalars["String"]>;
  /** The organization's name. */
  name: Scalars["String"];
  /** Rolling 30-day total upload volume for the organization, in megabytes. */
  periodUploadVolume: Scalars["Float"];
  /** Previously used URL keys for the organization (last 3 are kept and redirected). */
  previousUrlKeys: Array<Scalars["String"]>;
  /** The day at which to prompt for project updates. */
  projectUpdateRemindersDay: Day;
  /** The hour at which to prompt for project updates. */
  projectUpdateRemindersHour: Scalars["Float"];
  /** The frequency at which to prompt for project updates. */
  projectUpdatesReminderFrequency: ProjectUpdateReminderFrequency;
  /** Whether the organization is using a roadmap. */
  roadmapEnabled: Scalars["Boolean"];
  /** Whether SAML authentication is enabled for organization. */
  samlEnabled: Scalars["Boolean"];
  /** Whether SCIM provisioning is enabled for organization. */
  scimEnabled: Scalars["Boolean"];
  /** The organization's subscription to a paid plan. */
  subscription?: Maybe<PaidSubscription>;
  /** Teams associated with the organization. */
  teams: TeamConnection;
  /** Templates associated with the organization. */
  templates: TemplateConnection;
  /**
   * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
   *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** The organization's unique URL key. */
  urlKey: Scalars["String"];
  /** Number of active users in the organization. */
  userCount: Scalars["Int"];
  /** Users associated with the organization. */
  users: UserConnection;
};

/** An organization. Organizations are root-level objects that contain user accounts and teams. */
export type OrganizationIntegrationsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** An organization. Organizations are root-level objects that contain user accounts and teams. */
export type OrganizationLabelsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueLabelFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** An organization. Organizations are root-level objects that contain user accounts and teams. */
export type OrganizationTeamsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<TeamFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** An organization. Organizations are root-level objects that contain user accounts and teams. */
export type OrganizationTemplatesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** An organization. Organizations are root-level objects that contain user accounts and teams. */
export type OrganizationUsersArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  includeDisabled?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type OrganizationCancelDeletePayload = {
  __typename?: "OrganizationCancelDeletePayload";
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type OrganizationDeletePayload = {
  __typename?: "OrganizationDeletePayload";
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** Defines the use of a domain by an organization. */
export type OrganizationDomain = Node & {
  __typename?: "OrganizationDomain";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** What type of auth is the domain used for */
  authType: OrganizationDomainAuthType;
  /** Whether the domains was claimed by the organization through DNS verification. */
  claimed?: Maybe<Scalars["Boolean"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The user who added the domain. */
  creator?: Maybe<User>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** Domain name */
  name: Scalars["String"];
  /**
   * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
   *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** E-mail used to verify this domain */
  verificationEmail?: Maybe<Scalars["String"]>;
  /** Is this domain verified */
  verified: Scalars["Boolean"];
};

/** What type of auth is the domain used for. */
export enum OrganizationDomainAuthType {
  General = "general",
  Saml = "saml",
}

/** [INTERNAL] Domain claim request response. */
export type OrganizationDomainClaimPayload = {
  __typename?: "OrganizationDomainClaimPayload";
  /** String to put into DNS for verification. */
  verificationString: Scalars["String"];
};

export type OrganizationDomainCreateInput = {
  /** The authentication type this domain is for. */
  authType?: Maybe<Scalars["String"]>;
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The domain name to add. */
  name: Scalars["String"];
  /** The email address to which to send the verification code. */
  verificationEmail?: Maybe<Scalars["String"]>;
};

/** [INTERNAL] Organization domain operation response. */
export type OrganizationDomainPayload = {
  __typename?: "OrganizationDomainPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** The organization domain that was created or updated. */
  organizationDomain: OrganizationDomain;
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** [INTERNAL] Organization domain operation response. */
export type OrganizationDomainSimplePayload = {
  __typename?: "OrganizationDomainSimplePayload";
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type OrganizationDomainVerificationInput = {
  /** The identifier in UUID v4 format of the domain being verified. */
  organizationDomainId: Scalars["String"];
  /** The verification code sent via email. */
  verificationCode: Scalars["String"];
};

export type OrganizationExistsPayload = {
  __typename?: "OrganizationExistsPayload";
  /** Whether the organization exists. */
  exists: Scalars["Boolean"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** An invitation to the organization that has been sent via email. */
export type OrganizationInvite = Node & {
  __typename?: "OrganizationInvite";
  /** The time at which the invite was accepted. Null, if the invite hasn't been accepted */
  acceptedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The invitees email address. */
  email: Scalars["String"];
  /** The time at which the invite will be expiring. Null, if the invite shouldn't expire */
  expiresAt?: Maybe<Scalars["DateTime"]>;
  /** The invite was sent to external address. */
  external: Scalars["Boolean"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The user who has accepted the invite. Null, if the invite hasn't been accepted. */
  invitee?: Maybe<User>;
  /** The user who created the invitation. */
  inviter: User;
  /** The organization that the invite is associated with. */
  organization: Organization;
  /** The user role that the invitee will receive upon accepting the invite. */
  role: UserRoleType;
  /**
   * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
   *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

export type OrganizationInviteConnection = {
  __typename?: "OrganizationInviteConnection";
  edges: Array<OrganizationInviteEdge>;
  nodes: Array<OrganizationInvite>;
  pageInfo: PageInfo;
};

export type OrganizationInviteCreateInput = {
  /** The email of the invitee. */
  email: Scalars["String"];
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The message to send to the invitee. */
  message?: Maybe<Scalars["String"]>;
  /** What user role the invite should grant. */
  role?: Maybe<UserRoleType>;
  /** The teams that the user has been invited to. */
  teamIds?: Maybe<Array<Scalars["String"]>>;
};

export type OrganizationInviteDetailsPayload = {
  __typename?: "OrganizationInviteDetailsPayload";
  /** Whether the invite has already been accepted. */
  accepted: Scalars["Boolean"];
  /** When the invite was created. */
  createdAt: Scalars["DateTime"];
  /** The email of the invitee */
  email: Scalars["String"];
  /** Whether the invite has expired. */
  expired: Scalars["Boolean"];
  /** The name of the inviter */
  inviter: Scalars["String"];
  /** ID of the workspace the invite is for. */
  organizationId: Scalars["String"];
  /** URL of the workspace logo the invite is for. */
  organizationLogoUrl?: Maybe<Scalars["String"]>;
  /** Name of the workspace the invite is for. */
  organizationName: Scalars["String"];
  /** What user role the invite should grant. */
  role: UserRoleType;
};

export type OrganizationInviteEdge = {
  __typename?: "OrganizationInviteEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: OrganizationInvite;
};

export type OrganizationInvitePayload = {
  __typename?: "OrganizationInvitePayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** The organization invite that was created or updated. */
  organizationInvite: OrganizationInvite;
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type OrganizationInviteUpdateInput = {
  /** The teams that the user has been invited to. */
  teamIds: Array<Scalars["String"]>;
};

export type OrganizationPayload = {
  __typename?: "OrganizationPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** The organization that was created or updated. */
  organization?: Maybe<Organization>;
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type PageInfo = {
  __typename?: "PageInfo";
  /** Cursor representing the last result in the paginated results. */
  endCursor?: Maybe<Scalars["String"]>;
  /** Indicates if there are more results when paginating forward. */
  hasNextPage: Scalars["Boolean"];
  /** Indicates if there are more results when paginating backward. */
  hasPreviousPage: Scalars["Boolean"];
  /** Cursor representing the first result in the paginated results. */
  startCursor?: Maybe<Scalars["String"]>;
};

/** By which field should the pagination order by */
export enum PaginationOrderBy {
  CreatedAt = "createdAt",
  UpdatedAt = "updatedAt",
}

/** The paid subscription of an organization. */
export type PaidSubscription = Node & {
  __typename?: "PaidSubscription";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The date the subscription was canceled, if any. */
  canceledAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The creator of the subscription. */
  creator?: Maybe<User>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The date the subscription will be billed next. */
  nextBillingAt?: Maybe<Scalars["DateTime"]>;
  /** The organization that the subscription is associated with. */
  organization: Organization;
  /** The subscription type of a pending change. Null if no change pending. */
  pendingChangeType?: Maybe<Scalars["String"]>;
  /** The number of seats in the subscription. */
  seats: Scalars["Float"];
  /** The maximum number of seats that will be billed in the subscription. */
  seatsMaximum?: Maybe<Scalars["Float"]>;
  /** The minimum number of seats that will be billed in the subscription. */
  seatsMinimum?: Maybe<Scalars["Float"]>;
  /** The subscription type. */
  type: Scalars["String"];
  /**
   * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
   *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

/** A personal note for a user */
export type PersonalNote = Node & {
  __typename?: "PersonalNote";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The note content as JSON. */
  contentData?: Maybe<Scalars["JSONObject"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /**
   * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
   *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** The user that owns the note. */
  user: User;
};

/** A project. */
export type Project = Node & {
  __typename?: "Project";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the project was automatically archived by the auto pruning process. */
  autoArchivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the project was moved into canceled state. */
  canceledAt?: Maybe<Scalars["DateTime"]>;
  /** The project's color. */
  color: Scalars["String"];
  /** The time at which the project was moved into completed state. */
  completedAt?: Maybe<Scalars["DateTime"]>;
  /** The number of completed issues in the project after each week. */
  completedIssueCountHistory: Array<Scalars["Float"]>;
  /** The number of completed estimation points after each week. */
  completedScopeHistory: Array<Scalars["Float"]>;
  /** The project was created based on this issue. */
  convertedFromIssue?: Maybe<Issue>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The user who created the project. */
  creator: User;
  /** The project's description. */
  description: Scalars["String"];
  /** Documents associated with the project. */
  documents: DocumentConnection;
  /** The icon of the project. */
  icon?: Maybe<Scalars["String"]>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The number of in progress estimation points after each week. */
  inProgressScopeHistory: Array<Scalars["Float"]>;
  /** Settings for all integrations associated with that project. */
  integrationsSettings?: Maybe<IntegrationsSettings>;
  /** The total number of issues in the project after each week. */
  issueCountHistory: Array<Scalars["Float"]>;
  /** Issues associated with the project. */
  issues: IssueConnection;
  /** The project lead. */
  lead?: Maybe<User>;
  /** Links associated with the project. */
  links: ProjectLinkConnection;
  /** Users that are members of the project. */
  members: UserConnection;
  /** The project's name. */
  name: Scalars["String"];
  /** The overall progress of the project. This is the (completed estimate points + 0.25 * in progress estimate points) / total estimate points. */
  progress: Scalars["Float"];
  /** [ALPHA] Milestones associated with the project. */
  projectMilestones: ProjectMilestoneConnection;
  /** The time until which project update reminders are paused. */
  projectUpdateRemindersPausedUntilAt?: Maybe<Scalars["DateTime"]>;
  /** Project updates associated with the project. */
  projectUpdates: ProjectUpdateConnection;
  /** The overall scope (total estimate points) of the project. */
  scope: Scalars["Float"];
  /** The total number of estimation points after each week. */
  scopeHistory: Array<Scalars["Float"]>;
  /** Whether to send new issue comment notifications to Slack. */
  slackIssueComments: Scalars["Boolean"];
  /** Whether to send new issue status updates to Slack. */
  slackIssueStatuses: Scalars["Boolean"];
  /** Whether to send new issue notifications to Slack. */
  slackNewIssue: Scalars["Boolean"];
  /** The project's unique URL slug. */
  slugId: Scalars["String"];
  /** The sort order for the project within the organizion. */
  sortOrder: Scalars["Float"];
  /** [Internal] The estimated start date of the project. */
  startDate?: Maybe<Scalars["TimelessDate"]>;
  /** The time at which the project was moved into started state. */
  startedAt?: Maybe<Scalars["DateTime"]>;
  /** The type of the state. */
  state: Scalars["String"];
  /** The estimated completion date of the project. */
  targetDate?: Maybe<Scalars["TimelessDate"]>;
  /** Teams associated with this project. */
  teams: TeamConnection;
  /**
   * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
   *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** Project URL. */
  url: Scalars["String"];
};

/** A project. */
export type ProjectDocumentsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** A project. */
export type ProjectIssuesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** A project. */
export type ProjectLinksArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** A project. */
export type ProjectMembersArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<UserFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  includeDisabled?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** A project. */
export type ProjectProjectMilestonesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** A project. */
export type ProjectProjectUpdatesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** A project. */
export type ProjectTeamsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<TeamFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** Project filtering options. */
export type ProjectCollectionFilter = {
  /** Compound filters, all of which need to be matched by the project. */
  and?: Maybe<Array<ProjectCollectionFilter>>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Filters that the projects creator must satisfy. */
  creator?: Maybe<UserFilter>;
  /** Filters that needs to be matched by all projects. */
  every?: Maybe<ProjectFilter>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Filters that the projects issues must satisfy. */
  issues?: Maybe<IssueCollectionFilter>;
  /** Filters that the projects lead must satisfy. */
  lead?: Maybe<NullableUserFilter>;
  /** Comparator for the collection length. */
  length?: Maybe<NumberComparator>;
  /** Filters that the projects members must satisfy. */
  members?: Maybe<UserFilter>;
  /** Comparator for the project name. */
  name?: Maybe<StringComparator>;
  /** Compound filters, one of which need to be matched by the project. */
  or?: Maybe<Array<ProjectCollectionFilter>>;
  /** Filters that the projects roadmaps must satisfy. */
  roadmaps?: Maybe<RoadmapCollectionFilter>;
  /** Comparator for the project slug ID. */
  slugId?: Maybe<StringComparator>;
  /** Filters that needs to be matched by some projects. */
  some?: Maybe<ProjectFilter>;
  /** Comparator for the project start date. */
  startDate?: Maybe<NullableDateComparator>;
  /** Comparator for the project state. */
  state?: Maybe<StringComparator>;
  /** Comparator for the project target date. */
  targetDate?: Maybe<NullableDateComparator>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

export type ProjectConnection = {
  __typename?: "ProjectConnection";
  edges: Array<ProjectEdge>;
  nodes: Array<Project>;
  pageInfo: PageInfo;
};

export type ProjectCreateInput = {
  /** The color of the project. */
  color?: Maybe<Scalars["String"]>;
  /** The ID of the issue from which that project is created. */
  convertedFromIssueId?: Maybe<Scalars["String"]>;
  /** The description for the project. */
  description?: Maybe<Scalars["String"]>;
  /** The icon of the project. */
  icon?: Maybe<Scalars["String"]>;
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The identifier of the project lead. */
  leadId?: Maybe<Scalars["String"]>;
  /** The identifiers of the members of this project. */
  memberIds?: Maybe<Array<Scalars["String"]>>;
  /** The name of the project. */
  name: Scalars["String"];
  /** The sort order for the project within shared views. */
  sortOrder?: Maybe<Scalars["Float"]>;
  /** The planned start date of the project. */
  startDate?: Maybe<Scalars["TimelessDate"]>;
  /** The state of the project. */
  state?: Maybe<Scalars["String"]>;
  /** The planned target date of the project. */
  targetDate?: Maybe<Scalars["TimelessDate"]>;
  /** The identifiers of the teams this project is associated with. */
  teamIds: Array<Scalars["String"]>;
};

export type ProjectEdge = {
  __typename?: "ProjectEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: Project;
};

/** Project filtering options. */
export type ProjectFilter = {
  /** Compound filters, all of which need to be matched by the project. */
  and?: Maybe<Array<ProjectFilter>>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Filters that the projects creator must satisfy. */
  creator?: Maybe<UserFilter>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Filters that the projects issues must satisfy. */
  issues?: Maybe<IssueCollectionFilter>;
  /** Filters that the projects lead must satisfy. */
  lead?: Maybe<NullableUserFilter>;
  /** Filters that the projects members must satisfy. */
  members?: Maybe<UserFilter>;
  /** Comparator for the project name. */
  name?: Maybe<StringComparator>;
  /** Compound filters, one of which need to be matched by the project. */
  or?: Maybe<Array<ProjectFilter>>;
  /** Filters that the projects roadmaps must satisfy. */
  roadmaps?: Maybe<RoadmapCollectionFilter>;
  /** Comparator for the project slug ID. */
  slugId?: Maybe<StringComparator>;
  /** Comparator for the project start date. */
  startDate?: Maybe<NullableDateComparator>;
  /** Comparator for the project state. */
  state?: Maybe<StringComparator>;
  /** Comparator for the project target date. */
  targetDate?: Maybe<NullableDateComparator>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

/** An external link for a project. */
export type ProjectLink = Node & {
  __typename?: "ProjectLink";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The user who created the link. */
  creator: User;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The link's label. */
  label: Scalars["String"];
  /** The project that the link is associated with. */
  project: Project;
  /**
   * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
   *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** The link's URL. */
  url: Scalars["String"];
};

export type ProjectLinkConnection = {
  __typename?: "ProjectLinkConnection";
  edges: Array<ProjectLinkEdge>;
  nodes: Array<ProjectLink>;
  pageInfo: PageInfo;
};

export type ProjectLinkCreateInput = {
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The label for the link. */
  label: Scalars["String"];
  /** Related project for the link. */
  projectId: Scalars["String"];
  /** The URL of the link. */
  url: Scalars["String"];
};

export type ProjectLinkEdge = {
  __typename?: "ProjectLinkEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: ProjectLink;
};

export type ProjectLinkPayload = {
  __typename?: "ProjectLinkPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** The project that was created or updated. */
  projectLink: ProjectLink;
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type ProjectLinkUpdateInput = {
  /** The label for the link. */
  label?: Maybe<Scalars["String"]>;
  /** The URL of the link. */
  url?: Maybe<Scalars["String"]>;
};

/** A milestone for a project. */
export type ProjectMilestone = Node & {
  __typename?: "ProjectMilestone";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The description of the project milestone. */
  description?: Maybe<Scalars["String"]>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The name of the project milestone. */
  name: Scalars["String"];
  /** The project of the milestone. */
  project: Project;
  /** The planned completion date of the milestone. */
  targetDate?: Maybe<Scalars["TimelessDate"]>;
  /**
   * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
   *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

export type ProjectMilestoneConnection = {
  __typename?: "ProjectMilestoneConnection";
  edges: Array<ProjectMilestoneEdge>;
  nodes: Array<ProjectMilestone>;
  pageInfo: PageInfo;
};

export type ProjectMilestoneCreateInput = {
  /** The description of the project milestone. */
  description?: Maybe<Scalars["String"]>;
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The name of the project milestone. */
  name: Scalars["String"];
  /** Related project for the project milestone. */
  projectId: Scalars["String"];
  /** The planned target date of the project milestone. */
  targetDate?: Maybe<Scalars["TimelessDate"]>;
};

export type ProjectMilestoneEdge = {
  __typename?: "ProjectMilestoneEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: ProjectMilestone;
};

export type ProjectMilestonePayload = {
  __typename?: "ProjectMilestonePayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** The project milestone that was created or updated. */
  projectMilestone: ProjectMilestone;
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type ProjectMilestoneUpdateInput = {
  /** The description of the project milestone. */
  description?: Maybe<Scalars["String"]>;
  /** The name of the project milestone. */
  name?: Maybe<Scalars["String"]>;
  /** Related project for the project milestone. */
  projectId?: Maybe<Scalars["String"]>;
  /** The planned target date of the project milestone. */
  targetDate?: Maybe<Scalars["TimelessDate"]>;
};

/** A project related notification */
export type ProjectNotification = Entity &
  Node &
  Notification & {
    __typename?: "ProjectNotification";
    /** The user that caused the notification. If empty it's Linear itself. */
    actor?: Maybe<User>;
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: Maybe<Scalars["DateTime"]>;
    /** The time at which the entity was created. */
    createdAt: Scalars["DateTime"];
    /**
     * The time at when an email reminder for this notification was sent to the user. Null, if no email
     *     reminder has been sent.
     */
    emailedAt?: Maybe<Scalars["DateTime"]>;
    /** The unique identifier of the entity. */
    id: Scalars["ID"];
    /** The project related to the notification. */
    project: Project;
    /** The project update related to the notification. */
    projectUpdate?: Maybe<ProjectUpdate>;
    /** The time at when the user marked the notification as read. Null, if the the user hasn't read the notification */
    readAt?: Maybe<Scalars["DateTime"]>;
    /** The time until a notification will be snoozed. After that it will appear in the inbox again. */
    snoozedUntilAt?: Maybe<Scalars["DateTime"]>;
    /** Notification type */
    type: Scalars["String"];
    /** The time at which a notification was unsnoozed.. */
    unsnoozedAt?: Maybe<Scalars["DateTime"]>;
    /**
     * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
     *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars["DateTime"];
    /** The user that received the notification. */
    user: User;
  };

/** A project notification subscription. */
export type ProjectNotificationSubscription = Entity &
  Node &
  NotificationSubscription & {
    __typename?: "ProjectNotificationSubscription";
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: Maybe<Scalars["DateTime"]>;
    /** The time at which the entity was created. */
    createdAt: Scalars["DateTime"];
    /** The unique identifier of the entity. */
    id: Scalars["ID"];
    /** The project subscribed to. */
    project: Project;
    /** The type of the project subscription. */
    projectNotificationSubscriptionType: ProjectNotificationSubscriptionType;
    /** Subscribed team. */
    team?: Maybe<Team>;
    /** The type of the subscription. */
    type: Scalars["String"];
    /**
     * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
     *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars["DateTime"];
    /** The user associated with notification subscriptions. */
    user: User;
  };

/** The type of a project notification subscription. */
export enum ProjectNotificationSubscriptionType {
  All = "all",
  Custom = "custom",
  ImportantOnly = "importantOnly",
}

export type ProjectPayload = {
  __typename?: "ProjectPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** The project that was created or updated. */
  project?: Maybe<Project>;
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** A update associated with an project. */
export type ProjectUpdate = Node & {
  __typename?: "ProjectUpdate";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The update content in markdown format. */
  body: Scalars["String"];
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The time the project update was edited. */
  editedAt?: Maybe<Scalars["DateTime"]>;
  /** The health of the project at the time of the update. */
  health: ProjectUpdateHealthType;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The project that the update is associated with. */
  project: Project;
  /**
   * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
   *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** The URL to the project update. */
  url: Scalars["String"];
  /** The user who wrote the update. */
  user: User;
};

export type ProjectUpdateConnection = {
  __typename?: "ProjectUpdateConnection";
  edges: Array<ProjectUpdateEdge>;
  nodes: Array<ProjectUpdate>;
  pageInfo: PageInfo;
};

export type ProjectUpdateCreateInput = {
  /** The content of the project update in markdown format. */
  body?: Maybe<Scalars["String"]>;
  /** The content of the project update as a Prosemirror document. */
  bodyData?: Maybe<Scalars["JSON"]>;
  /** The health of the project at the time of the update. */
  health?: Maybe<ProjectUpdateHealthType>;
  /** The identifier. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The project to associate the project update with. */
  projectId: Scalars["String"];
};

export type ProjectUpdateEdge = {
  __typename?: "ProjectUpdateEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: ProjectUpdate;
};

/** The health type of a project when the update is created. */
export enum ProjectUpdateHealthType {
  AtRisk = "atRisk",
  OffTrack = "offTrack",
  OnTrack = "onTrack",
}

export type ProjectUpdateInput = {
  /** The date when the project was canceled. */
  canceledAt?: Maybe<Scalars["DateTime"]>;
  /** The color of the project. */
  color?: Maybe<Scalars["String"]>;
  /** The date when the project was completed. */
  completedAt?: Maybe<Scalars["DateTime"]>;
  /** The ID of the issue from which that project is created. */
  convertedFromIssueId?: Maybe<Scalars["String"]>;
  /** The description for the project. */
  description?: Maybe<Scalars["String"]>;
  /** The icon of the project. */
  icon?: Maybe<Scalars["String"]>;
  /** The identifier of the project lead. */
  leadId?: Maybe<Scalars["String"]>;
  /** The identifiers of the members of this project. */
  memberIds?: Maybe<Array<Scalars["String"]>>;
  /** The name of the project. */
  name?: Maybe<Scalars["String"]>;
  /** The time until which project update reminders are paused. */
  projectUpdateRemindersPausedUntilAt?: Maybe<Scalars["DateTime"]>;
  /** Whether to send new issue comment notifications to Slack. */
  slackIssueComments?: Maybe<Scalars["Boolean"]>;
  /** Whether to send issue status update notifications to Slack. */
  slackIssueStatuses?: Maybe<Scalars["Boolean"]>;
  /** Whether to send new issue notifications to Slack. */
  slackNewIssue?: Maybe<Scalars["Boolean"]>;
  /** The sort order for the project in shared views. */
  sortOrder?: Maybe<Scalars["Float"]>;
  /** The planned start date of the project. */
  startDate?: Maybe<Scalars["TimelessDate"]>;
  /** The state of the project. */
  state?: Maybe<Scalars["String"]>;
  /** The planned target date of the project. */
  targetDate?: Maybe<Scalars["TimelessDate"]>;
  /** The identifiers of the teams this project is associated with. */
  teamIds?: Maybe<Array<Scalars["String"]>>;
};

/** Holds information about when a user has interacted with a project update. */
export type ProjectUpdateInteraction = Node & {
  __typename?: "ProjectUpdateInteraction";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The project update that has been interacted with. */
  projectUpdate: ProjectUpdate;
  /** The time at which the user read the project update. */
  readAt: Scalars["DateTime"];
  /**
   * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
   *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** The user that has interacted with the project update. */
  user: User;
};

export type ProjectUpdateInteractionConnection = {
  __typename?: "ProjectUpdateInteractionConnection";
  edges: Array<ProjectUpdateInteractionEdge>;
  nodes: Array<ProjectUpdateInteraction>;
  pageInfo: PageInfo;
};

export type ProjectUpdateInteractionCreateInput = {
  /** The identifier. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The id of the project update that has been interacted with. */
  projectUpdateId: Scalars["String"];
  /** The time at which the user read the project update. */
  readAt: Scalars["DateTime"];
};

export type ProjectUpdateInteractionEdge = {
  __typename?: "ProjectUpdateInteractionEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: ProjectUpdateInteraction;
};

export type ProjectUpdateInteractionPayload = {
  __typename?: "ProjectUpdateInteractionPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** The project update interaction that was created or updated. */
  projectUpdateInteraction: ProjectUpdateInteraction;
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type ProjectUpdatePayload = {
  __typename?: "ProjectUpdatePayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** The project update that was created or updated. */
  projectUpdate: ProjectUpdate;
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** The frequency at which to send project update reminders. */
export enum ProjectUpdateReminderFrequency {
  Never = "never",
  TwoWeeks = "twoWeeks",
  Week = "week",
}

export type ProjectUpdateUpdateInput = {
  /** The content of the project update in markdown format. */
  body?: Maybe<Scalars["String"]>;
  /** The content of the project update as a Prosemirror document. */
  bodyData?: Maybe<Scalars["JSON"]>;
  /** The health of the project at the time of the update. */
  health?: Maybe<ProjectUpdateHealthType>;
};

export type ProjectUpdateWithInteractionPayload = {
  __typename?: "ProjectUpdateWithInteractionPayload";
  /** The project update that was created or updated. */
  interaction: ProjectUpdateInteraction;
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** The project update that was created or updated. */
  projectUpdate: ProjectUpdate;
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** A user's web browser push notification subscription. */
export type PushSubscription = Node & {
  __typename?: "PushSubscription";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /**
   * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
   *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

export type PushSubscriptionConnection = {
  __typename?: "PushSubscriptionConnection";
  edges: Array<PushSubscriptionEdge>;
  nodes: Array<PushSubscription>;
  pageInfo: PageInfo;
};

export type PushSubscriptionCreateInput = {
  /** The data of the subscription in stringified JSON format. */
  data: Scalars["String"];
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** Whether this is a subscription payload for Google Cloud Messaging or Apple Push Notification service */
  type?: Maybe<PushSubscriptionType>;
  /** The user identifier of the subscription. */
  userId: Scalars["String"];
};

export type PushSubscriptionEdge = {
  __typename?: "PushSubscriptionEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: PushSubscription;
};

export type PushSubscriptionPayload = {
  __typename?: "PushSubscriptionPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type PushSubscriptionTestPayload = {
  __typename?: "PushSubscriptionTestPayload";
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** The different push subscription types */
export enum PushSubscriptionType {
  Apple = "apple",
  Web = "web",
}

export type Query = {
  __typename?: "Query";
  /** One specific project milestone. */
  ProjectMilestone: ProjectMilestone;
  /** All milestones for the project. */
  ProjectMilestones: ProjectMilestoneConnection;
  /** All teams you the user can administrate. Administrable teams are teams whose settings the user can change, but to whose issues the user doesn't necessarily have access to. */
  administrableTeams: TeamConnection;
  /** All API keys for the user. */
  apiKeys: ApiKeyConnection;
  /** Get basic information for an application. */
  applicationInfo: Application;
  /** [INTERNAL] Get basic information for a list of applications */
  applicationInfoByIds: Array<Application>;
  /** Get information for an application and whether a user has approved it for the given scopes. */
  applicationWithAuthorization: UserAuthorizedApplication;
  /**
   * One specific issue attachment.
   * [Deprecated] 'url' can no longer be used as the 'id' parameter. Use 'attachmentsForUrl' instead
   */
  attachment: Attachment;
  /**
   * Query an issue by its associated attachment, and its id.
   * @deprecated Will be removed in near future, please use `attachmentsForURL` to get attachments and their issues instead.
   */
  attachmentIssue: Issue;
  /**
   * All issue attachments.
   *
   * To get attachments for a given URL, use `attachmentsForURL` query.
   */
  attachments: AttachmentConnection;
  /** Returns issue attachments for a given `url`. */
  attachmentsForURL: AttachmentConnection;
  /** All audit log entries. */
  auditEntries: AuditEntryConnection;
  /** List of audit entry types. */
  auditEntryTypes: Array<AuditEntryType>;
  /** [INTERNAL] Get all authorized applications for a user */
  authorizedApplications: Array<AuthorizedApplication>;
  /** Fetch users belonging to this user account. */
  availableUsers: AuthResolverResponse;
  /** A specific comment. */
  comment: Comment;
  /** All comments. */
  comments: CommentConnection;
  /** One specific custom view. */
  customView: CustomView;
  /** Custom views for the user. */
  customViews: CustomViewConnection;
  /** One specific cycle. */
  cycle: Cycle;
  /** All cycles. */
  cycles: CycleConnection;
  /** One specific document. */
  document: Document;
  /** All documents for the project. */
  documents: DocumentConnection;
  /** A specific emoji. */
  emoji: Emoji;
  /** All custom emojis. */
  emojis: EmojiConnection;
  /** One specific favorite. */
  favorite: Favorite;
  /** The user's favorites. */
  favorites: FavoriteConnection;
  /** Fetch Figma screenshot and other information with file and node identifiers. */
  figmaEmbedInfo: FigmaEmbedPayload;
  /** One specific integration. */
  integration: Integration;
  /** One specific integrationTemplate. */
  integrationTemplate: IntegrationTemplate;
  /** Template and integration connections. */
  integrationTemplates: IntegrationTemplateConnection;
  /** All integrations. */
  integrations: IntegrationConnection;
  /** One specific set of settings. */
  integrationsSettings: IntegrationsSettings;
  /** One specific issue. */
  issue: Issue;
  /** Fetches the GitHub token, completing the OAuth flow. */
  issueImportFinishGithubOAuth: GithubOAuthTokenPayload;
  /** One specific label. */
  issueLabel: IssueLabel;
  /** All issue labels. */
  issueLabels: IssueLabelConnection;
  /** Issue priority values and corresponding labels. */
  issuePriorityValues: Array<IssuePriorityValue>;
  /** One specific issue relation. */
  issueRelation: IssueRelation;
  /** All issue relationships. */
  issueRelations: IssueRelationConnection;
  /** [ALPHA] Search issues. This query is experimental and is subject to change without notice. */
  issueSearch: IssueConnection;
  /** Find issue based on the VCS branch name. */
  issueVcsBranchSearch?: Maybe<Issue>;
  /** All issues. */
  issues: IssueConnection;
  /** One specific notification. */
  notification: Notification;
  /** One specific notification subscription. */
  notificationSubscription: NotificationSubscription;
  /** The user's notification subscriptions. */
  notificationSubscriptions: NotificationSubscriptionConnection;
  /** All notifications. */
  notifications: NotificationConnection;
  /** The user's organization. */
  organization: Organization;
  /** [INTERNAL] Checks whether the domain can be claimed. */
  organizationDomainClaimRequest: OrganizationDomainClaimPayload;
  /** Does the organization exist. */
  organizationExists: OrganizationExistsPayload;
  /** One specific organization invite. */
  organizationInvite: OrganizationInvite;
  /** One specific organization invite. */
  organizationInviteDetails: OrganizationInviteDetailsPayload;
  /** All invites for the organization. */
  organizationInvites: OrganizationInviteConnection;
  /** One specific project. */
  project: Project;
  /** One specific project link. */
  projectLink: ProjectLink;
  /** All links for the project. */
  projectLinks: ProjectLinkConnection;
  /** A specific project update. */
  projectUpdate: ProjectUpdate;
  /** A specific interaction on a project update. */
  projectUpdateInteraction: ProjectUpdateInteraction;
  /** All interactions on project updates. */
  projectUpdateInteractions: ProjectUpdateInteractionConnection;
  /** All project updates. */
  projectUpdates: ProjectUpdateConnection;
  /** All projects. */
  projects: ProjectConnection;
  /** Sends a test push message. */
  pushSubscriptionTest: PushSubscriptionTestPayload;
  /** The status of the rate limiter. */
  rateLimitStatus: RateLimitPayload;
  /** One specific roadmap. */
  roadmap: Roadmap;
  /** One specific roadmapToProject. */
  roadmapToProject: RoadmapToProject;
  /** Custom views for the user. */
  roadmapToProjects: RoadmapToProjectConnection;
  /** All roadmaps in the workspace. */
  roadmaps: RoadmapConnection;
  /** Fetch SSO login URL for the email provided. */
  ssoUrlFromEmail: SsoUrlFromEmailResponse;
  /** One specific team. */
  team: Team;
  /** One specific team membership. */
  teamMembership: TeamMembership;
  /** All team memberships. */
  teamMemberships: TeamMembershipConnection;
  /** All teams whose issues can be accessed by the user. This might be different from `administrableTeams`, which also includes teams whose settings can be changed by the user. */
  teams: TeamConnection;
  /** A specific template. */
  template: Template;
  /** All templates from all users. */
  templates: Array<Template>;
  /** One specific user. */
  user: User;
  /** Finds a user account by email. */
  userAccountExists?: Maybe<UserAccountExistsPayload>;
  /** The user's settings. */
  userSettings: UserSettings;
  /** All users for the organization. */
  users: UserConnection;
  /** The currently authenticated user. */
  viewer: User;
  /** A specific webhook. */
  webhook: Webhook;
  /** All webhooks. */
  webhooks: WebhookConnection;
  /** One specific state. */
  workflowState: WorkflowState;
  /** All issue workflow states. */
  workflowStates: WorkflowStateConnection;
  /** [INTERNAL] Get all authorized applications (with limited fields) for a workspace */
  workspaceAuthorizedApplications: Array<WorkspaceAuthorizedApplication>;
};

export type QueryProjectMilestoneArgs = {
  id: Scalars["String"];
};

export type QueryProjectMilestonesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryAdministrableTeamsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<TeamFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryApiKeysArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryApplicationInfoArgs = {
  clientId: Scalars["String"];
};

export type QueryApplicationInfoByIdsArgs = {
  ids: Array<Scalars["String"]>;
};

export type QueryApplicationWithAuthorizationArgs = {
  actor?: Maybe<Scalars["String"]>;
  clientId: Scalars["String"];
  redirectUri?: Maybe<Scalars["String"]>;
  scope: Array<Scalars["String"]>;
};

export type QueryAttachmentArgs = {
  id: Scalars["String"];
};

export type QueryAttachmentIssueArgs = {
  id: Scalars["String"];
};

export type QueryAttachmentsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<AttachmentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryAttachmentsForUrlArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
  url: Scalars["String"];
};

export type QueryAuditEntriesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<AuditEntryFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryCommentArgs = {
  id: Scalars["String"];
};

export type QueryCommentsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CommentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryCustomViewArgs = {
  id: Scalars["String"];
};

export type QueryCustomViewsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryCycleArgs = {
  id: Scalars["String"];
};

export type QueryCyclesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CycleFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryDocumentArgs = {
  id: Scalars["String"];
};

export type QueryDocumentsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryEmojiArgs = {
  id: Scalars["String"];
};

export type QueryEmojisArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryFavoriteArgs = {
  id: Scalars["String"];
};

export type QueryFavoritesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryFigmaEmbedInfoArgs = {
  fileId: Scalars["String"];
  nodeId?: Maybe<Scalars["String"]>;
};

export type QueryIntegrationArgs = {
  id: Scalars["String"];
};

export type QueryIntegrationTemplateArgs = {
  id: Scalars["String"];
};

export type QueryIntegrationTemplatesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryIntegrationsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryIntegrationsSettingsArgs = {
  id: Scalars["String"];
};

export type QueryIssueArgs = {
  id: Scalars["String"];
};

export type QueryIssueImportFinishGithubOAuthArgs = {
  code: Scalars["String"];
};

export type QueryIssueLabelArgs = {
  id: Scalars["String"];
};

export type QueryIssueLabelsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueLabelFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryIssueRelationArgs = {
  id: Scalars["String"];
};

export type QueryIssueRelationsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryIssueSearchArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
  query: Scalars["String"];
};

export type QueryIssueVcsBranchSearchArgs = {
  branchName: Scalars["String"];
};

export type QueryIssuesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryNotificationArgs = {
  id: Scalars["String"];
};

export type QueryNotificationSubscriptionArgs = {
  id: Scalars["String"];
};

export type QueryNotificationSubscriptionsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryNotificationsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryOrganizationDomainClaimRequestArgs = {
  id: Scalars["String"];
};

export type QueryOrganizationExistsArgs = {
  urlKey: Scalars["String"];
};

export type QueryOrganizationInviteArgs = {
  id: Scalars["String"];
};

export type QueryOrganizationInviteDetailsArgs = {
  id: Scalars["String"];
};

export type QueryOrganizationInvitesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryProjectArgs = {
  id: Scalars["String"];
};

export type QueryProjectLinkArgs = {
  id: Scalars["String"];
};

export type QueryProjectLinksArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryProjectUpdateArgs = {
  id: Scalars["String"];
};

export type QueryProjectUpdateInteractionArgs = {
  id: Scalars["String"];
};

export type QueryProjectUpdateInteractionsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryProjectUpdatesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryProjectsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<ProjectFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryRoadmapArgs = {
  id: Scalars["String"];
};

export type QueryRoadmapToProjectArgs = {
  id: Scalars["String"];
};

export type QueryRoadmapToProjectsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryRoadmapsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QuerySsoUrlFromEmailArgs = {
  email: Scalars["String"];
  isDesktop?: Maybe<Scalars["Boolean"]>;
};

export type QueryTeamArgs = {
  id: Scalars["String"];
};

export type QueryTeamMembershipArgs = {
  id: Scalars["String"];
};

export type QueryTeamMembershipsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryTeamsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<TeamFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryTemplateArgs = {
  id: Scalars["String"];
};

export type QueryUserArgs = {
  id: Scalars["String"];
};

export type QueryUserAccountExistsArgs = {
  email: Scalars["String"];
};

export type QueryUsersArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<UserFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  includeDisabled?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryWebhookArgs = {
  id: Scalars["String"];
};

export type QueryWebhooksArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type QueryWorkflowStateArgs = {
  id: Scalars["String"];
};

export type QueryWorkflowStatesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<WorkflowStateFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type RateLimitPayload = {
  __typename?: "RateLimitPayload";
  /** The identifier we rate limit on. */
  identifier?: Maybe<Scalars["String"]>;
  /** The kind of rate limit selected for this request. */
  kind: Scalars["String"];
  /** The state of the rate limit. */
  limits: Array<RateLimitResultPayload>;
};

export type RateLimitResultPayload = {
  __typename?: "RateLimitResultPayload";
  /** The total allowed quantity for this type of limit. */
  allowedAmount: Scalars["Float"];
  /** The period in which the rate limit is fully replenished in ms. */
  period: Scalars["Float"];
  /** The remaining quantity for this type of limit after this request. */
  remainingAmount: Scalars["Float"];
  /** The requested quantity for this type of limit. */
  requestedAmount: Scalars["Float"];
  /** The timestamp after the rate limit is fully replenished as a UNIX timestamp. */
  reset: Scalars["Float"];
  /** What is being rate limited. */
  type: Scalars["String"];
};

/** A reaction associated with a comment or a project update. */
export type Reaction = Node & {
  __typename?: "Reaction";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** Name of the reaction's emoji. */
  emoji: Scalars["String"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /**
   * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
   *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** The user who reacted. */
  user: User;
};

export type ReactionConnection = {
  __typename?: "ReactionConnection";
  edges: Array<ReactionEdge>;
  nodes: Array<Reaction>;
  pageInfo: PageInfo;
};

export type ReactionCreateInput = {
  /** The comment to associate the reaction with. */
  commentId?: Maybe<Scalars["String"]>;
  /** The emoji the user reacted with. */
  emoji?: Maybe<Scalars["String"]>;
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one */
  id?: Maybe<Scalars["String"]>;
  /** The project update to associate the reaction with. */
  projectUpdateId?: Maybe<Scalars["String"]>;
};

export type ReactionEdge = {
  __typename?: "ReactionEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: Reaction;
};

export type ReactionPayload = {
  __typename?: "ReactionPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  reaction: Reaction;
  success: Scalars["Boolean"];
};

/** Comparator for relation existence. */
export type RelationExistsComparator = {
  /** Equals constraint. */
  eq?: Maybe<Scalars["Boolean"]>;
  /** Not equals constraint. */
  neq?: Maybe<Scalars["Boolean"]>;
};

/** A roadmap for projects. */
export type Roadmap = Node & {
  __typename?: "Roadmap";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The user who created the roadmap. */
  creator: User;
  /** The description of the roadmap. */
  description?: Maybe<Scalars["String"]>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The name of the roadmap. */
  name: Scalars["String"];
  /** The organization of the roadmap. */
  organization: Organization;
  /** The user who owns the roadmap. */
  owner: User;
  /** Projects associated with the roadmap. */
  projects: ProjectConnection;
  /** The roadmap's unique URL slug. */
  slugId: Scalars["String"];
  /**
   * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
   *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

/** A roadmap for projects. */
export type RoadmapProjectsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<ProjectFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** Roadmap collection filtering options. */
export type RoadmapCollectionFilter = {
  /** Compound filters, all of which need to be matched by the roadmap. */
  and?: Maybe<Array<RoadmapCollectionFilter>>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Filters that the roadmap creator must satisfy. */
  creator?: Maybe<UserFilter>;
  /** Filters that needs to be matched by all roadmaps. */
  every?: Maybe<RoadmapFilter>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Comparator for the collection length. */
  length?: Maybe<NumberComparator>;
  /** Comparator for the roadmap name. */
  name?: Maybe<StringComparator>;
  /** Compound filters, one of which need to be matched by the roadmap. */
  or?: Maybe<Array<RoadmapCollectionFilter>>;
  /** Comparator for the roadmap slug ID. */
  slugId?: Maybe<StringComparator>;
  /** Filters that needs to be matched by some roadmaps. */
  some?: Maybe<RoadmapFilter>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

export type RoadmapConnection = {
  __typename?: "RoadmapConnection";
  edges: Array<RoadmapEdge>;
  nodes: Array<Roadmap>;
  pageInfo: PageInfo;
};

export type RoadmapCreateInput = {
  /** The description of the roadmap. */
  description?: Maybe<Scalars["String"]>;
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The name of the roadmap. */
  name: Scalars["String"];
  /** The owner of the roadmap */
  ownerId?: Maybe<Scalars["String"]>;
};

export type RoadmapEdge = {
  __typename?: "RoadmapEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: Roadmap;
};

/** Roadmap filtering options. */
export type RoadmapFilter = {
  /** Compound filters, all of which need to be matched by the roadmap. */
  and?: Maybe<Array<RoadmapFilter>>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Filters that the roadmap creator must satisfy. */
  creator?: Maybe<UserFilter>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Comparator for the roadmap name. */
  name?: Maybe<StringComparator>;
  /** Compound filters, one of which need to be matched by the roadmap. */
  or?: Maybe<Array<RoadmapFilter>>;
  /** Comparator for the roadmap slug ID. */
  slugId?: Maybe<StringComparator>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

export type RoadmapPayload = {
  __typename?: "RoadmapPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** The roadmap that was created or updated. */
  roadmap: Roadmap;
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** Join table between projects and roadmaps */
export type RoadmapToProject = Node & {
  __typename?: "RoadmapToProject";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The project that the roadmap is associated with. */
  project: Project;
  /** The roadmap that the project is associated with. */
  roadmap: Roadmap;
  /** The sort order of the project within the roadmap. */
  sortOrder: Scalars["String"];
  /**
   * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
   *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

export type RoadmapToProjectConnection = {
  __typename?: "RoadmapToProjectConnection";
  edges: Array<RoadmapToProjectEdge>;
  nodes: Array<RoadmapToProject>;
  pageInfo: PageInfo;
};

export type RoadmapToProjectCreateInput = {
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The identifier of the project. */
  projectId: Scalars["String"];
  /** The identifier of the roadmap. */
  roadmapId: Scalars["String"];
  /** The sort order for the project within its organization. */
  sortOrder?: Maybe<Scalars["Float"]>;
};

export type RoadmapToProjectEdge = {
  __typename?: "RoadmapToProjectEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: RoadmapToProject;
};

export type RoadmapToProjectPayload = {
  __typename?: "RoadmapToProjectPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** The roadmapToProject that was created or updated. */
  roadmapToProject: RoadmapToProject;
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type RoadmapToProjectUpdateInput = {
  /** The sort order for the project within its organization. */
  sortOrder?: Maybe<Scalars["Float"]>;
};

export type RoadmapUpdateInput = {
  /** The description of the roadmap. */
  description?: Maybe<Scalars["String"]>;
  /** The name of the roadmap. */
  name?: Maybe<Scalars["String"]>;
  /** The owner of the roadmap */
  ownerId?: Maybe<Scalars["String"]>;
};

export type SamlConfiguration = {
  __typename?: "SamlConfiguration";
  /** The issuer's custom entity ID. */
  issuerEntityId?: Maybe<Scalars["String"]>;
  /** Binding method for authentication call. Can be either `post` (default) or `redirect`. */
  ssoBinding?: Maybe<Scalars["String"]>;
  /** Sign in endpoint URL for the identity provider. */
  ssoEndpoint?: Maybe<Scalars["String"]>;
  /** The algorithm of the Signing Certificate. Can be one of `sha1`, `sha256` (default), or `sha512`. */
  ssoSignAlgo?: Maybe<Scalars["String"]>;
  /** X.509 Signing Certificate in string form. */
  ssoSigningCert?: Maybe<Scalars["String"]>;
};

export type SamlConfigurationInput = {
  /** The issuer's custom entity ID. */
  issuerEntityId?: Maybe<Scalars["String"]>;
  /** Binding method for authentication call. Can be either `post` (default) or `redirect`. */
  ssoBinding?: Maybe<Scalars["String"]>;
  /** Sign in endpoint URL for the identity provider. */
  ssoEndpoint?: Maybe<Scalars["String"]>;
  /** The algorithm of the Signing Certificate. Can be one of `sha1`, `sha256` (default), or `sha512`. */
  ssoSignAlgo?: Maybe<Scalars["String"]>;
  /** X.509 Signing Certificate in string form. */
  ssoSigningCert?: Maybe<Scalars["String"]>;
};

/** The organization's SAML configuration */
export type SamlConfigurationPayload = {
  __typename?: "SamlConfigurationPayload";
  /** The issuer's custom entity ID. */
  issuerEntityId?: Maybe<Scalars["String"]>;
  /** Binding method for authentication call. Can be either `post` (default) or `redirect`. */
  ssoBinding?: Maybe<Scalars["String"]>;
  /** Sign in endpoint URL for the identity provider. */
  ssoEndpoint?: Maybe<Scalars["String"]>;
  /** The algorithm of the Signing Certificate. Can be one of `sha1`, `sha256` (default), or `sha512`. */
  ssoSignAlgo?: Maybe<Scalars["String"]>;
};

/** Sentry specific settings. */
export type SentrySettings = {
  __typename?: "SentrySettings";
  /** The slug of the Sentry organization being connected. */
  organizationSlug: Scalars["String"];
};

export type SentrySettingsInput = {
  /** The slug of the Sentry organization being connected. */
  organizationSlug: Scalars["String"];
};

export enum SlaStatus {
  Breached = "Breached",
  Completed = "Completed",
  HighRisk = "HighRisk",
  LowRisk = "LowRisk",
  MediumRisk = "MediumRisk",
}

/** Comparator for sla status. */
export type SlaStatusComparator = {
  /** Equals constraint. */
  eq?: Maybe<SlaStatus>;
  /** In-array constraint. */
  in?: Maybe<Array<SlaStatus>>;
  /** Not-equals constraint. */
  neq?: Maybe<SlaStatus>;
  /** Not-in-array constraint. */
  nin?: Maybe<Array<SlaStatus>>;
  /** Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values. */
  null?: Maybe<Scalars["Boolean"]>;
};

/** Slack notification specific settings. */
export type SlackPostSettings = {
  __typename?: "SlackPostSettings";
  channel: Scalars["String"];
  channelId: Scalars["String"];
  configurationUrl: Scalars["String"];
};

export type SlackPostSettingsInput = {
  channel: Scalars["String"];
  channelId: Scalars["String"];
  configurationUrl: Scalars["String"];
};

/** Comparator for `sourceType` field. */
export type SourceTypeComparator = {
  /** Contains constraint. Matches any values that contain the given string. */
  contains?: Maybe<Scalars["String"]>;
  /** Contains case insensitive constraint. Matches any values that contain the given string case insensitive. */
  containsIgnoreCase?: Maybe<Scalars["String"]>;
  /** Ends with constraint. Matches any values that end with the given string. */
  endsWith?: Maybe<Scalars["String"]>;
  /** Equals constraint. */
  eq?: Maybe<Scalars["String"]>;
  /** Equals case insensitive. Matches any values that matches the given string case insensitive. */
  eqIgnoreCase?: Maybe<Scalars["String"]>;
  /** In-array constraint. */
  in?: Maybe<Array<Scalars["String"]>>;
  /** Not-equals constraint. */
  neq?: Maybe<Scalars["String"]>;
  /** Not-equals case insensitive. Matches any values that don't match the given string case insensitive. */
  neqIgnoreCase?: Maybe<Scalars["String"]>;
  /** Not-in-array constraint. */
  nin?: Maybe<Array<Scalars["String"]>>;
  /** Doesn't contain constraint. Matches any values that don't contain the given string. */
  notContains?: Maybe<Scalars["String"]>;
  /** Doesn't contain case insensitive constraint. Matches any values that don't contain the given string case insensitive. */
  notContainsIgnoreCase?: Maybe<Scalars["String"]>;
  /** Doesn't end with constraint. Matches any values that don't end with the given string. */
  notEndsWith?: Maybe<Scalars["String"]>;
  /** Doesn't start with constraint. Matches any values that don't start with the given string. */
  notStartsWith?: Maybe<Scalars["String"]>;
  /** Starts with constraint. Matches any values that start with the given string. */
  startsWith?: Maybe<Scalars["String"]>;
};

export type SsoUrlFromEmailResponse = {
  __typename?: "SsoUrlFromEmailResponse";
  /** SAML SSO sign-in URL. */
  samlSsoUrl: Scalars["String"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** Comparator for strings. */
export type StringComparator = {
  /** Contains constraint. Matches any values that contain the given string. */
  contains?: Maybe<Scalars["String"]>;
  /** Contains case insensitive constraint. Matches any values that contain the given string case insensitive. */
  containsIgnoreCase?: Maybe<Scalars["String"]>;
  /** Ends with constraint. Matches any values that end with the given string. */
  endsWith?: Maybe<Scalars["String"]>;
  /** Equals constraint. */
  eq?: Maybe<Scalars["String"]>;
  /** Equals case insensitive. Matches any values that matches the given string case insensitive. */
  eqIgnoreCase?: Maybe<Scalars["String"]>;
  /** In-array constraint. */
  in?: Maybe<Array<Scalars["String"]>>;
  /** Not-equals constraint. */
  neq?: Maybe<Scalars["String"]>;
  /** Not-equals case insensitive. Matches any values that don't match the given string case insensitive. */
  neqIgnoreCase?: Maybe<Scalars["String"]>;
  /** Not-in-array constraint. */
  nin?: Maybe<Array<Scalars["String"]>>;
  /** Doesn't contain constraint. Matches any values that don't contain the given string. */
  notContains?: Maybe<Scalars["String"]>;
  /** Doesn't contain case insensitive constraint. Matches any values that don't contain the given string case insensitive. */
  notContainsIgnoreCase?: Maybe<Scalars["String"]>;
  /** Doesn't end with constraint. Matches any values that don't end with the given string. */
  notEndsWith?: Maybe<Scalars["String"]>;
  /** Doesn't start with constraint. Matches any values that don't start with the given string. */
  notStartsWith?: Maybe<Scalars["String"]>;
  /** Starts with constraint. Matches any values that start with the given string. */
  startsWith?: Maybe<Scalars["String"]>;
};

/**
 * Contains either the full serialized state of the application or delta packets that the requester can
 *   apply to the local data set in order to be up-to-date.
 */
export type SyncResponse = {
  __typename?: "SyncResponse";
  /** The version of the remote database. Incremented by 1 for each migration run on the database. */
  databaseVersion: Scalars["Float"];
  /**
   * JSON serialized delta changes that the client can apply to its local state
   *     in order to catch up with the state of the world.
   */
  delta?: Maybe<Scalars["String"]>;
  /** The last sync id covered by the response. */
  lastSyncId: Scalars["Float"];
  /**
   * The full state of the organization as a serialized JSON object.
   *     Mutually exclusive with the delta property
   */
  state?: Maybe<Scalars["String"]>;
  /** The sync groups that the user is subscribed to. */
  subscribedSyncGroups: Array<Scalars["String"]>;
};

export type SynchronizedPayload = {
  __typename?: "SynchronizedPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
};

/** An organizational unit that contains issues. */
export type Team = Node & {
  __typename?: "Team";
  /** Team's currently active cycle. */
  activeCycle?: Maybe<Cycle>;
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** Period after which automatically closed and completed issues are automatically archived in months. */
  autoArchivePeriod: Scalars["Float"];
  /** Period after which issues are automatically closed in months. Null/undefined means disabled. */
  autoClosePeriod?: Maybe<Scalars["Float"]>;
  /** The canceled workflow state which auto closed issues will be set to. Defaults to the first canceled state. */
  autoCloseStateId?: Maybe<Scalars["String"]>;
  /** The team's color. */
  color?: Maybe<Scalars["String"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** Calendar feed URL (iCal) for cycles. */
  cycleCalenderUrl: Scalars["String"];
  /** The cooldown time after each cycle in weeks. */
  cycleCooldownTime: Scalars["Float"];
  /** The duration of a cycle in weeks. */
  cycleDuration: Scalars["Float"];
  /** Auto assign completed issues to current cycle. */
  cycleIssueAutoAssignCompleted: Scalars["Boolean"];
  /** Auto assign started issues to current cycle. */
  cycleIssueAutoAssignStarted: Scalars["Boolean"];
  /** Only allow issues issues with cycles in Active Issues. */
  cycleLockToActive: Scalars["Boolean"];
  /** The day of the week that a new cycle starts. */
  cycleStartDay: Scalars["Float"];
  /** Cycles associated with the team. */
  cycles: CycleConnection;
  /** Whether the team uses cycles. */
  cyclesEnabled: Scalars["Boolean"];
  /** What to use as an default estimate for unestimated issues. */
  defaultIssueEstimate: Scalars["Float"];
  /** The default workflow state into which issues are set when they are opened by team members. */
  defaultIssueState?: Maybe<WorkflowState>;
  /** The default template to use for new issues created by members of the team. */
  defaultTemplateForMembers?: Maybe<Template>;
  /**
   * The id of the default template to use for new issues created by members of the team.
   * @deprecated Use defaultTemplateForMembers instead
   */
  defaultTemplateForMembersId?: Maybe<Scalars["String"]>;
  /** The default template to use for new issues created by non-members of the team. */
  defaultTemplateForNonMembers?: Maybe<Template>;
  /**
   * The id of the default template to use for new issues created by non-members of the team.
   * @deprecated Use defaultTemplateForNonMembers instead
   */
  defaultTemplateForNonMembersId?: Maybe<Scalars["String"]>;
  /** The team's description. */
  description?: Maybe<Scalars["String"]>;
  /** The workflow state into which issues are moved when a PR has been opened as draft. */
  draftWorkflowState?: Maybe<WorkflowState>;
  /** Whether to group recent issue history entries. */
  groupIssueHistory: Scalars["Boolean"];
  /** The icon of the team. */
  icon?: Maybe<Scalars["String"]>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** Settings for all integrations associated with that team. */
  integrationsSettings?: Maybe<IntegrationsSettings>;
  /** Unique hash for the team to be used in invite URLs. */
  inviteHash: Scalars["String"];
  /** Whether to allow zeros in issues estimates. */
  issueEstimationAllowZero: Scalars["Boolean"];
  /** Whether to add additional points to the estimate scale. */
  issueEstimationExtended: Scalars["Boolean"];
  /** The issue estimation type to use. */
  issueEstimationType: Scalars["String"];
  /** Whether issues without priority should be sorted first. */
  issueOrderingNoPriorityFirst: Scalars["Boolean"];
  /** Whether to move issues to bottom of the column when changing state. */
  issueSortOrderDefaultToBottom: Scalars["Boolean"];
  /** Issues associated with the team. */
  issues: IssueConnection;
  /** The team's unique key. The key is used in URLs. */
  key: Scalars["String"];
  /** Labels associated with the team. */
  labels: IssueLabelConnection;
  /** The workflow state into which issues are moved when they are marked as a duplicate of another issue. Defaults to the first canceled state. */
  markedAsDuplicateWorkflowState?: Maybe<WorkflowState>;
  /** Users who are members of this team. */
  members: UserConnection;
  /** Memberships associated with the team. For easier access of the same data, use `members` query. */
  memberships: TeamMembershipConnection;
  /** The workflow state into which issues are moved when a PR has been merged. */
  mergeWorkflowState?: Maybe<WorkflowState>;
  /** The team's name. */
  name: Scalars["String"];
  /** The organization that the team is associated with. */
  organization: Organization;
  /** Whether the team is private or not. */
  private: Scalars["Boolean"];
  /** Projects associated with the team. */
  projects: ProjectConnection;
  /** Whether an issue needs to have a priority set before leaving triage */
  requirePriorityToLeaveTriage: Scalars["Boolean"];
  /** The workflow state into which issues are moved when a review has been requested for the PR. */
  reviewWorkflowState?: Maybe<WorkflowState>;
  /** Whether to send new issue comment notifications to Slack. */
  slackIssueComments: Scalars["Boolean"];
  /** Whether to send new issue status updates to Slack. */
  slackIssueStatuses: Scalars["Boolean"];
  /** Whether to send new issue notifications to Slack. */
  slackNewIssue: Scalars["Boolean"];
  /** The workflow state into which issues are moved when a PR has been opened. */
  startWorkflowState?: Maybe<WorkflowState>;
  /** The states that define the workflow associated with the team. */
  states: WorkflowStateConnection;
  /** Templates associated with the team. */
  templates: TemplateConnection;
  /** The timezone of the team. Defaults to "America/Los_Angeles" */
  timezone: Scalars["String"];
  /** Whether triage mode is enabled for the team or not. */
  triageEnabled: Scalars["Boolean"];
  /** The workflow state into which issues are set when they are opened by non-team members or integrations if triage is enabled. */
  triageIssueState?: Maybe<WorkflowState>;
  /** How many upcoming cycles to create. */
  upcomingCycleCount: Scalars["Float"];
  /**
   * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
   *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** Webhooks associated with the team. */
  webhooks: WebhookConnection;
};

/** An organizational unit that contains issues. */
export type TeamCyclesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CycleFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** An organizational unit that contains issues. */
export type TeamIssuesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** An organizational unit that contains issues. */
export type TeamLabelsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueLabelFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** An organizational unit that contains issues. */
export type TeamMembersArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<UserFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  includeDisabled?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** An organizational unit that contains issues. */
export type TeamMembershipsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** An organizational unit that contains issues. */
export type TeamProjectsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<ProjectFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** An organizational unit that contains issues. */
export type TeamStatesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<WorkflowStateFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** An organizational unit that contains issues. */
export type TeamTemplatesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** An organizational unit that contains issues. */
export type TeamWebhooksArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type TeamConnection = {
  __typename?: "TeamConnection";
  edges: Array<TeamEdge>;
  nodes: Array<Team>;
  pageInfo: PageInfo;
};

export type TeamCreateInput = {
  /** Period after which closed and completed issues are automatically archived, in months. 0 means disabled. */
  autoArchivePeriod?: Maybe<Scalars["Float"]>;
  /** Period after which issues are automatically closed, in months. */
  autoClosePeriod?: Maybe<Scalars["Float"]>;
  /** The canceled workflow state which auto closed issues will be set to. */
  autoCloseStateId?: Maybe<Scalars["String"]>;
  /** The color of the team. */
  color?: Maybe<Scalars["String"]>;
  /** The cooldown time after each cycle in weeks. */
  cycleCooldownTime?: Maybe<Scalars["Int"]>;
  /** The duration of each cycle in weeks. */
  cycleDuration?: Maybe<Scalars["Int"]>;
  /** Auto assign completed issues to current active cycle setting. */
  cycleIssueAutoAssignCompleted?: Maybe<Scalars["Boolean"]>;
  /** Auto assign started issues to current active cycle setting. */
  cycleIssueAutoAssignStarted?: Maybe<Scalars["Boolean"]>;
  /** Only allow issues issues with cycles in Active Issues. */
  cycleLockToActive?: Maybe<Scalars["Boolean"]>;
  /** The day of the week that a new cycle starts. */
  cycleStartDay?: Maybe<Scalars["Float"]>;
  /** Whether the team uses cycles. */
  cyclesEnabled?: Maybe<Scalars["Boolean"]>;
  /** What to use as an default estimate for unestimated issues. */
  defaultIssueEstimate?: Maybe<Scalars["Float"]>;
  /** The identifier of the default template for members of this team. */
  defaultTemplateForMembersId?: Maybe<Scalars["String"]>;
  /** The identifier of the default template for non-members of this team. */
  defaultTemplateForNonMembersId?: Maybe<Scalars["String"]>;
  /** The description of the team. */
  description?: Maybe<Scalars["String"]>;
  /** Whether to group recent issue history entries. */
  groupIssueHistory?: Maybe<Scalars["Boolean"]>;
  /** The icon of the team. */
  icon?: Maybe<Scalars["String"]>;
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** Whether to allow zeros in issues estimates. */
  issueEstimationAllowZero?: Maybe<Scalars["Boolean"]>;
  /** Whether to add additional points to the estimate scale. */
  issueEstimationExtended?: Maybe<Scalars["Boolean"]>;
  /** The issue estimation type to use. */
  issueEstimationType?: Maybe<Scalars["String"]>;
  /** Whether issues without priority should be sorted first. */
  issueOrderingNoPriorityFirst?: Maybe<Scalars["Boolean"]>;
  /** Whether to move issues to bottom of the column when changing state. */
  issueSortOrderDefaultToBottom?: Maybe<Scalars["Boolean"]>;
  /** The key of the team. If not given, the key will be generated based on the name of the team. */
  key?: Maybe<Scalars["String"]>;
  /** The workflow state into which issues are moved when they are marked as a duplicate of another issue. */
  markedAsDuplicateWorkflowStateId?: Maybe<Scalars["String"]>;
  /** The name of the team. */
  name: Scalars["String"];
  /** The organization associated with the team. */
  organizationId?: Maybe<Scalars["String"]>;
  /** Internal. Whether the team is private or not. */
  private?: Maybe<Scalars["Boolean"]>;
  /** Whether an issue needs to have a priority set before leaving triage. */
  requirePriorityToLeaveTriage?: Maybe<Scalars["Boolean"]>;
  /** The timezone of the team. */
  timezone?: Maybe<Scalars["String"]>;
  /** Whether triage mode is enabled for the team. */
  triageEnabled?: Maybe<Scalars["Boolean"]>;
  /** How many upcoming cycles to create. */
  upcomingCycleCount?: Maybe<Scalars["Float"]>;
};

export type TeamEdge = {
  __typename?: "TeamEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: Team;
};

/** Team filtering options. */
export type TeamFilter = {
  /** Compound filters, all of which need to be matched by the team. */
  and?: Maybe<Array<TeamFilter>>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Comparator for the team description. */
  description?: Maybe<NullableStringComparator>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Filters that the teams issues must satisfy. */
  issues?: Maybe<IssueCollectionFilter>;
  /** Comparator for the team key. */
  key?: Maybe<StringComparator>;
  /** Comparator for the team name. */
  name?: Maybe<StringComparator>;
  /** Compound filters, one of which need to be matched by the team. */
  or?: Maybe<Array<TeamFilter>>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

/** Defines the membership of a user to a team. */
export type TeamMembership = Node & {
  __typename?: "TeamMembership";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** Whether the user is the owner of the team */
  owner?: Maybe<Scalars["Boolean"]>;
  /** The order of the item in the users team list. */
  sortOrder: Scalars["Float"];
  /** The team that the membership is associated with. */
  team: Team;
  /**
   * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
   *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** The user that the membership is associated with. */
  user: User;
};

export type TeamMembershipConnection = {
  __typename?: "TeamMembershipConnection";
  edges: Array<TeamMembershipEdge>;
  nodes: Array<TeamMembership>;
  pageInfo: PageInfo;
};

export type TeamMembershipCreateInput = {
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** Internal. Whether the user is the owner of the team. */
  owner?: Maybe<Scalars["Boolean"]>;
  /** The position of the item in the users list. */
  sortOrder?: Maybe<Scalars["Float"]>;
  /** The identifier of the team associated with the membership. */
  teamId: Scalars["String"];
  /** The identifier of the user associated with the membership. */
  userId: Scalars["String"];
};

export type TeamMembershipEdge = {
  __typename?: "TeamMembershipEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: TeamMembership;
};

export type TeamMembershipPayload = {
  __typename?: "TeamMembershipPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
  /** The team membership that was created or updated. */
  teamMembership?: Maybe<TeamMembership>;
};

export type TeamMembershipUpdateInput = {
  /** Internal. Whether the user is the owner of the team. */
  owner?: Maybe<Scalars["Boolean"]>;
  /** The position of the item in the users list. */
  sortOrder?: Maybe<Scalars["Float"]>;
};

/** A team notification subscription. */
export type TeamNotificationSubscription = Entity &
  Node &
  NotificationSubscription & {
    __typename?: "TeamNotificationSubscription";
    /** The time at which the entity was archived. Null if the entity has not been archived. */
    archivedAt?: Maybe<Scalars["DateTime"]>;
    /** The time at which the entity was created. */
    createdAt: Scalars["DateTime"];
    /** The unique identifier of the entity. */
    id: Scalars["ID"];
    /** Subscribed project. */
    project?: Maybe<Project>;
    /** The team subscribed to. */
    team: Team;
    /** The type of the subscription. */
    type: Scalars["String"];
    /**
     * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
     *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
     *     been updated after creation.
     */
    updatedAt: Scalars["DateTime"];
    /** The user associated with notification subscriptions. */
    user: User;
  };

export type TeamPayload = {
  __typename?: "TeamPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
  /** The team that was created or updated. */
  team?: Maybe<Team>;
};

export type TeamUpdateInput = {
  /** Period after which closed and completed issues are automatically archived, in months. */
  autoArchivePeriod?: Maybe<Scalars["Float"]>;
  /** Period after which issues are automatically closed, in months. */
  autoClosePeriod?: Maybe<Scalars["Float"]>;
  /** The canceled workflow state which auto closed issues will be set to. */
  autoCloseStateId?: Maybe<Scalars["String"]>;
  /** The color of the team. */
  color?: Maybe<Scalars["String"]>;
  /** The cooldown time after each cycle in weeks. */
  cycleCooldownTime?: Maybe<Scalars["Int"]>;
  /** The duration of each cycle in weeks. */
  cycleDuration?: Maybe<Scalars["Int"]>;
  /** Whether the first cycle should start in the current or the next week. */
  cycleEnabledStartWeek?: Maybe<Scalars["String"]>;
  /** Auto assign completed issues to current active cycle setting. */
  cycleIssueAutoAssignCompleted?: Maybe<Scalars["Boolean"]>;
  /** Auto assign started issues to current active cycle setting. */
  cycleIssueAutoAssignStarted?: Maybe<Scalars["Boolean"]>;
  /** Only allow issues with cycles in Active Issues. */
  cycleLockToActive?: Maybe<Scalars["Boolean"]>;
  /** The day of the week that a new cycle starts. */
  cycleStartDay?: Maybe<Scalars["Float"]>;
  /** Whether the team uses cycles. */
  cyclesEnabled?: Maybe<Scalars["Boolean"]>;
  /** What to use as an default estimate for unestimated issues. */
  defaultIssueEstimate?: Maybe<Scalars["Float"]>;
  /** Default status for newly created issues. */
  defaultIssueStateId?: Maybe<Scalars["String"]>;
  /** The identifier of the default template for members of this team. */
  defaultTemplateForMembersId?: Maybe<Scalars["String"]>;
  /** The identifier of the default template for non-members of this team. */
  defaultTemplateForNonMembersId?: Maybe<Scalars["String"]>;
  /** The description of the team. */
  description?: Maybe<Scalars["String"]>;
  /** The workflow state into which issues are moved when a draft PR has been opened. */
  draftWorkflowStateId?: Maybe<Scalars["String"]>;
  /** Whether to group recent issue history entries. */
  groupIssueHistory?: Maybe<Scalars["Boolean"]>;
  /** The icon of the team. */
  icon?: Maybe<Scalars["String"]>;
  /** Whether to allow zeros in issues estimates. */
  issueEstimationAllowZero?: Maybe<Scalars["Boolean"]>;
  /** Whether to add additional points to the estimate scale. */
  issueEstimationExtended?: Maybe<Scalars["Boolean"]>;
  /** The issue estimation type to use. */
  issueEstimationType?: Maybe<Scalars["String"]>;
  /** Whether issues without priority should be sorted first. */
  issueOrderingNoPriorityFirst?: Maybe<Scalars["Boolean"]>;
  /** Whether to move issues to bottom of the column when changing state. */
  issueSortOrderDefaultToBottom?: Maybe<Scalars["Boolean"]>;
  /** The key of the team. */
  key?: Maybe<Scalars["String"]>;
  /** The workflow state into which issues are moved when they are marked as a duplicate of another issue. */
  markedAsDuplicateWorkflowStateId?: Maybe<Scalars["String"]>;
  /** The workflow state into which issues are moved when a PR has been merged. */
  mergeWorkflowStateId?: Maybe<Scalars["String"]>;
  /** The name of the team. */
  name?: Maybe<Scalars["String"]>;
  /** Whether the team is private or not. */
  private?: Maybe<Scalars["Boolean"]>;
  /** Whether an issue needs to have a priority set before leaving triage. */
  requirePriorityToLeaveTriage?: Maybe<Scalars["Boolean"]>;
  /** The workflow state into which issues are moved when a review has been requested for the PR. */
  reviewWorkflowStateId?: Maybe<Scalars["String"]>;
  /** Whether to send new issue comment notifications to Slack. */
  slackIssueComments?: Maybe<Scalars["Boolean"]>;
  /** Whether to send issue status update notifications to Slack. */
  slackIssueStatuses?: Maybe<Scalars["Boolean"]>;
  /** Whether to send new issue notifications to Slack. */
  slackNewIssue?: Maybe<Scalars["Boolean"]>;
  /** The workflow state into which issues are moved when a PR has been opened. */
  startWorkflowStateId?: Maybe<Scalars["String"]>;
  /** The timezone of the team. */
  timezone?: Maybe<Scalars["String"]>;
  /** Whether triage mode is enabled for the team. */
  triageEnabled?: Maybe<Scalars["Boolean"]>;
  /** How many upcoming cycles to create. */
  upcomingCycleCount?: Maybe<Scalars["Float"]>;
};

/** A template object used for creating entities faster. */
export type Template = Node & {
  __typename?: "Template";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The user who created the template. */
  creator?: Maybe<User>;
  /** Template description. */
  description?: Maybe<Scalars["String"]>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The user who last updated the template. */
  lastUpdatedBy?: Maybe<User>;
  /** The name of the template. */
  name: Scalars["String"];
  /** The organization that the template is associated with. If null, the template is associated with a particular team. */
  organization?: Maybe<Organization>;
  /** The team that the template is associated with. If null, the template is global to the workspace. */
  team?: Maybe<Team>;
  /** Template data. */
  templateData: Scalars["JSON"];
  /** The entity type this template is for. */
  type: Scalars["String"];
  /**
   * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
   *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

export type TemplateConnection = {
  __typename?: "TemplateConnection";
  edges: Array<TemplateEdge>;
  nodes: Array<Template>;
  pageInfo: PageInfo;
};

export type TemplateCreateInput = {
  /** The template description. */
  description?: Maybe<Scalars["String"]>;
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The template name. */
  name: Scalars["String"];
  /** The identifier or key of the team associated with the template. If not given, the template will be shared across all teams. */
  teamId?: Maybe<Scalars["String"]>;
  /** The template data as JSON encoded attributes of the type of entity, such as an issue. */
  templateData: Scalars["JSON"];
  /** The template type, e.g. 'issue'. */
  type: Scalars["String"];
};

export type TemplateEdge = {
  __typename?: "TemplateEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: Template;
};

export type TemplatePayload = {
  __typename?: "TemplatePayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
  /** The template that was created or updated. */
  template: Template;
};

export type TemplateUpdateInput = {
  /** The template description. */
  description?: Maybe<Scalars["String"]>;
  /** The template name. */
  name?: Maybe<Scalars["String"]>;
  /** The identifier or key of the team associated with the template. If set to null, the template will be shared across all teams. */
  teamId?: Maybe<Scalars["String"]>;
  /** The template data as JSON encoded attributes of the type of entity, such as an issue. */
  templateData?: Maybe<Scalars["JSON"]>;
};

/** Comparator for timeless dates. */
export type TimelessDateComparator = {
  /** Equals constraint. */
  eq?: Maybe<Scalars["TimelessDate"]>;
  /** Greater-than constraint. Matches any values that are greater than the given value. */
  gt?: Maybe<Scalars["TimelessDate"]>;
  /** Greater-than-or-equal constraint. Matches any values that are greater than or equal to the given value. */
  gte?: Maybe<Scalars["TimelessDate"]>;
  /** In-array constraint. */
  in?: Maybe<Array<Scalars["TimelessDate"]>>;
  /** Less-than constraint. Matches any values that are less than the given value. */
  lt?: Maybe<Scalars["TimelessDate"]>;
  /** Less-than-or-equal constraint. Matches any values that are less than or equal to the given value. */
  lte?: Maybe<Scalars["TimelessDate"]>;
  /** Not-equals constraint. */
  neq?: Maybe<Scalars["TimelessDate"]>;
  /** Not-in-array constraint. */
  nin?: Maybe<Array<Scalars["TimelessDate"]>>;
};

export type TokenUserAccountAuthInput = {
  /** The email which to login via the magic login code. */
  email: Scalars["String"];
  /** The identifiers of the teams to auto-join. */
  teamIdsToJoin?: Maybe<Array<Scalars["String"]>>;
  /** The timezone of the user's browser. */
  timezone: Scalars["String"];
  /** The magic login code. */
  token: Scalars["String"];
};

export type UpdateOrganizationInput = {
  /** List of services that are allowed to be used for login. */
  allowedAuthServices?: Maybe<Array<Scalars["String"]>>;
  /** How git branches are formatted. If null, default formatting will be used. */
  gitBranchFormat?: Maybe<Scalars["String"]>;
  /** Whether the Git integration linkback messages should be sent for private repositories. */
  gitLinkbackMessagesEnabled?: Maybe<Scalars["Boolean"]>;
  /** Whether the Git integration linkback messages should be sent for public repositories. */
  gitPublicLinkbackMessagesEnabled?: Maybe<Scalars["Boolean"]>;
  /** Linear Preview feature flags */
  linearPreviewFlags?: Maybe<Scalars["JSONObject"]>;
  /** The logo of the organization. */
  logoUrl?: Maybe<Scalars["String"]>;
  /** The name of the organization. */
  name?: Maybe<Scalars["String"]>;
  /** Whether the organization has opted for having to approve all OAuth applications for install. */
  oauthAppReview?: Maybe<Scalars["Boolean"]>;
  /** The day at which project updates are sent. */
  projectUpdateRemindersDay?: Maybe<Day>;
  /** The hour at which project updates are sent. */
  projectUpdateRemindersHour?: Maybe<Scalars["Float"]>;
  /** The frequency at which project updates are sent. */
  projectUpdatesReminderFrequency?: Maybe<ProjectUpdateReminderFrequency>;
  /** Whether the organization has opted for reduced customer support attachment information. */
  reducedPersonalInformation?: Maybe<Scalars["Boolean"]>;
  /** Whether the organization is using roadmap. */
  roadmapEnabled?: Maybe<Scalars["Boolean"]>;
  /** Internal. Whether SLAs have been enabled for the organization. */
  slaEnabled?: Maybe<Scalars["Boolean"]>;
  /** The URL key of the organization. */
  urlKey?: Maybe<Scalars["String"]>;
};

export type UpdateUserInput = {
  /** Whether the user account is active. */
  active?: Maybe<Scalars["Boolean"]>;
  /** Whether the user account has admin privileges. */
  admin?: Maybe<Scalars["Boolean"]>;
  /** The avatar image URL of the user. */
  avatarUrl?: Maybe<Scalars["String"]>;
  /** The user description or a short bio. */
  description?: Maybe<Scalars["String"]>;
  /** Reason for deactivation. */
  disableReason?: Maybe<Scalars["String"]>;
  /** The display name of the user. */
  displayName?: Maybe<Scalars["String"]>;
  /** The name of the user. */
  name?: Maybe<Scalars["String"]>;
  /** The emoji part of the user status. */
  statusEmoji?: Maybe<Scalars["String"]>;
  /** The label part of the user status. */
  statusLabel?: Maybe<Scalars["String"]>;
  /** When the user status should be cleared. */
  statusUntilAt?: Maybe<Scalars["DateTime"]>;
  /** The local timezone of the user. */
  timezone?: Maybe<Scalars["String"]>;
};

/** Object representing Google Cloud upload policy, plus additional data. */
export type UploadFile = {
  __typename?: "UploadFile";
  /** The asset URL for the uploaded file. (assigned automatically) */
  assetUrl: Scalars["String"];
  /** The content type. */
  contentType: Scalars["String"];
  /** The filename. */
  filename: Scalars["String"];
  headers: Array<UploadFileHeader>;
  metaData?: Maybe<Scalars["JSONObject"]>;
  /** The size of the uploaded file. */
  size: Scalars["Int"];
  /** The signed URL the for the uploaded file. (assigned automatically) */
  uploadUrl: Scalars["String"];
};

export type UploadFileHeader = {
  __typename?: "UploadFileHeader";
  /** Upload file header key. */
  key: Scalars["String"];
  /** Upload file header value. */
  value: Scalars["String"];
};

export type UploadPayload = {
  __typename?: "UploadPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
  /** Object describing the file to be uploaded. */
  uploadFile?: Maybe<UploadFile>;
};

/** A user that has access to the the resources of an organization. */
export type User = Node & {
  __typename?: "User";
  /** Whether the user account is active or disabled (suspended). */
  active: Scalars["Boolean"];
  /** Whether the user is an organization administrator. */
  admin: Scalars["Boolean"];
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** Issues assigned to the user. */
  assignedIssues: IssueConnection;
  /** An URL to the user's avatar image. */
  avatarUrl?: Maybe<Scalars["String"]>;
  /** Hash for the user to be used in calendar URLs. */
  calendarHash?: Maybe<Scalars["String"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** Number of issues created. */
  createdIssueCount: Scalars["Int"];
  /** Issues created by the user. */
  createdIssues: IssueConnection;
  /** A short description of the user, either its title or bio. */
  description?: Maybe<Scalars["String"]>;
  /** Reason why is the account disabled. */
  disableReason?: Maybe<Scalars["String"]>;
  /** The user's display (nick) name. Unique within each organization. */
  displayName: Scalars["String"];
  /** The user's email address. */
  email: Scalars["String"];
  /** Whether the user is a guest in the workspace and limited to accessing a subset of teams. */
  guest: Scalars["Boolean"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** Unique hash for the user to be used in invite URLs. */
  inviteHash: Scalars["String"];
  /** Whether the user is the currently authenticated user. */
  isMe: Scalars["Boolean"];
  /** The last time the user was seen online. If null, the user is currently online. */
  lastSeen?: Maybe<Scalars["DateTime"]>;
  /** The user's full name. */
  name: Scalars["String"];
  /** Organization the user belongs to. */
  organization: Organization;
  /** The emoji to represent the user current status. */
  statusEmoji?: Maybe<Scalars["String"]>;
  /** The label of the user current status. */
  statusLabel?: Maybe<Scalars["String"]>;
  /** A date at which the user current status should be cleared. */
  statusUntilAt?: Maybe<Scalars["DateTime"]>;
  /** Memberships associated with the user. For easier access of the same data, use `teams` query. */
  teamMemberships: TeamMembershipConnection;
  /** Teams the user is part of. */
  teams: TeamConnection;
  /** The local timezone of the user. */
  timezone?: Maybe<Scalars["String"]>;
  /**
   * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
   *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** User's profile URL. */
  url: Scalars["String"];
};

/** A user that has access to the the resources of an organization. */
export type UserAssignedIssuesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** A user that has access to the the resources of an organization. */
export type UserCreatedIssuesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** A user that has access to the the resources of an organization. */
export type UserTeamMembershipsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** A user that has access to the the resources of an organization. */
export type UserTeamsArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<TeamFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

/** A user account. */
export type UserAccount = {
  __typename?: "UserAccount";
  /** The time at which the model was archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the model was created. */
  createdAt: Scalars["DateTime"];
  /** The user's email address. */
  email: Scalars["String"];
  /** The models identifier. */
  id: Scalars["ID"];
  /** The user's name. */
  name?: Maybe<Scalars["String"]>;
  /** The authentication service used to create the account. */
  service: Scalars["String"];
  /** The time at which the model was updated. */
  updatedAt: Scalars["DateTime"];
  /** Users belonging to the account. */
  users: Array<User>;
};

/** [INTERNAL] An email change verification challenge. */
export type UserAccountEmailChange = {
  __typename?: "UserAccountEmailChange";
  /** The time at which the model was archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The timestamp this verification challenge was canceled at. */
  canceledAt?: Maybe<Scalars["DateTime"]>;
  /** The timestamp the verification codes expire at. */
  expiresAt: Scalars["DateTime"];
  /** The model's identifier. */
  id: Scalars["ID"];
  /** The new email the user account wants to change to. */
  newEmail: Scalars["String"];
  /** The timestamp the new email was verified at. */
  newEmailVerifiedAt?: Maybe<Scalars["DateTime"]>;
  /** The user account's current email. */
  oldEmail: Scalars["String"];
  /** The timestamp the old email was verified at. */
  oldEmailVerifiedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the model was updated. */
  updatedAt: Scalars["DateTime"];
};

/** [INTERNAL] Result of looking up a user account by email. */
export type UserAccountExistsPayload = {
  __typename?: "UserAccountExistsPayload";
  /** [INTERNAL] Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type UserAdminPayload = {
  __typename?: "UserAdminPayload";
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

/** Public information of the OAuth application, plus whether the application has been authorized for the given scopes. */
export type UserAuthorizedApplication = {
  __typename?: "UserAuthorizedApplication";
  /** Error associated with the application needing to be requested for approval in the workspace */
  approvalErrorCode?: Maybe<Scalars["String"]>;
  /** OAuth application's client ID. */
  clientId: Scalars["String"];
  /** Whether the application was created by Linear. */
  createdByLinear: Scalars["Boolean"];
  /** Information about the application. */
  description?: Maybe<Scalars["String"]>;
  /** Name of the developer. */
  developer: Scalars["String"];
  /** Url of the developer (homepage or docs). */
  developerUrl: Scalars["String"];
  /** OAuth application's ID. */
  id: Scalars["String"];
  /** Image of the application. */
  imageUrl?: Maybe<Scalars["String"]>;
  /** Whether the user has authorized the application for the given scopes. */
  isAuthorized: Scalars["Boolean"];
  /** Application name. */
  name: Scalars["String"];
  /** Whether or not webhooks are enabled for the application. */
  webhooksEnabled: Scalars["Boolean"];
};

/** User filtering options. */
export type UserCollectionFilter = {
  /** Comparator for the user's activity status. */
  active?: Maybe<BooleanComparator>;
  /** Comparator for the user's admin status. */
  admin?: Maybe<BooleanComparator>;
  /** Compound filters, all of which need to be matched by the user. */
  and?: Maybe<Array<UserCollectionFilter>>;
  /** Filters that the users assigned issues must satisfy. */
  assignedIssues?: Maybe<IssueCollectionFilter>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Comparator for the user's display name. */
  displayName?: Maybe<StringComparator>;
  /** Comparator for the user's email. */
  email?: Maybe<StringComparator>;
  /** Filters that needs to be matched by all users. */
  every?: Maybe<UserFilter>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Filter based on the currently authenticated user. Set to true to filter for the authenticated user, false for any other user. */
  isMe?: Maybe<BooleanComparator>;
  /** Comparator for the collection length. */
  length?: Maybe<NumberComparator>;
  /** Comparator for the user's name. */
  name?: Maybe<StringComparator>;
  /** Compound filters, one of which need to be matched by the user. */
  or?: Maybe<Array<UserCollectionFilter>>;
  /** Filters that needs to be matched by some users. */
  some?: Maybe<UserFilter>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

export type UserConnection = {
  __typename?: "UserConnection";
  edges: Array<UserEdge>;
  nodes: Array<User>;
  pageInfo: PageInfo;
};

export type UserEdge = {
  __typename?: "UserEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: User;
};

/** User filtering options. */
export type UserFilter = {
  /** Comparator for the user's activity status. */
  active?: Maybe<BooleanComparator>;
  /** Comparator for the user's admin status. */
  admin?: Maybe<BooleanComparator>;
  /** Compound filters, all of which need to be matched by the user. */
  and?: Maybe<Array<UserFilter>>;
  /** Filters that the users assigned issues must satisfy. */
  assignedIssues?: Maybe<IssueCollectionFilter>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Comparator for the user's display name. */
  displayName?: Maybe<StringComparator>;
  /** Comparator for the user's email. */
  email?: Maybe<StringComparator>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Filter based on the currently authenticated user. Set to true to filter for the authenticated user, false for any other user. */
  isMe?: Maybe<BooleanComparator>;
  /** Comparator for the user's name. */
  name?: Maybe<StringComparator>;
  /** Compound filters, one of which need to be matched by the user. */
  or?: Maybe<Array<UserFilter>>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

/** The types of flags that the user can have. */
export enum UserFlagType {
  All = "all",
  AnalyticsWelcomeDismissed = "analyticsWelcomeDismissed",
  CanPlaySnake = "canPlaySnake",
  CanPlayTetris = "canPlayTetris",
  CompletedOnboarding = "completedOnboarding",
  CycleWelcomeDismissed = "cycleWelcomeDismissed",
  DesktopDownloadToastDismissed = "desktopDownloadToastDismissed",
  DesktopInstalled = "desktopInstalled",
  DueDateShortcutMigration = "dueDateShortcutMigration",
  EmptyActiveIssuesDismissed = "emptyActiveIssuesDismissed",
  EmptyBacklogDismissed = "emptyBacklogDismissed",
  EmptyCustomViewsDismissed = "emptyCustomViewsDismissed",
  EmptyMyIssuesDismissed = "emptyMyIssuesDismissed",
  FigmaPromptDismissed = "figmaPromptDismissed",
  ImportBannerDismissed = "importBannerDismissed",
  InsightsWelcomeDismissed = "insightsWelcomeDismissed",
  IssueLabelSuggestionUsed = "issueLabelSuggestionUsed",
  IssueMovePromptCompleted = "issueMovePromptCompleted",
  JoinTeamIntroductionDismissed = "joinTeamIntroductionDismissed",
  ListSelectionTip = "listSelectionTip",
  MigrateThemePreference = "migrateThemePreference",
  ProjectBacklogWelcomeDismissed = "projectBacklogWelcomeDismissed",
  ProjectUpdatesWelcomeDismissed = "projectUpdatesWelcomeDismissed",
  ProjectWelcomeDismissed = "projectWelcomeDismissed",
  RewindBannerDismissed = "rewindBannerDismissed",
  SlackCommentReactionTipShown = "slackCommentReactionTipShown",
  TeamsPageIntroductionDismissed = "teamsPageIntroductionDismissed",
  ThreadedCommentsNudgeIsSeen = "threadedCommentsNudgeIsSeen",
  TriageWelcomeDismissed = "triageWelcomeDismissed",
}

/** Operations that can be applied to UserFlagType */
export enum UserFlagUpdateOperation {
  Clear = "clear",
  Decr = "decr",
  Incr = "incr",
  Lock = "lock",
}

export type UserPayload = {
  __typename?: "UserPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
  /** The user that was created or updated. */
  user?: Maybe<User>;
};

/** The different permission roles available to users on an organization */
export enum UserRoleType {
  Admin = "admin",
  Guest = "guest",
  User = "user",
}

/** The settings of a user as a JSON object. */
export type UserSettings = Node & {
  __typename?: "UserSettings";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The notification channel settings the user has selected. */
  notificationPreferences: Scalars["JSONObject"];
  /** The email types the user has unsubscribed from. */
  unsubscribedFrom: Array<Scalars["String"]>;
  /**
   * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
   *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** The user associated with these settings. */
  user: User;
};

export type UserSettingsFlagPayload = {
  __typename?: "UserSettingsFlagPayload";
  /** The flag key which was updated. */
  flag: Scalars["String"];
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
  /** The flag value after update. */
  value: Scalars["Int"];
};

export type UserSettingsFlagsResetPayload = {
  __typename?: "UserSettingsFlagsResetPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
};

export type UserSettingsPayload = {
  __typename?: "UserSettingsPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
  /** The user's settings. */
  userSettings: UserSettings;
};

export type UserSettingsUpdateInput = {
  /** The user's notification preferences. */
  notificationPreferences?: Maybe<Scalars["JSONObject"]>;
  /** The user's settings. */
  settings?: Maybe<Scalars["JSONObject"]>;
  /** The types of emails the user has unsubscribed from. */
  unsubscribedFrom?: Maybe<Array<Scalars["String"]>>;
};

/** View preferences. */
export type ViewPreferences = Node & {
  __typename?: "ViewPreferences";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The view preference type. */
  type: Scalars["String"];
  /**
   * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
   *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** The view type. */
  viewType: Scalars["String"];
};

export type ViewPreferencesCreateInput = {
  /** The custom view these view preferences are associated with. */
  customViewId?: Maybe<Scalars["String"]>;
  /** The cycle these view preferences are associated with. */
  cycleId?: Maybe<Scalars["String"]>;
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The label these view preferences are associated with. */
  labelId?: Maybe<Scalars["String"]>;
  /** View preferences object. */
  preferences: Scalars["JSONObject"];
  /** The project these view preferences are associated with. */
  projectId?: Maybe<Scalars["String"]>;
  /** The roadmap these view preferences are associated with. */
  roadmapId?: Maybe<Scalars["String"]>;
  /** The team these view preferences are associated with. */
  teamId?: Maybe<Scalars["String"]>;
  /** The type of view preferences (either user or organization level preferences). */
  type: ViewPreferencesType;
  /** The user profile these view preferences are associated with. */
  userId?: Maybe<Scalars["String"]>;
  /** The view type of the view preferences are associated with. */
  viewType: ViewType;
};

export type ViewPreferencesPayload = {
  __typename?: "ViewPreferencesPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
  /** The view preferences entity being mutated. */
  viewPreferences: ViewPreferences;
};

/** The type of view preferences (either user or organization level preferences). */
export enum ViewPreferencesType {
  Organization = "organization",
  User = "user",
}

export type ViewPreferencesUpdateInput = {
  /** View preferences. */
  preferences: Scalars["JSONObject"];
};

/** The client view this custom view is targeting. */
export enum ViewType {
  ActiveIssues = "activeIssues",
  AllIssues = "allIssues",
  Archive = "archive",
  Backlog = "backlog",
  Board = "board",
  CompletedCycle = "completedCycle",
  CustomRoadmap = "customRoadmap",
  CustomView = "customView",
  Cycle = "cycle",
  Inbox = "inbox",
  Label = "label",
  MyIssues = "myIssues",
  MyIssuesActivity = "myIssuesActivity",
  MyIssuesCreatedByMe = "myIssuesCreatedByMe",
  MyIssuesSubscribedTo = "myIssuesSubscribedTo",
  MyIssuesTouchedByMe = "myIssuesTouchedByMe",
  Project = "project",
  Projects = "projects",
  ProjectsAll = "projectsAll",
  ProjectsBacklog = "projectsBacklog",
  ProjectsClosed = "projectsClosed",
  Roadmap = "roadmap",
  RoadmapAll = "roadmapAll",
  RoadmapBacklog = "roadmapBacklog",
  RoadmapClosed = "roadmapClosed",
  Search = "search",
  Teams = "teams",
  Triage = "triage",
  UserProfile = "userProfile",
  UserProfileCreatedByUser = "userProfileCreatedByUser",
}

/** A webhook used to send HTTP notifications over data updates */
export type Webhook = Node & {
  __typename?: "Webhook";
  /** Whether the Webhook is enabled for all public teams, including teams created after the webhook was created. */
  allPublicTeams: Scalars["Boolean"];
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The user who created the webhook. */
  creator?: Maybe<User>;
  /** Whether the Webhook is enabled. */
  enabled: Scalars["Boolean"];
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** Webhook label */
  label?: Maybe<Scalars["String"]>;
  /** The resource types this webhook is subscribed to. */
  resourceTypes: Array<Scalars["String"]>;
  /** Secret token for verifying the origin on the recipient side. */
  secret?: Maybe<Scalars["String"]>;
  /** The team that the webhook is associated with. If null, the webhook is associated with all public teams of the organization. */
  team?: Maybe<Team>;
  /**
   * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
   *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
  /** Webhook URL */
  url?: Maybe<Scalars["String"]>;
};

export type WebhookConnection = {
  __typename?: "WebhookConnection";
  edges: Array<WebhookEdge>;
  nodes: Array<Webhook>;
  pageInfo: PageInfo;
};

export type WebhookCreateInput = {
  /** Whether this webhook is enabled for all public teams. */
  allPublicTeams?: Maybe<Scalars["Boolean"]>;
  /** Whether this webhook is enabled. */
  enabled?: Maybe<Scalars["Boolean"]>;
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** Label for the webhook. */
  label?: Maybe<Scalars["String"]>;
  /** List of resources the webhook should subscribe to. */
  resourceTypes: Array<Scalars["String"]>;
  /** An optional secret token used to sign the webhook payload. */
  secret?: Maybe<Scalars["String"]>;
  /** The identifier or key of the team associated with the Webhook. */
  teamId?: Maybe<Scalars["String"]>;
  /** The URL that will be called on data changes. */
  url: Scalars["String"];
};

export type WebhookEdge = {
  __typename?: "WebhookEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: Webhook;
};

export type WebhookPayload = {
  __typename?: "WebhookPayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
  /** The webhook entity being mutated. */
  webhook: Webhook;
};

export type WebhookUpdateInput = {
  /** Whether this webhook is enabled. */
  enabled?: Maybe<Scalars["Boolean"]>;
  /** Label for the webhook. */
  label?: Maybe<Scalars["String"]>;
  /** List of resources the webhook should subscribe to. */
  resourceTypes?: Maybe<Array<Scalars["String"]>>;
  /** An optional secret token used to sign the Webhook payload. */
  secret?: Maybe<Scalars["String"]>;
  /** The URL that will be called on data changes. */
  url?: Maybe<Scalars["String"]>;
};

/** A condition to match for the workflow to be triggered. */
export type WorkflowCondition = {
  /** Trigger the workflow when an issue matches the filter. Can only be used when the trigger type is `Issue`. */
  issueFilter?: Maybe<IssueFilter>;
  /** Triggers the workflow when a project matches the filter. Can only be used when the trigger type is `Project`. */
  projectFilter?: Maybe<ProjectFilter>;
};

export type WorkflowDefinition = Node & {
  __typename?: "WorkflowDefinition";
  /** An array of activities that will be executed as part of the workflow. */
  activities: Scalars["JSONObject"];
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The conditions that need to be match for the workflow to be triggered. */
  conditions: Scalars["JSONObject"];
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** The user who created the workflow. */
  creator: User;
  /** The description of the workflow. */
  description?: Maybe<Scalars["String"]>;
  enabled: Scalars["Boolean"];
  /** The name of the group that the workflow belongs to. */
  groupName?: Maybe<Scalars["String"]>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** The name of the workflow. */
  name: Scalars["String"];
  /** Cron schedule which is used to execute the workflow. Only applicable for cron based workflows. */
  schedule: Scalars["JSONObject"];
  /** The sort order of the workflow definition within its siblings. */
  sortOrder: Scalars["String"];
  /** The team associated with the workflow. If not set, the workflow is associated with the entire organization. */
  team?: Maybe<Team>;
  /** The type of the event that triggers off the workflow. */
  trigger: WorkflowTrigger;
  /** The object type (e.g. Issue) that triggers this workflow. */
  triggerType: WorkflowTriggerType;
  /** The type of the workflow. */
  type: WorkflowType;
  /**
   * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
   *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

export type WorkflowDefinitionConnection = {
  __typename?: "WorkflowDefinitionConnection";
  edges: Array<WorkflowDefinitionEdge>;
  nodes: Array<WorkflowDefinition>;
  pageInfo: PageInfo;
};

export type WorkflowDefinitionEdge = {
  __typename?: "WorkflowDefinitionEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: WorkflowDefinition;
};

/** A state in a team workflow. */
export type WorkflowState = Node & {
  __typename?: "WorkflowState";
  /** The time at which the entity was archived. Null if the entity has not been archived. */
  archivedAt?: Maybe<Scalars["DateTime"]>;
  /** The state's UI color as a HEX string. */
  color: Scalars["String"];
  /** The time at which the entity was created. */
  createdAt: Scalars["DateTime"];
  /** Description of the state. */
  description?: Maybe<Scalars["String"]>;
  /** The unique identifier of the entity. */
  id: Scalars["ID"];
  /** Issues belonging in this state. */
  issues: IssueConnection;
  /** The state's name. */
  name: Scalars["String"];
  /** The position of the state in the team flow. */
  position: Scalars["Float"];
  /** The team to which this state belongs to. */
  team: Team;
  /** The type of the state. */
  type: Scalars["String"];
  /**
   * The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
   *     for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
   *     been updated after creation.
   */
  updatedAt: Scalars["DateTime"];
};

/** A state in a team workflow. */
export type WorkflowStateIssuesArgs = {
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
};

export type WorkflowStateConnection = {
  __typename?: "WorkflowStateConnection";
  edges: Array<WorkflowStateEdge>;
  nodes: Array<WorkflowState>;
  pageInfo: PageInfo;
};

export type WorkflowStateCreateInput = {
  /** The color of the state. */
  color: Scalars["String"];
  /** The description of the state. */
  description?: Maybe<Scalars["String"]>;
  /** The identifier in UUID v4 format. If none is provided, the backend will generate one. */
  id?: Maybe<Scalars["String"]>;
  /** The name of the state. */
  name: Scalars["String"];
  /** The position of the state. */
  position?: Maybe<Scalars["Float"]>;
  /** The team associated with the state. */
  teamId: Scalars["String"];
  /** The workflow type. */
  type: Scalars["String"];
};

export type WorkflowStateEdge = {
  __typename?: "WorkflowStateEdge";
  /** Used in `before` and `after` args */
  cursor: Scalars["String"];
  node: WorkflowState;
};

/** Workflow state filtering options. */
export type WorkflowStateFilter = {
  /** Compound filters, all of which need to be matched by the workflow state. */
  and?: Maybe<Array<WorkflowStateFilter>>;
  /** Comparator for the created at date. */
  createdAt?: Maybe<DateComparator>;
  /** Comparator for the workflow state description. */
  description?: Maybe<StringComparator>;
  /** Comparator for the identifier. */
  id?: Maybe<IdComparator>;
  /** Filters that the workflow states issues must satisfy. */
  issues?: Maybe<IssueCollectionFilter>;
  /** Comparator for the workflow state name. */
  name?: Maybe<StringComparator>;
  /** Compound filters, one of which need to be matched by the workflow state. */
  or?: Maybe<Array<WorkflowStateFilter>>;
  /** Comparator for the workflow state position. */
  position?: Maybe<NumberComparator>;
  /** Filters that the workflow states team must satisfy. */
  team?: Maybe<TeamFilter>;
  /** Comparator for the workflow state type. */
  type?: Maybe<StringComparator>;
  /** Comparator for the updated at date. */
  updatedAt?: Maybe<DateComparator>;
};

export type WorkflowStatePayload = {
  __typename?: "WorkflowStatePayload";
  /** The identifier of the last sync operation. */
  lastSyncId: Scalars["Float"];
  /** Whether the operation was successful. */
  success: Scalars["Boolean"];
  /** The state that was created or updated. */
  workflowState: WorkflowState;
};

export type WorkflowStateUpdateInput = {
  /** The color of the state. */
  color?: Maybe<Scalars["String"]>;
  /** The description of the state. */
  description?: Maybe<Scalars["String"]>;
  /** The name of the state. */
  name?: Maybe<Scalars["String"]>;
  /** The position of the state. */
  position?: Maybe<Scalars["Float"]>;
};

export enum WorkflowTrigger {
  Cron = "cron",
  EntityCreated = "entityCreated",
  EntityCreatedOrUpdated = "entityCreatedOrUpdated",
  EntityRemoved = "entityRemoved",
  EntityUnarchived = "entityUnarchived",
  EntityUpdated = "entityUpdated",
}

export enum WorkflowTriggerType {
  Issue = "issue",
  Project = "project",
}

export enum WorkflowType {
  Custom = "custom",
  RecurringIssue = "recurringIssue",
  Sla = "sla",
}

/** [INTERNAL] Public information of the OAuth application, plus the userIds and scopes for those users. */
export type WorkspaceAuthorizedApplication = {
  __typename?: "WorkspaceAuthorizedApplication";
  /** OAuth application's ID. */
  appId: Scalars["String"];
  /** OAuth application's client ID. */
  clientId: Scalars["String"];
  /** Image of the application. */
  imageUrl?: Maybe<Scalars["String"]>;
  /** UserIds and membership dates of everyone who has authorized the application with the set of scopes */
  memberships: Array<AuthMembership>;
  /** Application name. */
  name: Scalars["String"];
  /** Scopes that are authorized for this application for a given user. */
  scope: Array<Scalars["String"]>;
  /** Total number of members that authorized the application */
  totalMembers: Scalars["Float"];
  /** Whether or not webhooks are enabled for the application. */
  webhooksEnabled: Scalars["Boolean"];
};

/** Zendesk specific settings. */
export type ZendeskSettings = {
  __typename?: "ZendeskSettings";
  /** Whether a ticket should be automatically reopened when its linked Linear issue is cancelled. */
  automateTicketReopeningOnCancellation?: Maybe<Scalars["Boolean"]>;
  /** Whether a ticket should be automatically reopened when a comment is posted on its linked Linear issue */
  automateTicketReopeningOnComment?: Maybe<Scalars["Boolean"]>;
  /** Whether a ticket should be automatically reopened when its linked Linear issue is completed. */
  automateTicketReopeningOnCompletion?: Maybe<Scalars["Boolean"]>;
  /** The ID of the Linear bot user. */
  botUserId?: Maybe<Scalars["String"]>;
  /** Whether an internal message should be added when someone comments on an issue. */
  sendNoteOnComment?: Maybe<Scalars["Boolean"]>;
  /** Whether an internal message should be added when a Linear issue changes status (for status types except completed or canceled). */
  sendNoteOnStatusChange?: Maybe<Scalars["Boolean"]>;
  /** The subdomain of the Zendesk organization being connected. */
  subdomain: Scalars["String"];
  /** The URL of the connected Zendesk organization. */
  url: Scalars["String"];
};

export type ZendeskSettingsInput = {
  /** Whether a ticket should be automatically reopened when its linked Linear issue is cancelled. */
  automateTicketReopeningOnCancellation?: Maybe<Scalars["Boolean"]>;
  /** Whether a ticket should be automatically reopened when a comment is posted on its linked Linear issue */
  automateTicketReopeningOnComment?: Maybe<Scalars["Boolean"]>;
  /** Whether a ticket should be automatically reopened when its linked Linear issue is completed. */
  automateTicketReopeningOnCompletion?: Maybe<Scalars["Boolean"]>;
  /** The ID of the Linear bot user. */
  botUserId?: Maybe<Scalars["String"]>;
  /** Whether an internal message should be added when someone comments on an issue. */
  sendNoteOnComment?: Maybe<Scalars["Boolean"]>;
  /** Whether an internal message should be added when a Linear issue changes status (for status types except completed or canceled). */
  sendNoteOnStatusChange?: Maybe<Scalars["Boolean"]>;
  /** The subdomain of the Zendesk organization being connected. */
  subdomain: Scalars["String"];
  /** The URL of the connected Zendesk organization. */
  url: Scalars["String"];
};

type Entity_IssueNotification_Fragment = { __typename: "IssueNotification" } & Pick<
  IssueNotification,
  "updatedAt" | "archivedAt" | "createdAt" | "id"
>;

type Entity_OauthClientApprovalNotification_Fragment = { __typename: "OauthClientApprovalNotification" } & Pick<
  OauthClientApprovalNotification,
  "updatedAt" | "archivedAt" | "createdAt" | "id"
>;

type Entity_ProjectNotification_Fragment = { __typename: "ProjectNotification" } & Pick<
  ProjectNotification,
  "updatedAt" | "archivedAt" | "createdAt" | "id"
>;

type Entity_ProjectNotificationSubscription_Fragment = { __typename: "ProjectNotificationSubscription" } & Pick<
  ProjectNotificationSubscription,
  "updatedAt" | "archivedAt" | "createdAt" | "id"
>;

type Entity_TeamNotificationSubscription_Fragment = { __typename: "TeamNotificationSubscription" } & Pick<
  TeamNotificationSubscription,
  "updatedAt" | "archivedAt" | "createdAt" | "id"
>;

export type EntityFragment =
  | Entity_IssueNotification_Fragment
  | Entity_OauthClientApprovalNotification_Fragment
  | Entity_ProjectNotification_Fragment
  | Entity_ProjectNotificationSubscription_Fragment
  | Entity_TeamNotificationSubscription_Fragment;

export type CommentFragment = { __typename: "Comment" } & Pick<
  Comment,
  "url" | "reactionData" | "bodyData" | "body" | "updatedAt" | "archivedAt" | "createdAt" | "editedAt" | "id"
> & {
    issue: { __typename?: "Issue" } & Pick<Issue, "id">;
    parent?: Maybe<{ __typename?: "Comment" } & Pick<Comment, "id">>;
    user?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
  };

export type EmojiFragment = { __typename: "Emoji" } & Pick<
  Emoji,
  "url" | "name" | "updatedAt" | "source" | "archivedAt" | "createdAt" | "id"
> & { creator: { __typename?: "User" } & Pick<User, "id"> };

export type CustomViewFragment = { __typename: "CustomView" } & Pick<
  CustomView,
  | "color"
  | "description"
  | "filterData"
  | "filters"
  | "icon"
  | "updatedAt"
  | "name"
  | "archivedAt"
  | "createdAt"
  | "id"
  | "shared"
> & { team?: Maybe<{ __typename?: "Team" } & Pick<Team, "id">>; creator: { __typename?: "User" } & Pick<User, "id"> };

export type DocumentFragment = { __typename: "Document" } & Pick<
  Document,
  "color" | "contentData" | "content" | "title" | "slugId" | "icon" | "updatedAt" | "archivedAt" | "createdAt" | "id"
> & {
    project: { __typename?: "Project" } & Pick<Project, "id">;
    creator: { __typename?: "User" } & Pick<User, "id">;
    updatedBy: { __typename?: "User" } & Pick<User, "id">;
  };

export type ProjectMilestoneFragment = { __typename: "ProjectMilestone" } & Pick<
  ProjectMilestone,
  "description" | "updatedAt" | "name" | "targetDate" | "archivedAt" | "createdAt" | "id"
> & { project: { __typename?: "Project" } & Pick<Project, "id"> };

type Notification_IssueNotification_Fragment = { __typename: "IssueNotification" } & Pick<
  IssueNotification,
  "type" | "updatedAt" | "emailedAt" | "readAt" | "unsnoozedAt" | "archivedAt" | "createdAt" | "snoozedUntilAt" | "id"
> & {
    actor?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    user: { __typename?: "User" } & Pick<User, "id">;
  } & IssueNotificationFragment;

type Notification_OauthClientApprovalNotification_Fragment = { __typename: "OauthClientApprovalNotification" } & Pick<
  OauthClientApprovalNotification,
  "type" | "updatedAt" | "emailedAt" | "readAt" | "unsnoozedAt" | "archivedAt" | "createdAt" | "snoozedUntilAt" | "id"
> & {
    actor?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    user: { __typename?: "User" } & Pick<User, "id">;
  } & OauthClientApprovalNotificationFragment;

type Notification_ProjectNotification_Fragment = { __typename: "ProjectNotification" } & Pick<
  ProjectNotification,
  "type" | "updatedAt" | "emailedAt" | "readAt" | "unsnoozedAt" | "archivedAt" | "createdAt" | "snoozedUntilAt" | "id"
> & {
    actor?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    user: { __typename?: "User" } & Pick<User, "id">;
  } & ProjectNotificationFragment;

export type NotificationFragment =
  | Notification_IssueNotification_Fragment
  | Notification_OauthClientApprovalNotification_Fragment
  | Notification_ProjectNotification_Fragment;

export type PersonalNoteFragment = { __typename: "PersonalNote" } & Pick<
  PersonalNote,
  "updatedAt" | "contentData" | "archivedAt" | "createdAt" | "id"
> & { user: { __typename?: "User" } & Pick<User, "id"> };

export type ProjectNotificationSubscriptionFragment = { __typename: "ProjectNotificationSubscription" } & Pick<
  ProjectNotificationSubscription,
  "updatedAt" | "archivedAt" | "createdAt" | "type" | "id"
> & {
    team?: Maybe<{ __typename?: "Team" } & Pick<Team, "id">>;
    project: { __typename?: "Project" } & Pick<Project, "id">;
    user: { __typename?: "User" } & Pick<User, "id">;
  };

export type ProjectNotificationFragment = { __typename: "ProjectNotification" } & Pick<
  ProjectNotification,
  "type" | "updatedAt" | "emailedAt" | "readAt" | "unsnoozedAt" | "archivedAt" | "createdAt" | "snoozedUntilAt" | "id"
> & {
    project: { __typename?: "Project" } & Pick<Project, "id">;
    projectUpdate?: Maybe<{ __typename?: "ProjectUpdate" } & Pick<ProjectUpdate, "id">>;
    actor?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    user: { __typename?: "User" } & Pick<User, "id">;
  };

export type ProjectFragment = { __typename: "Project" } & Pick<
  Project,
  | "url"
  | "targetDate"
  | "icon"
  | "updatedAt"
  | "completedScopeHistory"
  | "completedIssueCountHistory"
  | "inProgressScopeHistory"
  | "progress"
  | "scope"
  | "color"
  | "description"
  | "name"
  | "slugId"
  | "sortOrder"
  | "archivedAt"
  | "createdAt"
  | "autoArchivedAt"
  | "canceledAt"
  | "completedAt"
  | "startedAt"
  | "projectUpdateRemindersPausedUntilAt"
  | "scopeHistory"
  | "issueCountHistory"
  | "state"
  | "id"
  | "slackIssueComments"
  | "slackNewIssue"
  | "slackIssueStatuses"
> & {
    integrationsSettings?: Maybe<{ __typename?: "IntegrationsSettings" } & Pick<IntegrationsSettings, "id">>;
    lead?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    convertedFromIssue?: Maybe<{ __typename?: "Issue" } & Pick<Issue, "id">>;
    creator: { __typename?: "User" } & Pick<User, "id">;
  };

export type ReactionFragment = { __typename: "Reaction" } & Pick<
  Reaction,
  "emoji" | "updatedAt" | "archivedAt" | "createdAt" | "id"
> & { user: { __typename?: "User" } & Pick<User, "id"> };

export type IssueHistoryFragment = { __typename: "IssueHistory" } & Pick<
  IssueHistory,
  | "addedLabelIds"
  | "removedLabelIds"
  | "attachmentId"
  | "toCycleId"
  | "toParentId"
  | "toConvertedProjectId"
  | "toProjectId"
  | "toStateId"
  | "fromCycleId"
  | "fromParentId"
  | "fromProjectId"
  | "fromStateId"
  | "fromTeamId"
  | "toTeamId"
  | "fromAssigneeId"
  | "toAssigneeId"
  | "actorId"
  | "updatedAt"
  | "archivedAt"
  | "createdAt"
  | "id"
  | "fromDueDate"
  | "toDueDate"
  | "fromEstimate"
  | "toEstimate"
  | "fromPriority"
  | "toPriority"
  | "fromTitle"
  | "toTitle"
  | "archived"
  | "autoArchived"
  | "autoClosed"
  | "trashed"
  | "updatedDescription"
> & {
    relationChanges?: Maybe<
      Array<{ __typename?: "IssueRelationHistoryPayload" } & IssueRelationHistoryPayloadFragment>
    >;
    issueImport?: Maybe<{ __typename?: "IssueImport" } & IssueImportFragment>;
    issue: { __typename?: "Issue" } & Pick<Issue, "id">;
    attachment?: Maybe<{ __typename?: "Attachment" } & Pick<Attachment, "id">>;
    toCycle?: Maybe<{ __typename?: "Cycle" } & Pick<Cycle, "id">>;
    toParent?: Maybe<{ __typename?: "Issue" } & Pick<Issue, "id">>;
    toConvertedProject?: Maybe<{ __typename?: "Project" } & Pick<Project, "id">>;
    toProject?: Maybe<{ __typename?: "Project" } & Pick<Project, "id">>;
    toState?: Maybe<{ __typename?: "WorkflowState" } & Pick<WorkflowState, "id">>;
    fromCycle?: Maybe<{ __typename?: "Cycle" } & Pick<Cycle, "id">>;
    fromParent?: Maybe<{ __typename?: "Issue" } & Pick<Issue, "id">>;
    fromProject?: Maybe<{ __typename?: "Project" } & Pick<Project, "id">>;
    fromState?: Maybe<{ __typename?: "WorkflowState" } & Pick<WorkflowState, "id">>;
    fromTeam?: Maybe<{ __typename?: "Team" } & Pick<Team, "id">>;
    toTeam?: Maybe<{ __typename?: "Team" } & Pick<Team, "id">>;
    fromAssignee?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    toAssignee?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    actor?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
  };

export type IssueRelationFragment = { __typename: "IssueRelation" } & Pick<
  IssueRelation,
  "updatedAt" | "type" | "archivedAt" | "createdAt" | "id"
> & { issue: { __typename?: "Issue" } & Pick<Issue, "id">; relatedIssue: { __typename?: "Issue" } & Pick<Issue, "id"> };

export type RoadmapFragment = { __typename: "Roadmap" } & Pick<
  Roadmap,
  "description" | "updatedAt" | "name" | "slugId" | "archivedAt" | "createdAt" | "id"
> & { creator: { __typename?: "User" } & Pick<User, "id">; owner: { __typename?: "User" } & Pick<User, "id"> };

export type CycleFragment = { __typename: "Cycle" } & Pick<
  Cycle,
  | "completedAt"
  | "name"
  | "description"
  | "endsAt"
  | "updatedAt"
  | "completedScopeHistory"
  | "completedIssueCountHistory"
  | "inProgressScopeHistory"
  | "number"
  | "progress"
  | "startsAt"
  | "autoArchivedAt"
  | "archivedAt"
  | "createdAt"
  | "scopeHistory"
  | "issueCountHistory"
  | "id"
> & { team: { __typename?: "Team" } & Pick<Team, "id"> };

export type WorkflowStateFragment = { __typename: "WorkflowState" } & Pick<
  WorkflowState,
  "description" | "updatedAt" | "position" | "color" | "name" | "archivedAt" | "createdAt" | "type" | "id"
> & { team: { __typename?: "Team" } & Pick<Team, "id"> };

export type TeamNotificationSubscriptionFragment = { __typename: "TeamNotificationSubscription" } & Pick<
  TeamNotificationSubscription,
  "updatedAt" | "archivedAt" | "createdAt" | "type" | "id"
> & {
    project?: Maybe<{ __typename?: "Project" } & Pick<Project, "id">>;
    team: { __typename?: "Team" } & Pick<Team, "id">;
    user: { __typename?: "User" } & Pick<User, "id">;
  };

export type TemplateFragment = { __typename: "Template" } & Pick<
  Template,
  "templateData" | "description" | "type" | "updatedAt" | "name" | "archivedAt" | "createdAt" | "id"
> & {
    team?: Maybe<{ __typename?: "Team" } & Pick<Team, "id">>;
    creator?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    lastUpdatedBy?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
  };

export type ProjectUpdateFragment = { __typename: "ProjectUpdate" } & Pick<
  ProjectUpdate,
  "url" | "updatedAt" | "archivedAt" | "createdAt" | "editedAt" | "id" | "body"
> & { project: { __typename?: "Project" } & Pick<Project, "id">; user: { __typename?: "User" } & Pick<User, "id"> };

export type UserAccountFragment = { __typename: "UserAccount" } & Pick<
  UserAccount,
  "service" | "id" | "archivedAt" | "createdAt" | "updatedAt" | "email" | "name"
> & { users: Array<{ __typename?: "User" } & UserFragment> };

export type UserFragment = { __typename: "User" } & Pick<
  User,
  | "statusUntilAt"
  | "description"
  | "avatarUrl"
  | "calendarHash"
  | "createdIssueCount"
  | "disableReason"
  | "statusEmoji"
  | "statusLabel"
  | "updatedAt"
  | "lastSeen"
  | "timezone"
  | "archivedAt"
  | "createdAt"
  | "id"
  | "displayName"
  | "email"
  | "name"
  | "inviteHash"
  | "url"
  | "active"
  | "guest"
  | "admin"
  | "isMe"
>;

export type PushSubscriptionFragment = { __typename: "PushSubscription" } & Pick<
  PushSubscription,
  "updatedAt" | "archivedAt" | "createdAt" | "id"
>;

export type WebhookFragment = { __typename: "Webhook" } & Pick<
  Webhook,
  | "secret"
  | "updatedAt"
  | "resourceTypes"
  | "archivedAt"
  | "createdAt"
  | "id"
  | "url"
  | "label"
  | "allPublicTeams"
  | "enabled"
> & {
    team?: Maybe<{ __typename?: "Team" } & Pick<Team, "id">>;
    creator?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
  };

export type ApiKeyFragment = { __typename: "ApiKey" } & Pick<
  ApiKey,
  "label" | "updatedAt" | "archivedAt" | "createdAt" | "id"
>;

export type ProjectLinkFragment = { __typename: "ProjectLink" } & Pick<
  ProjectLink,
  "updatedAt" | "url" | "label" | "archivedAt" | "createdAt" | "id"
> & { project: { __typename?: "Project" } & Pick<Project, "id">; creator: { __typename?: "User" } & Pick<User, "id"> };

export type IssueImportFragment = { __typename: "IssueImport" } & Pick<
  IssueImport,
  | "progress"
  | "teamName"
  | "mapping"
  | "creatorId"
  | "updatedAt"
  | "service"
  | "status"
  | "archivedAt"
  | "createdAt"
  | "id"
  | "error"
>;

export type IntegrationFragment = { __typename: "Integration" } & Pick<
  Integration,
  "service" | "updatedAt" | "archivedAt" | "createdAt" | "id"
> & { team?: Maybe<{ __typename?: "Team" } & Pick<Team, "id">>; creator: { __typename?: "User" } & Pick<User, "id"> };

export type OrganizationInviteFragment = { __typename: "OrganizationInvite" } & Pick<
  OrganizationInvite,
  "external" | "email" | "updatedAt" | "archivedAt" | "createdAt" | "acceptedAt" | "expiresAt" | "id"
> & {
    inviter: { __typename?: "User" } & Pick<User, "id">;
    invitee?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
  };

export type IssueNotificationFragment = { __typename: "IssueNotification" } & Pick<
  IssueNotification,
  | "reactionEmoji"
  | "type"
  | "updatedAt"
  | "emailedAt"
  | "readAt"
  | "unsnoozedAt"
  | "archivedAt"
  | "createdAt"
  | "snoozedUntilAt"
  | "id"
> & {
    comment?: Maybe<{ __typename?: "Comment" } & Pick<Comment, "id">>;
    issue: { __typename?: "Issue" } & Pick<Issue, "id">;
    team: { __typename?: "Team" } & Pick<Team, "id">;
    actor?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    user: { __typename?: "User" } & Pick<User, "id">;
  };

export type IssueFragment = { __typename: "Issue" } & Pick<
  Issue,
  | "trashed"
  | "url"
  | "identifier"
  | "priorityLabel"
  | "previousIdentifiers"
  | "customerTicketCount"
  | "branchName"
  | "dueDate"
  | "estimate"
  | "description"
  | "title"
  | "number"
  | "updatedAt"
  | "boardOrder"
  | "sortOrder"
  | "subIssueSortOrder"
  | "priority"
  | "archivedAt"
  | "createdAt"
  | "startedTriageAt"
  | "triagedAt"
  | "autoArchivedAt"
  | "autoClosedAt"
  | "canceledAt"
  | "completedAt"
  | "startedAt"
  | "snoozedUntilAt"
  | "id"
> & {
    cycle?: Maybe<{ __typename?: "Cycle" } & Pick<Cycle, "id">>;
    parent?: Maybe<{ __typename?: "Issue" } & Pick<Issue, "id">>;
    project?: Maybe<{ __typename?: "Project" } & Pick<Project, "id">>;
    team: { __typename?: "Team" } & Pick<Team, "id">;
    assignee?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    creator?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    snoozedBy?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    state: { __typename?: "WorkflowState" } & Pick<WorkflowState, "id">;
  };

export type OauthClientApprovalNotificationFragment = { __typename: "OauthClientApprovalNotification" } & Pick<
  OauthClientApprovalNotification,
  "type" | "updatedAt" | "emailedAt" | "readAt" | "unsnoozedAt" | "archivedAt" | "createdAt" | "snoozedUntilAt" | "id"
> & {
    oauthClientApproval: { __typename?: "OauthClientApproval" } & OauthClientApprovalFragment;
    actor?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    user: { __typename?: "User" } & Pick<User, "id">;
  };

export type OrganizationFragment = { __typename: "Organization" } & Pick<
  Organization,
  | "allowedAuthServices"
  | "gitBranchFormat"
  | "userCount"
  | "createdIssueCount"
  | "previousUrlKeys"
  | "periodUploadVolume"
  | "projectUpdateRemindersHour"
  | "updatedAt"
  | "logoUrl"
  | "name"
  | "urlKey"
  | "deletionRequestedAt"
  | "archivedAt"
  | "createdAt"
  | "id"
  | "samlEnabled"
  | "scimEnabled"
  | "gitLinkbackMessagesEnabled"
  | "gitPublicLinkbackMessagesEnabled"
  | "roadmapEnabled"
> & { subscription?: Maybe<{ __typename?: "PaidSubscription" } & PaidSubscriptionFragment> };

export type TeamFragment = { __typename: "Team" } & Pick<
  Team,
  | "cycleIssueAutoAssignCompleted"
  | "cycleIssueAutoAssignStarted"
  | "cycleCalenderUrl"
  | "upcomingCycleCount"
  | "cycleLockToActive"
  | "autoArchivePeriod"
  | "autoClosePeriod"
  | "autoCloseStateId"
  | "cycleCooldownTime"
  | "cycleStartDay"
  | "cycleDuration"
  | "icon"
  | "defaultTemplateForMembersId"
  | "defaultTemplateForNonMembersId"
  | "issueEstimationType"
  | "updatedAt"
  | "color"
  | "description"
  | "name"
  | "key"
  | "archivedAt"
  | "createdAt"
  | "timezone"
  | "id"
  | "inviteHash"
  | "defaultIssueEstimate"
  | "requirePriorityToLeaveTriage"
  | "issueOrderingNoPriorityFirst"
  | "private"
  | "cyclesEnabled"
  | "issueEstimationExtended"
  | "issueEstimationAllowZero"
  | "groupIssueHistory"
  | "issueSortOrderDefaultToBottom"
  | "slackIssueComments"
  | "slackNewIssue"
  | "slackIssueStatuses"
  | "triageEnabled"
> & {
    integrationsSettings?: Maybe<{ __typename?: "IntegrationsSettings" } & Pick<IntegrationsSettings, "id">>;
    activeCycle?: Maybe<{ __typename?: "Cycle" } & Pick<Cycle, "id">>;
    defaultTemplateForMembers?: Maybe<{ __typename?: "Template" } & Pick<Template, "id">>;
    defaultTemplateForNonMembers?: Maybe<{ __typename?: "Template" } & Pick<Template, "id">>;
    defaultIssueState?: Maybe<{ __typename?: "WorkflowState" } & Pick<WorkflowState, "id">>;
    mergeWorkflowState?: Maybe<{ __typename?: "WorkflowState" } & Pick<WorkflowState, "id">>;
    draftWorkflowState?: Maybe<{ __typename?: "WorkflowState" } & Pick<WorkflowState, "id">>;
    startWorkflowState?: Maybe<{ __typename?: "WorkflowState" } & Pick<WorkflowState, "id">>;
    reviewWorkflowState?: Maybe<{ __typename?: "WorkflowState" } & Pick<WorkflowState, "id">>;
    markedAsDuplicateWorkflowState?: Maybe<{ __typename?: "WorkflowState" } & Pick<WorkflowState, "id">>;
    triageIssueState?: Maybe<{ __typename?: "WorkflowState" } & Pick<WorkflowState, "id">>;
  };

export type SyncResponseFragment = { __typename: "SyncResponse" } & Pick<
  SyncResponse,
  "delta" | "state" | "lastSyncId" | "subscribedSyncGroups" | "databaseVersion"
>;

export type TeamMembershipFragment = { __typename: "TeamMembership" } & Pick<
  TeamMembership,
  "updatedAt" | "sortOrder" | "archivedAt" | "createdAt" | "id" | "owner"
> & { team: { __typename?: "Team" } & Pick<Team, "id">; user: { __typename?: "User" } & Pick<User, "id"> };

export type OrganizationDomainFragment = { __typename: "OrganizationDomain" } & Pick<
  OrganizationDomain,
  "name" | "verificationEmail" | "verified" | "updatedAt" | "archivedAt" | "createdAt" | "id" | "claimed"
> & { creator?: Maybe<{ __typename?: "User" } & Pick<User, "id">> };

export type FrontSettingsFragment = { __typename: "FrontSettings" } & Pick<
  FrontSettings,
  | "automateTicketReopeningOnComment"
  | "automateTicketReopeningOnCancellation"
  | "automateTicketReopeningOnCompletion"
  | "sendNoteOnStatusChange"
  | "sendNoteOnComment"
>;

export type GithubOAuthTokenPayloadFragment = { __typename: "GithubOAuthTokenPayload" } & Pick<
  GithubOAuthTokenPayload,
  "token"
> & { organizations?: Maybe<Array<{ __typename?: "GithubOrg" } & GithubOrgFragment>> };

export type GoogleSheetsSettingsFragment = { __typename: "GoogleSheetsSettings" } & Pick<
  GoogleSheetsSettings,
  "sheetId" | "spreadsheetId" | "spreadsheetUrl" | "updatedIssuesAt"
>;

export type ProjectUpdateInteractionFragment = { __typename: "ProjectUpdateInteraction" } & Pick<
  ProjectUpdateInteraction,
  "updatedAt" | "archivedAt" | "createdAt" | "readAt" | "id"
> & {
    projectUpdate: { __typename?: "ProjectUpdate" } & Pick<ProjectUpdate, "id">;
    user: { __typename?: "User" } & Pick<User, "id">;
  };

export type IntercomSettingsFragment = { __typename: "IntercomSettings" } & Pick<
  IntercomSettings,
  | "automateTicketReopeningOnComment"
  | "automateTicketReopeningOnCancellation"
  | "automateTicketReopeningOnCompletion"
  | "sendNoteOnStatusChange"
  | "sendNoteOnComment"
>;

export type AttachmentFragment = { __typename: "Attachment" } & Pick<
  Attachment,
  | "sourceType"
  | "subtitle"
  | "title"
  | "metadata"
  | "groupBySource"
  | "source"
  | "url"
  | "updatedAt"
  | "archivedAt"
  | "createdAt"
  | "id"
> & {
    creator?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
    issue: { __typename?: "Issue" } & Pick<Issue, "id">;
  };

export type IssueRelationHistoryPayloadFragment = { __typename: "IssueRelationHistoryPayload" } & Pick<
  IssueRelationHistoryPayload,
  "identifier" | "type"
>;

export type JiraSettingsFragment = { __typename: "JiraSettings" } & {
  projects: Array<{ __typename?: "JiraProjectData" } & JiraProjectDataFragment>;
  projectMapping?: Maybe<Array<{ __typename?: "JiraLinearMapping" } & JiraLinearMappingFragment>>;
};

export type RoadmapToProjectFragment = { __typename: "RoadmapToProject" } & Pick<
  RoadmapToProject,
  "updatedAt" | "sortOrder" | "archivedAt" | "createdAt" | "id"
> & {
    project: { __typename?: "Project" } & Pick<Project, "id">;
    roadmap: { __typename?: "Roadmap" } & Pick<Roadmap, "id">;
  };

export type IntegrationTemplateFragment = { __typename: "IntegrationTemplate" } & Pick<
  IntegrationTemplate,
  "updatedAt" | "archivedAt" | "createdAt" | "id"
> & {
    integration: { __typename?: "Integration" } & Pick<Integration, "id">;
    template: { __typename?: "Template" } & Pick<Template, "id">;
  };

export type IssueLabelFragment = { __typename: "IssueLabel" } & Pick<
  IssueLabel,
  "color" | "description" | "name" | "updatedAt" | "archivedAt" | "createdAt" | "id"
> & {
    parent?: Maybe<{ __typename?: "IssueLabel" } & Pick<IssueLabel, "id">>;
    team?: Maybe<{ __typename?: "Team" } & Pick<Team, "id">>;
    creator?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
  };

export type JiraProjectDataFragment = { __typename: "JiraProjectData" } & Pick<JiraProjectData, "id" | "key" | "name">;

export type GitHubSettingsFragment = { __typename: "GitHubSettings" } & Pick<
  GitHubSettings,
  "orgLogin" | "orgAvatarUrl"
>;

type NotificationSubscription_ProjectNotificationSubscription_Fragment = {
  __typename: "ProjectNotificationSubscription";
} & Pick<ProjectNotificationSubscription, "updatedAt" | "archivedAt" | "createdAt" | "type" | "id"> & {
    project: { __typename?: "Project" } & Pick<Project, "id">;
    team?: Maybe<{ __typename?: "Team" } & Pick<Team, "id">>;
    user: { __typename?: "User" } & Pick<User, "id">;
  };

type NotificationSubscription_TeamNotificationSubscription_Fragment = {
  __typename: "TeamNotificationSubscription";
} & Pick<TeamNotificationSubscription, "updatedAt" | "archivedAt" | "createdAt" | "type" | "id"> & {
    project?: Maybe<{ __typename?: "Project" } & Pick<Project, "id">>;
    team: { __typename?: "Team" } & Pick<Team, "id">;
    user: { __typename?: "User" } & Pick<User, "id">;
  };

export type NotificationSubscriptionFragment =
  | NotificationSubscription_ProjectNotificationSubscription_Fragment
  | NotificationSubscription_TeamNotificationSubscription_Fragment;

export type NotionSettingsFragment = { __typename: "NotionSettings" } & Pick<
  NotionSettings,
  "workspaceId" | "workspaceName"
>;

export type OauthClientFragment = { __typename: "OauthClient" } & Pick<
  OauthClient,
  | "imageUrl"
  | "description"
  | "redirectUris"
  | "developer"
  | "clientId"
  | "name"
  | "clientSecret"
  | "updatedAt"
  | "webhookResourceTypes"
  | "archivedAt"
  | "createdAt"
  | "id"
  | "developerUrl"
  | "webhookUrl"
  | "publicEnabled"
> & { creator: { __typename?: "User" } & Pick<User, "id"> };

export type FigmaEmbedFragment = { __typename: "FigmaEmbed" } & Pick<
  FigmaEmbed,
  "lastModified" | "name" | "url" | "nodeName"
>;

export type UploadFileFragment = { __typename: "UploadFile" } & Pick<
  UploadFile,
  "assetUrl" | "contentType" | "filename" | "uploadUrl" | "size" | "metaData"
> & { headers: Array<{ __typename?: "UploadFileHeader" } & UploadFileHeaderFragment> };

export type UserAuthorizedApplicationFragment = { __typename: "UserAuthorizedApplication" } & Pick<
  UserAuthorizedApplication,
  | "name"
  | "approvalErrorCode"
  | "imageUrl"
  | "description"
  | "developer"
  | "id"
  | "clientId"
  | "developerUrl"
  | "webhooksEnabled"
  | "createdByLinear"
  | "isAuthorized"
>;

export type ApplicationFragment = { __typename: "Application" } & Pick<
  Application,
  "name" | "imageUrl" | "description" | "developer" | "id" | "clientId" | "developerUrl"
>;

export type GithubOrgFragment = { __typename: "GithubOrg" } & Pick<
  GithubOrg,
  "id" | "login" | "name" | "isPersonal"
> & { repositories: Array<{ __typename?: "GithubRepo" } & GithubRepoFragment> };

export type GithubRepoFragment = { __typename: "GithubRepo" } & Pick<GithubRepo, "id" | "name">;

export type OauthClientApprovalFragment = { __typename: "OauthClientApproval" } & Pick<
  OauthClientApproval,
  | "updatedAt"
  | "requesterId"
  | "responderId"
  | "requestReason"
  | "denyReason"
  | "scopes"
  | "archivedAt"
  | "createdAt"
  | "id"
  | "oauthClientId"
>;

export type SentrySettingsFragment = { __typename: "SentrySettings" } & Pick<SentrySettings, "organizationSlug">;

export type SlackPostSettingsFragment = { __typename: "SlackPostSettings" } & Pick<
  SlackPostSettings,
  "channel" | "channelId" | "configurationUrl"
>;

export type IntegrationsSettingsFragment = { __typename: "IntegrationsSettings" } & Pick<
  IntegrationsSettings,
  | "updatedAt"
  | "archivedAt"
  | "createdAt"
  | "id"
  | "slackIssueNewComment"
  | "slackIssueAddedToTriage"
  | "slackIssueCreated"
  | "slackProjectUpdateCreated"
  | "slackIssueSlaHighRisk"
  | "slackIssueSlaBreached"
  | "slackIssueStatusChangedDone"
  | "slackIssueStatusChangedAll"
  | "slackProjectUpdateCreatedToTeam"
  | "slackProjectUpdateCreatedToWorkspace"
> & {
    project?: Maybe<{ __typename?: "Project" } & Pick<Project, "id">>;
    team?: Maybe<{ __typename?: "Team" } & Pick<Team, "id">>;
  };

export type IntegrationSettingsFragment = { __typename: "IntegrationSettings" } & {
  front?: Maybe<{ __typename?: "FrontSettings" } & FrontSettingsFragment>;
  gitHub?: Maybe<{ __typename?: "GitHubSettings" } & GitHubSettingsFragment>;
  googleSheets?: Maybe<{ __typename?: "GoogleSheetsSettings" } & GoogleSheetsSettingsFragment>;
  intercom?: Maybe<{ __typename?: "IntercomSettings" } & IntercomSettingsFragment>;
  jira?: Maybe<{ __typename?: "JiraSettings" } & JiraSettingsFragment>;
  notion?: Maybe<{ __typename?: "NotionSettings" } & NotionSettingsFragment>;
  sentry?: Maybe<{ __typename?: "SentrySettings" } & SentrySettingsFragment>;
  slackOrgProjectUpdatesPost?: Maybe<{ __typename?: "SlackPostSettings" } & SlackPostSettingsFragment>;
  slackPost?: Maybe<{ __typename?: "SlackPostSettings" } & SlackPostSettingsFragment>;
  slackProjectPost?: Maybe<{ __typename?: "SlackPostSettings" } & SlackPostSettingsFragment>;
  zendesk?: Maybe<{ __typename?: "ZendeskSettings" } & ZendeskSettingsFragment>;
};

export type SamlConfigurationPayloadFragment = { __typename: "SamlConfigurationPayload" } & Pick<
  SamlConfigurationPayload,
  "ssoBinding" | "ssoEndpoint" | "ssoSignAlgo" | "issuerEntityId"
>;

export type PaidSubscriptionFragment = { __typename: "PaidSubscription" } & Pick<
  PaidSubscription,
  | "canceledAt"
  | "nextBillingAt"
  | "updatedAt"
  | "seatsMaximum"
  | "seatsMinimum"
  | "seats"
  | "pendingChangeType"
  | "type"
  | "archivedAt"
  | "createdAt"
  | "id"
> & { creator?: Maybe<{ __typename?: "User" } & Pick<User, "id">> };

export type UserSettingsFragment = { __typename: "UserSettings" } & Pick<
  UserSettings,
  "unsubscribedFrom" | "updatedAt" | "notificationPreferences" | "archivedAt" | "createdAt" | "id"
> & { user: { __typename?: "User" } & Pick<User, "id"> };

export type JiraLinearMappingFragment = { __typename: "JiraLinearMapping" } & Pick<
  JiraLinearMapping,
  "jiraProjectId" | "linearTeamId"
>;

export type FavoriteFragment = { __typename: "Favorite" } & Pick<
  Favorite,
  "updatedAt" | "folderName" | "sortOrder" | "archivedAt" | "createdAt" | "predefinedViewType" | "type" | "id"
> & {
    customView?: Maybe<{ __typename?: "CustomView" } & Pick<CustomView, "id">>;
    cycle?: Maybe<{ __typename?: "Cycle" } & Pick<Cycle, "id">>;
    document?: Maybe<{ __typename?: "Document" } & Pick<Document, "id">>;
    issue?: Maybe<{ __typename?: "Issue" } & Pick<Issue, "id">>;
    label?: Maybe<{ __typename?: "IssueLabel" } & Pick<IssueLabel, "id">>;
    project?: Maybe<{ __typename?: "Project" } & Pick<Project, "id">>;
    roadmap?: Maybe<{ __typename?: "Roadmap" } & Pick<Roadmap, "id">>;
    projectTeam?: Maybe<{ __typename?: "Team" } & Pick<Team, "id">>;
    user: { __typename?: "User" } & Pick<User, "id">;
    parent?: Maybe<{ __typename?: "Favorite" } & Pick<Favorite, "id">>;
    predefinedViewTeam?: Maybe<{ __typename?: "Team" } & Pick<Team, "id">>;
  };

export type ViewPreferencesFragment = { __typename: "ViewPreferences" } & Pick<
  ViewPreferences,
  "updatedAt" | "archivedAt" | "createdAt" | "id" | "type" | "viewType"
>;

export type AuditEntryFragment = { __typename: "AuditEntry" } & Pick<
  AuditEntry,
  | "requestInformation"
  | "metadata"
  | "countryCode"
  | "ip"
  | "actorId"
  | "updatedAt"
  | "archivedAt"
  | "createdAt"
  | "id"
  | "type"
> & { actor?: Maybe<{ __typename?: "User" } & Pick<User, "id">> };

export type ZendeskSettingsFragment = { __typename: "ZendeskSettings" } & Pick<
  ZendeskSettings,
  | "botUserId"
  | "url"
  | "subdomain"
  | "automateTicketReopeningOnComment"
  | "automateTicketReopeningOnCancellation"
  | "automateTicketReopeningOnCompletion"
  | "sendNoteOnStatusChange"
  | "sendNoteOnComment"
>;

export type AdminJobConfigurationPayloadFragment = { __typename: "AdminJobConfigurationPayload" } & Pick<
  AdminJobConfigurationPayload,
  "currentJob" | "delay" | "enabled" | "param"
>;

export type AdminJobStatusPayloadFragment = { __typename: "AdminJobStatusPayload" } & Pick<
  AdminJobStatusPayload,
  "availableJobs" | "cursor" | "startedAt"
> & { configuration: { __typename?: "AdminJobConfigurationPayload" } & AdminJobConfigurationPayloadFragment };

export type ApiKeyConnectionFragment = { __typename: "ApiKeyConnection" } & {
  nodes: Array<{ __typename?: "ApiKey" } & ApiKeyFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type ApiKeyPayloadFragment = { __typename: "ApiKeyPayload" } & Pick<ApiKeyPayload, "lastSyncId" | "success"> & {
    apiKey: { __typename?: "ApiKey" } & ApiKeyFragment;
  };

export type ArchivePayloadFragment = { __typename: "ArchivePayload" } & Pick<ArchivePayload, "lastSyncId" | "success">;

export type AttachmentConnectionFragment = { __typename: "AttachmentConnection" } & {
  nodes: Array<{ __typename?: "Attachment" } & AttachmentFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type AttachmentPayloadFragment = { __typename: "AttachmentPayload" } & Pick<
  AttachmentPayload,
  "lastSyncId" | "success"
> & { attachment: { __typename?: "Attachment" } & Pick<Attachment, "id"> };

export type AuditEntryConnectionFragment = { __typename: "AuditEntryConnection" } & {
  nodes: Array<{ __typename?: "AuditEntry" } & AuditEntryFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type AuditEntryTypeFragment = { __typename: "AuditEntryType" } & Pick<AuditEntryType, "description" | "type">;

export type AuthResolverResponseFragment = { __typename: "AuthResolverResponse" } & Pick<
  AuthResolverResponse,
  "email" | "lastUsedOrganizationId" | "token" | "allowDomainAccess" | "id"
> & {
    availableOrganizations?: Maybe<Array<{ __typename?: "Organization" } & OrganizationFragment>>;
    users: Array<{ __typename?: "User" } & UserFragment>;
  };

export type CommentConnectionFragment = { __typename: "CommentConnection" } & {
  nodes: Array<{ __typename?: "Comment" } & CommentFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type CommentPayloadFragment = { __typename: "CommentPayload" } & Pick<
  CommentPayload,
  "lastSyncId" | "success"
> & { comment: { __typename?: "Comment" } & Pick<Comment, "id"> };

export type ContactPayloadFragment = { __typename: "ContactPayload" } & Pick<ContactPayload, "success">;

export type CreateCsvExportReportPayloadFragment = { __typename: "CreateCsvExportReportPayload" } & Pick<
  CreateCsvExportReportPayload,
  "success"
>;

export type CreateOrJoinOrganizationResponseFragment = { __typename: "CreateOrJoinOrganizationResponse" } & {
  user: { __typename?: "User" } & Pick<User, "id">;
};

export type CustomViewConnectionFragment = { __typename: "CustomViewConnection" } & {
  nodes: Array<{ __typename?: "CustomView" } & CustomViewFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type CustomViewPayloadFragment = { __typename: "CustomViewPayload" } & Pick<
  CustomViewPayload,
  "lastSyncId" | "success"
> & { customView: { __typename?: "CustomView" } & Pick<CustomView, "id"> };

export type CycleConnectionFragment = { __typename: "CycleConnection" } & {
  nodes: Array<{ __typename?: "Cycle" } & CycleFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type CyclePayloadFragment = { __typename: "CyclePayload" } & Pick<CyclePayload, "lastSyncId" | "success"> & {
    cycle?: Maybe<{ __typename?: "Cycle" } & Pick<Cycle, "id">>;
  };

export type DocumentConnectionFragment = { __typename: "DocumentConnection" } & {
  nodes: Array<{ __typename?: "Document" } & DocumentFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type DocumentPayloadFragment = { __typename: "DocumentPayload" } & Pick<
  DocumentPayload,
  "lastSyncId" | "success"
> & { document: { __typename?: "Document" } & Pick<Document, "id"> };

export type EmailUnsubscribePayloadFragment = { __typename: "EmailUnsubscribePayload" } & Pick<
  EmailUnsubscribePayload,
  "success"
>;

export type EmailUserAccountAuthChallengeResponseFragment = {
  __typename: "EmailUserAccountAuthChallengeResponse";
} & Pick<EmailUserAccountAuthChallengeResponse, "authType" | "success">;

export type EmojiConnectionFragment = { __typename: "EmojiConnection" } & {
  nodes: Array<{ __typename?: "Emoji" } & EmojiFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type EmojiPayloadFragment = { __typename: "EmojiPayload" } & Pick<EmojiPayload, "lastSyncId" | "success"> & {
    emoji: { __typename?: "Emoji" } & Pick<Emoji, "id">;
  };

export type EventPayloadFragment = { __typename: "EventPayload" } & Pick<EventPayload, "success">;

export type FavoriteConnectionFragment = { __typename: "FavoriteConnection" } & {
  nodes: Array<{ __typename?: "Favorite" } & FavoriteFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type FavoritePayloadFragment = { __typename: "FavoritePayload" } & Pick<
  FavoritePayload,
  "lastSyncId" | "success"
> & { favorite: { __typename?: "Favorite" } & Pick<Favorite, "id"> };

export type FigmaEmbedPayloadFragment = { __typename: "FigmaEmbedPayload" } & Pick<FigmaEmbedPayload, "success"> & {
    figmaEmbed?: Maybe<{ __typename?: "FigmaEmbed" } & FigmaEmbedFragment>;
  };

export type FrontAttachmentPayloadFragment = { __typename: "FrontAttachmentPayload" } & Pick<
  FrontAttachmentPayload,
  "lastSyncId" | "success"
>;

export type GitHubCommitIntegrationPayloadFragment = { __typename: "GitHubCommitIntegrationPayload" } & Pick<
  GitHubCommitIntegrationPayload,
  "lastSyncId" | "webhookSecret" | "success"
> & { integration?: Maybe<{ __typename?: "Integration" } & Pick<Integration, "id">> };

export type ImageUploadFromUrlPayloadFragment = { __typename: "ImageUploadFromUrlPayload" } & Pick<
  ImageUploadFromUrlPayload,
  "url" | "lastSyncId" | "success"
>;

export type IntegrationConnectionFragment = { __typename: "IntegrationConnection" } & {
  nodes: Array<{ __typename?: "Integration" } & IntegrationFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type IntegrationPayloadFragment = { __typename: "IntegrationPayload" } & Pick<
  IntegrationPayload,
  "lastSyncId" | "success"
> & { integration?: Maybe<{ __typename?: "Integration" } & Pick<Integration, "id">> };

export type IntegrationRequestPayloadFragment = { __typename: "IntegrationRequestPayload" } & Pick<
  IntegrationRequestPayload,
  "success"
>;

export type IntegrationTemplateConnectionFragment = { __typename: "IntegrationTemplateConnection" } & {
  nodes: Array<{ __typename?: "IntegrationTemplate" } & IntegrationTemplateFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type IntegrationTemplatePayloadFragment = { __typename: "IntegrationTemplatePayload" } & Pick<
  IntegrationTemplatePayload,
  "lastSyncId" | "success"
> & { integrationTemplate: { __typename?: "IntegrationTemplate" } & Pick<IntegrationTemplate, "id"> };

export type IntegrationsSettingsConnectionFragment = { __typename: "IntegrationsSettingsConnection" } & {
  nodes: Array<{ __typename?: "IntegrationsSettings" } & IntegrationsSettingsFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type IntegrationsSettingsPayloadFragment = { __typename: "IntegrationsSettingsPayload" } & Pick<
  IntegrationsSettingsPayload,
  "lastSyncId" | "success"
> & { integrationsSettings: { __typename?: "IntegrationsSettings" } & Pick<IntegrationsSettings, "id"> };

export type IssueBatchPayloadFragment = { __typename: "IssueBatchPayload" } & Pick<
  IssueBatchPayload,
  "lastSyncId" | "success"
> & { issues: Array<{ __typename?: "Issue" } & IssueFragment> };

export type IssueConnectionFragment = { __typename: "IssueConnection" } & {
  nodes: Array<{ __typename?: "Issue" } & IssueFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type IssueHistoryConnectionFragment = { __typename: "IssueHistoryConnection" } & {
  nodes: Array<{ __typename?: "IssueHistory" } & IssueHistoryFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type IssueImportDeletePayloadFragment = { __typename: "IssueImportDeletePayload" } & Pick<
  IssueImportDeletePayload,
  "lastSyncId" | "success"
> & { issueImport?: Maybe<{ __typename?: "IssueImport" } & IssueImportFragment> };

export type IssueImportPayloadFragment = { __typename: "IssueImportPayload" } & Pick<
  IssueImportPayload,
  "lastSyncId" | "success"
> & { issueImport?: Maybe<{ __typename?: "IssueImport" } & IssueImportFragment> };

export type IssueLabelConnectionFragment = { __typename: "IssueLabelConnection" } & {
  nodes: Array<{ __typename?: "IssueLabel" } & IssueLabelFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type IssueLabelPayloadFragment = { __typename: "IssueLabelPayload" } & Pick<
  IssueLabelPayload,
  "lastSyncId" | "success"
> & { issueLabel: { __typename?: "IssueLabel" } & Pick<IssueLabel, "id"> };

export type IssuePayloadFragment = { __typename: "IssuePayload" } & Pick<IssuePayload, "lastSyncId" | "success"> & {
    issue?: Maybe<{ __typename?: "Issue" } & Pick<Issue, "id">>;
  };

export type IssuePriorityValueFragment = { __typename: "IssuePriorityValue" } & Pick<
  IssuePriorityValue,
  "label" | "priority"
>;

export type IssueRelationConnectionFragment = { __typename: "IssueRelationConnection" } & {
  nodes: Array<{ __typename?: "IssueRelation" } & IssueRelationFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type IssueRelationPayloadFragment = { __typename: "IssueRelationPayload" } & Pick<
  IssueRelationPayload,
  "lastSyncId" | "success"
> & { issueRelation: { __typename?: "IssueRelation" } & Pick<IssueRelation, "id"> };

export type LogoutResponseFragment = { __typename: "LogoutResponse" } & Pick<LogoutResponse, "success">;

type Node_ApiKey_Fragment = { __typename: "ApiKey" } & Pick<ApiKey, "id">;

type Node_Attachment_Fragment = { __typename: "Attachment" } & Pick<Attachment, "id">;

type Node_AuditEntry_Fragment = { __typename: "AuditEntry" } & Pick<AuditEntry, "id">;

type Node_Comment_Fragment = { __typename: "Comment" } & Pick<Comment, "id">;

type Node_CustomView_Fragment = { __typename: "CustomView" } & Pick<CustomView, "id">;

type Node_Cycle_Fragment = { __typename: "Cycle" } & Pick<Cycle, "id">;

type Node_Document_Fragment = { __typename: "Document" } & Pick<Document, "id">;

type Node_Emoji_Fragment = { __typename: "Emoji" } & Pick<Emoji, "id">;

type Node_Favorite_Fragment = { __typename: "Favorite" } & Pick<Favorite, "id">;

type Node_Integration_Fragment = { __typename: "Integration" } & Pick<Integration, "id">;

type Node_IntegrationTemplate_Fragment = { __typename: "IntegrationTemplate" } & Pick<IntegrationTemplate, "id">;

type Node_IntegrationsSettings_Fragment = { __typename: "IntegrationsSettings" } & Pick<IntegrationsSettings, "id">;

type Node_Issue_Fragment = { __typename: "Issue" } & Pick<Issue, "id">;

type Node_IssueDraft_Fragment = { __typename: "IssueDraft" } & Pick<IssueDraft, "id">;

type Node_IssueHistory_Fragment = { __typename: "IssueHistory" } & Pick<IssueHistory, "id">;

type Node_IssueImport_Fragment = { __typename: "IssueImport" } & Pick<IssueImport, "id">;

type Node_IssueLabel_Fragment = { __typename: "IssueLabel" } & Pick<IssueLabel, "id">;

type Node_IssueNotification_Fragment = { __typename: "IssueNotification" } & Pick<IssueNotification, "id">;

type Node_IssueRelation_Fragment = { __typename: "IssueRelation" } & Pick<IssueRelation, "id">;

type Node_OauthClient_Fragment = { __typename: "OauthClient" } & Pick<OauthClient, "id">;

type Node_OauthClientApproval_Fragment = { __typename: "OauthClientApproval" } & Pick<OauthClientApproval, "id">;

type Node_OauthClientApprovalNotification_Fragment = { __typename: "OauthClientApprovalNotification" } & Pick<
  OauthClientApprovalNotification,
  "id"
>;

type Node_Organization_Fragment = { __typename: "Organization" } & Pick<Organization, "id">;

type Node_OrganizationDomain_Fragment = { __typename: "OrganizationDomain" } & Pick<OrganizationDomain, "id">;

type Node_OrganizationInvite_Fragment = { __typename: "OrganizationInvite" } & Pick<OrganizationInvite, "id">;

type Node_PaidSubscription_Fragment = { __typename: "PaidSubscription" } & Pick<PaidSubscription, "id">;

type Node_PersonalNote_Fragment = { __typename: "PersonalNote" } & Pick<PersonalNote, "id">;

type Node_Project_Fragment = { __typename: "Project" } & Pick<Project, "id">;

type Node_ProjectLink_Fragment = { __typename: "ProjectLink" } & Pick<ProjectLink, "id">;

type Node_ProjectMilestone_Fragment = { __typename: "ProjectMilestone" } & Pick<ProjectMilestone, "id">;

type Node_ProjectNotification_Fragment = { __typename: "ProjectNotification" } & Pick<ProjectNotification, "id">;

type Node_ProjectNotificationSubscription_Fragment = { __typename: "ProjectNotificationSubscription" } & Pick<
  ProjectNotificationSubscription,
  "id"
>;

type Node_ProjectUpdate_Fragment = { __typename: "ProjectUpdate" } & Pick<ProjectUpdate, "id">;

type Node_ProjectUpdateInteraction_Fragment = { __typename: "ProjectUpdateInteraction" } & Pick<
  ProjectUpdateInteraction,
  "id"
>;

type Node_PushSubscription_Fragment = { __typename: "PushSubscription" } & Pick<PushSubscription, "id">;

type Node_Reaction_Fragment = { __typename: "Reaction" } & Pick<Reaction, "id">;

type Node_Roadmap_Fragment = { __typename: "Roadmap" } & Pick<Roadmap, "id">;

type Node_RoadmapToProject_Fragment = { __typename: "RoadmapToProject" } & Pick<RoadmapToProject, "id">;

type Node_Team_Fragment = { __typename: "Team" } & Pick<Team, "id">;

type Node_TeamMembership_Fragment = { __typename: "TeamMembership" } & Pick<TeamMembership, "id">;

type Node_TeamNotificationSubscription_Fragment = { __typename: "TeamNotificationSubscription" } & Pick<
  TeamNotificationSubscription,
  "id"
>;

type Node_Template_Fragment = { __typename: "Template" } & Pick<Template, "id">;

type Node_User_Fragment = { __typename: "User" } & Pick<User, "id">;

type Node_UserSettings_Fragment = { __typename: "UserSettings" } & Pick<UserSettings, "id">;

type Node_ViewPreferences_Fragment = { __typename: "ViewPreferences" } & Pick<ViewPreferences, "id">;

type Node_Webhook_Fragment = { __typename: "Webhook" } & Pick<Webhook, "id">;

type Node_WorkflowDefinition_Fragment = { __typename: "WorkflowDefinition" } & Pick<WorkflowDefinition, "id">;

type Node_WorkflowState_Fragment = { __typename: "WorkflowState" } & Pick<WorkflowState, "id">;

export type NodeFragment =
  | Node_ApiKey_Fragment
  | Node_Attachment_Fragment
  | Node_AuditEntry_Fragment
  | Node_Comment_Fragment
  | Node_CustomView_Fragment
  | Node_Cycle_Fragment
  | Node_Document_Fragment
  | Node_Emoji_Fragment
  | Node_Favorite_Fragment
  | Node_Integration_Fragment
  | Node_IntegrationTemplate_Fragment
  | Node_IntegrationsSettings_Fragment
  | Node_Issue_Fragment
  | Node_IssueDraft_Fragment
  | Node_IssueHistory_Fragment
  | Node_IssueImport_Fragment
  | Node_IssueLabel_Fragment
  | Node_IssueNotification_Fragment
  | Node_IssueRelation_Fragment
  | Node_OauthClient_Fragment
  | Node_OauthClientApproval_Fragment
  | Node_OauthClientApprovalNotification_Fragment
  | Node_Organization_Fragment
  | Node_OrganizationDomain_Fragment
  | Node_OrganizationInvite_Fragment
  | Node_PaidSubscription_Fragment
  | Node_PersonalNote_Fragment
  | Node_Project_Fragment
  | Node_ProjectLink_Fragment
  | Node_ProjectMilestone_Fragment
  | Node_ProjectNotification_Fragment
  | Node_ProjectNotificationSubscription_Fragment
  | Node_ProjectUpdate_Fragment
  | Node_ProjectUpdateInteraction_Fragment
  | Node_PushSubscription_Fragment
  | Node_Reaction_Fragment
  | Node_Roadmap_Fragment
  | Node_RoadmapToProject_Fragment
  | Node_Team_Fragment
  | Node_TeamMembership_Fragment
  | Node_TeamNotificationSubscription_Fragment
  | Node_Template_Fragment
  | Node_User_Fragment
  | Node_UserSettings_Fragment
  | Node_ViewPreferences_Fragment
  | Node_Webhook_Fragment
  | Node_WorkflowDefinition_Fragment
  | Node_WorkflowState_Fragment;

export type NotificationConnectionFragment = { __typename: "NotificationConnection" } & {
  nodes: Array<
    | ({ __typename?: "IssueNotification" } & Notification_IssueNotification_Fragment)
    | ({ __typename?: "OauthClientApprovalNotification" } & Notification_OauthClientApprovalNotification_Fragment)
    | ({ __typename?: "ProjectNotification" } & Notification_ProjectNotification_Fragment)
  >;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type NotificationPayloadFragment = { __typename: "NotificationPayload" } & Pick<
  NotificationPayload,
  "lastSyncId" | "success"
> & {
    notification:
      | ({ __typename?: "IssueNotification" } & Notification_IssueNotification_Fragment)
      | ({ __typename?: "OauthClientApprovalNotification" } & Notification_OauthClientApprovalNotification_Fragment)
      | ({ __typename?: "ProjectNotification" } & Notification_ProjectNotification_Fragment);
  };

export type NotificationSubscriptionConnectionFragment = { __typename: "NotificationSubscriptionConnection" } & {
  nodes: Array<
    | ({
        __typename?: "ProjectNotificationSubscription";
      } & NotificationSubscription_ProjectNotificationSubscription_Fragment)
    | ({ __typename?: "TeamNotificationSubscription" } & NotificationSubscription_TeamNotificationSubscription_Fragment)
  >;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type NotificationSubscriptionPayloadFragment = { __typename: "NotificationSubscriptionPayload" } & Pick<
  NotificationSubscriptionPayload,
  "lastSyncId" | "success"
> & {
    notificationSubscription:
      | ({
          __typename?: "ProjectNotificationSubscription";
        } & NotificationSubscription_ProjectNotificationSubscription_Fragment)
      | ({
          __typename?: "TeamNotificationSubscription";
        } & NotificationSubscription_TeamNotificationSubscription_Fragment);
  };

export type OrganizationCancelDeletePayloadFragment = { __typename: "OrganizationCancelDeletePayload" } & Pick<
  OrganizationCancelDeletePayload,
  "success"
>;

export type OrganizationDeletePayloadFragment = { __typename: "OrganizationDeletePayload" } & Pick<
  OrganizationDeletePayload,
  "success"
>;

export type OrganizationExistsPayloadFragment = { __typename: "OrganizationExistsPayload" } & Pick<
  OrganizationExistsPayload,
  "success" | "exists"
>;

export type OrganizationInviteConnectionFragment = { __typename: "OrganizationInviteConnection" } & {
  nodes: Array<{ __typename?: "OrganizationInvite" } & OrganizationInviteFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type OrganizationInviteDetailsPayloadFragment = { __typename: "OrganizationInviteDetailsPayload" } & Pick<
  OrganizationInviteDetailsPayload,
  | "organizationId"
  | "organizationName"
  | "email"
  | "inviter"
  | "organizationLogoUrl"
  | "createdAt"
  | "accepted"
  | "expired"
>;

export type OrganizationInvitePayloadFragment = { __typename: "OrganizationInvitePayload" } & Pick<
  OrganizationInvitePayload,
  "lastSyncId" | "success"
> & { organizationInvite: { __typename?: "OrganizationInvite" } & Pick<OrganizationInvite, "id"> };

export type OrganizationPayloadFragment = { __typename: "OrganizationPayload" } & Pick<
  OrganizationPayload,
  "lastSyncId" | "success"
>;

export type PageInfoFragment = { __typename: "PageInfo" } & Pick<
  PageInfo,
  "startCursor" | "endCursor" | "hasPreviousPage" | "hasNextPage"
>;

export type ProjectConnectionFragment = { __typename: "ProjectConnection" } & {
  nodes: Array<{ __typename?: "Project" } & ProjectFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type ProjectLinkConnectionFragment = { __typename: "ProjectLinkConnection" } & {
  nodes: Array<{ __typename?: "ProjectLink" } & ProjectLinkFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type ProjectLinkPayloadFragment = { __typename: "ProjectLinkPayload" } & Pick<
  ProjectLinkPayload,
  "lastSyncId" | "success"
> & { projectLink: { __typename?: "ProjectLink" } & Pick<ProjectLink, "id"> };

export type ProjectMilestoneConnectionFragment = { __typename: "ProjectMilestoneConnection" } & {
  nodes: Array<{ __typename?: "ProjectMilestone" } & ProjectMilestoneFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type ProjectMilestonePayloadFragment = { __typename: "ProjectMilestonePayload" } & Pick<
  ProjectMilestonePayload,
  "lastSyncId" | "success"
> & { projectMilestone: { __typename?: "ProjectMilestone" } & Pick<ProjectMilestone, "id"> };

export type ProjectPayloadFragment = { __typename: "ProjectPayload" } & Pick<
  ProjectPayload,
  "lastSyncId" | "success"
> & { project?: Maybe<{ __typename?: "Project" } & Pick<Project, "id">> };

export type ProjectUpdateConnectionFragment = { __typename: "ProjectUpdateConnection" } & {
  nodes: Array<{ __typename?: "ProjectUpdate" } & ProjectUpdateFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type ProjectUpdateInteractionConnectionFragment = { __typename: "ProjectUpdateInteractionConnection" } & {
  nodes: Array<{ __typename?: "ProjectUpdateInteraction" } & ProjectUpdateInteractionFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type ProjectUpdateInteractionPayloadFragment = { __typename: "ProjectUpdateInteractionPayload" } & Pick<
  ProjectUpdateInteractionPayload,
  "lastSyncId" | "success"
> & { projectUpdateInteraction: { __typename?: "ProjectUpdateInteraction" } & Pick<ProjectUpdateInteraction, "id"> };

export type ProjectUpdatePayloadFragment = { __typename: "ProjectUpdatePayload" } & Pick<
  ProjectUpdatePayload,
  "lastSyncId" | "success"
> & { projectUpdate: { __typename?: "ProjectUpdate" } & Pick<ProjectUpdate, "id"> };

export type ProjectUpdateWithInteractionPayloadFragment = { __typename: "ProjectUpdateWithInteractionPayload" } & Pick<
  ProjectUpdateWithInteractionPayload,
  "lastSyncId" | "success"
> & {
    interaction: { __typename?: "ProjectUpdateInteraction" } & Pick<ProjectUpdateInteraction, "id">;
    projectUpdate: { __typename?: "ProjectUpdate" } & Pick<ProjectUpdate, "id">;
  };

export type PushSubscriptionConnectionFragment = { __typename: "PushSubscriptionConnection" } & {
  nodes: Array<{ __typename?: "PushSubscription" } & PushSubscriptionFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type PushSubscriptionPayloadFragment = { __typename: "PushSubscriptionPayload" } & Pick<
  PushSubscriptionPayload,
  "lastSyncId" | "success"
>;

export type PushSubscriptionTestPayloadFragment = { __typename: "PushSubscriptionTestPayload" } & Pick<
  PushSubscriptionTestPayload,
  "success"
>;

export type RateLimitPayloadFragment = { __typename: "RateLimitPayload" } & Pick<
  RateLimitPayload,
  "identifier" | "kind"
> & { limits: Array<{ __typename?: "RateLimitResultPayload" } & RateLimitResultPayloadFragment> };

export type RateLimitResultPayloadFragment = { __typename: "RateLimitResultPayload" } & Pick<
  RateLimitResultPayload,
  "period" | "remainingAmount" | "requestedAmount" | "reset" | "allowedAmount" | "type"
>;

export type ReactionConnectionFragment = { __typename: "ReactionConnection" } & {
  nodes: Array<{ __typename?: "Reaction" } & ReactionFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type ReactionPayloadFragment = { __typename: "ReactionPayload" } & Pick<
  ReactionPayload,
  "lastSyncId" | "success"
> & { reaction: { __typename?: "Reaction" } & ReactionFragment };

export type RoadmapConnectionFragment = { __typename: "RoadmapConnection" } & {
  nodes: Array<{ __typename?: "Roadmap" } & RoadmapFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type RoadmapPayloadFragment = { __typename: "RoadmapPayload" } & Pick<
  RoadmapPayload,
  "lastSyncId" | "success"
> & { roadmap: { __typename?: "Roadmap" } & Pick<Roadmap, "id"> };

export type RoadmapToProjectConnectionFragment = { __typename: "RoadmapToProjectConnection" } & {
  nodes: Array<{ __typename?: "RoadmapToProject" } & RoadmapToProjectFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type RoadmapToProjectPayloadFragment = { __typename: "RoadmapToProjectPayload" } & Pick<
  RoadmapToProjectPayload,
  "lastSyncId" | "success"
> & { roadmapToProject: { __typename?: "RoadmapToProject" } & Pick<RoadmapToProject, "id"> };

export type SamlConfigurationFragment = { __typename: "SamlConfiguration" } & Pick<
  SamlConfiguration,
  "ssoBinding" | "ssoEndpoint" | "ssoSignAlgo" | "issuerEntityId" | "ssoSigningCert"
>;

export type SsoUrlFromEmailResponseFragment = { __typename: "SsoUrlFromEmailResponse" } & Pick<
  SsoUrlFromEmailResponse,
  "samlSsoUrl" | "success"
>;

export type SynchronizedPayloadFragment = { __typename: "SynchronizedPayload" } & Pick<
  SynchronizedPayload,
  "lastSyncId"
>;

export type TeamConnectionFragment = { __typename: "TeamConnection" } & {
  nodes: Array<{ __typename?: "Team" } & TeamFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type TeamMembershipConnectionFragment = { __typename: "TeamMembershipConnection" } & {
  nodes: Array<{ __typename?: "TeamMembership" } & TeamMembershipFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type TeamMembershipPayloadFragment = { __typename: "TeamMembershipPayload" } & Pick<
  TeamMembershipPayload,
  "lastSyncId" | "success"
> & { teamMembership?: Maybe<{ __typename?: "TeamMembership" } & Pick<TeamMembership, "id">> };

export type TeamPayloadFragment = { __typename: "TeamPayload" } & Pick<TeamPayload, "lastSyncId" | "success"> & {
    team?: Maybe<{ __typename?: "Team" } & Pick<Team, "id">>;
  };

export type TemplateConnectionFragment = { __typename: "TemplateConnection" } & {
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type TemplatePayloadFragment = { __typename: "TemplatePayload" } & Pick<
  TemplatePayload,
  "lastSyncId" | "success"
> & { template: { __typename?: "Template" } & Pick<Template, "id"> };

export type UploadFileHeaderFragment = { __typename: "UploadFileHeader" } & Pick<UploadFileHeader, "key" | "value">;

export type UploadPayloadFragment = { __typename: "UploadPayload" } & Pick<UploadPayload, "lastSyncId" | "success"> & {
    uploadFile?: Maybe<{ __typename?: "UploadFile" } & UploadFileFragment>;
  };

export type UserAdminPayloadFragment = { __typename: "UserAdminPayload" } & Pick<UserAdminPayload, "success">;

export type UserConnectionFragment = { __typename: "UserConnection" } & {
  nodes: Array<{ __typename?: "User" } & UserFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type UserPayloadFragment = { __typename: "UserPayload" } & Pick<UserPayload, "lastSyncId" | "success"> & {
    user?: Maybe<{ __typename?: "User" } & Pick<User, "id">>;
  };

export type UserSettingsFlagPayloadFragment = { __typename: "UserSettingsFlagPayload" } & Pick<
  UserSettingsFlagPayload,
  "flag" | "value" | "lastSyncId" | "success"
>;

export type UserSettingsFlagsResetPayloadFragment = { __typename: "UserSettingsFlagsResetPayload" } & Pick<
  UserSettingsFlagsResetPayload,
  "lastSyncId" | "success"
>;

export type UserSettingsPayloadFragment = { __typename: "UserSettingsPayload" } & Pick<
  UserSettingsPayload,
  "lastSyncId" | "success"
>;

export type ViewPreferencesPayloadFragment = { __typename: "ViewPreferencesPayload" } & Pick<
  ViewPreferencesPayload,
  "lastSyncId" | "success"
> & { viewPreferences: { __typename?: "ViewPreferences" } & ViewPreferencesFragment };

export type WebhookConnectionFragment = { __typename: "WebhookConnection" } & {
  nodes: Array<{ __typename?: "Webhook" } & WebhookFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type WebhookPayloadFragment = { __typename: "WebhookPayload" } & Pick<
  WebhookPayload,
  "lastSyncId" | "success"
> & { webhook: { __typename?: "Webhook" } & Pick<Webhook, "id"> };

export type WorkflowDefinitionFragment = { __typename: "WorkflowDefinition" } & Pick<
  WorkflowDefinition,
  | "activities"
  | "schedule"
  | "conditions"
  | "description"
  | "updatedAt"
  | "groupName"
  | "name"
  | "sortOrder"
  | "archivedAt"
  | "createdAt"
  | "id"
  | "enabled"
> & { team?: Maybe<{ __typename?: "Team" } & Pick<Team, "id">>; creator: { __typename?: "User" } & Pick<User, "id"> };

export type WorkflowDefinitionConnectionFragment = { __typename: "WorkflowDefinitionConnection" } & {
  nodes: Array<{ __typename?: "WorkflowDefinition" } & WorkflowDefinitionFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type WorkflowStateConnectionFragment = { __typename: "WorkflowStateConnection" } & {
  nodes: Array<{ __typename?: "WorkflowState" } & WorkflowStateFragment>;
  pageInfo: { __typename?: "PageInfo" } & PageInfoFragment;
};

export type WorkflowStatePayloadFragment = { __typename: "WorkflowStatePayload" } & Pick<
  WorkflowStatePayload,
  "lastSyncId" | "success"
> & { workflowState: { __typename?: "WorkflowState" } & Pick<WorkflowState, "id"> };

export type AirbyteIntegrationConnectMutationVariables = Exact<{
  input: AirbyteConfigurationInput;
}>;

export type AirbyteIntegrationConnectMutation = { __typename?: "Mutation" } & {
  airbyteIntegrationConnect: { __typename?: "IntegrationPayload" } & IntegrationPayloadFragment;
};

export type CreateApiKeyMutationVariables = Exact<{
  input: ApiKeyCreateInput;
}>;

export type CreateApiKeyMutation = { __typename?: "Mutation" } & {
  apiKeyCreate: { __typename?: "ApiKeyPayload" } & ApiKeyPayloadFragment;
};

export type DeleteApiKeyMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteApiKeyMutation = { __typename?: "Mutation" } & {
  apiKeyDelete: { __typename?: "ArchivePayload" } & ArchivePayloadFragment;
};

export type ArchiveAttachmentMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type ArchiveAttachmentMutation = { __typename?: "Mutation" } & {
  attachmentArchive: { __typename?: "ArchivePayload" } & ArchivePayloadFragment;
};

export type CreateAttachmentMutationVariables = Exact<{
  input: AttachmentCreateInput;
}>;

export type CreateAttachmentMutation = { __typename?: "Mutation" } & {
  attachmentCreate: { __typename?: "AttachmentPayload" } & AttachmentPayloadFragment;
};

export type DeleteAttachmentMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteAttachmentMutation = { __typename?: "Mutation" } & {
  attachmentDelete: { __typename?: "ArchivePayload" } & ArchivePayloadFragment;
};

export type AttachmentLinkDiscordMutationVariables = Exact<{
  channelId: Scalars["String"];
  issueId: Scalars["String"];
  messageId: Scalars["String"];
  url: Scalars["String"];
}>;

export type AttachmentLinkDiscordMutation = { __typename?: "Mutation" } & {
  attachmentLinkDiscord: { __typename?: "AttachmentPayload" } & AttachmentPayloadFragment;
};

export type AttachmentLinkFrontMutationVariables = Exact<{
  conversationId: Scalars["String"];
  issueId: Scalars["String"];
}>;

export type AttachmentLinkFrontMutation = { __typename?: "Mutation" } & {
  attachmentLinkFront: { __typename?: "FrontAttachmentPayload" } & FrontAttachmentPayloadFragment;
};

export type AttachmentLinkIntercomMutationVariables = Exact<{
  conversationId: Scalars["String"];
  issueId: Scalars["String"];
}>;

export type AttachmentLinkIntercomMutation = { __typename?: "Mutation" } & {
  attachmentLinkIntercom: { __typename?: "AttachmentPayload" } & AttachmentPayloadFragment;
};

export type AttachmentLinkJiraIssueMutationVariables = Exact<{
  issueId: Scalars["String"];
  jiraIssueId: Scalars["String"];
}>;

export type AttachmentLinkJiraIssueMutation = { __typename?: "Mutation" } & {
  attachmentLinkJiraIssue: { __typename?: "AttachmentPayload" } & AttachmentPayloadFragment;
};

export type AttachmentLinkUrlMutationVariables = Exact<{
  id?: Maybe<Scalars["String"]>;
  issueId: Scalars["String"];
  title?: Maybe<Scalars["String"]>;
  url: Scalars["String"];
}>;

export type AttachmentLinkUrlMutation = { __typename?: "Mutation" } & {
  attachmentLinkURL: { __typename?: "AttachmentPayload" } & AttachmentPayloadFragment;
};

export type AttachmentLinkZendeskMutationVariables = Exact<{
  issueId: Scalars["String"];
  ticketId: Scalars["String"];
}>;

export type AttachmentLinkZendeskMutation = { __typename?: "Mutation" } & {
  attachmentLinkZendesk: { __typename?: "AttachmentPayload" } & AttachmentPayloadFragment;
};

export type UpdateAttachmentMutationVariables = Exact<{
  id: Scalars["String"];
  input: AttachmentUpdateInput;
}>;

export type UpdateAttachmentMutation = { __typename?: "Mutation" } & {
  attachmentUpdate: { __typename?: "AttachmentPayload" } & AttachmentPayloadFragment;
};

export type CreateCommentMutationVariables = Exact<{
  input: CommentCreateInput;
}>;

export type CreateCommentMutation = { __typename?: "Mutation" } & {
  commentCreate: { __typename?: "CommentPayload" } & CommentPayloadFragment;
};

export type DeleteCommentMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteCommentMutation = { __typename?: "Mutation" } & {
  commentDelete: { __typename?: "ArchivePayload" } & ArchivePayloadFragment;
};

export type UpdateCommentMutationVariables = Exact<{
  id: Scalars["String"];
  input: CommentUpdateInput;
}>;

export type UpdateCommentMutation = { __typename?: "Mutation" } & {
  commentUpdate: { __typename?: "CommentPayload" } & CommentPayloadFragment;
};

export type CreateContactMutationVariables = Exact<{
  input: ContactCreateInput;
}>;

export type CreateContactMutation = { __typename?: "Mutation" } & {
  contactCreate: { __typename?: "ContactPayload" } & ContactPayloadFragment;
};

export type CreateCsvExportReportMutationVariables = Exact<{
  includePrivateTeamIds?: Maybe<Array<Scalars["String"]> | Scalars["String"]>;
}>;

export type CreateCsvExportReportMutation = { __typename?: "Mutation" } & {
  createCsvExportReport: { __typename?: "CreateCsvExportReportPayload" } & CreateCsvExportReportPayloadFragment;
};

export type CreateOrganizationFromOnboardingMutationVariables = Exact<{
  input: CreateOrganizationInput;
  survey?: Maybe<OnboardingCustomerSurvey>;
}>;

export type CreateOrganizationFromOnboardingMutation = { __typename?: "Mutation" } & {
  createOrganizationFromOnboarding: {
    __typename?: "CreateOrJoinOrganizationResponse";
  } & CreateOrJoinOrganizationResponseFragment;
};

export type CreateCustomViewMutationVariables = Exact<{
  input: CustomViewCreateInput;
}>;

export type CreateCustomViewMutation = { __typename?: "Mutation" } & {
  customViewCreate: { __typename?: "CustomViewPayload" } & CustomViewPayloadFragment;
};

export type DeleteCustomViewMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteCustomViewMutation = { __typename?: "Mutation" } & {
  customViewDelete: { __typename?: "ArchivePayload" } & ArchivePayloadFragment;
};

export type UpdateCustomViewMutationVariables = Exact<{
  id: Scalars["String"];
  input: CustomViewUpdateInput;
}>;

export type UpdateCustomViewMutation = { __typename?: "Mutation" } & {
  customViewUpdate: { __typename?: "CustomViewPayload" } & CustomViewPayloadFragment;
};

export type ArchiveCycleMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type ArchiveCycleMutation = { __typename?: "Mutation" } & {
  cycleArchive: { __typename?: "ArchivePayload" } & ArchivePayloadFragment;
};

export type CreateCycleMutationVariables = Exact<{
  input: CycleCreateInput;
}>;

export type CreateCycleMutation = { __typename?: "Mutation" } & {
  cycleCreate: { __typename?: "CyclePayload" } & CyclePayloadFragment;
};

export type UpdateCycleMutationVariables = Exact<{
  id: Scalars["String"];
  input: CycleUpdateInput;
}>;

export type UpdateCycleMutation = { __typename?: "Mutation" } & {
  cycleUpdate: { __typename?: "CyclePayload" } & CyclePayloadFragment;
};

export type CreateDocumentMutationVariables = Exact<{
  input: DocumentCreateInput;
}>;

export type CreateDocumentMutation = { __typename?: "Mutation" } & {
  documentCreate: { __typename?: "DocumentPayload" } & DocumentPayloadFragment;
};

export type DeleteDocumentMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteDocumentMutation = { __typename?: "Mutation" } & {
  documentDelete: { __typename?: "ArchivePayload" } & ArchivePayloadFragment;
};

export type UpdateDocumentMutationVariables = Exact<{
  id: Scalars["String"];
  input: DocumentUpdateInput;
}>;

export type UpdateDocumentMutation = { __typename?: "Mutation" } & {
  documentUpdate: { __typename?: "DocumentPayload" } & DocumentPayloadFragment;
};

export type EmailTokenUserAccountAuthMutationVariables = Exact<{
  input: TokenUserAccountAuthInput;
}>;

export type EmailTokenUserAccountAuthMutation = { __typename?: "Mutation" } & {
  emailTokenUserAccountAuth: { __typename?: "AuthResolverResponse" } & AuthResolverResponseFragment;
};

export type EmailUnsubscribeMutationVariables = Exact<{
  input: EmailUnsubscribeInput;
}>;

export type EmailUnsubscribeMutation = { __typename?: "Mutation" } & {
  emailUnsubscribe: { __typename?: "EmailUnsubscribePayload" } & EmailUnsubscribePayloadFragment;
};

export type EmailUserAccountAuthChallengeMutationVariables = Exact<{
  input: EmailUserAccountAuthChallengeInput;
}>;

export type EmailUserAccountAuthChallengeMutation = { __typename?: "Mutation" } & {
  emailUserAccountAuthChallenge: {
    __typename?: "EmailUserAccountAuthChallengeResponse";
  } & EmailUserAccountAuthChallengeResponseFragment;
};

export type CreateEmojiMutationVariables = Exact<{
  input: EmojiCreateInput;
}>;

export type CreateEmojiMutation = { __typename?: "Mutation" } & {
  emojiCreate: { __typename?: "EmojiPayload" } & EmojiPayloadFragment;
};

export type DeleteEmojiMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteEmojiMutation = { __typename?: "Mutation" } & {
  emojiDelete: { __typename?: "ArchivePayload" } & ArchivePayloadFragment;
};

export type CreateEventMutationVariables = Exact<{
  input: EventCreateInput;
}>;

export type CreateEventMutation = { __typename?: "Mutation" } & {
  eventCreate: { __typename?: "EventPayload" } & EventPayloadFragment;
};

export type CreateFavoriteMutationVariables = Exact<{
  input: FavoriteCreateInput;
}>;

export type CreateFavoriteMutation = { __typename?: "Mutation" } & {
  favoriteCreate: { __typename?: "FavoritePayload" } & FavoritePayloadFragment;
};

export type DeleteFavoriteMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteFavoriteMutation = { __typename?: "Mutation" } & {
  favoriteDelete: { __typename?: "ArchivePayload" } & ArchivePayloadFragment;
};

export type UpdateFavoriteMutationVariables = Exact<{
  id: Scalars["String"];
  input: FavoriteUpdateInput;
}>;

export type UpdateFavoriteMutation = { __typename?: "Mutation" } & {
  favoriteUpdate: { __typename?: "FavoritePayload" } & FavoritePayloadFragment;
};

export type FileUploadMutationVariables = Exact<{
  contentType: Scalars["String"];
  filename: Scalars["String"];
  makePublic?: Maybe<Scalars["Boolean"]>;
  metaData?: Maybe<Scalars["JSON"]>;
  size: Scalars["Int"];
}>;

export type FileUploadMutation = { __typename?: "Mutation" } & {
  fileUpload: { __typename?: "UploadPayload" } & UploadPayloadFragment;
};

export type GoogleUserAccountAuthMutationVariables = Exact<{
  input: GoogleUserAccountAuthInput;
}>;

export type GoogleUserAccountAuthMutation = { __typename?: "Mutation" } & {
  googleUserAccountAuth: { __typename?: "AuthResolverResponse" } & AuthResolverResponseFragment;
};

export type ImageUploadFromUrlMutationVariables = Exact<{
  url: Scalars["String"];
}>;

export type ImageUploadFromUrlMutation = { __typename?: "Mutation" } & {
  imageUploadFromUrl: { __typename?: "ImageUploadFromUrlPayload" } & ImageUploadFromUrlPayloadFragment;
};

export type DeleteIntegrationMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteIntegrationMutation = { __typename?: "Mutation" } & {
  integrationDelete: { __typename?: "ArchivePayload" } & ArchivePayloadFragment;
};

export type IntegrationDiscordMutationVariables = Exact<{
  code: Scalars["String"];
  redirectUri: Scalars["String"];
}>;

export type IntegrationDiscordMutation = { __typename?: "Mutation" } & {
  integrationDiscord: { __typename?: "IntegrationPayload" } & IntegrationPayloadFragment;
};

export type IntegrationFigmaMutationVariables = Exact<{
  code: Scalars["String"];
  redirectUri: Scalars["String"];
}>;

export type IntegrationFigmaMutation = { __typename?: "Mutation" } & {
  integrationFigma: { __typename?: "IntegrationPayload" } & IntegrationPayloadFragment;
};

export type IntegrationFrontMutationVariables = Exact<{
  code: Scalars["String"];
  redirectUri: Scalars["String"];
}>;

export type IntegrationFrontMutation = { __typename?: "Mutation" } & {
  integrationFront: { __typename?: "IntegrationPayload" } & IntegrationPayloadFragment;
};

export type CreateIntegrationGithubCommitMutationVariables = Exact<{ [key: string]: never }>;

export type CreateIntegrationGithubCommitMutation = { __typename?: "Mutation" } & {
  integrationGithubCommitCreate: {
    __typename?: "GitHubCommitIntegrationPayload";
  } & GitHubCommitIntegrationPayloadFragment;
};

export type IntegrationGithubConnectMutationVariables = Exact<{
  installationId: Scalars["String"];
}>;

export type IntegrationGithubConnectMutation = { __typename?: "Mutation" } & {
  integrationGithubConnect: { __typename?: "IntegrationPayload" } & IntegrationPayloadFragment;
};

export type IntegrationGitlabConnectMutationVariables = Exact<{
  accessToken: Scalars["String"];
  gitlabUrl: Scalars["String"];
}>;

export type IntegrationGitlabConnectMutation = { __typename?: "Mutation" } & {
  integrationGitlabConnect: { __typename?: "IntegrationPayload" } & IntegrationPayloadFragment;
};

export type IntegrationGoogleSheetsMutationVariables = Exact<{
  code: Scalars["String"];
}>;

export type IntegrationGoogleSheetsMutation = { __typename?: "Mutation" } & {
  integrationGoogleSheets: { __typename?: "IntegrationPayload" } & IntegrationPayloadFragment;
};

export type IntegrationIntercomMutationVariables = Exact<{
  code: Scalars["String"];
  domainUrl?: Maybe<Scalars["String"]>;
  redirectUri: Scalars["String"];
}>;

export type IntegrationIntercomMutation = { __typename?: "Mutation" } & {
  integrationIntercom: { __typename?: "IntegrationPayload" } & IntegrationPayloadFragment;
};

export type DeleteIntegrationIntercomMutationVariables = Exact<{ [key: string]: never }>;

export type DeleteIntegrationIntercomMutation = { __typename?: "Mutation" } & {
  integrationIntercomDelete: { __typename?: "IntegrationPayload" } & IntegrationPayloadFragment;
};

export type UpdateIntegrationIntercomSettingsMutationVariables = Exact<{
  input: IntercomSettingsInput;
}>;

export type UpdateIntegrationIntercomSettingsMutation = { __typename?: "Mutation" } & {
  integrationIntercomSettingsUpdate: { __typename?: "IntegrationPayload" } & IntegrationPayloadFragment;
};

export type IntegrationLoomMutationVariables = Exact<{ [key: string]: never }>;

export type IntegrationLoomMutation = { __typename?: "Mutation" } & {
  integrationLoom: { __typename?: "IntegrationPayload" } & IntegrationPayloadFragment;
};

export type IntegrationRequestMutationVariables = Exact<{
  input: IntegrationRequestInput;
}>;

export type IntegrationRequestMutation = { __typename?: "Mutation" } & {
  integrationRequest: { __typename?: "IntegrationRequestPayload" } & IntegrationRequestPayloadFragment;
};

export type IntegrationSentryConnectMutationVariables = Exact<{
  code: Scalars["String"];
  installationId: Scalars["String"];
  organizationSlug: Scalars["String"];
}>;

export type IntegrationSentryConnectMutation = { __typename?: "Mutation" } & {
  integrationSentryConnect: { __typename?: "IntegrationPayload" } & IntegrationPayloadFragment;
};

export type IntegrationSlackMutationVariables = Exact<{
  code: Scalars["String"];
  redirectUri: Scalars["String"];
  shouldUseV2Auth?: Maybe<Scalars["Boolean"]>;
}>;

export type IntegrationSlackMutation = { __typename?: "Mutation" } & {
  integrationSlack: { __typename?: "IntegrationPayload" } & IntegrationPayloadFragment;
};

export type IntegrationSlackImportEmojisMutationVariables = Exact<{
  code: Scalars["String"];
  redirectUri: Scalars["String"];
}>;

export type IntegrationSlackImportEmojisMutation = { __typename?: "Mutation" } & {
  integrationSlackImportEmojis: { __typename?: "IntegrationPayload" } & IntegrationPayloadFragment;
};

export type IntegrationSlackOrgProjectUpdatesPostMutationVariables = Exact<{
  code: Scalars["String"];
  redirectUri: Scalars["String"];
}>;

export type IntegrationSlackOrgProjectUpdatesPostMutation = { __typename?: "Mutation" } & {
  integrationSlackOrgProjectUpdatesPost: { __typename?: "IntegrationPayload" } & IntegrationPayloadFragment;
};

export type IntegrationSlackPersonalMutationVariables = Exact<{
  code: Scalars["String"];
  redirectUri: Scalars["String"];
}>;

export type IntegrationSlackPersonalMutation = { __typename?: "Mutation" } & {
  integrationSlackPersonal: { __typename?: "IntegrationPayload" } & IntegrationPayloadFragment;
};

export type IntegrationSlackPostMutationVariables = Exact<{
  code: Scalars["String"];
  redirectUri: Scalars["String"];
  shouldUseV2Auth?: Maybe<Scalars["Boolean"]>;
  teamId: Scalars["String"];
}>;

export type IntegrationSlackPostMutation = { __typename?: "Mutation" } & {
  integrationSlackPost: { __typename?: "IntegrationPayload" } & IntegrationPayloadFragment;
};

export type IntegrationSlackProjectPostMutationVariables = Exact<{
  code: Scalars["String"];
  projectId: Scalars["String"];
  redirectUri: Scalars["String"];
  service: Scalars["String"];
}>;

export type IntegrationSlackProjectPostMutation = { __typename?: "Mutation" } & {
  integrationSlackProjectPost: { __typename?: "IntegrationPayload" } & IntegrationPayloadFragment;
};

export type CreateIntegrationTemplateMutationVariables = Exact<{
  input: IntegrationTemplateCreateInput;
}>;

export type CreateIntegrationTemplateMutation = { __typename?: "Mutation" } & {
  integrationTemplateCreate: { __typename?: "IntegrationTemplatePayload" } & IntegrationTemplatePayloadFragment;
};

export type DeleteIntegrationTemplateMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteIntegrationTemplateMutation = { __typename?: "Mutation" } & {
  integrationTemplateDelete: { __typename?: "ArchivePayload" } & ArchivePayloadFragment;
};

export type IntegrationZendeskMutationVariables = Exact<{
  code: Scalars["String"];
  redirectUri: Scalars["String"];
  scope: Scalars["String"];
  subdomain: Scalars["String"];
}>;

export type IntegrationZendeskMutation = { __typename?: "Mutation" } & {
  integrationZendesk: { __typename?: "IntegrationPayload" } & IntegrationPayloadFragment;
};

export type CreateIntegrationsSettingsMutationVariables = Exact<{
  input: IntegrationsSettingsCreateInput;
}>;

export type CreateIntegrationsSettingsMutation = { __typename?: "Mutation" } & {
  integrationsSettingsCreate: { __typename?: "IntegrationsSettingsPayload" } & IntegrationsSettingsPayloadFragment;
};

export type UpdateIntegrationsSettingsMutationVariables = Exact<{
  id: Scalars["String"];
  input: IntegrationsSettingsUpdateInput;
}>;

export type UpdateIntegrationsSettingsMutation = { __typename?: "Mutation" } & {
  integrationsSettingsUpdate: { __typename?: "IntegrationsSettingsPayload" } & IntegrationsSettingsPayloadFragment;
};

export type ArchiveIssueMutationVariables = Exact<{
  id: Scalars["String"];
  trash?: Maybe<Scalars["Boolean"]>;
}>;

export type ArchiveIssueMutation = { __typename?: "Mutation" } & {
  issueArchive: { __typename?: "ArchivePayload" } & ArchivePayloadFragment;
};

export type UpdateIssueBatchMutationVariables = Exact<{
  ids: Array<Scalars["UUID"]> | Scalars["UUID"];
  input: IssueUpdateInput;
}>;

export type UpdateIssueBatchMutation = { __typename?: "Mutation" } & {
  issueBatchUpdate: { __typename?: "IssueBatchPayload" } & IssueBatchPayloadFragment;
};

export type CreateIssueMutationVariables = Exact<{
  input: IssueCreateInput;
}>;

export type CreateIssueMutation = { __typename?: "Mutation" } & {
  issueCreate: { __typename?: "IssuePayload" } & IssuePayloadFragment;
};

export type DeleteIssueMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteIssueMutation = { __typename?: "Mutation" } & {
  issueDelete: { __typename?: "ArchivePayload" } & ArchivePayloadFragment;
};

export type IssueImportCreateAsanaMutationVariables = Exact<{
  asanaTeamName: Scalars["String"];
  asanaToken: Scalars["String"];
  id?: Maybe<Scalars["String"]>;
  includeClosedIssues?: Maybe<Scalars["Boolean"]>;
  instantProcess?: Maybe<Scalars["Boolean"]>;
  organizationId?: Maybe<Scalars["String"]>;
  teamId?: Maybe<Scalars["String"]>;
  teamName?: Maybe<Scalars["String"]>;
}>;

export type IssueImportCreateAsanaMutation = { __typename?: "Mutation" } & {
  issueImportCreateAsana: { __typename?: "IssueImportPayload" } & IssueImportPayloadFragment;
};

export type IssueImportCreateClubhouseMutationVariables = Exact<{
  clubhouseTeamName: Scalars["String"];
  clubhouseToken: Scalars["String"];
  id?: Maybe<Scalars["String"]>;
  includeClosedIssues?: Maybe<Scalars["Boolean"]>;
  instantProcess?: Maybe<Scalars["Boolean"]>;
  organizationId?: Maybe<Scalars["String"]>;
  teamId?: Maybe<Scalars["String"]>;
  teamName?: Maybe<Scalars["String"]>;
}>;

export type IssueImportCreateClubhouseMutation = { __typename?: "Mutation" } & {
  issueImportCreateClubhouse: { __typename?: "IssueImportPayload" } & IssueImportPayloadFragment;
};

export type IssueImportCreateGithubMutationVariables = Exact<{
  githubRepoName: Scalars["String"];
  githubRepoOwner: Scalars["String"];
  githubShouldImportOrgProjects?: Maybe<Scalars["Boolean"]>;
  githubToken: Scalars["String"];
  id?: Maybe<Scalars["String"]>;
  includeClosedIssues?: Maybe<Scalars["Boolean"]>;
  instantProcess?: Maybe<Scalars["Boolean"]>;
  organizationId?: Maybe<Scalars["String"]>;
  teamId?: Maybe<Scalars["String"]>;
  teamName?: Maybe<Scalars["String"]>;
}>;

export type IssueImportCreateGithubMutation = { __typename?: "Mutation" } & {
  issueImportCreateGithub: { __typename?: "IssueImportPayload" } & IssueImportPayloadFragment;
};

export type IssueImportCreateJiraMutationVariables = Exact<{
  id?: Maybe<Scalars["String"]>;
  includeClosedIssues?: Maybe<Scalars["Boolean"]>;
  instantProcess?: Maybe<Scalars["Boolean"]>;
  jiraEmail: Scalars["String"];
  jiraHostname: Scalars["String"];
  jiraProject: Scalars["String"];
  jiraToken: Scalars["String"];
  organizationId?: Maybe<Scalars["String"]>;
  teamId?: Maybe<Scalars["String"]>;
  teamName?: Maybe<Scalars["String"]>;
}>;

export type IssueImportCreateJiraMutation = { __typename?: "Mutation" } & {
  issueImportCreateJira: { __typename?: "IssueImportPayload" } & IssueImportPayloadFragment;
};

export type DeleteIssueImportMutationVariables = Exact<{
  issueImportId: Scalars["String"];
}>;

export type DeleteIssueImportMutation = { __typename?: "Mutation" } & {
  issueImportDelete: { __typename?: "IssueImportDeletePayload" } & IssueImportDeletePayloadFragment;
};

export type IssueImportProcessMutationVariables = Exact<{
  issueImportId: Scalars["String"];
  mapping: Scalars["JSONObject"];
}>;

export type IssueImportProcessMutation = { __typename?: "Mutation" } & {
  issueImportProcess: { __typename?: "IssueImportPayload" } & IssueImportPayloadFragment;
};

export type UpdateIssueImportMutationVariables = Exact<{
  id: Scalars["String"];
  input: IssueImportUpdateInput;
}>;

export type UpdateIssueImportMutation = { __typename?: "Mutation" } & {
  issueImportUpdate: { __typename?: "IssueImportPayload" } & IssueImportPayloadFragment;
};

export type ArchiveIssueLabelMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type ArchiveIssueLabelMutation = { __typename?: "Mutation" } & {
  issueLabelArchive: { __typename?: "ArchivePayload" } & ArchivePayloadFragment;
};

export type CreateIssueLabelMutationVariables = Exact<{
  input: IssueLabelCreateInput;
  replaceTeamLabels?: Maybe<Scalars["Boolean"]>;
}>;

export type CreateIssueLabelMutation = { __typename?: "Mutation" } & {
  issueLabelCreate: { __typename?: "IssueLabelPayload" } & IssueLabelPayloadFragment;
};

export type DeleteIssueLabelMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteIssueLabelMutation = { __typename?: "Mutation" } & {
  issueLabelDelete: { __typename?: "ArchivePayload" } & ArchivePayloadFragment;
};

export type UpdateIssueLabelMutationVariables = Exact<{
  id: Scalars["String"];
  input: IssueLabelUpdateInput;
}>;

export type UpdateIssueLabelMutation = { __typename?: "Mutation" } & {
  issueLabelUpdate: { __typename?: "IssueLabelPayload" } & IssueLabelPayloadFragment;
};

export type CreateIssueRelationMutationVariables = Exact<{
  input: IssueRelationCreateInput;
}>;

export type CreateIssueRelationMutation = { __typename?: "Mutation" } & {
  issueRelationCreate: { __typename?: "IssueRelationPayload" } & IssueRelationPayloadFragment;
};

export type DeleteIssueRelationMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteIssueRelationMutation = { __typename?: "Mutation" } & {
  issueRelationDelete: { __typename?: "ArchivePayload" } & ArchivePayloadFragment;
};

export type UpdateIssueRelationMutationVariables = Exact<{
  id: Scalars["String"];
  input: IssueRelationUpdateInput;
}>;

export type UpdateIssueRelationMutation = { __typename?: "Mutation" } & {
  issueRelationUpdate: { __typename?: "IssueRelationPayload" } & IssueRelationPayloadFragment;
};

export type IssueReminderMutationVariables = Exact<{
  id: Scalars["String"];
  reminderAt: Scalars["DateTime"];
}>;

export type IssueReminderMutation = { __typename?: "Mutation" } & {
  issueReminder: { __typename?: "IssuePayload" } & IssuePayloadFragment;
};

export type UnarchiveIssueMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type UnarchiveIssueMutation = { __typename?: "Mutation" } & {
  issueUnarchive: { __typename?: "ArchivePayload" } & ArchivePayloadFragment;
};

export type UpdateIssueMutationVariables = Exact<{
  id: Scalars["String"];
  input: IssueUpdateInput;
}>;

export type UpdateIssueMutation = { __typename?: "Mutation" } & {
  issueUpdate: { __typename?: "IssuePayload" } & IssuePayloadFragment;
};

export type JoinOrganizationFromOnboardingMutationVariables = Exact<{
  input: JoinOrganizationInput;
}>;

export type JoinOrganizationFromOnboardingMutation = { __typename?: "Mutation" } & {
  joinOrganizationFromOnboarding: {
    __typename?: "CreateOrJoinOrganizationResponse";
  } & CreateOrJoinOrganizationResponseFragment;
};

export type LeaveOrganizationMutationVariables = Exact<{
  organizationId: Scalars["String"];
}>;

export type LeaveOrganizationMutation = { __typename?: "Mutation" } & {
  leaveOrganization: { __typename?: "CreateOrJoinOrganizationResponse" } & CreateOrJoinOrganizationResponseFragment;
};

export type LogoutMutationVariables = Exact<{ [key: string]: never }>;

export type LogoutMutation = { __typename?: "Mutation" } & {
  logout: { __typename?: "LogoutResponse" } & LogoutResponseFragment;
};

export type ArchiveNotificationMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type ArchiveNotificationMutation = { __typename?: "Mutation" } & {
  notificationArchive: { __typename?: "ArchivePayload" } & ArchivePayloadFragment;
};

export type CreateNotificationSubscriptionMutationVariables = Exact<{
  input: NotificationSubscriptionCreateInput;
}>;

export type CreateNotificationSubscriptionMutation = { __typename?: "Mutation" } & {
  notificationSubscriptionCreate: {
    __typename?: "NotificationSubscriptionPayload";
  } & NotificationSubscriptionPayloadFragment;
};

export type DeleteNotificationSubscriptionMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteNotificationSubscriptionMutation = { __typename?: "Mutation" } & {
  notificationSubscriptionDelete: { __typename?: "ArchivePayload" } & ArchivePayloadFragment;
};

export type UpdateNotificationSubscriptionMutationVariables = Exact<{
  id: Scalars["String"];
  input: NotificationSubscriptionUpdateInput;
}>;

export type UpdateNotificationSubscriptionMutation = { __typename?: "Mutation" } & {
  notificationSubscriptionUpdate: {
    __typename?: "NotificationSubscriptionPayload";
  } & NotificationSubscriptionPayloadFragment;
};

export type UnarchiveNotificationMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type UnarchiveNotificationMutation = { __typename?: "Mutation" } & {
  notificationUnarchive: { __typename?: "ArchivePayload" } & ArchivePayloadFragment;
};

export type UpdateNotificationMutationVariables = Exact<{
  id: Scalars["String"];
  input: NotificationUpdateInput;
}>;

export type UpdateNotificationMutation = { __typename?: "Mutation" } & {
  notificationUpdate: { __typename?: "NotificationPayload" } & NotificationPayloadFragment;
};

export type DeleteOrganizationCancelMutationVariables = Exact<{ [key: string]: never }>;

export type DeleteOrganizationCancelMutation = { __typename?: "Mutation" } & {
  organizationCancelDelete: {
    __typename?: "OrganizationCancelDeletePayload";
  } & OrganizationCancelDeletePayloadFragment;
};

export type DeleteOrganizationMutationVariables = Exact<{
  input: DeleteOrganizationInput;
}>;

export type DeleteOrganizationMutation = { __typename?: "Mutation" } & {
  organizationDelete: { __typename?: "OrganizationDeletePayload" } & OrganizationDeletePayloadFragment;
};

export type OrganizationDeleteChallengeMutationVariables = Exact<{ [key: string]: never }>;

export type OrganizationDeleteChallengeMutation = { __typename?: "Mutation" } & {
  organizationDeleteChallenge: { __typename?: "OrganizationDeletePayload" } & OrganizationDeletePayloadFragment;
};

export type DeleteOrganizationDomainMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteOrganizationDomainMutation = { __typename?: "Mutation" } & {
  organizationDomainDelete: { __typename?: "ArchivePayload" } & ArchivePayloadFragment;
};

export type CreateOrganizationInviteMutationVariables = Exact<{
  input: OrganizationInviteCreateInput;
}>;

export type CreateOrganizationInviteMutation = { __typename?: "Mutation" } & {
  organizationInviteCreate: { __typename?: "OrganizationInvitePayload" } & OrganizationInvitePayloadFragment;
};

export type DeleteOrganizationInviteMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteOrganizationInviteMutation = { __typename?: "Mutation" } & {
  organizationInviteDelete: { __typename?: "ArchivePayload" } & ArchivePayloadFragment;
};

export type UpdateOrganizationInviteMutationVariables = Exact<{
  id: Scalars["String"];
  input: OrganizationInviteUpdateInput;
}>;

export type UpdateOrganizationInviteMutation = { __typename?: "Mutation" } & {
  organizationInviteUpdate: { __typename?: "OrganizationInvitePayload" } & OrganizationInvitePayloadFragment;
};

export type UpdateOrganizationMutationVariables = Exact<{
  input: UpdateOrganizationInput;
}>;

export type UpdateOrganizationMutation = { __typename?: "Mutation" } & {
  organizationUpdate: { __typename?: "OrganizationPayload" } & OrganizationPayloadFragment;
};

export type ArchiveProjectMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type ArchiveProjectMutation = { __typename?: "Mutation" } & {
  projectArchive: { __typename?: "ArchivePayload" } & ArchivePayloadFragment;
};

export type CreateProjectMutationVariables = Exact<{
  input: ProjectCreateInput;
}>;

export type CreateProjectMutation = { __typename?: "Mutation" } & {
  projectCreate: { __typename?: "ProjectPayload" } & ProjectPayloadFragment;
};

export type DeleteProjectMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteProjectMutation = { __typename?: "Mutation" } & {
  projectDelete: { __typename?: "ArchivePayload" } & ArchivePayloadFragment;
};

export type CreateProjectLinkMutationVariables = Exact<{
  input: ProjectLinkCreateInput;
}>;

export type CreateProjectLinkMutation = { __typename?: "Mutation" } & {
  projectLinkCreate: { __typename?: "ProjectLinkPayload" } & ProjectLinkPayloadFragment;
};

export type DeleteProjectLinkMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteProjectLinkMutation = { __typename?: "Mutation" } & {
  projectLinkDelete: { __typename?: "ArchivePayload" } & ArchivePayloadFragment;
};

export type UpdateProjectLinkMutationVariables = Exact<{
  id: Scalars["String"];
  input: ProjectLinkUpdateInput;
}>;

export type UpdateProjectLinkMutation = { __typename?: "Mutation" } & {
  projectLinkUpdate: { __typename?: "ProjectLinkPayload" } & ProjectLinkPayloadFragment;
};

export type CreateProjectMilestoneMutationVariables = Exact<{
  input: ProjectMilestoneCreateInput;
}>;

export type CreateProjectMilestoneMutation = { __typename?: "Mutation" } & {
  projectMilestoneCreate: { __typename?: "ProjectMilestonePayload" } & ProjectMilestonePayloadFragment;
};

export type DeleteProjectMilestoneMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteProjectMilestoneMutation = { __typename?: "Mutation" } & {
  projectMilestoneDelete: { __typename?: "ArchivePayload" } & ArchivePayloadFragment;
};

export type UpdateProjectMilestoneMutationVariables = Exact<{
  id: Scalars["String"];
  input: ProjectMilestoneUpdateInput;
}>;

export type UpdateProjectMilestoneMutation = { __typename?: "Mutation" } & {
  projectMilestoneUpdate: { __typename?: "ProjectMilestonePayload" } & ProjectMilestonePayloadFragment;
};

export type UnarchiveProjectMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type UnarchiveProjectMutation = { __typename?: "Mutation" } & {
  projectUnarchive: { __typename?: "ArchivePayload" } & ArchivePayloadFragment;
};

export type UpdateProjectMutationVariables = Exact<{
  id: Scalars["String"];
  input: ProjectUpdateInput;
}>;

export type UpdateProjectMutation = { __typename?: "Mutation" } & {
  projectUpdate: { __typename?: "ProjectPayload" } & ProjectPayloadFragment;
};

export type CreateProjectUpdateMutationVariables = Exact<{
  input: ProjectUpdateCreateInput;
}>;

export type CreateProjectUpdateMutation = { __typename?: "Mutation" } & {
  projectUpdateCreate: { __typename?: "ProjectUpdatePayload" } & ProjectUpdatePayloadFragment;
};

export type DeleteProjectUpdateMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteProjectUpdateMutation = { __typename?: "Mutation" } & {
  projectUpdateDelete: { __typename?: "ArchivePayload" } & ArchivePayloadFragment;
};

export type CreateProjectUpdateInteractionMutationVariables = Exact<{
  input: ProjectUpdateInteractionCreateInput;
}>;

export type CreateProjectUpdateInteractionMutation = { __typename?: "Mutation" } & {
  projectUpdateInteractionCreate: {
    __typename?: "ProjectUpdateInteractionPayload";
  } & ProjectUpdateInteractionPayloadFragment;
};

export type ProjectUpdateMarkAsReadMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type ProjectUpdateMarkAsReadMutation = { __typename?: "Mutation" } & {
  projectUpdateMarkAsRead: {
    __typename?: "ProjectUpdateWithInteractionPayload";
  } & ProjectUpdateWithInteractionPayloadFragment;
};

export type UpdateProjectUpdateMutationVariables = Exact<{
  id: Scalars["String"];
  input: ProjectUpdateUpdateInput;
}>;

export type UpdateProjectUpdateMutation = { __typename?: "Mutation" } & {
  projectUpdateUpdate: { __typename?: "ProjectUpdatePayload" } & ProjectUpdatePayloadFragment;
};

export type CreatePushSubscriptionMutationVariables = Exact<{
  input: PushSubscriptionCreateInput;
}>;

export type CreatePushSubscriptionMutation = { __typename?: "Mutation" } & {
  pushSubscriptionCreate: { __typename?: "PushSubscriptionPayload" } & PushSubscriptionPayloadFragment;
};

export type DeletePushSubscriptionMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeletePushSubscriptionMutation = { __typename?: "Mutation" } & {
  pushSubscriptionDelete: { __typename?: "PushSubscriptionPayload" } & PushSubscriptionPayloadFragment;
};

export type CreateReactionMutationVariables = Exact<{
  input: ReactionCreateInput;
}>;

export type CreateReactionMutation = { __typename?: "Mutation" } & {
  reactionCreate: { __typename?: "ReactionPayload" } & ReactionPayloadFragment;
};

export type DeleteReactionMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteReactionMutation = { __typename?: "Mutation" } & {
  reactionDelete: { __typename?: "ArchivePayload" } & ArchivePayloadFragment;
};

export type RefreshGoogleSheetsDataMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type RefreshGoogleSheetsDataMutation = { __typename?: "Mutation" } & {
  refreshGoogleSheetsData: { __typename?: "IntegrationPayload" } & IntegrationPayloadFragment;
};

export type ResendOrganizationInviteMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type ResendOrganizationInviteMutation = { __typename?: "Mutation" } & {
  resendOrganizationInvite: { __typename?: "ArchivePayload" } & ArchivePayloadFragment;
};

export type CreateRoadmapMutationVariables = Exact<{
  input: RoadmapCreateInput;
}>;

export type CreateRoadmapMutation = { __typename?: "Mutation" } & {
  roadmapCreate: { __typename?: "RoadmapPayload" } & RoadmapPayloadFragment;
};

export type DeleteRoadmapMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteRoadmapMutation = { __typename?: "Mutation" } & {
  roadmapDelete: { __typename?: "ArchivePayload" } & ArchivePayloadFragment;
};

export type CreateRoadmapToProjectMutationVariables = Exact<{
  input: RoadmapToProjectCreateInput;
}>;

export type CreateRoadmapToProjectMutation = { __typename?: "Mutation" } & {
  roadmapToProjectCreate: { __typename?: "RoadmapToProjectPayload" } & RoadmapToProjectPayloadFragment;
};

export type DeleteRoadmapToProjectMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteRoadmapToProjectMutation = { __typename?: "Mutation" } & {
  roadmapToProjectDelete: { __typename?: "ArchivePayload" } & ArchivePayloadFragment;
};

export type UpdateRoadmapToProjectMutationVariables = Exact<{
  id: Scalars["String"];
  input: RoadmapToProjectUpdateInput;
}>;

export type UpdateRoadmapToProjectMutation = { __typename?: "Mutation" } & {
  roadmapToProjectUpdate: { __typename?: "RoadmapToProjectPayload" } & RoadmapToProjectPayloadFragment;
};

export type UpdateRoadmapMutationVariables = Exact<{
  id: Scalars["String"];
  input: RoadmapUpdateInput;
}>;

export type UpdateRoadmapMutation = { __typename?: "Mutation" } & {
  roadmapUpdate: { __typename?: "RoadmapPayload" } & RoadmapPayloadFragment;
};

export type SamlTokenUserAccountAuthMutationVariables = Exact<{
  input: TokenUserAccountAuthInput;
}>;

export type SamlTokenUserAccountAuthMutation = { __typename?: "Mutation" } & {
  samlTokenUserAccountAuth: { __typename?: "AuthResolverResponse" } & AuthResolverResponseFragment;
};

export type CreateTeamMutationVariables = Exact<{
  copySettingsFromTeamId?: Maybe<Scalars["String"]>;
  input: TeamCreateInput;
}>;

export type CreateTeamMutation = { __typename?: "Mutation" } & {
  teamCreate: { __typename?: "TeamPayload" } & TeamPayloadFragment;
};

export type DeleteTeamCyclesMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteTeamCyclesMutation = { __typename?: "Mutation" } & {
  teamCyclesDelete: { __typename?: "TeamPayload" } & TeamPayloadFragment;
};

export type DeleteTeamMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteTeamMutation = { __typename?: "Mutation" } & {
  teamDelete: { __typename?: "ArchivePayload" } & ArchivePayloadFragment;
};

export type DeleteTeamKeyMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteTeamKeyMutation = { __typename?: "Mutation" } & {
  teamKeyDelete: { __typename?: "ArchivePayload" } & ArchivePayloadFragment;
};

export type CreateTeamMembershipMutationVariables = Exact<{
  input: TeamMembershipCreateInput;
}>;

export type CreateTeamMembershipMutation = { __typename?: "Mutation" } & {
  teamMembershipCreate: { __typename?: "TeamMembershipPayload" } & TeamMembershipPayloadFragment;
};

export type DeleteTeamMembershipMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteTeamMembershipMutation = { __typename?: "Mutation" } & {
  teamMembershipDelete: { __typename?: "ArchivePayload" } & ArchivePayloadFragment;
};

export type UpdateTeamMembershipMutationVariables = Exact<{
  id: Scalars["String"];
  input: TeamMembershipUpdateInput;
}>;

export type UpdateTeamMembershipMutation = { __typename?: "Mutation" } & {
  teamMembershipUpdate: { __typename?: "TeamMembershipPayload" } & TeamMembershipPayloadFragment;
};

export type UpdateTeamMutationVariables = Exact<{
  id: Scalars["String"];
  input: TeamUpdateInput;
}>;

export type UpdateTeamMutation = { __typename?: "Mutation" } & {
  teamUpdate: { __typename?: "TeamPayload" } & TeamPayloadFragment;
};

export type CreateTemplateMutationVariables = Exact<{
  input: TemplateCreateInput;
}>;

export type CreateTemplateMutation = { __typename?: "Mutation" } & {
  templateCreate: { __typename?: "TemplatePayload" } & TemplatePayloadFragment;
};

export type DeleteTemplateMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteTemplateMutation = { __typename?: "Mutation" } & {
  templateDelete: { __typename?: "ArchivePayload" } & ArchivePayloadFragment;
};

export type UpdateTemplateMutationVariables = Exact<{
  id: Scalars["String"];
  input: TemplateUpdateInput;
}>;

export type UpdateTemplateMutation = { __typename?: "Mutation" } & {
  templateUpdate: { __typename?: "TemplatePayload" } & TemplatePayloadFragment;
};

export type UserDemoteAdminMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type UserDemoteAdminMutation = { __typename?: "Mutation" } & {
  userDemoteAdmin: { __typename?: "UserAdminPayload" } & UserAdminPayloadFragment;
};

export type UserDemoteMemberMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type UserDemoteMemberMutation = { __typename?: "Mutation" } & {
  userDemoteMember: { __typename?: "UserAdminPayload" } & UserAdminPayloadFragment;
};

export type UserDiscordConnectMutationVariables = Exact<{
  code: Scalars["String"];
  redirectUri: Scalars["String"];
}>;

export type UserDiscordConnectMutation = { __typename?: "Mutation" } & {
  userDiscordConnect: { __typename?: "UserPayload" } & UserPayloadFragment;
};

export type UserExternalUserDisconnectMutationVariables = Exact<{
  service: Scalars["String"];
}>;

export type UserExternalUserDisconnectMutation = { __typename?: "Mutation" } & {
  userExternalUserDisconnect: { __typename?: "UserPayload" } & UserPayloadFragment;
};

export type UpdateUserFlagMutationVariables = Exact<{
  flag: UserFlagType;
  operation: UserFlagUpdateOperation;
}>;

export type UpdateUserFlagMutation = { __typename?: "Mutation" } & {
  userFlagUpdate: { __typename?: "UserSettingsFlagPayload" } & UserSettingsFlagPayloadFragment;
};

export type UserGitHubConnectMutationVariables = Exact<{
  code: Scalars["String"];
}>;

export type UserGitHubConnectMutation = { __typename?: "Mutation" } & {
  userGitHubConnect: { __typename?: "UserPayload" } & UserPayloadFragment;
};

export type UserGoogleCalendarConnectMutationVariables = Exact<{
  code: Scalars["String"];
}>;

export type UserGoogleCalendarConnectMutation = { __typename?: "Mutation" } & {
  userGoogleCalendarConnect: { __typename?: "UserPayload" } & UserPayloadFragment;
};

export type UserPromoteAdminMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type UserPromoteAdminMutation = { __typename?: "Mutation" } & {
  userPromoteAdmin: { __typename?: "UserAdminPayload" } & UserAdminPayloadFragment;
};

export type UserPromoteMemberMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type UserPromoteMemberMutation = { __typename?: "Mutation" } & {
  userPromoteMember: { __typename?: "UserAdminPayload" } & UserAdminPayloadFragment;
};

export type UserSettingsFlagIncrementMutationVariables = Exact<{
  flag: Scalars["String"];
}>;

export type UserSettingsFlagIncrementMutation = { __typename?: "Mutation" } & {
  userSettingsFlagIncrement: { __typename?: "UserSettingsFlagPayload" } & UserSettingsFlagPayloadFragment;
};

export type UserSettingsFlagsResetMutationVariables = Exact<{
  flags?: Maybe<Array<UserFlagType> | UserFlagType>;
}>;

export type UserSettingsFlagsResetMutation = { __typename?: "Mutation" } & {
  userSettingsFlagsReset: { __typename?: "UserSettingsFlagsResetPayload" } & UserSettingsFlagsResetPayloadFragment;
};

export type UpdateUserSettingsMutationVariables = Exact<{
  id: Scalars["String"];
  input: UserSettingsUpdateInput;
}>;

export type UpdateUserSettingsMutation = { __typename?: "Mutation" } & {
  userSettingsUpdate: { __typename?: "UserSettingsPayload" } & UserSettingsPayloadFragment;
};

export type SuspendUserMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type SuspendUserMutation = { __typename?: "Mutation" } & {
  userSuspend: { __typename?: "UserAdminPayload" } & UserAdminPayloadFragment;
};

export type UnsuspendUserMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type UnsuspendUserMutation = { __typename?: "Mutation" } & {
  userUnsuspend: { __typename?: "UserAdminPayload" } & UserAdminPayloadFragment;
};

export type UpdateUserMutationVariables = Exact<{
  id: Scalars["String"];
  input: UpdateUserInput;
}>;

export type UpdateUserMutation = { __typename?: "Mutation" } & {
  userUpdate: { __typename?: "UserPayload" } & UserPayloadFragment;
};

export type CreateViewPreferencesMutationVariables = Exact<{
  input: ViewPreferencesCreateInput;
}>;

export type CreateViewPreferencesMutation = { __typename?: "Mutation" } & {
  viewPreferencesCreate: { __typename?: "ViewPreferencesPayload" } & ViewPreferencesPayloadFragment;
};

export type DeleteViewPreferencesMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteViewPreferencesMutation = { __typename?: "Mutation" } & {
  viewPreferencesDelete: { __typename?: "ArchivePayload" } & ArchivePayloadFragment;
};

export type UpdateViewPreferencesMutationVariables = Exact<{
  id: Scalars["String"];
  input: ViewPreferencesUpdateInput;
}>;

export type UpdateViewPreferencesMutation = { __typename?: "Mutation" } & {
  viewPreferencesUpdate: { __typename?: "ViewPreferencesPayload" } & ViewPreferencesPayloadFragment;
};

export type CreateWebhookMutationVariables = Exact<{
  input: WebhookCreateInput;
}>;

export type CreateWebhookMutation = { __typename?: "Mutation" } & {
  webhookCreate: { __typename?: "WebhookPayload" } & WebhookPayloadFragment;
};

export type DeleteWebhookMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type DeleteWebhookMutation = { __typename?: "Mutation" } & {
  webhookDelete: { __typename?: "ArchivePayload" } & ArchivePayloadFragment;
};

export type UpdateWebhookMutationVariables = Exact<{
  id: Scalars["String"];
  input: WebhookUpdateInput;
}>;

export type UpdateWebhookMutation = { __typename?: "Mutation" } & {
  webhookUpdate: { __typename?: "WebhookPayload" } & WebhookPayloadFragment;
};

export type ArchiveWorkflowStateMutationVariables = Exact<{
  id: Scalars["String"];
}>;

export type ArchiveWorkflowStateMutation = { __typename?: "Mutation" } & {
  workflowStateArchive: { __typename?: "ArchivePayload" } & ArchivePayloadFragment;
};

export type CreateWorkflowStateMutationVariables = Exact<{
  input: WorkflowStateCreateInput;
}>;

export type CreateWorkflowStateMutation = { __typename?: "Mutation" } & {
  workflowStateCreate: { __typename?: "WorkflowStatePayload" } & WorkflowStatePayloadFragment;
};

export type UpdateWorkflowStateMutationVariables = Exact<{
  id: Scalars["String"];
  input: WorkflowStateUpdateInput;
}>;

export type UpdateWorkflowStateMutation = { __typename?: "Mutation" } & {
  workflowStateUpdate: { __typename?: "WorkflowStatePayload" } & WorkflowStatePayloadFragment;
};

export type ProjectMilestoneQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type ProjectMilestoneQuery = { __typename?: "Query" } & {
  ProjectMilestone: { __typename?: "ProjectMilestone" } & ProjectMilestoneFragment;
};

export type ProjectMilestonesQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type ProjectMilestonesQuery = { __typename?: "Query" } & {
  ProjectMilestones: { __typename?: "ProjectMilestoneConnection" } & ProjectMilestoneConnectionFragment;
};

export type AdministrableTeamsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<TeamFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type AdministrableTeamsQuery = { __typename?: "Query" } & {
  administrableTeams: { __typename?: "TeamConnection" } & TeamConnectionFragment;
};

export type ApiKeysQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type ApiKeysQuery = { __typename?: "Query" } & {
  apiKeys: { __typename?: "ApiKeyConnection" } & ApiKeyConnectionFragment;
};

export type ApplicationInfoQueryVariables = Exact<{
  clientId: Scalars["String"];
}>;

export type ApplicationInfoQuery = { __typename?: "Query" } & {
  applicationInfo: { __typename?: "Application" } & ApplicationFragment;
};

export type ApplicationWithAuthorizationQueryVariables = Exact<{
  actor?: Maybe<Scalars["String"]>;
  clientId: Scalars["String"];
  redirectUri?: Maybe<Scalars["String"]>;
  scope: Array<Scalars["String"]> | Scalars["String"];
}>;

export type ApplicationWithAuthorizationQuery = { __typename?: "Query" } & {
  applicationWithAuthorization: { __typename?: "UserAuthorizedApplication" } & UserAuthorizedApplicationFragment;
};

export type AttachmentQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type AttachmentQuery = { __typename?: "Query" } & {
  attachment: { __typename?: "Attachment" } & AttachmentFragment;
};

export type AttachmentIssueQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type AttachmentIssueQuery = { __typename?: "Query" } & {
  attachmentIssue: { __typename?: "Issue" } & IssueFragment;
};

export type AttachmentIssue_AttachmentsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<AttachmentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type AttachmentIssue_AttachmentsQuery = { __typename?: "Query" } & {
  attachmentIssue: { __typename?: "Issue" } & {
    attachments: { __typename?: "AttachmentConnection" } & AttachmentConnectionFragment;
  };
};

export type AttachmentIssue_ChildrenQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type AttachmentIssue_ChildrenQuery = { __typename?: "Query" } & {
  attachmentIssue: { __typename?: "Issue" } & {
    children: { __typename?: "IssueConnection" } & IssueConnectionFragment;
  };
};

export type AttachmentIssue_CommentsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CommentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type AttachmentIssue_CommentsQuery = { __typename?: "Query" } & {
  attachmentIssue: { __typename?: "Issue" } & {
    comments: { __typename?: "CommentConnection" } & CommentConnectionFragment;
  };
};

export type AttachmentIssue_HistoryQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type AttachmentIssue_HistoryQuery = { __typename?: "Query" } & {
  attachmentIssue: { __typename?: "Issue" } & {
    history: { __typename?: "IssueHistoryConnection" } & IssueHistoryConnectionFragment;
  };
};

export type AttachmentIssue_InverseRelationsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type AttachmentIssue_InverseRelationsQuery = { __typename?: "Query" } & {
  attachmentIssue: { __typename?: "Issue" } & {
    inverseRelations: { __typename?: "IssueRelationConnection" } & IssueRelationConnectionFragment;
  };
};

export type AttachmentIssue_LabelsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueLabelFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type AttachmentIssue_LabelsQuery = { __typename?: "Query" } & {
  attachmentIssue: { __typename?: "Issue" } & {
    labels: { __typename?: "IssueLabelConnection" } & IssueLabelConnectionFragment;
  };
};

export type AttachmentIssue_RelationsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type AttachmentIssue_RelationsQuery = { __typename?: "Query" } & {
  attachmentIssue: { __typename?: "Issue" } & {
    relations: { __typename?: "IssueRelationConnection" } & IssueRelationConnectionFragment;
  };
};

export type AttachmentIssue_SubscribersQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<UserFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  includeDisabled?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type AttachmentIssue_SubscribersQuery = { __typename?: "Query" } & {
  attachmentIssue: { __typename?: "Issue" } & {
    subscribers: { __typename?: "UserConnection" } & UserConnectionFragment;
  };
};

export type AttachmentsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<AttachmentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type AttachmentsQuery = { __typename?: "Query" } & {
  attachments: { __typename?: "AttachmentConnection" } & AttachmentConnectionFragment;
};

export type AttachmentsForUrlQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
  url: Scalars["String"];
}>;

export type AttachmentsForUrlQuery = { __typename?: "Query" } & {
  attachmentsForURL: { __typename?: "AttachmentConnection" } & AttachmentConnectionFragment;
};

export type AuditEntriesQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<AuditEntryFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type AuditEntriesQuery = { __typename?: "Query" } & {
  auditEntries: { __typename?: "AuditEntryConnection" } & AuditEntryConnectionFragment;
};

export type AuditEntryTypesQueryVariables = Exact<{ [key: string]: never }>;

export type AuditEntryTypesQuery = { __typename?: "Query" } & {
  auditEntryTypes: Array<{ __typename?: "AuditEntryType" } & AuditEntryTypeFragment>;
};

export type AvailableUsersQueryVariables = Exact<{ [key: string]: never }>;

export type AvailableUsersQuery = { __typename?: "Query" } & {
  availableUsers: { __typename?: "AuthResolverResponse" } & AuthResolverResponseFragment;
};

export type CommentQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type CommentQuery = { __typename?: "Query" } & { comment: { __typename?: "Comment" } & CommentFragment };

export type Comment_ChildrenQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CommentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Comment_ChildrenQuery = { __typename?: "Query" } & {
  comment: { __typename?: "Comment" } & { children: { __typename?: "CommentConnection" } & CommentConnectionFragment };
};

export type CommentsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CommentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type CommentsQuery = { __typename?: "Query" } & {
  comments: { __typename?: "CommentConnection" } & CommentConnectionFragment;
};

export type CustomViewQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type CustomViewQuery = { __typename?: "Query" } & {
  customView: { __typename?: "CustomView" } & CustomViewFragment;
};

export type CustomViewsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type CustomViewsQuery = { __typename?: "Query" } & {
  customViews: { __typename?: "CustomViewConnection" } & CustomViewConnectionFragment;
};

export type CycleQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type CycleQuery = { __typename?: "Query" } & { cycle: { __typename?: "Cycle" } & CycleFragment };

export type Cycle_IssuesQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Cycle_IssuesQuery = { __typename?: "Query" } & {
  cycle: { __typename?: "Cycle" } & { issues: { __typename?: "IssueConnection" } & IssueConnectionFragment };
};

export type Cycle_UncompletedIssuesUponCloseQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Cycle_UncompletedIssuesUponCloseQuery = { __typename?: "Query" } & {
  cycle: { __typename?: "Cycle" } & {
    uncompletedIssuesUponClose: { __typename?: "IssueConnection" } & IssueConnectionFragment;
  };
};

export type CyclesQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CycleFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type CyclesQuery = { __typename?: "Query" } & {
  cycles: { __typename?: "CycleConnection" } & CycleConnectionFragment;
};

export type DocumentQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type DocumentQuery = { __typename?: "Query" } & { document: { __typename?: "Document" } & DocumentFragment };

export type DocumentsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type DocumentsQuery = { __typename?: "Query" } & {
  documents: { __typename?: "DocumentConnection" } & DocumentConnectionFragment;
};

export type EmojiQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type EmojiQuery = { __typename?: "Query" } & { emoji: { __typename?: "Emoji" } & EmojiFragment };

export type EmojisQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type EmojisQuery = { __typename?: "Query" } & {
  emojis: { __typename?: "EmojiConnection" } & EmojiConnectionFragment;
};

export type FavoriteQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type FavoriteQuery = { __typename?: "Query" } & { favorite: { __typename?: "Favorite" } & FavoriteFragment };

export type Favorite_ChildrenQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Favorite_ChildrenQuery = { __typename?: "Query" } & {
  favorite: { __typename?: "Favorite" } & {
    children: { __typename?: "FavoriteConnection" } & FavoriteConnectionFragment;
  };
};

export type FavoritesQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type FavoritesQuery = { __typename?: "Query" } & {
  favorites: { __typename?: "FavoriteConnection" } & FavoriteConnectionFragment;
};

export type FigmaEmbedInfoQueryVariables = Exact<{
  fileId: Scalars["String"];
  nodeId?: Maybe<Scalars["String"]>;
}>;

export type FigmaEmbedInfoQuery = { __typename?: "Query" } & {
  figmaEmbedInfo: { __typename?: "FigmaEmbedPayload" } & FigmaEmbedPayloadFragment;
};

export type FigmaEmbedInfo_FigmaEmbedQueryVariables = Exact<{
  fileId: Scalars["String"];
  nodeId?: Maybe<Scalars["String"]>;
}>;

export type FigmaEmbedInfo_FigmaEmbedQuery = { __typename?: "Query" } & {
  figmaEmbedInfo: { __typename?: "FigmaEmbedPayload" } & {
    figmaEmbed?: Maybe<{ __typename?: "FigmaEmbed" } & FigmaEmbedFragment>;
  };
};

export type IntegrationQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type IntegrationQuery = { __typename?: "Query" } & {
  integration: { __typename?: "Integration" } & IntegrationFragment;
};

export type IntegrationTemplateQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type IntegrationTemplateQuery = { __typename?: "Query" } & {
  integrationTemplate: { __typename?: "IntegrationTemplate" } & IntegrationTemplateFragment;
};

export type IntegrationTemplatesQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type IntegrationTemplatesQuery = { __typename?: "Query" } & {
  integrationTemplates: { __typename?: "IntegrationTemplateConnection" } & IntegrationTemplateConnectionFragment;
};

export type IntegrationsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type IntegrationsQuery = { __typename?: "Query" } & {
  integrations: { __typename?: "IntegrationConnection" } & IntegrationConnectionFragment;
};

export type IntegrationsSettingsQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type IntegrationsSettingsQuery = { __typename?: "Query" } & {
  integrationsSettings: { __typename?: "IntegrationsSettings" } & IntegrationsSettingsFragment;
};

export type IssueQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type IssueQuery = { __typename?: "Query" } & { issue: { __typename?: "Issue" } & IssueFragment };

export type Issue_AttachmentsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<AttachmentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Issue_AttachmentsQuery = { __typename?: "Query" } & {
  issue: { __typename?: "Issue" } & {
    attachments: { __typename?: "AttachmentConnection" } & AttachmentConnectionFragment;
  };
};

export type Issue_ChildrenQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Issue_ChildrenQuery = { __typename?: "Query" } & {
  issue: { __typename?: "Issue" } & { children: { __typename?: "IssueConnection" } & IssueConnectionFragment };
};

export type Issue_CommentsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CommentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Issue_CommentsQuery = { __typename?: "Query" } & {
  issue: { __typename?: "Issue" } & { comments: { __typename?: "CommentConnection" } & CommentConnectionFragment };
};

export type Issue_HistoryQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Issue_HistoryQuery = { __typename?: "Query" } & {
  issue: { __typename?: "Issue" } & {
    history: { __typename?: "IssueHistoryConnection" } & IssueHistoryConnectionFragment;
  };
};

export type Issue_InverseRelationsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Issue_InverseRelationsQuery = { __typename?: "Query" } & {
  issue: { __typename?: "Issue" } & {
    inverseRelations: { __typename?: "IssueRelationConnection" } & IssueRelationConnectionFragment;
  };
};

export type Issue_LabelsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueLabelFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Issue_LabelsQuery = { __typename?: "Query" } & {
  issue: { __typename?: "Issue" } & { labels: { __typename?: "IssueLabelConnection" } & IssueLabelConnectionFragment };
};

export type Issue_RelationsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Issue_RelationsQuery = { __typename?: "Query" } & {
  issue: { __typename?: "Issue" } & {
    relations: { __typename?: "IssueRelationConnection" } & IssueRelationConnectionFragment;
  };
};

export type Issue_SubscribersQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<UserFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  includeDisabled?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Issue_SubscribersQuery = { __typename?: "Query" } & {
  issue: { __typename?: "Issue" } & { subscribers: { __typename?: "UserConnection" } & UserConnectionFragment };
};

export type IssueImportFinishGithubOAuthQueryVariables = Exact<{
  code: Scalars["String"];
}>;

export type IssueImportFinishGithubOAuthQuery = { __typename?: "Query" } & {
  issueImportFinishGithubOAuth: { __typename?: "GithubOAuthTokenPayload" } & GithubOAuthTokenPayloadFragment;
};

export type IssueLabelQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type IssueLabelQuery = { __typename?: "Query" } & {
  issueLabel: { __typename?: "IssueLabel" } & IssueLabelFragment;
};

export type IssueLabel_ChildrenQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueLabelFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type IssueLabel_ChildrenQuery = { __typename?: "Query" } & {
  issueLabel: { __typename?: "IssueLabel" } & {
    children: { __typename?: "IssueLabelConnection" } & IssueLabelConnectionFragment;
  };
};

export type IssueLabel_IssuesQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type IssueLabel_IssuesQuery = { __typename?: "Query" } & {
  issueLabel: { __typename?: "IssueLabel" } & { issues: { __typename?: "IssueConnection" } & IssueConnectionFragment };
};

export type IssueLabelsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueLabelFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type IssueLabelsQuery = { __typename?: "Query" } & {
  issueLabels: { __typename?: "IssueLabelConnection" } & IssueLabelConnectionFragment;
};

export type IssuePriorityValuesQueryVariables = Exact<{ [key: string]: never }>;

export type IssuePriorityValuesQuery = { __typename?: "Query" } & {
  issuePriorityValues: Array<{ __typename?: "IssuePriorityValue" } & IssuePriorityValueFragment>;
};

export type IssueRelationQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type IssueRelationQuery = { __typename?: "Query" } & {
  issueRelation: { __typename?: "IssueRelation" } & IssueRelationFragment;
};

export type IssueRelationsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type IssueRelationsQuery = { __typename?: "Query" } & {
  issueRelations: { __typename?: "IssueRelationConnection" } & IssueRelationConnectionFragment;
};

export type IssueVcsBranchSearchQueryVariables = Exact<{
  branchName: Scalars["String"];
}>;

export type IssueVcsBranchSearchQuery = { __typename?: "Query" } & {
  issueVcsBranchSearch?: Maybe<{ __typename?: "Issue" } & IssueFragment>;
};

export type IssueVcsBranchSearch_AttachmentsQueryVariables = Exact<{
  branchName: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<AttachmentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type IssueVcsBranchSearch_AttachmentsQuery = { __typename?: "Query" } & {
  issueVcsBranchSearch?: Maybe<
    { __typename?: "Issue" } & { attachments: { __typename?: "AttachmentConnection" } & AttachmentConnectionFragment }
  >;
};

export type IssueVcsBranchSearch_ChildrenQueryVariables = Exact<{
  branchName: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type IssueVcsBranchSearch_ChildrenQuery = { __typename?: "Query" } & {
  issueVcsBranchSearch?: Maybe<
    { __typename?: "Issue" } & { children: { __typename?: "IssueConnection" } & IssueConnectionFragment }
  >;
};

export type IssueVcsBranchSearch_CommentsQueryVariables = Exact<{
  branchName: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CommentFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type IssueVcsBranchSearch_CommentsQuery = { __typename?: "Query" } & {
  issueVcsBranchSearch?: Maybe<
    { __typename?: "Issue" } & { comments: { __typename?: "CommentConnection" } & CommentConnectionFragment }
  >;
};

export type IssueVcsBranchSearch_HistoryQueryVariables = Exact<{
  branchName: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type IssueVcsBranchSearch_HistoryQuery = { __typename?: "Query" } & {
  issueVcsBranchSearch?: Maybe<
    { __typename?: "Issue" } & { history: { __typename?: "IssueHistoryConnection" } & IssueHistoryConnectionFragment }
  >;
};

export type IssueVcsBranchSearch_InverseRelationsQueryVariables = Exact<{
  branchName: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type IssueVcsBranchSearch_InverseRelationsQuery = { __typename?: "Query" } & {
  issueVcsBranchSearch?: Maybe<
    { __typename?: "Issue" } & {
      inverseRelations: { __typename?: "IssueRelationConnection" } & IssueRelationConnectionFragment;
    }
  >;
};

export type IssueVcsBranchSearch_LabelsQueryVariables = Exact<{
  branchName: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueLabelFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type IssueVcsBranchSearch_LabelsQuery = { __typename?: "Query" } & {
  issueVcsBranchSearch?: Maybe<
    { __typename?: "Issue" } & { labels: { __typename?: "IssueLabelConnection" } & IssueLabelConnectionFragment }
  >;
};

export type IssueVcsBranchSearch_RelationsQueryVariables = Exact<{
  branchName: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type IssueVcsBranchSearch_RelationsQuery = { __typename?: "Query" } & {
  issueVcsBranchSearch?: Maybe<
    { __typename?: "Issue" } & {
      relations: { __typename?: "IssueRelationConnection" } & IssueRelationConnectionFragment;
    }
  >;
};

export type IssueVcsBranchSearch_SubscribersQueryVariables = Exact<{
  branchName: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<UserFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  includeDisabled?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type IssueVcsBranchSearch_SubscribersQuery = { __typename?: "Query" } & {
  issueVcsBranchSearch?: Maybe<
    { __typename?: "Issue" } & { subscribers: { __typename?: "UserConnection" } & UserConnectionFragment }
  >;
};

export type IssuesQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type IssuesQuery = { __typename?: "Query" } & {
  issues: { __typename?: "IssueConnection" } & IssueConnectionFragment;
};

export type NotificationQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type NotificationQuery = { __typename?: "Query" } & {
  notification:
    | ({ __typename?: "IssueNotification" } & Notification_IssueNotification_Fragment)
    | ({ __typename?: "OauthClientApprovalNotification" } & Notification_OauthClientApprovalNotification_Fragment)
    | ({ __typename?: "ProjectNotification" } & Notification_ProjectNotification_Fragment);
};

export type NotificationSubscriptionQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type NotificationSubscriptionQuery = { __typename?: "Query" } & {
  notificationSubscription:
    | ({
        __typename?: "ProjectNotificationSubscription";
      } & NotificationSubscription_ProjectNotificationSubscription_Fragment)
    | ({
        __typename?: "TeamNotificationSubscription";
      } & NotificationSubscription_TeamNotificationSubscription_Fragment);
};

export type NotificationSubscriptionsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type NotificationSubscriptionsQuery = { __typename?: "Query" } & {
  notificationSubscriptions: {
    __typename?: "NotificationSubscriptionConnection";
  } & NotificationSubscriptionConnectionFragment;
};

export type NotificationsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type NotificationsQuery = { __typename?: "Query" } & {
  notifications: { __typename?: "NotificationConnection" } & NotificationConnectionFragment;
};

export type OrganizationQueryVariables = Exact<{ [key: string]: never }>;

export type OrganizationQuery = { __typename?: "Query" } & {
  organization: { __typename?: "Organization" } & OrganizationFragment;
};

export type Organization_IntegrationsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Organization_IntegrationsQuery = { __typename?: "Query" } & {
  organization: { __typename?: "Organization" } & {
    integrations: { __typename?: "IntegrationConnection" } & IntegrationConnectionFragment;
  };
};

export type Organization_LabelsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueLabelFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Organization_LabelsQuery = { __typename?: "Query" } & {
  organization: { __typename?: "Organization" } & {
    labels: { __typename?: "IssueLabelConnection" } & IssueLabelConnectionFragment;
  };
};

export type Organization_SubscriptionQueryVariables = Exact<{ [key: string]: never }>;

export type Organization_SubscriptionQuery = { __typename?: "Query" } & {
  organization: { __typename?: "Organization" } & {
    subscription?: Maybe<{ __typename?: "PaidSubscription" } & PaidSubscriptionFragment>;
  };
};

export type Organization_TeamsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<TeamFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Organization_TeamsQuery = { __typename?: "Query" } & {
  organization: { __typename?: "Organization" } & { teams: { __typename?: "TeamConnection" } & TeamConnectionFragment };
};

export type Organization_TemplatesQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Organization_TemplatesQuery = { __typename?: "Query" } & {
  organization: { __typename?: "Organization" } & {
    templates: { __typename?: "TemplateConnection" } & TemplateConnectionFragment;
  };
};

export type Organization_UsersQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  includeDisabled?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Organization_UsersQuery = { __typename?: "Query" } & {
  organization: { __typename?: "Organization" } & { users: { __typename?: "UserConnection" } & UserConnectionFragment };
};

export type OrganizationExistsQueryVariables = Exact<{
  urlKey: Scalars["String"];
}>;

export type OrganizationExistsQuery = { __typename?: "Query" } & {
  organizationExists: { __typename?: "OrganizationExistsPayload" } & OrganizationExistsPayloadFragment;
};

export type OrganizationInviteQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type OrganizationInviteQuery = { __typename?: "Query" } & {
  organizationInvite: { __typename?: "OrganizationInvite" } & OrganizationInviteFragment;
};

export type OrganizationInviteDetailsQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type OrganizationInviteDetailsQuery = { __typename?: "Query" } & {
  organizationInviteDetails: {
    __typename?: "OrganizationInviteDetailsPayload";
  } & OrganizationInviteDetailsPayloadFragment;
};

export type OrganizationInvitesQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type OrganizationInvitesQuery = { __typename?: "Query" } & {
  organizationInvites: { __typename?: "OrganizationInviteConnection" } & OrganizationInviteConnectionFragment;
};

export type ProjectQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type ProjectQuery = { __typename?: "Query" } & { project: { __typename?: "Project" } & ProjectFragment };

export type Project_DocumentsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Project_DocumentsQuery = { __typename?: "Query" } & {
  project: { __typename?: "Project" } & {
    documents: { __typename?: "DocumentConnection" } & DocumentConnectionFragment;
  };
};

export type Project_IssuesQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Project_IssuesQuery = { __typename?: "Query" } & {
  project: { __typename?: "Project" } & { issues: { __typename?: "IssueConnection" } & IssueConnectionFragment };
};

export type Project_LinksQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Project_LinksQuery = { __typename?: "Query" } & {
  project: { __typename?: "Project" } & {
    links: { __typename?: "ProjectLinkConnection" } & ProjectLinkConnectionFragment;
  };
};

export type Project_MembersQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<UserFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  includeDisabled?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Project_MembersQuery = { __typename?: "Query" } & {
  project: { __typename?: "Project" } & { members: { __typename?: "UserConnection" } & UserConnectionFragment };
};

export type Project_ProjectUpdatesQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Project_ProjectUpdatesQuery = { __typename?: "Query" } & {
  project: { __typename?: "Project" } & {
    projectUpdates: { __typename?: "ProjectUpdateConnection" } & ProjectUpdateConnectionFragment;
  };
};

export type Project_TeamsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<TeamFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Project_TeamsQuery = { __typename?: "Query" } & {
  project: { __typename?: "Project" } & { teams: { __typename?: "TeamConnection" } & TeamConnectionFragment };
};

export type ProjectLinkQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type ProjectLinkQuery = { __typename?: "Query" } & {
  projectLink: { __typename?: "ProjectLink" } & ProjectLinkFragment;
};

export type ProjectLinksQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type ProjectLinksQuery = { __typename?: "Query" } & {
  projectLinks: { __typename?: "ProjectLinkConnection" } & ProjectLinkConnectionFragment;
};

export type ProjectUpdateQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type ProjectUpdateQuery = { __typename?: "Query" } & {
  projectUpdate: { __typename?: "ProjectUpdate" } & ProjectUpdateFragment;
};

export type ProjectUpdateInteractionQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type ProjectUpdateInteractionQuery = { __typename?: "Query" } & {
  projectUpdateInteraction: { __typename?: "ProjectUpdateInteraction" } & ProjectUpdateInteractionFragment;
};

export type ProjectUpdateInteractionsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type ProjectUpdateInteractionsQuery = { __typename?: "Query" } & {
  projectUpdateInteractions: {
    __typename?: "ProjectUpdateInteractionConnection";
  } & ProjectUpdateInteractionConnectionFragment;
};

export type ProjectUpdatesQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type ProjectUpdatesQuery = { __typename?: "Query" } & {
  projectUpdates: { __typename?: "ProjectUpdateConnection" } & ProjectUpdateConnectionFragment;
};

export type ProjectsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<ProjectFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type ProjectsQuery = { __typename?: "Query" } & {
  projects: { __typename?: "ProjectConnection" } & ProjectConnectionFragment;
};

export type PushSubscriptionTestQueryVariables = Exact<{ [key: string]: never }>;

export type PushSubscriptionTestQuery = { __typename?: "Query" } & {
  pushSubscriptionTest: { __typename?: "PushSubscriptionTestPayload" } & PushSubscriptionTestPayloadFragment;
};

export type RateLimitStatusQueryVariables = Exact<{ [key: string]: never }>;

export type RateLimitStatusQuery = { __typename?: "Query" } & {
  rateLimitStatus: { __typename?: "RateLimitPayload" } & RateLimitPayloadFragment;
};

export type RoadmapQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type RoadmapQuery = { __typename?: "Query" } & { roadmap: { __typename?: "Roadmap" } & RoadmapFragment };

export type Roadmap_ProjectsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<ProjectFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Roadmap_ProjectsQuery = { __typename?: "Query" } & {
  roadmap: { __typename?: "Roadmap" } & { projects: { __typename?: "ProjectConnection" } & ProjectConnectionFragment };
};

export type RoadmapToProjectQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type RoadmapToProjectQuery = { __typename?: "Query" } & {
  roadmapToProject: { __typename?: "RoadmapToProject" } & RoadmapToProjectFragment;
};

export type RoadmapToProjectsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type RoadmapToProjectsQuery = { __typename?: "Query" } & {
  roadmapToProjects: { __typename?: "RoadmapToProjectConnection" } & RoadmapToProjectConnectionFragment;
};

export type RoadmapsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type RoadmapsQuery = { __typename?: "Query" } & {
  roadmaps: { __typename?: "RoadmapConnection" } & RoadmapConnectionFragment;
};

export type SsoUrlFromEmailQueryVariables = Exact<{
  email: Scalars["String"];
  isDesktop?: Maybe<Scalars["Boolean"]>;
}>;

export type SsoUrlFromEmailQuery = { __typename?: "Query" } & {
  ssoUrlFromEmail: { __typename?: "SsoUrlFromEmailResponse" } & SsoUrlFromEmailResponseFragment;
};

export type TeamQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type TeamQuery = { __typename?: "Query" } & { team: { __typename?: "Team" } & TeamFragment };

export type Team_CyclesQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<CycleFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Team_CyclesQuery = { __typename?: "Query" } & {
  team: { __typename?: "Team" } & { cycles: { __typename?: "CycleConnection" } & CycleConnectionFragment };
};

export type Team_IssuesQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Team_IssuesQuery = { __typename?: "Query" } & {
  team: { __typename?: "Team" } & { issues: { __typename?: "IssueConnection" } & IssueConnectionFragment };
};

export type Team_LabelsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueLabelFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Team_LabelsQuery = { __typename?: "Query" } & {
  team: { __typename?: "Team" } & { labels: { __typename?: "IssueLabelConnection" } & IssueLabelConnectionFragment };
};

export type Team_MembersQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<UserFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  includeDisabled?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Team_MembersQuery = { __typename?: "Query" } & {
  team: { __typename?: "Team" } & { members: { __typename?: "UserConnection" } & UserConnectionFragment };
};

export type Team_MembershipsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Team_MembershipsQuery = { __typename?: "Query" } & {
  team: { __typename?: "Team" } & {
    memberships: { __typename?: "TeamMembershipConnection" } & TeamMembershipConnectionFragment;
  };
};

export type Team_ProjectsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<ProjectFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Team_ProjectsQuery = { __typename?: "Query" } & {
  team: { __typename?: "Team" } & { projects: { __typename?: "ProjectConnection" } & ProjectConnectionFragment };
};

export type Team_StatesQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<WorkflowStateFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Team_StatesQuery = { __typename?: "Query" } & {
  team: { __typename?: "Team" } & {
    states: { __typename?: "WorkflowStateConnection" } & WorkflowStateConnectionFragment;
  };
};

export type Team_TemplatesQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Team_TemplatesQuery = { __typename?: "Query" } & {
  team: { __typename?: "Team" } & { templates: { __typename?: "TemplateConnection" } & TemplateConnectionFragment };
};

export type Team_WebhooksQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Team_WebhooksQuery = { __typename?: "Query" } & {
  team: { __typename?: "Team" } & { webhooks: { __typename?: "WebhookConnection" } & WebhookConnectionFragment };
};

export type TeamMembershipQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type TeamMembershipQuery = { __typename?: "Query" } & {
  teamMembership: { __typename?: "TeamMembership" } & TeamMembershipFragment;
};

export type TeamMembershipsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type TeamMembershipsQuery = { __typename?: "Query" } & {
  teamMemberships: { __typename?: "TeamMembershipConnection" } & TeamMembershipConnectionFragment;
};

export type TeamsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<TeamFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type TeamsQuery = { __typename?: "Query" } & {
  teams: { __typename?: "TeamConnection" } & TeamConnectionFragment;
};

export type TemplateQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type TemplateQuery = { __typename?: "Query" } & { template: { __typename?: "Template" } & TemplateFragment };

export type TemplatesQueryVariables = Exact<{ [key: string]: never }>;

export type TemplatesQuery = { __typename?: "Query" } & {
  templates: Array<{ __typename?: "Template" } & TemplateFragment>;
};

export type UserQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type UserQuery = { __typename?: "Query" } & { user: { __typename?: "User" } & UserFragment };

export type User_AssignedIssuesQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type User_AssignedIssuesQuery = { __typename?: "Query" } & {
  user: { __typename?: "User" } & { assignedIssues: { __typename?: "IssueConnection" } & IssueConnectionFragment };
};

export type User_CreatedIssuesQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type User_CreatedIssuesQuery = { __typename?: "Query" } & {
  user: { __typename?: "User" } & { createdIssues: { __typename?: "IssueConnection" } & IssueConnectionFragment };
};

export type User_TeamMembershipsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type User_TeamMembershipsQuery = { __typename?: "Query" } & {
  user: { __typename?: "User" } & {
    teamMemberships: { __typename?: "TeamMembershipConnection" } & TeamMembershipConnectionFragment;
  };
};

export type User_TeamsQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<TeamFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type User_TeamsQuery = { __typename?: "Query" } & {
  user: { __typename?: "User" } & { teams: { __typename?: "TeamConnection" } & TeamConnectionFragment };
};

export type UserSettingsQueryVariables = Exact<{ [key: string]: never }>;

export type UserSettingsQuery = { __typename?: "Query" } & {
  userSettings: { __typename?: "UserSettings" } & UserSettingsFragment;
};

export type UsersQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<UserFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  includeDisabled?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type UsersQuery = { __typename?: "Query" } & {
  users: { __typename?: "UserConnection" } & UserConnectionFragment;
};

export type ViewerQueryVariables = Exact<{ [key: string]: never }>;

export type ViewerQuery = { __typename?: "Query" } & { viewer: { __typename?: "User" } & UserFragment };

export type Viewer_AssignedIssuesQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Viewer_AssignedIssuesQuery = { __typename?: "Query" } & {
  viewer: { __typename?: "User" } & { assignedIssues: { __typename?: "IssueConnection" } & IssueConnectionFragment };
};

export type Viewer_CreatedIssuesQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Viewer_CreatedIssuesQuery = { __typename?: "Query" } & {
  viewer: { __typename?: "User" } & { createdIssues: { __typename?: "IssueConnection" } & IssueConnectionFragment };
};

export type Viewer_TeamMembershipsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Viewer_TeamMembershipsQuery = { __typename?: "Query" } & {
  viewer: { __typename?: "User" } & {
    teamMemberships: { __typename?: "TeamMembershipConnection" } & TeamMembershipConnectionFragment;
  };
};

export type Viewer_TeamsQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<TeamFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type Viewer_TeamsQuery = { __typename?: "Query" } & {
  viewer: { __typename?: "User" } & { teams: { __typename?: "TeamConnection" } & TeamConnectionFragment };
};

export type WebhookQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type WebhookQuery = { __typename?: "Query" } & { webhook: { __typename?: "Webhook" } & WebhookFragment };

export type WebhooksQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type WebhooksQuery = { __typename?: "Query" } & {
  webhooks: { __typename?: "WebhookConnection" } & WebhookConnectionFragment;
};

export type WorkflowStateQueryVariables = Exact<{
  id: Scalars["String"];
}>;

export type WorkflowStateQuery = { __typename?: "Query" } & {
  workflowState: { __typename?: "WorkflowState" } & WorkflowStateFragment;
};

export type WorkflowState_IssuesQueryVariables = Exact<{
  id: Scalars["String"];
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<IssueFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type WorkflowState_IssuesQuery = { __typename?: "Query" } & {
  workflowState: { __typename?: "WorkflowState" } & {
    issues: { __typename?: "IssueConnection" } & IssueConnectionFragment;
  };
};

export type WorkflowStatesQueryVariables = Exact<{
  after?: Maybe<Scalars["String"]>;
  before?: Maybe<Scalars["String"]>;
  filter?: Maybe<WorkflowStateFilter>;
  first?: Maybe<Scalars["Int"]>;
  includeArchived?: Maybe<Scalars["Boolean"]>;
  last?: Maybe<Scalars["Int"]>;
  orderBy?: Maybe<PaginationOrderBy>;
}>;

export type WorkflowStatesQuery = { __typename?: "Query" } & {
  workflowStates: { __typename?: "WorkflowStateConnection" } & WorkflowStateConnectionFragment;
};

export const EntityFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "Entity" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Entity" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<EntityFragment, unknown>;
export const PersonalNoteFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "PersonalNote" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PersonalNote" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "contentData" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<PersonalNoteFragment, unknown>;
export const ProjectNotificationSubscriptionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectNotificationSubscription" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectNotificationSubscription" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectNotificationSubscriptionFragment, unknown>;
export const TeamNotificationSubscriptionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "TeamNotificationSubscription" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamNotificationSubscription" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<TeamNotificationSubscriptionFragment, unknown>;
export const TemplateFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "Template" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Template" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "templateData" } },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "creator" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "lastUpdatedBy" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<TemplateFragment, unknown>;
export const UserFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "User" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "User" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "statusUntilAt" } },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "avatarUrl" } },
          { kind: "Field", name: { kind: "Name", value: "calendarHash" } },
          { kind: "Field", name: { kind: "Name", value: "createdIssueCount" } },
          { kind: "Field", name: { kind: "Name", value: "disableReason" } },
          { kind: "Field", name: { kind: "Name", value: "statusEmoji" } },
          { kind: "Field", name: { kind: "Name", value: "statusLabel" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "lastSeen" } },
          { kind: "Field", name: { kind: "Name", value: "timezone" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "displayName" } },
          { kind: "Field", name: { kind: "Name", value: "email" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "inviteHash" } },
          { kind: "Field", name: { kind: "Name", value: "url" } },
          { kind: "Field", name: { kind: "Name", value: "active" } },
          { kind: "Field", name: { kind: "Name", value: "guest" } },
          { kind: "Field", name: { kind: "Name", value: "admin" } },
          { kind: "Field", name: { kind: "Name", value: "isMe" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<UserFragment, unknown>;
export const UserAccountFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "UserAccount" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserAccount" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "service" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "email" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "users" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }],
            },
          },
        ],
      },
    },
    ...UserFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UserAccountFragment, unknown>;
export const SyncResponseFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "SyncResponse" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SyncResponse" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "delta" } },
          { kind: "Field", name: { kind: "Name", value: "state" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "subscribedSyncGroups" } },
          { kind: "Field", name: { kind: "Name", value: "databaseVersion" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<SyncResponseFragment, unknown>;
export const OrganizationDomainFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "OrganizationDomain" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationDomain" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "verificationEmail" } },
          { kind: "Field", name: { kind: "Name", value: "verified" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "creator" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "claimed" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<OrganizationDomainFragment, unknown>;
export const GithubRepoFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "GithubRepo" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GithubRepo" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<GithubRepoFragment, unknown>;
export const GithubOrgFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "GithubOrg" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GithubOrg" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "repositories" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GithubRepo" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "login" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "isPersonal" } },
        ],
      },
    },
    ...GithubRepoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<GithubOrgFragment, unknown>;
export const GithubOAuthTokenPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "GithubOAuthTokenPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GithubOAuthTokenPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "organizations" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GithubOrg" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "token" } },
        ],
      },
    },
    ...GithubOrgFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<GithubOAuthTokenPayloadFragment, unknown>;
export const OauthClientFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "OauthClient" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OauthClient" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "imageUrl" } },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "redirectUris" } },
          { kind: "Field", name: { kind: "Name", value: "developer" } },
          { kind: "Field", name: { kind: "Name", value: "clientId" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "clientSecret" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "webhookResourceTypes" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "creator" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "developerUrl" } },
          { kind: "Field", name: { kind: "Name", value: "webhookUrl" } },
          { kind: "Field", name: { kind: "Name", value: "publicEnabled" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<OauthClientFragment, unknown>;
export const UserAuthorizedApplicationFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "UserAuthorizedApplication" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserAuthorizedApplication" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "approvalErrorCode" } },
          { kind: "Field", name: { kind: "Name", value: "imageUrl" } },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "developer" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "clientId" } },
          { kind: "Field", name: { kind: "Name", value: "developerUrl" } },
          { kind: "Field", name: { kind: "Name", value: "webhooksEnabled" } },
          { kind: "Field", name: { kind: "Name", value: "createdByLinear" } },
          { kind: "Field", name: { kind: "Name", value: "isAuthorized" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<UserAuthorizedApplicationFragment, unknown>;
export const ApplicationFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "Application" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Application" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "imageUrl" } },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "developer" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "clientId" } },
          { kind: "Field", name: { kind: "Name", value: "developerUrl" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ApplicationFragment, unknown>;
export const FrontSettingsFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "FrontSettings" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FrontSettings" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "automateTicketReopeningOnComment" } },
          { kind: "Field", name: { kind: "Name", value: "automateTicketReopeningOnCancellation" } },
          { kind: "Field", name: { kind: "Name", value: "automateTicketReopeningOnCompletion" } },
          { kind: "Field", name: { kind: "Name", value: "sendNoteOnStatusChange" } },
          { kind: "Field", name: { kind: "Name", value: "sendNoteOnComment" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<FrontSettingsFragment, unknown>;
export const GitHubSettingsFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "GitHubSettings" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitHubSettings" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "orgLogin" } },
          { kind: "Field", name: { kind: "Name", value: "orgAvatarUrl" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<GitHubSettingsFragment, unknown>;
export const GoogleSheetsSettingsFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "GoogleSheetsSettings" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GoogleSheetsSettings" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "sheetId" } },
          { kind: "Field", name: { kind: "Name", value: "spreadsheetId" } },
          { kind: "Field", name: { kind: "Name", value: "spreadsheetUrl" } },
          { kind: "Field", name: { kind: "Name", value: "updatedIssuesAt" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<GoogleSheetsSettingsFragment, unknown>;
export const IntercomSettingsFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IntercomSettings" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntercomSettings" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "automateTicketReopeningOnComment" } },
          { kind: "Field", name: { kind: "Name", value: "automateTicketReopeningOnCancellation" } },
          { kind: "Field", name: { kind: "Name", value: "automateTicketReopeningOnCompletion" } },
          { kind: "Field", name: { kind: "Name", value: "sendNoteOnStatusChange" } },
          { kind: "Field", name: { kind: "Name", value: "sendNoteOnComment" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IntercomSettingsFragment, unknown>;
export const JiraProjectDataFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "JiraProjectData" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "JiraProjectData" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "key" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<JiraProjectDataFragment, unknown>;
export const JiraLinearMappingFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "JiraLinearMapping" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "JiraLinearMapping" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "jiraProjectId" } },
          { kind: "Field", name: { kind: "Name", value: "linearTeamId" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<JiraLinearMappingFragment, unknown>;
export const JiraSettingsFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "JiraSettings" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "JiraSettings" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "projects" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "JiraProjectData" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "projectMapping" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "JiraLinearMapping" } }],
            },
          },
        ],
      },
    },
    ...JiraProjectDataFragmentDoc.definitions,
    ...JiraLinearMappingFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<JiraSettingsFragment, unknown>;
export const NotionSettingsFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "NotionSettings" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotionSettings" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "workspaceId" } },
          { kind: "Field", name: { kind: "Name", value: "workspaceName" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<NotionSettingsFragment, unknown>;
export const SentrySettingsFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "SentrySettings" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SentrySettings" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "organizationSlug" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<SentrySettingsFragment, unknown>;
export const SlackPostSettingsFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "SlackPostSettings" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SlackPostSettings" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "channel" } },
          { kind: "Field", name: { kind: "Name", value: "channelId" } },
          { kind: "Field", name: { kind: "Name", value: "configurationUrl" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<SlackPostSettingsFragment, unknown>;
export const ZendeskSettingsFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ZendeskSettings" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ZendeskSettings" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "botUserId" } },
          { kind: "Field", name: { kind: "Name", value: "url" } },
          { kind: "Field", name: { kind: "Name", value: "subdomain" } },
          { kind: "Field", name: { kind: "Name", value: "automateTicketReopeningOnComment" } },
          { kind: "Field", name: { kind: "Name", value: "automateTicketReopeningOnCancellation" } },
          { kind: "Field", name: { kind: "Name", value: "automateTicketReopeningOnCompletion" } },
          { kind: "Field", name: { kind: "Name", value: "sendNoteOnStatusChange" } },
          { kind: "Field", name: { kind: "Name", value: "sendNoteOnComment" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ZendeskSettingsFragment, unknown>;
export const IntegrationSettingsFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IntegrationSettings" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationSettings" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "front" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FrontSettings" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "gitHub" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitHubSettings" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "googleSheets" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GoogleSheetsSettings" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "intercom" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntercomSettings" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "jira" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "JiraSettings" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "notion" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotionSettings" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "sentry" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SentrySettings" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "slackOrgProjectUpdatesPost" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackPostSettings" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "slackPost" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackPostSettings" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "slackProjectPost" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackPostSettings" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "zendesk" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ZendeskSettings" } }],
            },
          },
        ],
      },
    },
    ...FrontSettingsFragmentDoc.definitions,
    ...GitHubSettingsFragmentDoc.definitions,
    ...GoogleSheetsSettingsFragmentDoc.definitions,
    ...IntercomSettingsFragmentDoc.definitions,
    ...JiraSettingsFragmentDoc.definitions,
    ...NotionSettingsFragmentDoc.definitions,
    ...SentrySettingsFragmentDoc.definitions,
    ...SlackPostSettingsFragmentDoc.definitions,
    ...ZendeskSettingsFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationSettingsFragment, unknown>;
export const SamlConfigurationPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "SamlConfigurationPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SamlConfigurationPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "ssoBinding" } },
          { kind: "Field", name: { kind: "Name", value: "ssoEndpoint" } },
          { kind: "Field", name: { kind: "Name", value: "ssoSignAlgo" } },
          { kind: "Field", name: { kind: "Name", value: "issuerEntityId" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<SamlConfigurationPayloadFragment, unknown>;
export const UserSettingsFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "UserSettings" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserSettings" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "unsubscribedFrom" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "notificationPreferences" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<UserSettingsFragment, unknown>;
export const AdminJobConfigurationPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "AdminJobConfigurationPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AdminJobConfigurationPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "currentJob" } },
          { kind: "Field", name: { kind: "Name", value: "delay" } },
          { kind: "Field", name: { kind: "Name", value: "enabled" } },
          { kind: "Field", name: { kind: "Name", value: "param" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<AdminJobConfigurationPayloadFragment, unknown>;
export const AdminJobStatusPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "AdminJobStatusPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AdminJobStatusPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "availableJobs" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "configuration" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AdminJobConfigurationPayload" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "cursor" } },
          { kind: "Field", name: { kind: "Name", value: "startedAt" } },
        ],
      },
    },
    ...AdminJobConfigurationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AdminJobStatusPayloadFragment, unknown>;
export const ApiKeyFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ApiKey" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ApiKey" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "label" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ApiKeyFragment, unknown>;
export const PageInfoFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "PageInfo" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PageInfo" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "startCursor" } },
          { kind: "Field", name: { kind: "Name", value: "endCursor" } },
          { kind: "Field", name: { kind: "Name", value: "hasPreviousPage" } },
          { kind: "Field", name: { kind: "Name", value: "hasNextPage" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<PageInfoFragment, unknown>;
export const ApiKeyConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ApiKeyConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ApiKeyConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ApiKey" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
    ...ApiKeyFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ApiKeyConnectionFragment, unknown>;
export const ApiKeyPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ApiKeyPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ApiKeyPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "apiKey" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ApiKey" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
    ...ApiKeyFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ApiKeyPayloadFragment, unknown>;
export const ArchivePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ArchivePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ArchivePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ArchivePayloadFragment, unknown>;
export const AttachmentFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "Attachment" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Attachment" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "sourceType" } },
          { kind: "Field", name: { kind: "Name", value: "subtitle" } },
          { kind: "Field", name: { kind: "Name", value: "title" } },
          { kind: "Field", name: { kind: "Name", value: "metadata" } },
          { kind: "Field", name: { kind: "Name", value: "groupBySource" } },
          { kind: "Field", name: { kind: "Name", value: "source" } },
          { kind: "Field", name: { kind: "Name", value: "url" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "creator" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<AttachmentFragment, unknown>;
export const AttachmentConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "AttachmentConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AttachmentConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Attachment" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
    ...AttachmentFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AttachmentConnectionFragment, unknown>;
export const AttachmentPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "AttachmentPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AttachmentPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "attachment" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<AttachmentPayloadFragment, unknown>;
export const AuditEntryFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "AuditEntry" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuditEntry" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "requestInformation" } },
          { kind: "Field", name: { kind: "Name", value: "metadata" } },
          { kind: "Field", name: { kind: "Name", value: "countryCode" } },
          { kind: "Field", name: { kind: "Name", value: "ip" } },
          { kind: "Field", name: { kind: "Name", value: "actorId" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "actor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "type" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<AuditEntryFragment, unknown>;
export const AuditEntryConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "AuditEntryConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuditEntryConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuditEntry" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
    ...AuditEntryFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AuditEntryConnectionFragment, unknown>;
export const AuditEntryTypeFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "AuditEntryType" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuditEntryType" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<AuditEntryTypeFragment, unknown>;
export const PaidSubscriptionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "PaidSubscription" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PaidSubscription" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "creator" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "canceledAt" } },
          { kind: "Field", name: { kind: "Name", value: "nextBillingAt" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "seatsMaximum" } },
          { kind: "Field", name: { kind: "Name", value: "seatsMinimum" } },
          { kind: "Field", name: { kind: "Name", value: "seats" } },
          { kind: "Field", name: { kind: "Name", value: "pendingChangeType" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<PaidSubscriptionFragment, unknown>;
export const OrganizationFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "Organization" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Organization" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "allowedAuthServices" } },
          { kind: "Field", name: { kind: "Name", value: "gitBranchFormat" } },
          { kind: "Field", name: { kind: "Name", value: "userCount" } },
          { kind: "Field", name: { kind: "Name", value: "createdIssueCount" } },
          { kind: "Field", name: { kind: "Name", value: "previousUrlKeys" } },
          { kind: "Field", name: { kind: "Name", value: "periodUploadVolume" } },
          { kind: "Field", name: { kind: "Name", value: "projectUpdateRemindersHour" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "logoUrl" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "subscription" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PaidSubscription" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "urlKey" } },
          { kind: "Field", name: { kind: "Name", value: "deletionRequestedAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "samlEnabled" } },
          { kind: "Field", name: { kind: "Name", value: "scimEnabled" } },
          { kind: "Field", name: { kind: "Name", value: "gitLinkbackMessagesEnabled" } },
          { kind: "Field", name: { kind: "Name", value: "gitPublicLinkbackMessagesEnabled" } },
          { kind: "Field", name: { kind: "Name", value: "roadmapEnabled" } },
        ],
      },
    },
    ...PaidSubscriptionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<OrganizationFragment, unknown>;
export const AuthResolverResponseFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "AuthResolverResponse" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthResolverResponse" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "email" } },
          { kind: "Field", name: { kind: "Name", value: "lastUsedOrganizationId" } },
          { kind: "Field", name: { kind: "Name", value: "token" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "availableOrganizations" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Organization" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "allowDomainAccess" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "users" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }],
            },
          },
        ],
      },
    },
    ...OrganizationFragmentDoc.definitions,
    ...UserFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AuthResolverResponseFragment, unknown>;
export const CommentFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "Comment" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Comment" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "url" } },
          { kind: "Field", name: { kind: "Name", value: "reactionData" } },
          { kind: "Field", name: { kind: "Name", value: "bodyData" } },
          { kind: "Field", name: { kind: "Name", value: "body" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "parent" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "editedAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CommentFragment, unknown>;
export const CommentConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CommentConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CommentConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Comment" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
    ...CommentFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CommentConnectionFragment, unknown>;
export const CommentPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CommentPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CommentPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "comment" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CommentPayloadFragment, unknown>;
export const ContactPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ContactPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ContactPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ContactPayloadFragment, unknown>;
export const CreateCsvExportReportPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CreateCsvExportReportPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CreateCsvExportReportPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CreateCsvExportReportPayloadFragment, unknown>;
export const CreateOrJoinOrganizationResponseFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CreateOrJoinOrganizationResponseFragment, unknown>;
export const CustomViewFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CustomView" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomView" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "color" } },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "filterData" } },
          { kind: "Field", name: { kind: "Name", value: "filters" } },
          { kind: "Field", name: { kind: "Name", value: "icon" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "creator" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "shared" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CustomViewFragment, unknown>;
export const CustomViewConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CustomViewConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomViewConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomView" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
    ...CustomViewFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CustomViewConnectionFragment, unknown>;
export const CustomViewPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CustomViewPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomViewPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "customView" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CustomViewPayloadFragment, unknown>;
export const CycleFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "Cycle" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Cycle" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "completedAt" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "endsAt" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "completedScopeHistory" } },
          { kind: "Field", name: { kind: "Name", value: "completedIssueCountHistory" } },
          { kind: "Field", name: { kind: "Name", value: "inProgressScopeHistory" } },
          { kind: "Field", name: { kind: "Name", value: "number" } },
          { kind: "Field", name: { kind: "Name", value: "progress" } },
          { kind: "Field", name: { kind: "Name", value: "startsAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "scopeHistory" } },
          { kind: "Field", name: { kind: "Name", value: "issueCountHistory" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CycleFragment, unknown>;
export const CycleConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CycleConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CycleConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Cycle" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
    ...CycleFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CycleConnectionFragment, unknown>;
export const CyclePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "CyclePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CyclePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "cycle" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<CyclePayloadFragment, unknown>;
export const DocumentFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "Document" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Document" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "color" } },
          { kind: "Field", name: { kind: "Name", value: "contentData" } },
          { kind: "Field", name: { kind: "Name", value: "content" } },
          { kind: "Field", name: { kind: "Name", value: "title" } },
          { kind: "Field", name: { kind: "Name", value: "slugId" } },
          { kind: "Field", name: { kind: "Name", value: "icon" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "creator" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "updatedBy" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<DocumentFragment, unknown>;
export const DocumentConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "DocumentConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Document" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
    ...DocumentFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DocumentConnectionFragment, unknown>;
export const DocumentPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "DocumentPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "document" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<DocumentPayloadFragment, unknown>;
export const EmailUnsubscribePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "EmailUnsubscribePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmailUnsubscribePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<EmailUnsubscribePayloadFragment, unknown>;
export const EmailUserAccountAuthChallengeResponseFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "EmailUserAccountAuthChallengeResponse" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmailUserAccountAuthChallengeResponse" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "authType" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<EmailUserAccountAuthChallengeResponseFragment, unknown>;
export const EmojiFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "Emoji" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Emoji" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "url" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "source" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "creator" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<EmojiFragment, unknown>;
export const EmojiConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "EmojiConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmojiConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Emoji" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
    ...EmojiFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<EmojiConnectionFragment, unknown>;
export const EmojiPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "EmojiPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmojiPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "emoji" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<EmojiPayloadFragment, unknown>;
export const EventPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "EventPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EventPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<EventPayloadFragment, unknown>;
export const FavoriteFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "Favorite" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Favorite" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "customView" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "cycle" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "document" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "label" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "roadmap" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "projectTeam" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "folderName" } },
          { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "parent" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "predefinedViewTeam" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "predefinedViewType" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<FavoriteFragment, unknown>;
export const FavoriteConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "FavoriteConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FavoriteConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Favorite" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
    ...FavoriteFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<FavoriteConnectionFragment, unknown>;
export const FavoritePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "FavoritePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FavoritePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "favorite" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<FavoritePayloadFragment, unknown>;
export const FigmaEmbedFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "FigmaEmbed" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FigmaEmbed" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastModified" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "url" } },
          { kind: "Field", name: { kind: "Name", value: "nodeName" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<FigmaEmbedFragment, unknown>;
export const FigmaEmbedPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "FigmaEmbedPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FigmaEmbedPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "figmaEmbed" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FigmaEmbed" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
    ...FigmaEmbedFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<FigmaEmbedPayloadFragment, unknown>;
export const FrontAttachmentPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "FrontAttachmentPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FrontAttachmentPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<FrontAttachmentPayloadFragment, unknown>;
export const GitHubCommitIntegrationPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "GitHubCommitIntegrationPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitHubCommitIntegrationPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "integration" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "webhookSecret" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<GitHubCommitIntegrationPayloadFragment, unknown>;
export const ImageUploadFromUrlPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ImageUploadFromUrlPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ImageUploadFromUrlPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "url" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ImageUploadFromUrlPayloadFragment, unknown>;
export const IntegrationFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "Integration" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Integration" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "service" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "creator" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IntegrationFragment, unknown>;
export const IntegrationConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IntegrationConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Integration" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
    ...IntegrationFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationConnectionFragment, unknown>;
export const IntegrationPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IntegrationPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "integration" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IntegrationPayloadFragment, unknown>;
export const IntegrationRequestPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IntegrationRequestPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationRequestPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IntegrationRequestPayloadFragment, unknown>;
export const IntegrationTemplateFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IntegrationTemplate" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationTemplate" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "integration" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "template" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IntegrationTemplateFragment, unknown>;
export const IntegrationTemplateConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IntegrationTemplateConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationTemplateConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationTemplate" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
    ...IntegrationTemplateFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationTemplateConnectionFragment, unknown>;
export const IntegrationTemplatePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IntegrationTemplatePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationTemplatePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationTemplate" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IntegrationTemplatePayloadFragment, unknown>;
export const IntegrationsSettingsFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IntegrationsSettings" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationsSettings" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "slackIssueNewComment" } },
          { kind: "Field", name: { kind: "Name", value: "slackIssueAddedToTriage" } },
          { kind: "Field", name: { kind: "Name", value: "slackIssueCreated" } },
          { kind: "Field", name: { kind: "Name", value: "slackProjectUpdateCreated" } },
          { kind: "Field", name: { kind: "Name", value: "slackIssueSlaHighRisk" } },
          { kind: "Field", name: { kind: "Name", value: "slackIssueSlaBreached" } },
          { kind: "Field", name: { kind: "Name", value: "slackIssueStatusChangedDone" } },
          { kind: "Field", name: { kind: "Name", value: "slackIssueStatusChangedAll" } },
          { kind: "Field", name: { kind: "Name", value: "slackProjectUpdateCreatedToTeam" } },
          { kind: "Field", name: { kind: "Name", value: "slackProjectUpdateCreatedToWorkspace" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IntegrationsSettingsFragment, unknown>;
export const IntegrationsSettingsConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IntegrationsSettingsConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationsSettingsConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationsSettings" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
    ...IntegrationsSettingsFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationsSettingsConnectionFragment, unknown>;
export const IntegrationsSettingsPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IntegrationsSettingsPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationsSettingsPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationsSettings" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IntegrationsSettingsPayloadFragment, unknown>;
export const IssueFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "Issue" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Issue" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "trashed" } },
          { kind: "Field", name: { kind: "Name", value: "url" } },
          { kind: "Field", name: { kind: "Name", value: "identifier" } },
          { kind: "Field", name: { kind: "Name", value: "priorityLabel" } },
          { kind: "Field", name: { kind: "Name", value: "previousIdentifiers" } },
          { kind: "Field", name: { kind: "Name", value: "customerTicketCount" } },
          { kind: "Field", name: { kind: "Name", value: "branchName" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "cycle" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "dueDate" } },
          { kind: "Field", name: { kind: "Name", value: "estimate" } },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "title" } },
          { kind: "Field", name: { kind: "Name", value: "number" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "boardOrder" } },
          { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
          { kind: "Field", name: { kind: "Name", value: "subIssueSortOrder" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "parent" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "priority" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "startedTriageAt" } },
          { kind: "Field", name: { kind: "Name", value: "triagedAt" } },
          { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "autoClosedAt" } },
          { kind: "Field", name: { kind: "Name", value: "canceledAt" } },
          { kind: "Field", name: { kind: "Name", value: "completedAt" } },
          { kind: "Field", name: { kind: "Name", value: "startedAt" } },
          { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "assignee" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "creator" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "snoozedBy" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "state" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueFragment, unknown>;
export const IssueBatchPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueBatchPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueBatchPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "issues" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Issue" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
    ...IssueFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueBatchPayloadFragment, unknown>;
export const IssueConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Issue" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
    ...IssueFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueConnectionFragment, unknown>;
export const IssueRelationHistoryPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueRelationHistoryPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationHistoryPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "identifier" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueRelationHistoryPayloadFragment, unknown>;
export const IssueImportFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueImport" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImport" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "progress" } },
          { kind: "Field", name: { kind: "Name", value: "teamName" } },
          { kind: "Field", name: { kind: "Name", value: "mapping" } },
          { kind: "Field", name: { kind: "Name", value: "creatorId" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "service" } },
          { kind: "Field", name: { kind: "Name", value: "status" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "error" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueImportFragment, unknown>;
export const IssueHistoryFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueHistory" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueHistory" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "relationChanges" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationHistoryPayload" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "addedLabelIds" } },
          { kind: "Field", name: { kind: "Name", value: "removedLabelIds" } },
          { kind: "Field", name: { kind: "Name", value: "attachmentId" } },
          { kind: "Field", name: { kind: "Name", value: "toCycleId" } },
          { kind: "Field", name: { kind: "Name", value: "toParentId" } },
          { kind: "Field", name: { kind: "Name", value: "toConvertedProjectId" } },
          { kind: "Field", name: { kind: "Name", value: "toProjectId" } },
          { kind: "Field", name: { kind: "Name", value: "toStateId" } },
          { kind: "Field", name: { kind: "Name", value: "fromCycleId" } },
          { kind: "Field", name: { kind: "Name", value: "fromParentId" } },
          { kind: "Field", name: { kind: "Name", value: "fromProjectId" } },
          { kind: "Field", name: { kind: "Name", value: "fromStateId" } },
          { kind: "Field", name: { kind: "Name", value: "fromTeamId" } },
          { kind: "Field", name: { kind: "Name", value: "toTeamId" } },
          { kind: "Field", name: { kind: "Name", value: "fromAssigneeId" } },
          { kind: "Field", name: { kind: "Name", value: "toAssigneeId" } },
          { kind: "Field", name: { kind: "Name", value: "actorId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "issueImport" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImport" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "attachment" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "toCycle" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "toParent" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "toConvertedProject" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "toProject" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "toState" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "fromCycle" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "fromParent" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "fromProject" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "fromState" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "fromTeam" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "toTeam" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "fromAssignee" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "toAssignee" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "actor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "fromDueDate" } },
          { kind: "Field", name: { kind: "Name", value: "toDueDate" } },
          { kind: "Field", name: { kind: "Name", value: "fromEstimate" } },
          { kind: "Field", name: { kind: "Name", value: "toEstimate" } },
          { kind: "Field", name: { kind: "Name", value: "fromPriority" } },
          { kind: "Field", name: { kind: "Name", value: "toPriority" } },
          { kind: "Field", name: { kind: "Name", value: "fromTitle" } },
          { kind: "Field", name: { kind: "Name", value: "toTitle" } },
          { kind: "Field", name: { kind: "Name", value: "archived" } },
          { kind: "Field", name: { kind: "Name", value: "autoArchived" } },
          { kind: "Field", name: { kind: "Name", value: "autoClosed" } },
          { kind: "Field", name: { kind: "Name", value: "trashed" } },
          { kind: "Field", name: { kind: "Name", value: "updatedDescription" } },
        ],
      },
    },
    ...IssueRelationHistoryPayloadFragmentDoc.definitions,
    ...IssueImportFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueHistoryFragment, unknown>;
export const IssueHistoryConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueHistoryConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueHistoryConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueHistory" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
    ...IssueHistoryFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueHistoryConnectionFragment, unknown>;
export const IssueImportDeletePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueImportDeletePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImportDeletePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "issueImport" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImport" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
    ...IssueImportFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueImportDeletePayloadFragment, unknown>;
export const IssueImportPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueImportPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImportPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "issueImport" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImport" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
    ...IssueImportFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueImportPayloadFragment, unknown>;
export const IssueLabelFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueLabel" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueLabel" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "color" } },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "parent" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "creator" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueLabelFragment, unknown>;
export const IssueLabelConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueLabelConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabel" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
    ...IssueLabelFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueLabelConnectionFragment, unknown>;
export const IssueLabelPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueLabelPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "issueLabel" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueLabelPayloadFragment, unknown>;
export const IssuePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssuePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssuePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssuePayloadFragment, unknown>;
export const IssuePriorityValueFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssuePriorityValue" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssuePriorityValue" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "label" } },
          { kind: "Field", name: { kind: "Name", value: "priority" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssuePriorityValueFragment, unknown>;
export const IssueRelationFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueRelation" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueRelation" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "relatedIssue" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueRelationFragment, unknown>;
export const IssueRelationConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueRelationConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelation" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
    ...IssueRelationFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueRelationConnectionFragment, unknown>;
export const IssueRelationPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueRelationPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "issueRelation" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueRelationPayloadFragment, unknown>;
export const LogoutResponseFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "LogoutResponse" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "LogoutResponse" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<LogoutResponseFragment, unknown>;
export const NodeFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "Node" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Node" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<NodeFragment, unknown>;
export const IssueNotificationFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "IssueNotification" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueNotification" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "reactionEmoji" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "comment" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "emailedAt" } },
          { kind: "Field", name: { kind: "Name", value: "readAt" } },
          { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "actor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<IssueNotificationFragment, unknown>;
export const OauthClientApprovalFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "OauthClientApproval" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OauthClientApproval" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "requesterId" } },
          { kind: "Field", name: { kind: "Name", value: "responderId" } },
          { kind: "Field", name: { kind: "Name", value: "requestReason" } },
          { kind: "Field", name: { kind: "Name", value: "denyReason" } },
          { kind: "Field", name: { kind: "Name", value: "scopes" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "oauthClientId" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<OauthClientApprovalFragment, unknown>;
export const OauthClientApprovalNotificationFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "OauthClientApprovalNotification" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OauthClientApprovalNotification" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "oauthClientApproval" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OauthClientApproval" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "emailedAt" } },
          { kind: "Field", name: { kind: "Name", value: "readAt" } },
          { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "actor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
    ...OauthClientApprovalFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<OauthClientApprovalNotificationFragment, unknown>;
export const ProjectNotificationFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectNotification" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectNotification" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "projectUpdate" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "emailedAt" } },
          { kind: "Field", name: { kind: "Name", value: "readAt" } },
          { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "actor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectNotificationFragment, unknown>;
export const NotificationFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "Notification" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Notification" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "emailedAt" } },
          { kind: "Field", name: { kind: "Name", value: "readAt" } },
          { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "actor" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "InlineFragment",
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueNotification" } },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueNotification" } }],
            },
          },
          {
            kind: "InlineFragment",
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OauthClientApprovalNotification" } },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "OauthClientApprovalNotification" } },
              ],
            },
          },
          {
            kind: "InlineFragment",
            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectNotification" } },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectNotification" } }],
            },
          },
        ],
      },
    },
    ...IssueNotificationFragmentDoc.definitions,
    ...OauthClientApprovalNotificationFragmentDoc.definitions,
    ...ProjectNotificationFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<NotificationFragment, unknown>;
export const NotificationConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "NotificationConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Notification" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
    ...NotificationFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<NotificationConnectionFragment, unknown>;
export const NotificationPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "NotificationPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "notification" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Notification" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
    ...NotificationFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<NotificationPayloadFragment, unknown>;
export const NotificationSubscriptionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "NotificationSubscription" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscription" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<NotificationSubscriptionFragment, unknown>;
export const NotificationSubscriptionConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "NotificationSubscriptionConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscriptionConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscription" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
    ...NotificationSubscriptionFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<NotificationSubscriptionConnectionFragment, unknown>;
export const NotificationSubscriptionPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "NotificationSubscriptionPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscriptionPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "notificationSubscription" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscription" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
    ...NotificationSubscriptionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<NotificationSubscriptionPayloadFragment, unknown>;
export const OrganizationCancelDeletePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "OrganizationCancelDeletePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationCancelDeletePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<OrganizationCancelDeletePayloadFragment, unknown>;
export const OrganizationDeletePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "OrganizationDeletePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationDeletePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<OrganizationDeletePayloadFragment, unknown>;
export const OrganizationExistsPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "OrganizationExistsPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationExistsPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
          { kind: "Field", name: { kind: "Name", value: "exists" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<OrganizationExistsPayloadFragment, unknown>;
export const OrganizationInviteFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "OrganizationInvite" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInvite" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "external" } },
          { kind: "Field", name: { kind: "Name", value: "email" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "acceptedAt" } },
          { kind: "Field", name: { kind: "Name", value: "expiresAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "inviter" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "invitee" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<OrganizationInviteFragment, unknown>;
export const OrganizationInviteConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "OrganizationInviteConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInviteConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInvite" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
    ...OrganizationInviteFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<OrganizationInviteConnectionFragment, unknown>;
export const OrganizationInviteDetailsPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "OrganizationInviteDetailsPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInviteDetailsPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "organizationId" } },
          { kind: "Field", name: { kind: "Name", value: "organizationName" } },
          { kind: "Field", name: { kind: "Name", value: "email" } },
          { kind: "Field", name: { kind: "Name", value: "inviter" } },
          { kind: "Field", name: { kind: "Name", value: "organizationLogoUrl" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "accepted" } },
          { kind: "Field", name: { kind: "Name", value: "expired" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<OrganizationInviteDetailsPayloadFragment, unknown>;
export const OrganizationInvitePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "OrganizationInvitePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInvitePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "organizationInvite" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<OrganizationInvitePayloadFragment, unknown>;
export const OrganizationPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "OrganizationPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<OrganizationPayloadFragment, unknown>;
export const ProjectFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "Project" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Project" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "url" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationsSettings" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "targetDate" } },
          { kind: "Field", name: { kind: "Name", value: "icon" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "completedScopeHistory" } },
          { kind: "Field", name: { kind: "Name", value: "completedIssueCountHistory" } },
          { kind: "Field", name: { kind: "Name", value: "inProgressScopeHistory" } },
          { kind: "Field", name: { kind: "Name", value: "progress" } },
          { kind: "Field", name: { kind: "Name", value: "scope" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "lead" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "convertedFromIssue" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "color" } },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "slugId" } },
          { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "canceledAt" } },
          { kind: "Field", name: { kind: "Name", value: "completedAt" } },
          { kind: "Field", name: { kind: "Name", value: "startedAt" } },
          { kind: "Field", name: { kind: "Name", value: "projectUpdateRemindersPausedUntilAt" } },
          { kind: "Field", name: { kind: "Name", value: "scopeHistory" } },
          { kind: "Field", name: { kind: "Name", value: "issueCountHistory" } },
          { kind: "Field", name: { kind: "Name", value: "state" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "creator" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "slackIssueComments" } },
          { kind: "Field", name: { kind: "Name", value: "slackNewIssue" } },
          { kind: "Field", name: { kind: "Name", value: "slackIssueStatuses" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectFragment, unknown>;
export const ProjectConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Project" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
    ...ProjectFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ProjectConnectionFragment, unknown>;
export const ProjectLinkFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectLink" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectLink" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "url" } },
          { kind: "Field", name: { kind: "Name", value: "label" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "creator" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectLinkFragment, unknown>;
export const ProjectLinkConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectLinkConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectLinkConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLink" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
    ...ProjectLinkFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ProjectLinkConnectionFragment, unknown>;
export const ProjectLinkPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectLinkPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectLinkPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "projectLink" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectLinkPayloadFragment, unknown>;
export const ProjectMilestoneFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectMilestone" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestone" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "targetDate" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectMilestoneFragment, unknown>;
export const ProjectMilestoneConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectMilestoneConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestone" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
    ...ProjectMilestoneFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ProjectMilestoneConnectionFragment, unknown>;
export const ProjectMilestonePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectMilestonePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestonePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "projectMilestone" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectMilestonePayloadFragment, unknown>;
export const ProjectPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectPayloadFragment, unknown>;
export const ProjectUpdateFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectUpdate" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdate" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "url" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "editedAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "body" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectUpdateFragment, unknown>;
export const ProjectUpdateConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectUpdateConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdate" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
    ...ProjectUpdateFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ProjectUpdateConnectionFragment, unknown>;
export const ProjectUpdateInteractionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectUpdateInteraction" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateInteraction" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "projectUpdate" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "readAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectUpdateInteractionFragment, unknown>;
export const ProjectUpdateInteractionConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectUpdateInteractionConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateInteractionConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateInteraction" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
    ...ProjectUpdateInteractionFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ProjectUpdateInteractionConnectionFragment, unknown>;
export const ProjectUpdateInteractionPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectUpdateInteractionPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateInteractionPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "projectUpdateInteraction" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectUpdateInteractionPayloadFragment, unknown>;
export const ProjectUpdatePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectUpdatePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdatePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "projectUpdate" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectUpdatePayloadFragment, unknown>;
export const ProjectUpdateWithInteractionPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ProjectUpdateWithInteractionPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateWithInteractionPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "interaction" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "projectUpdate" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ProjectUpdateWithInteractionPayloadFragment, unknown>;
export const PushSubscriptionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "PushSubscription" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PushSubscription" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<PushSubscriptionFragment, unknown>;
export const PushSubscriptionConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "PushSubscriptionConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PushSubscriptionConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PushSubscription" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
    ...PushSubscriptionFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<PushSubscriptionConnectionFragment, unknown>;
export const PushSubscriptionPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "PushSubscriptionPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PushSubscriptionPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<PushSubscriptionPayloadFragment, unknown>;
export const PushSubscriptionTestPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "PushSubscriptionTestPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PushSubscriptionTestPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<PushSubscriptionTestPayloadFragment, unknown>;
export const RateLimitResultPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "RateLimitResultPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RateLimitResultPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "period" } },
          { kind: "Field", name: { kind: "Name", value: "remainingAmount" } },
          { kind: "Field", name: { kind: "Name", value: "requestedAmount" } },
          { kind: "Field", name: { kind: "Name", value: "reset" } },
          { kind: "Field", name: { kind: "Name", value: "allowedAmount" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<RateLimitResultPayloadFragment, unknown>;
export const RateLimitPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "RateLimitPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RateLimitPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "identifier" } },
          { kind: "Field", name: { kind: "Name", value: "kind" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "limits" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RateLimitResultPayload" } }],
            },
          },
        ],
      },
    },
    ...RateLimitResultPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<RateLimitPayloadFragment, unknown>;
export const ReactionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "Reaction" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Reaction" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "emoji" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ReactionFragment, unknown>;
export const ReactionConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ReactionConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ReactionConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Reaction" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
    ...ReactionFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ReactionConnectionFragment, unknown>;
export const ReactionPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ReactionPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ReactionPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "reaction" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Reaction" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
    ...ReactionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ReactionPayloadFragment, unknown>;
export const RoadmapFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "Roadmap" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Roadmap" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "slugId" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "creator" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "owner" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<RoadmapFragment, unknown>;
export const RoadmapConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "RoadmapConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Roadmap" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
    ...RoadmapFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<RoadmapConnectionFragment, unknown>;
export const RoadmapPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "RoadmapPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "roadmap" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<RoadmapPayloadFragment, unknown>;
export const RoadmapToProjectFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "RoadmapToProject" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapToProject" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "roadmap" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<RoadmapToProjectFragment, unknown>;
export const RoadmapToProjectConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "RoadmapToProjectConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapToProjectConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapToProject" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
    ...RoadmapToProjectFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<RoadmapToProjectConnectionFragment, unknown>;
export const RoadmapToProjectPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "RoadmapToProjectPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapToProjectPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "roadmapToProject" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<RoadmapToProjectPayloadFragment, unknown>;
export const SamlConfigurationFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "SamlConfiguration" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SamlConfiguration" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "ssoBinding" } },
          { kind: "Field", name: { kind: "Name", value: "ssoEndpoint" } },
          { kind: "Field", name: { kind: "Name", value: "ssoSignAlgo" } },
          { kind: "Field", name: { kind: "Name", value: "issuerEntityId" } },
          { kind: "Field", name: { kind: "Name", value: "ssoSigningCert" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<SamlConfigurationFragment, unknown>;
export const SsoUrlFromEmailResponseFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "SsoUrlFromEmailResponse" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SsoUrlFromEmailResponse" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "samlSsoUrl" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<SsoUrlFromEmailResponseFragment, unknown>;
export const SynchronizedPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "SynchronizedPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SynchronizedPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<SynchronizedPayloadFragment, unknown>;
export const TeamFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "Team" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Team" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "cycleIssueAutoAssignCompleted" } },
          { kind: "Field", name: { kind: "Name", value: "cycleIssueAutoAssignStarted" } },
          { kind: "Field", name: { kind: "Name", value: "cycleCalenderUrl" } },
          { kind: "Field", name: { kind: "Name", value: "upcomingCycleCount" } },
          { kind: "Field", name: { kind: "Name", value: "cycleLockToActive" } },
          { kind: "Field", name: { kind: "Name", value: "autoArchivePeriod" } },
          { kind: "Field", name: { kind: "Name", value: "autoClosePeriod" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationsSettings" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "activeCycle" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "autoCloseStateId" } },
          { kind: "Field", name: { kind: "Name", value: "cycleCooldownTime" } },
          { kind: "Field", name: { kind: "Name", value: "cycleStartDay" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "defaultTemplateForMembers" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "defaultTemplateForNonMembers" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "defaultIssueState" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "cycleDuration" } },
          { kind: "Field", name: { kind: "Name", value: "icon" } },
          { kind: "Field", name: { kind: "Name", value: "defaultTemplateForMembersId" } },
          { kind: "Field", name: { kind: "Name", value: "defaultTemplateForNonMembersId" } },
          { kind: "Field", name: { kind: "Name", value: "issueEstimationType" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "color" } },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "key" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "timezone" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "mergeWorkflowState" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "draftWorkflowState" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "startWorkflowState" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "reviewWorkflowState" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "markedAsDuplicateWorkflowState" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "triageIssueState" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "inviteHash" } },
          { kind: "Field", name: { kind: "Name", value: "defaultIssueEstimate" } },
          { kind: "Field", name: { kind: "Name", value: "requirePriorityToLeaveTriage" } },
          { kind: "Field", name: { kind: "Name", value: "issueOrderingNoPriorityFirst" } },
          { kind: "Field", name: { kind: "Name", value: "private" } },
          { kind: "Field", name: { kind: "Name", value: "cyclesEnabled" } },
          { kind: "Field", name: { kind: "Name", value: "issueEstimationExtended" } },
          { kind: "Field", name: { kind: "Name", value: "issueEstimationAllowZero" } },
          { kind: "Field", name: { kind: "Name", value: "groupIssueHistory" } },
          { kind: "Field", name: { kind: "Name", value: "issueSortOrderDefaultToBottom" } },
          { kind: "Field", name: { kind: "Name", value: "slackIssueComments" } },
          { kind: "Field", name: { kind: "Name", value: "slackNewIssue" } },
          { kind: "Field", name: { kind: "Name", value: "slackIssueStatuses" } },
          { kind: "Field", name: { kind: "Name", value: "triageEnabled" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<TeamFragment, unknown>;
export const TeamConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "TeamConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Team" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
    ...TeamFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<TeamConnectionFragment, unknown>;
export const TeamMembershipFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "TeamMembership" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamMembership" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "owner" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<TeamMembershipFragment, unknown>;
export const TeamMembershipConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "TeamMembershipConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamMembershipConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembership" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
    ...TeamMembershipFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<TeamMembershipConnectionFragment, unknown>;
export const TeamMembershipPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "TeamMembershipPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamMembershipPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "teamMembership" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<TeamMembershipPayloadFragment, unknown>;
export const TeamPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "TeamPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<TeamPayloadFragment, unknown>;
export const TemplateConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "TemplateConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TemplateConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<TemplateConnectionFragment, unknown>;
export const TemplatePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "TemplatePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TemplatePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "template" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<TemplatePayloadFragment, unknown>;
export const UploadFileHeaderFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "UploadFileHeader" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UploadFileHeader" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "key" } },
          { kind: "Field", name: { kind: "Name", value: "value" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<UploadFileHeaderFragment, unknown>;
export const UploadFileFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "UploadFile" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UploadFile" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "assetUrl" } },
          { kind: "Field", name: { kind: "Name", value: "contentType" } },
          { kind: "Field", name: { kind: "Name", value: "filename" } },
          { kind: "Field", name: { kind: "Name", value: "uploadUrl" } },
          { kind: "Field", name: { kind: "Name", value: "size" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "headers" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UploadFileHeader" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "metaData" } },
        ],
      },
    },
    ...UploadFileHeaderFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UploadFileFragment, unknown>;
export const UploadPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "UploadPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UploadPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "uploadFile" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UploadFile" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
    ...UploadFileFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UploadPayloadFragment, unknown>;
export const UserAdminPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "UserAdminPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserAdminPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<UserAdminPayloadFragment, unknown>;
export const UserConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "UserConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
    ...UserFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UserConnectionFragment, unknown>;
export const UserPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "UserPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<UserPayloadFragment, unknown>;
export const UserSettingsFlagPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "UserSettingsFlagPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserSettingsFlagPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "flag" } },
          { kind: "Field", name: { kind: "Name", value: "value" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<UserSettingsFlagPayloadFragment, unknown>;
export const UserSettingsFlagsResetPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "UserSettingsFlagsResetPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserSettingsFlagsResetPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<UserSettingsFlagsResetPayloadFragment, unknown>;
export const UserSettingsPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "UserSettingsPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserSettingsPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<UserSettingsPayloadFragment, unknown>;
export const ViewPreferencesFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ViewPreferences" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ViewPreferences" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          { kind: "Field", name: { kind: "Name", value: "viewType" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<ViewPreferencesFragment, unknown>;
export const ViewPreferencesPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "ViewPreferencesPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ViewPreferencesPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "viewPreferences" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferences" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
    ...ViewPreferencesFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ViewPreferencesPayloadFragment, unknown>;
export const WebhookFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "Webhook" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Webhook" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "secret" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "resourceTypes" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "creator" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "url" } },
          { kind: "Field", name: { kind: "Name", value: "label" } },
          { kind: "Field", name: { kind: "Name", value: "allPublicTeams" } },
          { kind: "Field", name: { kind: "Name", value: "enabled" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<WebhookFragment, unknown>;
export const WebhookConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "WebhookConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WebhookConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Webhook" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
    ...WebhookFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<WebhookConnectionFragment, unknown>;
export const WebhookPayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "WebhookPayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WebhookPayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "webhook" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<WebhookPayloadFragment, unknown>;
export const WorkflowDefinitionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "WorkflowDefinition" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowDefinition" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "activities" } },
          { kind: "Field", name: { kind: "Name", value: "schedule" } },
          { kind: "Field", name: { kind: "Name", value: "conditions" } },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "groupName" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "creator" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "enabled" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<WorkflowDefinitionFragment, unknown>;
export const WorkflowDefinitionConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "WorkflowDefinitionConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowDefinitionConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowDefinition" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
    ...WorkflowDefinitionFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<WorkflowDefinitionConnectionFragment, unknown>;
export const WorkflowStateFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "WorkflowState" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowState" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "description" } },
          { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
          { kind: "Field", name: { kind: "Name", value: "position" } },
          { kind: "Field", name: { kind: "Name", value: "color" } },
          { kind: "Field", name: { kind: "Name", value: "name" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
          { kind: "Field", name: { kind: "Name", value: "createdAt" } },
          { kind: "Field", name: { kind: "Name", value: "type" } },
          { kind: "Field", name: { kind: "Name", value: "id" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<WorkflowStateFragment, unknown>;
export const WorkflowStateConnectionFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "WorkflowStateConnection" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateConnection" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "nodes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowState" } }],
            },
          },
          {
            kind: "Field",
            name: { kind: "Name", value: "pageInfo" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
            },
          },
        ],
      },
    },
    ...WorkflowStateFragmentDoc.definitions,
    ...PageInfoFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<WorkflowStateConnectionFragment, unknown>;
export const WorkflowStatePayloadFragmentDoc = {
  kind: "Document",
  definitions: [
    {
      kind: "FragmentDefinition",
      name: { kind: "Name", value: "WorkflowStatePayload" },
      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStatePayload" } },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          { kind: "Field", name: { kind: "Name", value: "__typename" } },
          { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
          {
            kind: "Field",
            name: { kind: "Name", value: "workflowState" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
            },
          },
          { kind: "Field", name: { kind: "Name", value: "success" } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<WorkflowStatePayloadFragment, unknown>;
export const AirbyteIntegrationConnectDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "airbyteIntegrationConnect" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "AirbyteConfigurationInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "airbyteIntegrationConnect" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AirbyteIntegrationConnectMutation, AirbyteIntegrationConnectMutationVariables>;
export const CreateApiKeyDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createApiKey" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "ApiKeyCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "apiKeyCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ApiKeyPayload" } }],
            },
          },
        ],
      },
    },
    ...ApiKeyPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateApiKeyMutation, CreateApiKeyMutationVariables>;
export const DeleteApiKeyDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteApiKey" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "apiKeyDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...ArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteApiKeyMutation, DeleteApiKeyMutationVariables>;
export const ArchiveAttachmentDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "archiveAttachment" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentArchive" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...ArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ArchiveAttachmentMutation, ArchiveAttachmentMutationVariables>;
export const CreateAttachmentDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createAttachment" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
            },
          },
        ],
      },
    },
    ...AttachmentPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateAttachmentMutation, CreateAttachmentMutationVariables>;
export const DeleteAttachmentDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteAttachment" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...ArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteAttachmentMutation, DeleteAttachmentMutationVariables>;
export const AttachmentLinkDiscordDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "attachmentLinkDiscord" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "channelId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "messageId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "url" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentLinkDiscord" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "channelId" },
                value: { kind: "Variable", name: { kind: "Name", value: "channelId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "issueId" },
                value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "messageId" },
                value: { kind: "Variable", name: { kind: "Name", value: "messageId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "url" },
                value: { kind: "Variable", name: { kind: "Name", value: "url" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
            },
          },
        ],
      },
    },
    ...AttachmentPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AttachmentLinkDiscordMutation, AttachmentLinkDiscordMutationVariables>;
export const AttachmentLinkFrontDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "attachmentLinkFront" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "conversationId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentLinkFront" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "conversationId" },
                value: { kind: "Variable", name: { kind: "Name", value: "conversationId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "issueId" },
                value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FrontAttachmentPayload" } }],
            },
          },
        ],
      },
    },
    ...FrontAttachmentPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AttachmentLinkFrontMutation, AttachmentLinkFrontMutationVariables>;
export const AttachmentLinkIntercomDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "attachmentLinkIntercom" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "conversationId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentLinkIntercom" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "conversationId" },
                value: { kind: "Variable", name: { kind: "Name", value: "conversationId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "issueId" },
                value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
            },
          },
        ],
      },
    },
    ...AttachmentPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AttachmentLinkIntercomMutation, AttachmentLinkIntercomMutationVariables>;
export const AttachmentLinkJiraIssueDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "attachmentLinkJiraIssue" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "jiraIssueId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentLinkJiraIssue" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "issueId" },
                value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "jiraIssueId" },
                value: { kind: "Variable", name: { kind: "Name", value: "jiraIssueId" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
            },
          },
        ],
      },
    },
    ...AttachmentPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AttachmentLinkJiraIssueMutation, AttachmentLinkJiraIssueMutationVariables>;
export const AttachmentLinkUrlDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "attachmentLinkURL" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "title" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "url" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentLinkURL" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "issueId" },
                value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "title" },
                value: { kind: "Variable", name: { kind: "Name", value: "title" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "url" },
                value: { kind: "Variable", name: { kind: "Name", value: "url" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
            },
          },
        ],
      },
    },
    ...AttachmentPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AttachmentLinkUrlMutation, AttachmentLinkUrlMutationVariables>;
export const AttachmentLinkZendeskDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "attachmentLinkZendesk" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "ticketId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentLinkZendesk" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "issueId" },
                value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "ticketId" },
                value: { kind: "Variable", name: { kind: "Name", value: "ticketId" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
            },
          },
        ],
      },
    },
    ...AttachmentPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AttachmentLinkZendeskMutation, AttachmentLinkZendeskMutationVariables>;
export const UpdateAttachmentDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateAttachment" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
            },
          },
        ],
      },
    },
    ...AttachmentPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateAttachmentMutation, UpdateAttachmentMutationVariables>;
export const CreateCommentDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createComment" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "CommentCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "commentCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentPayload" } }],
            },
          },
        ],
      },
    },
    ...CommentPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateCommentMutation, CreateCommentMutationVariables>;
export const DeleteCommentDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteComment" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "commentDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...ArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteCommentMutation, DeleteCommentMutationVariables>;
export const UpdateCommentDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateComment" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "CommentUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "commentUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentPayload" } }],
            },
          },
        ],
      },
    },
    ...CommentPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateCommentMutation, UpdateCommentMutationVariables>;
export const CreateContactDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createContact" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "ContactCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "contactCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ContactPayload" } }],
            },
          },
        ],
      },
    },
    ...ContactPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateContactMutation, CreateContactMutationVariables>;
export const CreateCsvExportReportDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createCsvExportReport" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includePrivateTeamIds" } },
          type: {
            kind: "ListType",
            type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "createCsvExportReport" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "includePrivateTeamIds" },
                value: { kind: "Variable", name: { kind: "Name", value: "includePrivateTeamIds" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CreateCsvExportReportPayload" } }],
            },
          },
        ],
      },
    },
    ...CreateCsvExportReportPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateCsvExportReportMutation, CreateCsvExportReportMutationVariables>;
export const CreateOrganizationFromOnboardingDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createOrganizationFromOnboarding" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "CreateOrganizationInput" } },
          },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "survey" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "OnboardingCustomerSurvey" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "createOrganizationFromOnboarding" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "survey" },
                value: { kind: "Variable", name: { kind: "Name", value: "survey" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" } },
              ],
            },
          },
        ],
      },
    },
    ...CreateOrJoinOrganizationResponseFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  CreateOrganizationFromOnboardingMutation,
  CreateOrganizationFromOnboardingMutationVariables
>;
export const CreateCustomViewDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createCustomView" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "CustomViewCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "customViewCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomViewPayload" } }],
            },
          },
        ],
      },
    },
    ...CustomViewPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateCustomViewMutation, CreateCustomViewMutationVariables>;
export const DeleteCustomViewDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteCustomView" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "customViewDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...ArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteCustomViewMutation, DeleteCustomViewMutationVariables>;
export const UpdateCustomViewDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateCustomView" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "CustomViewUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "customViewUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomViewPayload" } }],
            },
          },
        ],
      },
    },
    ...CustomViewPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateCustomViewMutation, UpdateCustomViewMutationVariables>;
export const ArchiveCycleDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "archiveCycle" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "cycleArchive" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...ArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ArchiveCycleMutation, ArchiveCycleMutationVariables>;
export const CreateCycleDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createCycle" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CycleCreateInput" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "cycleCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CyclePayload" } }],
            },
          },
        ],
      },
    },
    ...CyclePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateCycleMutation, CreateCycleMutationVariables>;
export const UpdateCycleDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateCycle" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CycleUpdateInput" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "cycleUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CyclePayload" } }],
            },
          },
        ],
      },
    },
    ...CyclePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateCycleMutation, UpdateCycleMutationVariables>;
export const CreateDocumentDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createDocument" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "DocumentCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "documentCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentPayload" } }],
            },
          },
        ],
      },
    },
    ...DocumentPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateDocumentMutation, CreateDocumentMutationVariables>;
export const DeleteDocumentDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteDocument" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "documentDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...ArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteDocumentMutation, DeleteDocumentMutationVariables>;
export const UpdateDocumentDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateDocument" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "DocumentUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "documentUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentPayload" } }],
            },
          },
        ],
      },
    },
    ...DocumentPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateDocumentMutation, UpdateDocumentMutationVariables>;
export const EmailTokenUserAccountAuthDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "emailTokenUserAccountAuth" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "TokenUserAccountAuthInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "emailTokenUserAccountAuth" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthResolverResponse" } }],
            },
          },
        ],
      },
    },
    ...AuthResolverResponseFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<EmailTokenUserAccountAuthMutation, EmailTokenUserAccountAuthMutationVariables>;
export const EmailUnsubscribeDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "emailUnsubscribe" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "EmailUnsubscribeInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "emailUnsubscribe" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmailUnsubscribePayload" } }],
            },
          },
        ],
      },
    },
    ...EmailUnsubscribePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<EmailUnsubscribeMutation, EmailUnsubscribeMutationVariables>;
export const EmailUserAccountAuthChallengeDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "emailUserAccountAuthChallenge" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "EmailUserAccountAuthChallengeInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "emailUserAccountAuthChallenge" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "EmailUserAccountAuthChallengeResponse" } },
              ],
            },
          },
        ],
      },
    },
    ...EmailUserAccountAuthChallengeResponseFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<EmailUserAccountAuthChallengeMutation, EmailUserAccountAuthChallengeMutationVariables>;
export const CreateEmojiDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createEmoji" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "EmojiCreateInput" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "emojiCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmojiPayload" } }],
            },
          },
        ],
      },
    },
    ...EmojiPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateEmojiMutation, CreateEmojiMutationVariables>;
export const DeleteEmojiDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteEmoji" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "emojiDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...ArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteEmojiMutation, DeleteEmojiMutationVariables>;
export const CreateEventDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createEvent" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "EventCreateInput" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "eventCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EventPayload" } }],
            },
          },
        ],
      },
    },
    ...EventPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateEventMutation, CreateEventMutationVariables>;
export const CreateFavoriteDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createFavorite" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "FavoriteCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "favoriteCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FavoritePayload" } }],
            },
          },
        ],
      },
    },
    ...FavoritePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateFavoriteMutation, CreateFavoriteMutationVariables>;
export const DeleteFavoriteDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteFavorite" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "favoriteDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...ArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteFavoriteMutation, DeleteFavoriteMutationVariables>;
export const UpdateFavoriteDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateFavorite" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "FavoriteUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "favoriteUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FavoritePayload" } }],
            },
          },
        ],
      },
    },
    ...FavoritePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateFavoriteMutation, UpdateFavoriteMutationVariables>;
export const FileUploadDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "fileUpload" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "contentType" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filename" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "makePublic" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "metaData" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "JSON" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "size" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "fileUpload" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "contentType" },
                value: { kind: "Variable", name: { kind: "Name", value: "contentType" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "filename" },
                value: { kind: "Variable", name: { kind: "Name", value: "filename" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "makePublic" },
                value: { kind: "Variable", name: { kind: "Name", value: "makePublic" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "metaData" },
                value: { kind: "Variable", name: { kind: "Name", value: "metaData" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "size" },
                value: { kind: "Variable", name: { kind: "Name", value: "size" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UploadPayload" } }],
            },
          },
        ],
      },
    },
    ...UploadPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<FileUploadMutation, FileUploadMutationVariables>;
export const GoogleUserAccountAuthDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "googleUserAccountAuth" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "GoogleUserAccountAuthInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "googleUserAccountAuth" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthResolverResponse" } }],
            },
          },
        ],
      },
    },
    ...AuthResolverResponseFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<GoogleUserAccountAuthMutation, GoogleUserAccountAuthMutationVariables>;
export const ImageUploadFromUrlDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "imageUploadFromUrl" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "url" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "imageUploadFromUrl" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "url" },
                value: { kind: "Variable", name: { kind: "Name", value: "url" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ImageUploadFromUrlPayload" } }],
            },
          },
        ],
      },
    },
    ...ImageUploadFromUrlPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ImageUploadFromUrlMutation, ImageUploadFromUrlMutationVariables>;
export const DeleteIntegrationDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteIntegration" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...ArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteIntegrationMutation, DeleteIntegrationMutationVariables>;
export const IntegrationDiscordDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "integrationDiscord" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationDiscord" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "code" },
                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "redirectUri" },
                value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationDiscordMutation, IntegrationDiscordMutationVariables>;
export const IntegrationFigmaDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "integrationFigma" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationFigma" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "code" },
                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "redirectUri" },
                value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationFigmaMutation, IntegrationFigmaMutationVariables>;
export const IntegrationFrontDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "integrationFront" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationFront" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "code" },
                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "redirectUri" },
                value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationFrontMutation, IntegrationFrontMutationVariables>;
export const CreateIntegrationGithubCommitDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createIntegrationGithubCommit" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationGithubCommitCreate" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitHubCommitIntegrationPayload" } }],
            },
          },
        ],
      },
    },
    ...GitHubCommitIntegrationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateIntegrationGithubCommitMutation, CreateIntegrationGithubCommitMutationVariables>;
export const IntegrationGithubConnectDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "integrationGithubConnect" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "installationId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationGithubConnect" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "installationId" },
                value: { kind: "Variable", name: { kind: "Name", value: "installationId" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationGithubConnectMutation, IntegrationGithubConnectMutationVariables>;
export const IntegrationGitlabConnectDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "integrationGitlabConnect" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "accessToken" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "gitlabUrl" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationGitlabConnect" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "accessToken" },
                value: { kind: "Variable", name: { kind: "Name", value: "accessToken" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "gitlabUrl" },
                value: { kind: "Variable", name: { kind: "Name", value: "gitlabUrl" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationGitlabConnectMutation, IntegrationGitlabConnectMutationVariables>;
export const IntegrationGoogleSheetsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "integrationGoogleSheets" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationGoogleSheets" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "code" },
                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationGoogleSheetsMutation, IntegrationGoogleSheetsMutationVariables>;
export const IntegrationIntercomDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "integrationIntercom" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "domainUrl" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationIntercom" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "code" },
                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "domainUrl" },
                value: { kind: "Variable", name: { kind: "Name", value: "domainUrl" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "redirectUri" },
                value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationIntercomMutation, IntegrationIntercomMutationVariables>;
export const DeleteIntegrationIntercomDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteIntegrationIntercom" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationIntercomDelete" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteIntegrationIntercomMutation, DeleteIntegrationIntercomMutationVariables>;
export const UpdateIntegrationIntercomSettingsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateIntegrationIntercomSettings" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "IntercomSettingsInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationIntercomSettingsUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  UpdateIntegrationIntercomSettingsMutation,
  UpdateIntegrationIntercomSettingsMutationVariables
>;
export const IntegrationLoomDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "integrationLoom" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationLoom" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationLoomMutation, IntegrationLoomMutationVariables>;
export const IntegrationRequestDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "integrationRequest" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "IntegrationRequestInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationRequest" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationRequestPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationRequestPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationRequestMutation, IntegrationRequestMutationVariables>;
export const IntegrationSentryConnectDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "integrationSentryConnect" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "installationId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "organizationSlug" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationSentryConnect" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "code" },
                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "installationId" },
                value: { kind: "Variable", name: { kind: "Name", value: "installationId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "organizationSlug" },
                value: { kind: "Variable", name: { kind: "Name", value: "organizationSlug" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationSentryConnectMutation, IntegrationSentryConnectMutationVariables>;
export const IntegrationSlackDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "integrationSlack" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "shouldUseV2Auth" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationSlack" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "code" },
                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "redirectUri" },
                value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "shouldUseV2Auth" },
                value: { kind: "Variable", name: { kind: "Name", value: "shouldUseV2Auth" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationSlackMutation, IntegrationSlackMutationVariables>;
export const IntegrationSlackImportEmojisDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "integrationSlackImportEmojis" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationSlackImportEmojis" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "code" },
                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "redirectUri" },
                value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationSlackImportEmojisMutation, IntegrationSlackImportEmojisMutationVariables>;
export const IntegrationSlackOrgProjectUpdatesPostDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "integrationSlackOrgProjectUpdatesPost" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationSlackOrgProjectUpdatesPost" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "code" },
                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "redirectUri" },
                value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  IntegrationSlackOrgProjectUpdatesPostMutation,
  IntegrationSlackOrgProjectUpdatesPostMutationVariables
>;
export const IntegrationSlackPersonalDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "integrationSlackPersonal" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationSlackPersonal" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "code" },
                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "redirectUri" },
                value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationSlackPersonalMutation, IntegrationSlackPersonalMutationVariables>;
export const IntegrationSlackPostDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "integrationSlackPost" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "shouldUseV2Auth" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationSlackPost" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "code" },
                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "redirectUri" },
                value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "shouldUseV2Auth" },
                value: { kind: "Variable", name: { kind: "Name", value: "shouldUseV2Auth" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "teamId" },
                value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationSlackPostMutation, IntegrationSlackPostMutationVariables>;
export const IntegrationSlackProjectPostDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "integrationSlackProjectPost" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "projectId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "service" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationSlackProjectPost" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "code" },
                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "projectId" },
                value: { kind: "Variable", name: { kind: "Name", value: "projectId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "redirectUri" },
                value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "service" },
                value: { kind: "Variable", name: { kind: "Name", value: "service" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationSlackProjectPostMutation, IntegrationSlackProjectPostMutationVariables>;
export const CreateIntegrationTemplateDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createIntegrationTemplate" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "IntegrationTemplateCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationTemplateCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationTemplatePayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationTemplatePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateIntegrationTemplateMutation, CreateIntegrationTemplateMutationVariables>;
export const DeleteIntegrationTemplateDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteIntegrationTemplate" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationTemplateDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...ArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteIntegrationTemplateMutation, DeleteIntegrationTemplateMutationVariables>;
export const IntegrationZendeskDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "integrationZendesk" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "scope" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "subdomain" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationZendesk" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "code" },
                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "redirectUri" },
                value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "scope" },
                value: { kind: "Variable", name: { kind: "Name", value: "scope" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "subdomain" },
                value: { kind: "Variable", name: { kind: "Name", value: "subdomain" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationZendeskMutation, IntegrationZendeskMutationVariables>;
export const CreateIntegrationsSettingsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createIntegrationsSettings" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "IntegrationsSettingsCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationsSettingsCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationsSettingsPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationsSettingsPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateIntegrationsSettingsMutation, CreateIntegrationsSettingsMutationVariables>;
export const UpdateIntegrationsSettingsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateIntegrationsSettings" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "IntegrationsSettingsUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationsSettingsUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationsSettingsPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationsSettingsPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateIntegrationsSettingsMutation, UpdateIntegrationsSettingsMutationVariables>;
export const ArchiveIssueDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "archiveIssue" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "trash" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueArchive" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "trash" },
                value: { kind: "Variable", name: { kind: "Name", value: "trash" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...ArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ArchiveIssueMutation, ArchiveIssueMutationVariables>;
export const UpdateIssueBatchDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateIssueBatch" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "ids" } },
          type: {
            kind: "NonNullType",
            type: {
              kind: "ListType",
              type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "UUID" } } },
            },
          },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueUpdateInput" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueBatchUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "ids" },
                value: { kind: "Variable", name: { kind: "Name", value: "ids" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueBatchPayload" } }],
            },
          },
        ],
      },
    },
    ...IssueBatchPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateIssueBatchMutation, UpdateIssueBatchMutationVariables>;
export const CreateIssueDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createIssue" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueCreateInput" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }],
            },
          },
        ],
      },
    },
    ...IssuePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateIssueMutation, CreateIssueMutationVariables>;
export const DeleteIssueDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteIssue" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...ArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteIssueMutation, DeleteIssueMutationVariables>;
export const IssueImportCreateAsanaDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "issueImportCreateAsana" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "asanaTeamName" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "asanaToken" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "organizationId" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "teamName" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueImportCreateAsana" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "asanaTeamName" },
                value: { kind: "Variable", name: { kind: "Name", value: "asanaTeamName" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "asanaToken" },
                value: { kind: "Variable", name: { kind: "Name", value: "asanaToken" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeClosedIssues" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "instantProcess" },
                value: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "organizationId" },
                value: { kind: "Variable", name: { kind: "Name", value: "organizationId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "teamId" },
                value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "teamName" },
                value: { kind: "Variable", name: { kind: "Name", value: "teamName" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }],
            },
          },
        ],
      },
    },
    ...IssueImportPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueImportCreateAsanaMutation, IssueImportCreateAsanaMutationVariables>;
export const IssueImportCreateClubhouseDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "issueImportCreateClubhouse" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "clubhouseTeamName" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "clubhouseToken" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "organizationId" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "teamName" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueImportCreateClubhouse" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "clubhouseTeamName" },
                value: { kind: "Variable", name: { kind: "Name", value: "clubhouseTeamName" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "clubhouseToken" },
                value: { kind: "Variable", name: { kind: "Name", value: "clubhouseToken" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeClosedIssues" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "instantProcess" },
                value: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "organizationId" },
                value: { kind: "Variable", name: { kind: "Name", value: "organizationId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "teamId" },
                value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "teamName" },
                value: { kind: "Variable", name: { kind: "Name", value: "teamName" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }],
            },
          },
        ],
      },
    },
    ...IssueImportPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueImportCreateClubhouseMutation, IssueImportCreateClubhouseMutationVariables>;
export const IssueImportCreateGithubDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "issueImportCreateGithub" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "githubRepoName" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "githubRepoOwner" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "githubShouldImportOrgProjects" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "githubToken" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "organizationId" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "teamName" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueImportCreateGithub" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "githubRepoName" },
                value: { kind: "Variable", name: { kind: "Name", value: "githubRepoName" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "githubRepoOwner" },
                value: { kind: "Variable", name: { kind: "Name", value: "githubRepoOwner" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "githubShouldImportOrgProjects" },
                value: { kind: "Variable", name: { kind: "Name", value: "githubShouldImportOrgProjects" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "githubToken" },
                value: { kind: "Variable", name: { kind: "Name", value: "githubToken" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeClosedIssues" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "instantProcess" },
                value: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "organizationId" },
                value: { kind: "Variable", name: { kind: "Name", value: "organizationId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "teamId" },
                value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "teamName" },
                value: { kind: "Variable", name: { kind: "Name", value: "teamName" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }],
            },
          },
        ],
      },
    },
    ...IssueImportPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueImportCreateGithubMutation, IssueImportCreateGithubMutationVariables>;
export const IssueImportCreateJiraDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "issueImportCreateJira" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "jiraEmail" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "jiraHostname" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "jiraProject" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "jiraToken" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "organizationId" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "teamName" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueImportCreateJira" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeClosedIssues" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "instantProcess" },
                value: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "jiraEmail" },
                value: { kind: "Variable", name: { kind: "Name", value: "jiraEmail" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "jiraHostname" },
                value: { kind: "Variable", name: { kind: "Name", value: "jiraHostname" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "jiraProject" },
                value: { kind: "Variable", name: { kind: "Name", value: "jiraProject" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "jiraToken" },
                value: { kind: "Variable", name: { kind: "Name", value: "jiraToken" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "organizationId" },
                value: { kind: "Variable", name: { kind: "Name", value: "organizationId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "teamId" },
                value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "teamName" },
                value: { kind: "Variable", name: { kind: "Name", value: "teamName" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }],
            },
          },
        ],
      },
    },
    ...IssueImportPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueImportCreateJiraMutation, IssueImportCreateJiraMutationVariables>;
export const DeleteIssueImportDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteIssueImport" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueImportDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "issueImportId" },
                value: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportDeletePayload" } }],
            },
          },
        ],
      },
    },
    ...IssueImportDeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteIssueImportMutation, DeleteIssueImportMutationVariables>;
export const IssueImportProcessDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "issueImportProcess" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "mapping" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "JSONObject" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueImportProcess" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "issueImportId" },
                value: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "mapping" },
                value: { kind: "Variable", name: { kind: "Name", value: "mapping" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }],
            },
          },
        ],
      },
    },
    ...IssueImportPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueImportProcessMutation, IssueImportProcessMutationVariables>;
export const UpdateIssueImportDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateIssueImport" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "IssueImportUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueImportUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }],
            },
          },
        ],
      },
    },
    ...IssueImportPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateIssueImportMutation, UpdateIssueImportMutationVariables>;
export const ArchiveIssueLabelDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "archiveIssueLabel" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueLabelArchive" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...ArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ArchiveIssueLabelMutation, ArchiveIssueLabelMutationVariables>;
export const CreateIssueLabelDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createIssueLabel" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelCreateInput" } },
          },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "replaceTeamLabels" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueLabelCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "replaceTeamLabels" },
                value: { kind: "Variable", name: { kind: "Name", value: "replaceTeamLabels" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelPayload" } }],
            },
          },
        ],
      },
    },
    ...IssueLabelPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateIssueLabelMutation, CreateIssueLabelMutationVariables>;
export const DeleteIssueLabelDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteIssueLabel" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueLabelDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...ArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteIssueLabelMutation, DeleteIssueLabelMutationVariables>;
export const UpdateIssueLabelDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateIssueLabel" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueLabelUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelPayload" } }],
            },
          },
        ],
      },
    },
    ...IssueLabelPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateIssueLabelMutation, UpdateIssueLabelMutationVariables>;
export const CreateIssueRelationDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createIssueRelation" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueRelationCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationPayload" } }],
            },
          },
        ],
      },
    },
    ...IssueRelationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateIssueRelationMutation, CreateIssueRelationMutationVariables>;
export const DeleteIssueRelationDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteIssueRelation" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueRelationDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...ArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteIssueRelationMutation, DeleteIssueRelationMutationVariables>;
export const UpdateIssueRelationDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateIssueRelation" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueRelationUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationPayload" } }],
            },
          },
        ],
      },
    },
    ...IssueRelationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateIssueRelationMutation, UpdateIssueRelationMutationVariables>;
export const IssueReminderDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "issueReminder" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "reminderAt" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "DateTime" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueReminder" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "reminderAt" },
                value: { kind: "Variable", name: { kind: "Name", value: "reminderAt" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }],
            },
          },
        ],
      },
    },
    ...IssuePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueReminderMutation, IssueReminderMutationVariables>;
export const UnarchiveIssueDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "unarchiveIssue" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueUnarchive" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...ArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UnarchiveIssueMutation, UnarchiveIssueMutationVariables>;
export const UpdateIssueDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateIssue" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueUpdateInput" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }],
            },
          },
        ],
      },
    },
    ...IssuePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateIssueMutation, UpdateIssueMutationVariables>;
export const JoinOrganizationFromOnboardingDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "joinOrganizationFromOnboarding" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "JoinOrganizationInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "joinOrganizationFromOnboarding" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" } },
              ],
            },
          },
        ],
      },
    },
    ...CreateOrJoinOrganizationResponseFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<JoinOrganizationFromOnboardingMutation, JoinOrganizationFromOnboardingMutationVariables>;
export const LeaveOrganizationDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "leaveOrganization" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "organizationId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "leaveOrganization" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "organizationId" },
                value: { kind: "Variable", name: { kind: "Name", value: "organizationId" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" } },
              ],
            },
          },
        ],
      },
    },
    ...CreateOrJoinOrganizationResponseFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<LeaveOrganizationMutation, LeaveOrganizationMutationVariables>;
export const LogoutDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "logout" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "logout" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "LogoutResponse" } }],
            },
          },
        ],
      },
    },
    ...LogoutResponseFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<LogoutMutation, LogoutMutationVariables>;
export const ArchiveNotificationDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "archiveNotification" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "notificationArchive" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...ArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ArchiveNotificationMutation, ArchiveNotificationMutationVariables>;
export const CreateNotificationSubscriptionDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createNotificationSubscription" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscriptionCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "notificationSubscriptionCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscriptionPayload" } },
              ],
            },
          },
        ],
      },
    },
    ...NotificationSubscriptionPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateNotificationSubscriptionMutation, CreateNotificationSubscriptionMutationVariables>;
export const DeleteNotificationSubscriptionDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteNotificationSubscription" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "notificationSubscriptionDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...ArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteNotificationSubscriptionMutation, DeleteNotificationSubscriptionMutationVariables>;
export const UpdateNotificationSubscriptionDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateNotificationSubscription" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscriptionUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "notificationSubscriptionUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscriptionPayload" } },
              ],
            },
          },
        ],
      },
    },
    ...NotificationSubscriptionPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateNotificationSubscriptionMutation, UpdateNotificationSubscriptionMutationVariables>;
export const UnarchiveNotificationDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "unarchiveNotification" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "notificationUnarchive" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...ArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UnarchiveNotificationMutation, UnarchiveNotificationMutationVariables>;
export const UpdateNotificationDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateNotification" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "NotificationUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "notificationUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationPayload" } }],
            },
          },
        ],
      },
    },
    ...NotificationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateNotificationMutation, UpdateNotificationMutationVariables>;
export const DeleteOrganizationCancelDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteOrganizationCancel" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "organizationCancelDelete" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationCancelDeletePayload" } },
              ],
            },
          },
        ],
      },
    },
    ...OrganizationCancelDeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteOrganizationCancelMutation, DeleteOrganizationCancelMutationVariables>;
export const DeleteOrganizationDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteOrganization" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "DeleteOrganizationInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "organizationDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationDeletePayload" } }],
            },
          },
        ],
      },
    },
    ...OrganizationDeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteOrganizationMutation, DeleteOrganizationMutationVariables>;
export const OrganizationDeleteChallengeDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "organizationDeleteChallenge" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "organizationDeleteChallenge" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationDeletePayload" } }],
            },
          },
        ],
      },
    },
    ...OrganizationDeletePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<OrganizationDeleteChallengeMutation, OrganizationDeleteChallengeMutationVariables>;
export const DeleteOrganizationDomainDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteOrganizationDomain" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "organizationDomainDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...ArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteOrganizationDomainMutation, DeleteOrganizationDomainMutationVariables>;
export const CreateOrganizationInviteDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createOrganizationInvite" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInviteCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "organizationInviteCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInvitePayload" } }],
            },
          },
        ],
      },
    },
    ...OrganizationInvitePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateOrganizationInviteMutation, CreateOrganizationInviteMutationVariables>;
export const DeleteOrganizationInviteDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteOrganizationInvite" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "organizationInviteDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...ArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteOrganizationInviteMutation, DeleteOrganizationInviteMutationVariables>;
export const UpdateOrganizationInviteDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateOrganizationInvite" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInviteUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "organizationInviteUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInvitePayload" } }],
            },
          },
        ],
      },
    },
    ...OrganizationInvitePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateOrganizationInviteMutation, UpdateOrganizationInviteMutationVariables>;
export const UpdateOrganizationDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateOrganization" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "UpdateOrganizationInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "organizationUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationPayload" } }],
            },
          },
        ],
      },
    },
    ...OrganizationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateOrganizationMutation, UpdateOrganizationMutationVariables>;
export const ArchiveProjectDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "archiveProject" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectArchive" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...ArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ArchiveProjectMutation, ArchiveProjectMutationVariables>;
export const CreateProjectDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createProject" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "ProjectCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectPayload" } }],
            },
          },
        ],
      },
    },
    ...ProjectPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateProjectMutation, CreateProjectMutationVariables>;
export const DeleteProjectDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteProject" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...ArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteProjectMutation, DeleteProjectMutationVariables>;
export const CreateProjectLinkDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createProjectLink" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "ProjectLinkCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectLinkCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLinkPayload" } }],
            },
          },
        ],
      },
    },
    ...ProjectLinkPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateProjectLinkMutation, CreateProjectLinkMutationVariables>;
export const DeleteProjectLinkDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteProjectLink" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectLinkDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...ArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteProjectLinkMutation, DeleteProjectLinkMutationVariables>;
export const UpdateProjectLinkDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateProjectLink" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "ProjectLinkUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectLinkUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLinkPayload" } }],
            },
          },
        ],
      },
    },
    ...ProjectLinkPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateProjectLinkMutation, UpdateProjectLinkMutationVariables>;
export const CreateProjectMilestoneDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createProjectMilestone" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectMilestoneCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestonePayload" } }],
            },
          },
        ],
      },
    },
    ...ProjectMilestonePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateProjectMilestoneMutation, CreateProjectMilestoneMutationVariables>;
export const DeleteProjectMilestoneDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteProjectMilestone" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectMilestoneDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...ArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteProjectMilestoneMutation, DeleteProjectMilestoneMutationVariables>;
export const UpdateProjectMilestoneDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateProjectMilestone" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectMilestoneUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestonePayload" } }],
            },
          },
        ],
      },
    },
    ...ProjectMilestonePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateProjectMilestoneMutation, UpdateProjectMilestoneMutationVariables>;
export const UnarchiveProjectDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "unarchiveProject" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectUnarchive" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...ArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UnarchiveProjectMutation, UnarchiveProjectMutationVariables>;
export const UpdateProjectDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateProject" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectPayload" } }],
            },
          },
        ],
      },
    },
    ...ProjectPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateProjectMutation, UpdateProjectMutationVariables>;
export const CreateProjectUpdateDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createProjectUpdate" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectUpdateCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdatePayload" } }],
            },
          },
        ],
      },
    },
    ...ProjectUpdatePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateProjectUpdateMutation, CreateProjectUpdateMutationVariables>;
export const DeleteProjectUpdateDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteProjectUpdate" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectUpdateDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...ArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteProjectUpdateMutation, DeleteProjectUpdateMutationVariables>;
export const CreateProjectUpdateInteractionDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createProjectUpdateInteraction" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateInteractionCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectUpdateInteractionCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateInteractionPayload" } },
              ],
            },
          },
        ],
      },
    },
    ...ProjectUpdateInteractionPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateProjectUpdateInteractionMutation, CreateProjectUpdateInteractionMutationVariables>;
export const ProjectUpdateMarkAsReadDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "projectUpdateMarkAsRead" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectUpdateMarkAsRead" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateWithInteractionPayload" } },
              ],
            },
          },
        ],
      },
    },
    ...ProjectUpdateWithInteractionPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ProjectUpdateMarkAsReadMutation, ProjectUpdateMarkAsReadMutationVariables>;
export const UpdateProjectUpdateDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateProjectUpdate" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectUpdateUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdatePayload" } }],
            },
          },
        ],
      },
    },
    ...ProjectUpdatePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateProjectUpdateMutation, UpdateProjectUpdateMutationVariables>;
export const CreatePushSubscriptionDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createPushSubscription" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "PushSubscriptionCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "pushSubscriptionCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PushSubscriptionPayload" } }],
            },
          },
        ],
      },
    },
    ...PushSubscriptionPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreatePushSubscriptionMutation, CreatePushSubscriptionMutationVariables>;
export const DeletePushSubscriptionDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deletePushSubscription" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "pushSubscriptionDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PushSubscriptionPayload" } }],
            },
          },
        ],
      },
    },
    ...PushSubscriptionPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeletePushSubscriptionMutation, DeletePushSubscriptionMutationVariables>;
export const CreateReactionDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createReaction" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "ReactionCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "reactionCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ReactionPayload" } }],
            },
          },
        ],
      },
    },
    ...ReactionPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateReactionMutation, CreateReactionMutationVariables>;
export const DeleteReactionDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteReaction" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "reactionDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...ArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteReactionMutation, DeleteReactionMutationVariables>;
export const RefreshGoogleSheetsDataDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "refreshGoogleSheetsData" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "refreshGoogleSheetsData" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
            },
          },
        ],
      },
    },
    ...IntegrationPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<RefreshGoogleSheetsDataMutation, RefreshGoogleSheetsDataMutationVariables>;
export const ResendOrganizationInviteDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "resendOrganizationInvite" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "resendOrganizationInvite" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...ArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ResendOrganizationInviteMutation, ResendOrganizationInviteMutationVariables>;
export const CreateRoadmapDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createRoadmap" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "RoadmapCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "roadmapCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapPayload" } }],
            },
          },
        ],
      },
    },
    ...RoadmapPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateRoadmapMutation, CreateRoadmapMutationVariables>;
export const DeleteRoadmapDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteRoadmap" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "roadmapDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...ArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteRoadmapMutation, DeleteRoadmapMutationVariables>;
export const CreateRoadmapToProjectDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createRoadmapToProject" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "RoadmapToProjectCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "roadmapToProjectCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapToProjectPayload" } }],
            },
          },
        ],
      },
    },
    ...RoadmapToProjectPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateRoadmapToProjectMutation, CreateRoadmapToProjectMutationVariables>;
export const DeleteRoadmapToProjectDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteRoadmapToProject" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "roadmapToProjectDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...ArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteRoadmapToProjectMutation, DeleteRoadmapToProjectMutationVariables>;
export const UpdateRoadmapToProjectDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateRoadmapToProject" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "RoadmapToProjectUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "roadmapToProjectUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapToProjectPayload" } }],
            },
          },
        ],
      },
    },
    ...RoadmapToProjectPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateRoadmapToProjectMutation, UpdateRoadmapToProjectMutationVariables>;
export const UpdateRoadmapDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateRoadmap" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "RoadmapUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "roadmapUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapPayload" } }],
            },
          },
        ],
      },
    },
    ...RoadmapPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateRoadmapMutation, UpdateRoadmapMutationVariables>;
export const SamlTokenUserAccountAuthDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "samlTokenUserAccountAuth" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "TokenUserAccountAuthInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "samlTokenUserAccountAuth" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthResolverResponse" } }],
            },
          },
        ],
      },
    },
    ...AuthResolverResponseFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<SamlTokenUserAccountAuthMutation, SamlTokenUserAccountAuthMutationVariables>;
export const CreateTeamDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createTeam" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "copySettingsFromTeamId" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TeamCreateInput" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "teamCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "copySettingsFromTeamId" },
                value: { kind: "Variable", name: { kind: "Name", value: "copySettingsFromTeamId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamPayload" } }],
            },
          },
        ],
      },
    },
    ...TeamPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateTeamMutation, CreateTeamMutationVariables>;
export const DeleteTeamCyclesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteTeamCycles" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "teamCyclesDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamPayload" } }],
            },
          },
        ],
      },
    },
    ...TeamPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteTeamCyclesMutation, DeleteTeamCyclesMutationVariables>;
export const DeleteTeamDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteTeam" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "teamDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...ArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteTeamMutation, DeleteTeamMutationVariables>;
export const DeleteTeamKeyDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteTeamKey" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "teamKeyDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...ArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteTeamKeyMutation, DeleteTeamKeyMutationVariables>;
export const CreateTeamMembershipDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createTeamMembership" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "TeamMembershipCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "teamMembershipCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipPayload" } }],
            },
          },
        ],
      },
    },
    ...TeamMembershipPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateTeamMembershipMutation, CreateTeamMembershipMutationVariables>;
export const DeleteTeamMembershipDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteTeamMembership" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "teamMembershipDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...ArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteTeamMembershipMutation, DeleteTeamMembershipMutationVariables>;
export const UpdateTeamMembershipDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateTeamMembership" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "TeamMembershipUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "teamMembershipUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipPayload" } }],
            },
          },
        ],
      },
    },
    ...TeamMembershipPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateTeamMembershipMutation, UpdateTeamMembershipMutationVariables>;
export const UpdateTeamDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateTeam" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TeamUpdateInput" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "teamUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamPayload" } }],
            },
          },
        ],
      },
    },
    ...TeamPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateTeamMutation, UpdateTeamMutationVariables>;
export const CreateTemplateDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createTemplate" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "TemplateCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "templateCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TemplatePayload" } }],
            },
          },
        ],
      },
    },
    ...TemplatePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateTemplateMutation, CreateTemplateMutationVariables>;
export const DeleteTemplateDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteTemplate" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "templateDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...ArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteTemplateMutation, DeleteTemplateMutationVariables>;
export const UpdateTemplateDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateTemplate" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "TemplateUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "templateUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TemplatePayload" } }],
            },
          },
        ],
      },
    },
    ...TemplatePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateTemplateMutation, UpdateTemplateMutationVariables>;
export const UserDemoteAdminDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "userDemoteAdmin" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userDemoteAdmin" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }],
            },
          },
        ],
      },
    },
    ...UserAdminPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UserDemoteAdminMutation, UserDemoteAdminMutationVariables>;
export const UserDemoteMemberDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "userDemoteMember" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userDemoteMember" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }],
            },
          },
        ],
      },
    },
    ...UserAdminPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UserDemoteMemberMutation, UserDemoteMemberMutationVariables>;
export const UserDiscordConnectDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "userDiscordConnect" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userDiscordConnect" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "code" },
                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "redirectUri" },
                value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserPayload" } }],
            },
          },
        ],
      },
    },
    ...UserPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UserDiscordConnectMutation, UserDiscordConnectMutationVariables>;
export const UserExternalUserDisconnectDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "userExternalUserDisconnect" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "service" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userExternalUserDisconnect" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "service" },
                value: { kind: "Variable", name: { kind: "Name", value: "service" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserPayload" } }],
            },
          },
        ],
      },
    },
    ...UserPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UserExternalUserDisconnectMutation, UserExternalUserDisconnectMutationVariables>;
export const UpdateUserFlagDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateUserFlag" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "flag" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "UserFlagType" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "operation" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "UserFlagUpdateOperation" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userFlagUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "flag" },
                value: { kind: "Variable", name: { kind: "Name", value: "flag" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "operation" },
                value: { kind: "Variable", name: { kind: "Name", value: "operation" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettingsFlagPayload" } }],
            },
          },
        ],
      },
    },
    ...UserSettingsFlagPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateUserFlagMutation, UpdateUserFlagMutationVariables>;
export const UserGitHubConnectDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "userGitHubConnect" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userGitHubConnect" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "code" },
                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserPayload" } }],
            },
          },
        ],
      },
    },
    ...UserPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UserGitHubConnectMutation, UserGitHubConnectMutationVariables>;
export const UserGoogleCalendarConnectDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "userGoogleCalendarConnect" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userGoogleCalendarConnect" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "code" },
                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserPayload" } }],
            },
          },
        ],
      },
    },
    ...UserPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UserGoogleCalendarConnectMutation, UserGoogleCalendarConnectMutationVariables>;
export const UserPromoteAdminDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "userPromoteAdmin" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userPromoteAdmin" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }],
            },
          },
        ],
      },
    },
    ...UserAdminPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UserPromoteAdminMutation, UserPromoteAdminMutationVariables>;
export const UserPromoteMemberDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "userPromoteMember" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userPromoteMember" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }],
            },
          },
        ],
      },
    },
    ...UserAdminPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UserPromoteMemberMutation, UserPromoteMemberMutationVariables>;
export const UserSettingsFlagIncrementDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "userSettingsFlagIncrement" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "flag" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userSettingsFlagIncrement" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "flag" },
                value: { kind: "Variable", name: { kind: "Name", value: "flag" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettingsFlagPayload" } }],
            },
          },
        ],
      },
    },
    ...UserSettingsFlagPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UserSettingsFlagIncrementMutation, UserSettingsFlagIncrementMutationVariables>;
export const UserSettingsFlagsResetDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "userSettingsFlagsReset" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "flags" } },
          type: {
            kind: "ListType",
            type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "UserFlagType" } } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userSettingsFlagsReset" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "flags" },
                value: { kind: "Variable", name: { kind: "Name", value: "flags" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettingsFlagsResetPayload" } }],
            },
          },
        ],
      },
    },
    ...UserSettingsFlagsResetPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UserSettingsFlagsResetMutation, UserSettingsFlagsResetMutationVariables>;
export const UpdateUserSettingsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateUserSettings" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "UserSettingsUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userSettingsUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettingsPayload" } }],
            },
          },
        ],
      },
    },
    ...UserSettingsPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateUserSettingsMutation, UpdateUserSettingsMutationVariables>;
export const SuspendUserDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "suspendUser" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userSuspend" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }],
            },
          },
        ],
      },
    },
    ...UserAdminPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<SuspendUserMutation, SuspendUserMutationVariables>;
export const UnsuspendUserDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "unsuspendUser" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userUnsuspend" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }],
            },
          },
        ],
      },
    },
    ...UserAdminPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UnsuspendUserMutation, UnsuspendUserMutationVariables>;
export const UpdateUserDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateUser" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "UpdateUserInput" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserPayload" } }],
            },
          },
        ],
      },
    },
    ...UserPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateUserMutation, UpdateUserMutationVariables>;
export const CreateViewPreferencesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createViewPreferences" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "ViewPreferencesCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "viewPreferencesCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesPayload" } }],
            },
          },
        ],
      },
    },
    ...ViewPreferencesPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateViewPreferencesMutation, CreateViewPreferencesMutationVariables>;
export const DeleteViewPreferencesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteViewPreferences" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "viewPreferencesDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...ArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteViewPreferencesMutation, DeleteViewPreferencesMutationVariables>;
export const UpdateViewPreferencesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateViewPreferences" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "ViewPreferencesUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "viewPreferencesUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesPayload" } }],
            },
          },
        ],
      },
    },
    ...ViewPreferencesPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateViewPreferencesMutation, UpdateViewPreferencesMutationVariables>;
export const CreateWebhookDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createWebhook" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "WebhookCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "webhookCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WebhookPayload" } }],
            },
          },
        ],
      },
    },
    ...WebhookPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateWebhookMutation, CreateWebhookMutationVariables>;
export const DeleteWebhookDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "deleteWebhook" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "webhookDelete" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...ArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DeleteWebhookMutation, DeleteWebhookMutationVariables>;
export const UpdateWebhookDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateWebhook" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "WebhookUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "webhookUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WebhookPayload" } }],
            },
          },
        ],
      },
    },
    ...WebhookPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateWebhookMutation, UpdateWebhookMutationVariables>;
export const ArchiveWorkflowStateDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "archiveWorkflowState" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "workflowStateArchive" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchivePayload" } }],
            },
          },
        ],
      },
    },
    ...ArchivePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ArchiveWorkflowStateMutation, ArchiveWorkflowStateMutationVariables>;
export const CreateWorkflowStateDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "createWorkflowState" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateCreateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "workflowStateCreate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStatePayload" } }],
            },
          },
        ],
      },
    },
    ...WorkflowStatePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CreateWorkflowStateMutation, CreateWorkflowStateMutationVariables>;
export const UpdateWorkflowStateDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "updateWorkflowState" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateUpdateInput" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "workflowStateUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "input" },
                value: { kind: "Variable", name: { kind: "Name", value: "input" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStatePayload" } }],
            },
          },
        ],
      },
    },
    ...WorkflowStatePayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UpdateWorkflowStateMutation, UpdateWorkflowStateMutationVariables>;
export const ProjectMilestoneDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "ProjectMilestone" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "ProjectMilestone" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestone" } }],
            },
          },
        ],
      },
    },
    ...ProjectMilestoneFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ProjectMilestoneQuery, ProjectMilestoneQueryVariables>;
export const ProjectMilestonesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "ProjectMilestones" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "ProjectMilestones" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestoneConnection" } }],
            },
          },
        ],
      },
    },
    ...ProjectMilestoneConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ProjectMilestonesQuery, ProjectMilestonesQueryVariables>;
export const AdministrableTeamsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "administrableTeams" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "administrableTeams" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "filter" },
                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }],
            },
          },
        ],
      },
    },
    ...TeamConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AdministrableTeamsQuery, AdministrableTeamsQueryVariables>;
export const ApiKeysDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "apiKeys" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "apiKeys" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ApiKeyConnection" } }],
            },
          },
        ],
      },
    },
    ...ApiKeyConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ApiKeysQuery, ApiKeysQueryVariables>;
export const ApplicationInfoDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "applicationInfo" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "clientId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "applicationInfo" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "clientId" },
                value: { kind: "Variable", name: { kind: "Name", value: "clientId" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Application" } }],
            },
          },
        ],
      },
    },
    ...ApplicationFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ApplicationInfoQuery, ApplicationInfoQueryVariables>;
export const ApplicationWithAuthorizationDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "applicationWithAuthorization" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "actor" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "clientId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "scope" } },
          type: {
            kind: "NonNullType",
            type: {
              kind: "ListType",
              type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
            },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "applicationWithAuthorization" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "actor" },
                value: { kind: "Variable", name: { kind: "Name", value: "actor" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "clientId" },
                value: { kind: "Variable", name: { kind: "Name", value: "clientId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "redirectUri" },
                value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "scope" },
                value: { kind: "Variable", name: { kind: "Name", value: "scope" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAuthorizedApplication" } }],
            },
          },
        ],
      },
    },
    ...UserAuthorizedApplicationFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ApplicationWithAuthorizationQuery, ApplicationWithAuthorizationQueryVariables>;
export const AttachmentDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "attachment" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachment" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Attachment" } }],
            },
          },
        ],
      },
    },
    ...AttachmentFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AttachmentQuery, AttachmentQueryVariables>;
export const AttachmentIssueDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "attachmentIssue" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentIssue" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Issue" } }],
            },
          },
        ],
      },
    },
    ...IssueFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AttachmentIssueQuery, AttachmentIssueQueryVariables>;
export const AttachmentIssue_AttachmentsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "attachmentIssue_attachments" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentIssue" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "attachments" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...AttachmentConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AttachmentIssue_AttachmentsQuery, AttachmentIssue_AttachmentsQueryVariables>;
export const AttachmentIssue_ChildrenDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "attachmentIssue_children" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentIssue" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "children" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AttachmentIssue_ChildrenQuery, AttachmentIssue_ChildrenQueryVariables>;
export const AttachmentIssue_CommentsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "attachmentIssue_comments" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentIssue" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "comments" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...CommentConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AttachmentIssue_CommentsQuery, AttachmentIssue_CommentsQueryVariables>;
export const AttachmentIssue_HistoryDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "attachmentIssue_history" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentIssue" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "history" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueHistoryConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueHistoryConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AttachmentIssue_HistoryQuery, AttachmentIssue_HistoryQueryVariables>;
export const AttachmentIssue_InverseRelationsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "attachmentIssue_inverseRelations" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentIssue" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "inverseRelations" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueRelationConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AttachmentIssue_InverseRelationsQuery, AttachmentIssue_InverseRelationsQueryVariables>;
export const AttachmentIssue_LabelsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "attachmentIssue_labels" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentIssue" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "labels" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueLabelConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AttachmentIssue_LabelsQuery, AttachmentIssue_LabelsQueryVariables>;
export const AttachmentIssue_RelationsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "attachmentIssue_relations" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentIssue" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "relations" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueRelationConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AttachmentIssue_RelationsQuery, AttachmentIssue_RelationsQueryVariables>;
export const AttachmentIssue_SubscribersDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "attachmentIssue_subscribers" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentIssue" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "subscribers" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeDisabled" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...UserConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AttachmentIssue_SubscribersQuery, AttachmentIssue_SubscribersQueryVariables>;
export const AttachmentsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "attachments" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachments" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "filter" },
                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }],
            },
          },
        ],
      },
    },
    ...AttachmentConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AttachmentsQuery, AttachmentsQueryVariables>;
export const AttachmentsForUrlDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "attachmentsForURL" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "url" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "attachmentsForURL" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "url" },
                value: { kind: "Variable", name: { kind: "Name", value: "url" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }],
            },
          },
        ],
      },
    },
    ...AttachmentConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AttachmentsForUrlQuery, AttachmentsForUrlQueryVariables>;
export const AuditEntriesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "auditEntries" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "AuditEntryFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "auditEntries" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "filter" },
                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuditEntryConnection" } }],
            },
          },
        ],
      },
    },
    ...AuditEntryConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AuditEntriesQuery, AuditEntriesQueryVariables>;
export const AuditEntryTypesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "auditEntryTypes" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "auditEntryTypes" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuditEntryType" } }],
            },
          },
        ],
      },
    },
    ...AuditEntryTypeFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AuditEntryTypesQuery, AuditEntryTypesQueryVariables>;
export const AvailableUsersDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "availableUsers" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "availableUsers" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthResolverResponse" } }],
            },
          },
        ],
      },
    },
    ...AuthResolverResponseFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<AvailableUsersQuery, AvailableUsersQueryVariables>;
export const CommentDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "comment" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "comment" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Comment" } }],
            },
          },
        ],
      },
    },
    ...CommentFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CommentQuery, CommentQueryVariables>;
export const Comment_ChildrenDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "comment_children" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "comment" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "children" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...CommentConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Comment_ChildrenQuery, Comment_ChildrenQueryVariables>;
export const CommentsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "comments" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "comments" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "filter" },
                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }],
            },
          },
        ],
      },
    },
    ...CommentConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CommentsQuery, CommentsQueryVariables>;
export const CustomViewDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "customView" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "customView" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomView" } }],
            },
          },
        ],
      },
    },
    ...CustomViewFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CustomViewQuery, CustomViewQueryVariables>;
export const CustomViewsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "customViews" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "customViews" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomViewConnection" } }],
            },
          },
        ],
      },
    },
    ...CustomViewConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CustomViewsQuery, CustomViewsQueryVariables>;
export const CycleDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "cycle" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "cycle" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Cycle" } }],
            },
          },
        ],
      },
    },
    ...CycleFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CycleQuery, CycleQueryVariables>;
export const Cycle_IssuesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "cycle_issues" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "cycle" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "issues" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Cycle_IssuesQuery, Cycle_IssuesQueryVariables>;
export const Cycle_UncompletedIssuesUponCloseDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "cycle_uncompletedIssuesUponClose" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "cycle" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "uncompletedIssuesUponClose" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Cycle_UncompletedIssuesUponCloseQuery, Cycle_UncompletedIssuesUponCloseQueryVariables>;
export const CyclesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "cycles" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "CycleFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "cycles" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "filter" },
                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CycleConnection" } }],
            },
          },
        ],
      },
    },
    ...CycleConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<CyclesQuery, CyclesQueryVariables>;
export const DocumentDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "document" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "document" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Document" } }],
            },
          },
        ],
      },
    },
    ...DocumentFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DocumentQuery, DocumentQueryVariables>;
export const DocumentsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "documents" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "documents" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentConnection" } }],
            },
          },
        ],
      },
    },
    ...DocumentConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<DocumentsQuery, DocumentsQueryVariables>;
export const EmojiDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "emoji" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "emoji" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Emoji" } }],
            },
          },
        ],
      },
    },
    ...EmojiFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<EmojiQuery, EmojiQueryVariables>;
export const EmojisDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "emojis" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "emojis" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmojiConnection" } }],
            },
          },
        ],
      },
    },
    ...EmojiConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<EmojisQuery, EmojisQueryVariables>;
export const FavoriteDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "favorite" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "favorite" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Favorite" } }],
            },
          },
        ],
      },
    },
    ...FavoriteFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<FavoriteQuery, FavoriteQueryVariables>;
export const Favorite_ChildrenDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "favorite_children" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "favorite" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "children" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FavoriteConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...FavoriteConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Favorite_ChildrenQuery, Favorite_ChildrenQueryVariables>;
export const FavoritesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "favorites" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "favorites" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FavoriteConnection" } }],
            },
          },
        ],
      },
    },
    ...FavoriteConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<FavoritesQuery, FavoritesQueryVariables>;
export const FigmaEmbedInfoDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "figmaEmbedInfo" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "fileId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "nodeId" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "figmaEmbedInfo" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "fileId" },
                value: { kind: "Variable", name: { kind: "Name", value: "fileId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "nodeId" },
                value: { kind: "Variable", name: { kind: "Name", value: "nodeId" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FigmaEmbedPayload" } }],
            },
          },
        ],
      },
    },
    ...FigmaEmbedPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<FigmaEmbedInfoQuery, FigmaEmbedInfoQueryVariables>;
export const FigmaEmbedInfo_FigmaEmbedDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "figmaEmbedInfo_figmaEmbed" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "fileId" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "nodeId" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "figmaEmbedInfo" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "fileId" },
                value: { kind: "Variable", name: { kind: "Name", value: "fileId" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "nodeId" },
                value: { kind: "Variable", name: { kind: "Name", value: "nodeId" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "figmaEmbed" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FigmaEmbed" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...FigmaEmbedFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<FigmaEmbedInfo_FigmaEmbedQuery, FigmaEmbedInfo_FigmaEmbedQueryVariables>;
export const IntegrationDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "integration" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integration" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Integration" } }],
            },
          },
        ],
      },
    },
    ...IntegrationFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationQuery, IntegrationQueryVariables>;
export const IntegrationTemplateDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "integrationTemplate" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationTemplate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationTemplate" } }],
            },
          },
        ],
      },
    },
    ...IntegrationTemplateFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationTemplateQuery, IntegrationTemplateQueryVariables>;
export const IntegrationTemplatesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "integrationTemplates" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationTemplates" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationTemplateConnection" } }],
            },
          },
        ],
      },
    },
    ...IntegrationTemplateConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationTemplatesQuery, IntegrationTemplatesQueryVariables>;
export const IntegrationsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "integrations" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrations" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationConnection" } }],
            },
          },
        ],
      },
    },
    ...IntegrationConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationsQuery, IntegrationsQueryVariables>;
export const IntegrationsSettingsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "integrationsSettings" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "integrationsSettings" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationsSettings" } }],
            },
          },
        ],
      },
    },
    ...IntegrationsSettingsFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IntegrationsSettingsQuery, IntegrationsSettingsQueryVariables>;
export const IssueDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issue" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Issue" } }],
            },
          },
        ],
      },
    },
    ...IssueFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueQuery, IssueQueryVariables>;
export const Issue_AttachmentsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issue_attachments" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "attachments" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...AttachmentConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Issue_AttachmentsQuery, Issue_AttachmentsQueryVariables>;
export const Issue_ChildrenDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issue_children" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "children" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Issue_ChildrenQuery, Issue_ChildrenQueryVariables>;
export const Issue_CommentsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issue_comments" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "comments" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...CommentConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Issue_CommentsQuery, Issue_CommentsQueryVariables>;
export const Issue_HistoryDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issue_history" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "history" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueHistoryConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueHistoryConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Issue_HistoryQuery, Issue_HistoryQueryVariables>;
export const Issue_InverseRelationsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issue_inverseRelations" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "inverseRelations" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueRelationConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Issue_InverseRelationsQuery, Issue_InverseRelationsQueryVariables>;
export const Issue_LabelsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issue_labels" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "labels" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueLabelConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Issue_LabelsQuery, Issue_LabelsQueryVariables>;
export const Issue_RelationsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issue_relations" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "relations" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueRelationConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Issue_RelationsQuery, Issue_RelationsQueryVariables>;
export const Issue_SubscribersDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issue_subscribers" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issue" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "subscribers" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeDisabled" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...UserConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Issue_SubscribersQuery, Issue_SubscribersQueryVariables>;
export const IssueImportFinishGithubOAuthDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issueImportFinishGithubOAuth" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueImportFinishGithubOAuth" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "code" },
                value: { kind: "Variable", name: { kind: "Name", value: "code" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GithubOAuthTokenPayload" } }],
            },
          },
        ],
      },
    },
    ...GithubOAuthTokenPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueImportFinishGithubOAuthQuery, IssueImportFinishGithubOAuthQueryVariables>;
export const IssueLabelDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issueLabel" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueLabel" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabel" } }],
            },
          },
        ],
      },
    },
    ...IssueLabelFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueLabelQuery, IssueLabelQueryVariables>;
export const IssueLabel_ChildrenDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issueLabel_children" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueLabel" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "children" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueLabelConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueLabel_ChildrenQuery, IssueLabel_ChildrenQueryVariables>;
export const IssueLabel_IssuesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issueLabel_issues" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueLabel" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "issues" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueLabel_IssuesQuery, IssueLabel_IssuesQueryVariables>;
export const IssueLabelsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issueLabels" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueLabels" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "filter" },
                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }],
            },
          },
        ],
      },
    },
    ...IssueLabelConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueLabelsQuery, IssueLabelsQueryVariables>;
export const IssuePriorityValuesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issuePriorityValues" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issuePriorityValues" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePriorityValue" } }],
            },
          },
        ],
      },
    },
    ...IssuePriorityValueFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssuePriorityValuesQuery, IssuePriorityValuesQueryVariables>;
export const IssueRelationDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issueRelation" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueRelation" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelation" } }],
            },
          },
        ],
      },
    },
    ...IssueRelationFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueRelationQuery, IssueRelationQueryVariables>;
export const IssueRelationsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issueRelations" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueRelations" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }],
            },
          },
        ],
      },
    },
    ...IssueRelationConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueRelationsQuery, IssueRelationsQueryVariables>;
export const IssueVcsBranchSearchDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issueVcsBranchSearch" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueVcsBranchSearch" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "branchName" },
                value: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Issue" } }],
            },
          },
        ],
      },
    },
    ...IssueFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueVcsBranchSearchQuery, IssueVcsBranchSearchQueryVariables>;
export const IssueVcsBranchSearch_AttachmentsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issueVcsBranchSearch_attachments" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueVcsBranchSearch" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "branchName" },
                value: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "attachments" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...AttachmentConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueVcsBranchSearch_AttachmentsQuery, IssueVcsBranchSearch_AttachmentsQueryVariables>;
export const IssueVcsBranchSearch_ChildrenDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issueVcsBranchSearch_children" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueVcsBranchSearch" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "branchName" },
                value: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "children" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueVcsBranchSearch_ChildrenQuery, IssueVcsBranchSearch_ChildrenQueryVariables>;
export const IssueVcsBranchSearch_CommentsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issueVcsBranchSearch_comments" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueVcsBranchSearch" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "branchName" },
                value: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "comments" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...CommentConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueVcsBranchSearch_CommentsQuery, IssueVcsBranchSearch_CommentsQueryVariables>;
export const IssueVcsBranchSearch_HistoryDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issueVcsBranchSearch_history" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueVcsBranchSearch" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "branchName" },
                value: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "history" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueHistoryConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueHistoryConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueVcsBranchSearch_HistoryQuery, IssueVcsBranchSearch_HistoryQueryVariables>;
export const IssueVcsBranchSearch_InverseRelationsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issueVcsBranchSearch_inverseRelations" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueVcsBranchSearch" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "branchName" },
                value: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "inverseRelations" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueRelationConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  IssueVcsBranchSearch_InverseRelationsQuery,
  IssueVcsBranchSearch_InverseRelationsQueryVariables
>;
export const IssueVcsBranchSearch_LabelsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issueVcsBranchSearch_labels" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueVcsBranchSearch" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "branchName" },
                value: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "labels" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueLabelConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueVcsBranchSearch_LabelsQuery, IssueVcsBranchSearch_LabelsQueryVariables>;
export const IssueVcsBranchSearch_RelationsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issueVcsBranchSearch_relations" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueVcsBranchSearch" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "branchName" },
                value: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "relations" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueRelationConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueVcsBranchSearch_RelationsQuery, IssueVcsBranchSearch_RelationsQueryVariables>;
export const IssueVcsBranchSearch_SubscribersDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issueVcsBranchSearch_subscribers" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issueVcsBranchSearch" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "branchName" },
                value: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "subscribers" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeDisabled" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...UserConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssueVcsBranchSearch_SubscribersQuery, IssueVcsBranchSearch_SubscribersQueryVariables>;
export const IssuesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "issues" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "issues" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "filter" },
                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
            },
          },
        ],
      },
    },
    ...IssueConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<IssuesQuery, IssuesQueryVariables>;
export const NotificationDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "notification" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "notification" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Notification" } }],
            },
          },
        ],
      },
    },
    ...NotificationFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<NotificationQuery, NotificationQueryVariables>;
export const NotificationSubscriptionDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "notificationSubscription" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "notificationSubscription" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscription" } }],
            },
          },
        ],
      },
    },
    ...NotificationSubscriptionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<NotificationSubscriptionQuery, NotificationSubscriptionQueryVariables>;
export const NotificationSubscriptionsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "notificationSubscriptions" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "notificationSubscriptions" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscriptionConnection" } },
              ],
            },
          },
        ],
      },
    },
    ...NotificationSubscriptionConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<NotificationSubscriptionsQuery, NotificationSubscriptionsQueryVariables>;
export const NotificationsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "notifications" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "notifications" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationConnection" } }],
            },
          },
        ],
      },
    },
    ...NotificationConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<NotificationsQuery, NotificationsQueryVariables>;
export const OrganizationDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "organization" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "organization" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Organization" } }],
            },
          },
        ],
      },
    },
    ...OrganizationFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<OrganizationQuery, OrganizationQueryVariables>;
export const Organization_IntegrationsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "organization_integrations" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "organization" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "integrations" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IntegrationConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Organization_IntegrationsQuery, Organization_IntegrationsQueryVariables>;
export const Organization_LabelsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "organization_labels" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "organization" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "labels" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueLabelConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Organization_LabelsQuery, Organization_LabelsQueryVariables>;
export const Organization_SubscriptionDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "organization_subscription" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "organization" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "subscription" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PaidSubscription" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...PaidSubscriptionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Organization_SubscriptionQuery, Organization_SubscriptionQueryVariables>;
export const Organization_TeamsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "organization_teams" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "organization" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "teams" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...TeamConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Organization_TeamsQuery, Organization_TeamsQueryVariables>;
export const Organization_TemplatesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "organization_templates" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "organization" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "templates" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TemplateConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...TemplateConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Organization_TemplatesQuery, Organization_TemplatesQueryVariables>;
export const Organization_UsersDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "organization_users" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "organization" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "users" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeDisabled" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...UserConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Organization_UsersQuery, Organization_UsersQueryVariables>;
export const OrganizationExistsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "organizationExists" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "urlKey" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "organizationExists" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "urlKey" },
                value: { kind: "Variable", name: { kind: "Name", value: "urlKey" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationExistsPayload" } }],
            },
          },
        ],
      },
    },
    ...OrganizationExistsPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<OrganizationExistsQuery, OrganizationExistsQueryVariables>;
export const OrganizationInviteDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "organizationInvite" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "organizationInvite" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInvite" } }],
            },
          },
        ],
      },
    },
    ...OrganizationInviteFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<OrganizationInviteQuery, OrganizationInviteQueryVariables>;
export const OrganizationInviteDetailsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "organizationInviteDetails" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "organizationInviteDetails" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInviteDetailsPayload" } },
              ],
            },
          },
        ],
      },
    },
    ...OrganizationInviteDetailsPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<OrganizationInviteDetailsQuery, OrganizationInviteDetailsQueryVariables>;
export const OrganizationInvitesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "organizationInvites" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "organizationInvites" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInviteConnection" } }],
            },
          },
        ],
      },
    },
    ...OrganizationInviteConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<OrganizationInvitesQuery, OrganizationInvitesQueryVariables>;
export const ProjectDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "project" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Project" } }],
            },
          },
        ],
      },
    },
    ...ProjectFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ProjectQuery, ProjectQueryVariables>;
export const Project_DocumentsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "project_documents" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "documents" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...DocumentConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Project_DocumentsQuery, Project_DocumentsQueryVariables>;
export const Project_IssuesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "project_issues" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "issues" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Project_IssuesQuery, Project_IssuesQueryVariables>;
export const Project_LinksDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "project_links" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "links" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLinkConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...ProjectLinkConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Project_LinksQuery, Project_LinksQueryVariables>;
export const Project_MembersDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "project_members" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "members" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeDisabled" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...UserConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Project_MembersQuery, Project_MembersQueryVariables>;
export const Project_ProjectUpdatesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "project_projectUpdates" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "projectUpdates" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...ProjectUpdateConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Project_ProjectUpdatesQuery, Project_ProjectUpdatesQueryVariables>;
export const Project_TeamsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "project_teams" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "project" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "teams" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...TeamConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Project_TeamsQuery, Project_TeamsQueryVariables>;
export const ProjectLinkDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "projectLink" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectLink" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLink" } }],
            },
          },
        ],
      },
    },
    ...ProjectLinkFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ProjectLinkQuery, ProjectLinkQueryVariables>;
export const ProjectLinksDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "projectLinks" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectLinks" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLinkConnection" } }],
            },
          },
        ],
      },
    },
    ...ProjectLinkConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ProjectLinksQuery, ProjectLinksQueryVariables>;
export const ProjectUpdateDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "projectUpdate" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectUpdate" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdate" } }],
            },
          },
        ],
      },
    },
    ...ProjectUpdateFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ProjectUpdateQuery, ProjectUpdateQueryVariables>;
export const ProjectUpdateInteractionDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "projectUpdateInteraction" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectUpdateInteraction" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateInteraction" } }],
            },
          },
        ],
      },
    },
    ...ProjectUpdateInteractionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ProjectUpdateInteractionQuery, ProjectUpdateInteractionQueryVariables>;
export const ProjectUpdateInteractionsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "projectUpdateInteractions" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectUpdateInteractions" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateInteractionConnection" } },
              ],
            },
          },
        ],
      },
    },
    ...ProjectUpdateInteractionConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ProjectUpdateInteractionsQuery, ProjectUpdateInteractionsQueryVariables>;
export const ProjectUpdatesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "projectUpdates" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projectUpdates" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateConnection" } }],
            },
          },
        ],
      },
    },
    ...ProjectUpdateConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ProjectUpdatesQuery, ProjectUpdatesQueryVariables>;
export const ProjectsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "projects" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "projects" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "filter" },
                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectConnection" } }],
            },
          },
        ],
      },
    },
    ...ProjectConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ProjectsQuery, ProjectsQueryVariables>;
export const PushSubscriptionTestDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "pushSubscriptionTest" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "pushSubscriptionTest" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PushSubscriptionTestPayload" } }],
            },
          },
        ],
      },
    },
    ...PushSubscriptionTestPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<PushSubscriptionTestQuery, PushSubscriptionTestQueryVariables>;
export const RateLimitStatusDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "rateLimitStatus" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "rateLimitStatus" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RateLimitPayload" } }],
            },
          },
        ],
      },
    },
    ...RateLimitPayloadFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<RateLimitStatusQuery, RateLimitStatusQueryVariables>;
export const RoadmapDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "roadmap" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "roadmap" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Roadmap" } }],
            },
          },
        ],
      },
    },
    ...RoadmapFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<RoadmapQuery, RoadmapQueryVariables>;
export const Roadmap_ProjectsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "roadmap_projects" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "roadmap" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "projects" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...ProjectConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Roadmap_ProjectsQuery, Roadmap_ProjectsQueryVariables>;
export const RoadmapToProjectDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "roadmapToProject" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "roadmapToProject" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapToProject" } }],
            },
          },
        ],
      },
    },
    ...RoadmapToProjectFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<RoadmapToProjectQuery, RoadmapToProjectQueryVariables>;
export const RoadmapToProjectsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "roadmapToProjects" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "roadmapToProjects" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapToProjectConnection" } }],
            },
          },
        ],
      },
    },
    ...RoadmapToProjectConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<RoadmapToProjectsQuery, RoadmapToProjectsQueryVariables>;
export const RoadmapsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "roadmaps" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "roadmaps" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapConnection" } }],
            },
          },
        ],
      },
    },
    ...RoadmapConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<RoadmapsQuery, RoadmapsQueryVariables>;
export const SsoUrlFromEmailDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "ssoUrlFromEmail" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "email" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "isDesktop" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "ssoUrlFromEmail" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "email" },
                value: { kind: "Variable", name: { kind: "Name", value: "email" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "isDesktop" },
                value: { kind: "Variable", name: { kind: "Name", value: "isDesktop" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SsoUrlFromEmailResponse" } }],
            },
          },
        ],
      },
    },
    ...SsoUrlFromEmailResponseFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<SsoUrlFromEmailQuery, SsoUrlFromEmailQueryVariables>;
export const TeamDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "team" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Team" } }],
            },
          },
        ],
      },
    },
    ...TeamFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<TeamQuery, TeamQueryVariables>;
export const Team_CyclesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "team_cycles" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "CycleFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "cycles" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CycleConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...CycleConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Team_CyclesQuery, Team_CyclesQueryVariables>;
export const Team_IssuesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "team_issues" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "issues" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Team_IssuesQuery, Team_IssuesQueryVariables>;
export const Team_LabelsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "team_labels" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "labels" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueLabelConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Team_LabelsQuery, Team_LabelsQueryVariables>;
export const Team_MembersDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "team_members" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "members" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeDisabled" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...UserConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Team_MembersQuery, Team_MembersQueryVariables>;
export const Team_MembershipsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "team_memberships" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "memberships" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...TeamMembershipConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Team_MembershipsQuery, Team_MembershipsQueryVariables>;
export const Team_ProjectsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "team_projects" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "projects" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...ProjectConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Team_ProjectsQuery, Team_ProjectsQueryVariables>;
export const Team_StatesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "team_states" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "states" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStateConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...WorkflowStateConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Team_StatesQuery, Team_StatesQueryVariables>;
export const Team_TemplatesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "team_templates" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "templates" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TemplateConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...TemplateConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Team_TemplatesQuery, Team_TemplatesQueryVariables>;
export const Team_WebhooksDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "team_webhooks" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "team" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "webhooks" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WebhookConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...WebhookConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Team_WebhooksQuery, Team_WebhooksQueryVariables>;
export const TeamMembershipDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "teamMembership" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "teamMembership" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembership" } }],
            },
          },
        ],
      },
    },
    ...TeamMembershipFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<TeamMembershipQuery, TeamMembershipQueryVariables>;
export const TeamMembershipsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "teamMemberships" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "teamMemberships" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipConnection" } }],
            },
          },
        ],
      },
    },
    ...TeamMembershipConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<TeamMembershipsQuery, TeamMembershipsQueryVariables>;
export const TeamsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "teams" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "teams" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "filter" },
                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }],
            },
          },
        ],
      },
    },
    ...TeamConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<TeamsQuery, TeamsQueryVariables>;
export const TemplateDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "template" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "template" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Template" } }],
            },
          },
        ],
      },
    },
    ...TemplateFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<TemplateQuery, TemplateQueryVariables>;
export const TemplatesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "templates" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "templates" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Template" } }],
            },
          },
        ],
      },
    },
    ...TemplateFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<TemplatesQuery, TemplatesQueryVariables>;
export const UserDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "user" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }],
            },
          },
        ],
      },
    },
    ...UserFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UserQuery, UserQueryVariables>;
export const User_AssignedIssuesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "user_assignedIssues" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "assignedIssues" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<User_AssignedIssuesQuery, User_AssignedIssuesQueryVariables>;
export const User_CreatedIssuesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "user_createdIssues" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "createdIssues" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<User_CreatedIssuesQuery, User_CreatedIssuesQueryVariables>;
export const User_TeamMembershipsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "user_teamMemberships" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "teamMemberships" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...TeamMembershipConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<User_TeamMembershipsQuery, User_TeamMembershipsQueryVariables>;
export const User_TeamsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "user_teams" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "user" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "teams" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...TeamConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<User_TeamsQuery, User_TeamsQueryVariables>;
export const UserSettingsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "userSettings" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "userSettings" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettings" } }],
            },
          },
        ],
      },
    },
    ...UserSettingsFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UserSettingsQuery, UserSettingsQueryVariables>;
export const UsersDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "users" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "users" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "filter" },
                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeDisabled" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }],
            },
          },
        ],
      },
    },
    ...UserConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<UsersQuery, UsersQueryVariables>;
export const ViewerDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "viewer" },
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "viewer" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }],
            },
          },
        ],
      },
    },
    ...UserFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ViewerQuery, ViewerQueryVariables>;
export const Viewer_AssignedIssuesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "viewer_assignedIssues" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "viewer" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "assignedIssues" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Viewer_AssignedIssuesQuery, Viewer_AssignedIssuesQueryVariables>;
export const Viewer_CreatedIssuesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "viewer_createdIssues" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "viewer" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "createdIssues" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Viewer_CreatedIssuesQuery, Viewer_CreatedIssuesQueryVariables>;
export const Viewer_TeamMembershipsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "viewer_teamMemberships" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "viewer" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "teamMemberships" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...TeamMembershipConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Viewer_TeamMembershipsQuery, Viewer_TeamMembershipsQueryVariables>;
export const Viewer_TeamsDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "viewer_teams" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "viewer" },
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "teams" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...TeamConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<Viewer_TeamsQuery, Viewer_TeamsQueryVariables>;
export const WebhookDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "webhook" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "webhook" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Webhook" } }],
            },
          },
        ],
      },
    },
    ...WebhookFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<WebhookQuery, WebhookQueryVariables>;
export const WebhooksDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "webhooks" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "webhooks" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WebhookConnection" } }],
            },
          },
        ],
      },
    },
    ...WebhookConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<WebhooksQuery, WebhooksQueryVariables>;
export const WorkflowStateDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "workflowState" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "workflowState" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowState" } }],
            },
          },
        ],
      },
    },
    ...WorkflowStateFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<WorkflowStateQuery, WorkflowStateQueryVariables>;
export const WorkflowState_IssuesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "workflowState_issues" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
          type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "workflowState" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "id" },
                value: { kind: "Variable", name: { kind: "Name", value: "id" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "issues" },
                  arguments: [
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "after" },
                      value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "before" },
                      value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "filter" },
                      value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "first" },
                      value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "includeArchived" },
                      value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "last" },
                      value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                    },
                    {
                      kind: "Argument",
                      name: { kind: "Name", value: "orderBy" },
                      value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                    },
                  ],
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...IssueConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<WorkflowState_IssuesQuery, WorkflowState_IssuesQueryVariables>;
export const WorkflowStatesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "workflowStates" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateFilter" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
        },
        {
          kind: "VariableDefinition",
          variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
          type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "workflowStates" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "after" },
                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "before" },
                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "filter" },
                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "first" },
                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "includeArchived" },
                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "last" },
                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "orderBy" },
                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStateConnection" } }],
            },
          },
        ],
      },
    },
    ...WorkflowStateConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<WorkflowStatesQuery, WorkflowStatesQueryVariables>;
