diff --git a/node_modules/commander/index.js b/node_modules/commander/index.js
index 69469f7..46ed35a 100644
--- a/node_modules/commander/index.js
+++ b/node_modules/commander/index.js
@@ -2,18 +2,18 @@
  * Module dependencies.
  */
 
-var EventEmitter = require('events').EventEmitter;
-var spawn = require('child_process').spawn;
-var path = require('path');
+var EventEmitter = require("events").EventEmitter;
+var spawn = require("child_process").spawn;
+var path = require("path");
 var dirname = path.dirname;
 var basename = path.basename;
-var fs = require('fs');
+var fs = require("fs");
 
 /**
  * Inherit `Command` from `EventEmitter.prototype`.
  */
 
-require('util').inherits(Command, EventEmitter);
+require("util").inherits(Command, EventEmitter);
 
 /**
  * Expose the root command.
@@ -43,13 +43,13 @@ exports.Option = Option;
 
 function Option(flags, description) {
   this.flags = flags;
-  this.required = flags.indexOf('<') >= 0;
-  this.optional = flags.indexOf('[') >= 0;
-  this.negate = flags.indexOf('-no-') !== -1;
+  this.required = flags.indexOf("<") >= 0;
+  this.optional = flags.indexOf("[") >= 0;
+  this.negate = flags.indexOf("-no-") !== -1;
   flags = flags.split(/[ ,|]+/);
   if (flags.length > 1 && !/^[[<]/.test(flags[1])) this.short = flags.shift();
   this.long = flags.shift();
-  this.description = description || '';
+  this.description = description || "";
 }
 
 /**
@@ -60,7 +60,7 @@ function Option(flags, description) {
  */
 
 Option.prototype.name = function() {
-  return this.long.replace(/^--/, '');
+  return this.long.replace(/^--/, "");
 };
 
 /**
@@ -72,7 +72,7 @@ Option.prototype.name = function() {
  */
 
 Option.prototype.attributeName = function() {
-  return camelcase(this.name().replace(/^no-/, ''));
+  return camelcase(this.name().replace(/^no-/, ""));
 };
 
 /**
@@ -100,12 +100,12 @@ function Command(name) {
   this._execs = new Set();
   this._allowUnknownOption = false;
   this._args = [];
-  this._name = name || '';
+  this._name = name || "";
 
-  this._helpFlags = '-h, --help';
-  this._helpDescription = 'output usage information';
-  this._helpShortFlag = '-h';
-  this._helpLongFlag = '--help';
+  this._helpFlags = "-h, --help";
+  this._helpDescription = "output usage information";
+  this._helpShortFlag = "-h";
+  this._helpLongFlag = "--help";
 }
 
 /**
@@ -138,7 +138,7 @@ function Command(name) {
 Command.prototype.command = function(nameAndArgs, actionOptsOrExecDesc, execOpts) {
   var desc = actionOptsOrExecDesc;
   var opts = execOpts;
-  if (typeof desc === 'object' && desc !== null) {
+  if (typeof desc === "object" && desc !== null) {
     opts = desc;
     desc = null;
   }
@@ -184,7 +184,7 @@ Command.prototype.arguments = function(desc) {
  */
 
 Command.prototype.addImplicitHelpCommand = function() {
-  this.command('help [cmd]', 'display help for [cmd]');
+  this.command("help [cmd]", "display help for [cmd]");
 };
 
 /**
@@ -203,21 +203,21 @@ Command.prototype.parseExpectedArgs = function(args) {
   args.forEach(function(arg) {
     var argDetails = {
       required: false,
-      name: '',
-      variadic: false
+      name: "",
+      variadic: false,
     };
 
     switch (arg[0]) {
-      case '<':
+      case "<":
         argDetails.required = true;
         argDetails.name = arg.slice(1, -1);
         break;
-      case '[':
+      case "[":
         argDetails.name = arg.slice(1, -1);
         break;
     }
 
-    if (argDetails.name.length > 3 && argDetails.name.slice(-3) === '...') {
+    if (argDetails.name.length > 3 && argDetails.name.slice(-3) === "...") {
       argDetails.variadic = true;
       argDetails.name = argDetails.name.slice(0, -3);
     }
@@ -291,9 +291,9 @@ Command.prototype.action = function(fn) {
     fn.apply(self, args);
   };
   var parent = this.parent || this;
-  var name = parent === this ? '*' : this._name;
-  parent.on('command:' + name, listener);
-  if (this._alias) parent.on('command:' + this._alias, listener);
+  var name = parent === this ? "*" : this._name;
+  parent.on("command:" + name, listener);
+  if (this._alias) parent.on("command:" + this._alias, listener);
   return this;
 };
 
@@ -356,7 +356,7 @@ Command.prototype.option = function(flags, description, fn, defaultValue) {
     name = option.attributeName();
 
   // default as 3rd arg
-  if (typeof fn !== 'function') {
+  if (typeof fn !== "function") {
     if (fn instanceof RegExp) {
       // This is a bit simplistic (especially no error messages), and probably better handled by caller using custom option processing.
       // No longer documented in README, but still present for backwards compatibility.
@@ -372,7 +372,7 @@ Command.prototype.option = function(flags, description, fn, defaultValue) {
   }
 
   // preassign default value for --no-*, [optional], <required>, or plain flag if boolean value
-  if (option.negate || option.optional || option.required || typeof defaultValue === 'boolean') {
+  if (option.negate || option.optional || option.required || typeof defaultValue === "boolean") {
     // when --no-foo we make sure default is true, unless a --foo option is already defined
     if (option.negate) {
       var opts = self.opts();
@@ -390,19 +390,17 @@ Command.prototype.option = function(flags, description, fn, defaultValue) {
 
   // when it's passed assign the value
   // and conditionally invoke the callback
-  this.on('option:' + oname, function(val) {
+  this.on("option:" + oname, function(val) {
     // coercion
     if (val !== null && fn) {
       val = fn(val, self[name] === undefined ? defaultValue : self[name]);
     }
 
     // unassigned or boolean value
-    if (typeof self[name] === 'boolean' || typeof self[name] === 'undefined') {
+    if (typeof self[name] === "boolean" || typeof self[name] === "undefined") {
       // if no value, negate false, and we have a default, then use it!
       if (val == null) {
-        self[name] = option.negate
-          ? false
-          : defaultValue || true;
+        self[name] = option.negate ? false : defaultValue || true;
       } else {
         self[name] = val;
       }
@@ -443,7 +441,7 @@ Command.prototype.parse = function(argv) {
   this.rawArgs = argv;
 
   // guess name
-  this._name = this._name || basename(argv[1], '.js');
+  this._name = this._name || basename(argv[1], ".js");
 
   // github-style sub-commands with no sub-command
   if (this.executables && argv.length < 3 && !this.defaultExecutable) {
@@ -454,14 +452,14 @@ Command.prototype.parse = function(argv) {
   // process argv
   var normalized = this.normalize(argv.slice(2));
   var parsed = this.parseOptions(normalized);
-  var args = this.args = parsed.args;
+  var args = (this.args = parsed.args);
 
   var result = this.parseArgs(this.args, parsed.unknown);
 
-  if (args[0] === 'help' && args.length === 1) this.help();
+  if (args[0] === "help" && args.length === 1) this.help();
 
   // <cmd> --help
-  if (args[0] === 'help') {
+  if (args[0] === "help") {
     args[0] = args[1];
     args[1] = this._helpLongFlag;
   }
@@ -525,12 +523,12 @@ Command.prototype.executeSubCommand = function(argv, args, unknown, executableFi
   // executable
   var pm = argv[1];
   // name of the subcommand, like `pm-install`
-  var bin = basename(pm, path.extname(pm)) + '-' + args[0];
+  var bin = basename(pm, path.extname(pm)) + "-" + args[0];
   if (executableFile != null) {
     bin = executableFile;
     // Check for same extensions as we scan for below so get consistent launch behaviour.
     var executableExt = path.extname(executableFile);
-    isExplicitJS = executableExt === '.js' || executableExt === '.ts' || executableExt === '.mjs';
+    isExplicitJS = executableExt === ".js" || executableExt === ".ts" || executableExt === ".mjs";
   }
 
   // In case of globally installed, get the base dir where executable
@@ -545,14 +543,14 @@ Command.prototype.executeSubCommand = function(argv, args, unknown, executableFi
   var localBin = path.join(baseDir, bin);
 
   // whether bin file is a js script with explicit `.js` or `.ts` extension
-  if (exists(localBin + '.js')) {
-    bin = localBin + '.js';
+  if (exists(localBin + ".js")) {
+    bin = localBin + ".js";
     isExplicitJS = true;
-  } else if (exists(localBin + '.ts')) {
-    bin = localBin + '.ts';
+  } else if (exists(localBin + ".ts")) {
+    bin = localBin + ".ts";
     isExplicitJS = true;
-  } else if (exists(localBin + '.mjs')) {
-    bin = localBin + '.mjs';
+  } else if (exists(localBin + ".mjs")) {
+    bin = localBin + ".mjs";
     isExplicitJS = true;
   } else if (exists(localBin)) {
     bin = localBin;
@@ -561,24 +559,24 @@ Command.prototype.executeSubCommand = function(argv, args, unknown, executableFi
   args = args.slice(1);
 
   var proc;
-  if (process.platform !== 'win32') {
+  if (process.platform !== "win32") {
     if (isExplicitJS) {
       args.unshift(bin);
       // add executable arguments to spawn
       args = incrementNodeInspectorPort(process.execArgv).concat(args);
 
-      proc = spawn(process.argv[0], args, { stdio: 'inherit', customFds: [0, 1, 2] });
+      proc = spawn(process.argv[0], args, { stdio: "inherit", customFds: [0, 1, 2] });
     } else {
-      proc = spawn(bin, args, { stdio: 'inherit', customFds: [0, 1, 2] });
+      proc = spawn(bin, args, { stdio: "inherit", customFds: [0, 1, 2] });
     }
   } else {
     args.unshift(bin);
     // add executable arguments to spawn
     args = incrementNodeInspectorPort(process.execArgv).concat(args);
-    proc = spawn(process.execPath, args, { stdio: 'inherit' });
+    proc = spawn(process.execPath, args, { stdio: "inherit" });
   }
 
-  var signals = ['SIGUSR1', 'SIGUSR2', 'SIGTERM', 'SIGINT', 'SIGHUP'];
+  var signals = ["SIGUSR1", "SIGUSR2", "SIGTERM", "SIGINT", "SIGHUP"];
   signals.forEach(function(signal) {
     process.on(signal, function() {
       if (proc.killed === false && proc.exitCode === null) {
@@ -586,12 +584,12 @@ Command.prototype.executeSubCommand = function(argv, args, unknown, executableFi
       }
     });
   });
-  proc.on('close', process.exit.bind(process));
-  proc.on('error', function(err) {
-    if (err.code === 'ENOENT') {
-      console.error('error: %s(1) does not exist, try --help', bin);
-    } else if (err.code === 'EACCES') {
-      console.error('error: %s(1) not executable. try chmod or run with root', bin);
+  proc.on("close", process.exit.bind(process));
+  proc.on("error", function(err) {
+    if (err.code === "ENOENT") {
+      console.error("error: %s(1) does not exist, try --help", bin);
+    } else if (err.code === "EACCES") {
+      console.error("error: %s(1) not executable. try chmod or run with root", bin);
     }
     process.exit(1);
   });
@@ -624,24 +622,27 @@ Command.prototype.normalize = function(args) {
       lastOpt = this.optionFor(args[i - 1]);
     }
 
-    if (arg === '--') {
+    if (arg === "--") {
       // Honor option terminator
       ret = ret.concat(args.slice(i));
       break;
     } else if (lastOpt && lastOpt.required) {
       ret.push(arg);
-    } else if (arg.length > 2 && arg[0] === '-' && arg[1] !== '-') {
+    } else if (arg.length > 2 && arg[0] === "-" && arg[1] !== "-") {
       short = arg.slice(0, 2);
       opt = this.optionFor(short);
       if (opt && (opt.required || opt.optional)) {
         ret.push(short);
         ret.push(arg.slice(2));
       } else {
-        arg.slice(1).split('').forEach(function(c) {
-          ret.push('-' + c);
-        });
+        arg
+          .slice(1)
+          .split("")
+          .forEach(function(c) {
+            ret.push("-" + c);
+          });
       }
-    } else if (/^--/.test(arg) && ~(index = arg.indexOf('='))) {
+    } else if (/^--/.test(arg) && ~(index = arg.indexOf("="))) {
       ret.push(arg.slice(0, index), arg.slice(index + 1));
     } else {
       ret.push(arg);
@@ -668,10 +669,10 @@ Command.prototype.parseArgs = function(args, unknown) {
 
   if (args.length) {
     name = args[0];
-    if (this.listeners('command:' + name).length) {
-      this.emit('command:' + args.shift(), args, unknown);
+    if (this.listeners("command:" + name).length) {
+      this.emit("command:" + args.shift(), args, unknown);
     } else {
-      this.emit('command:*', args);
+      this.emit("command:*", args);
     }
   } else {
     outputHelpIfNecessary(this, unknown);
@@ -681,9 +682,13 @@ Command.prototype.parseArgs = function(args, unknown) {
     if (unknown.length > 0) {
       this.unknownOption(unknown[0]);
     }
-    if (this.commands.length === 0 &&
-        this._args.filter(function(a) { return a.required; }).length === 0) {
-      this.emit('command:*');
+    if (
+      (this.commands.length !== 1 || this.commands[0]._name !== "*") &&
+      this._args.filter(function(a) {
+        return a.required;
+      }).length === 0
+    ) {
+      this.emit("command:*");
     }
   }
 
@@ -734,7 +739,7 @@ Command.prototype.parseOptions = function(argv) {
       continue;
     }
 
-    if (arg === '--') {
+    if (arg === "--") {
       literal = true;
       continue;
     }
@@ -748,31 +753,31 @@ Command.prototype.parseOptions = function(argv) {
       if (option.required) {
         arg = argv[++i];
         if (arg == null) return this.optionMissingArgument(option);
-        this.emit('option:' + option.name(), arg);
-      // optional arg
+        this.emit("option:" + option.name(), arg);
+        // optional arg
       } else if (option.optional) {
         arg = argv[i + 1];
-        if (arg == null || (arg[0] === '-' && arg !== '-')) {
+        if (arg == null || (arg[0] === "-" && arg !== "-")) {
           arg = null;
         } else {
           ++i;
         }
-        this.emit('option:' + option.name(), arg);
-      // flag
+        this.emit("option:" + option.name(), arg);
+        // flag
       } else {
-        this.emit('option:' + option.name());
+        this.emit("option:" + option.name());
       }
       continue;
     }
 
     // looks like an option
-    if (arg.length > 1 && arg[0] === '-') {
+    if (arg.length > 1 && arg[0] === "-") {
       unknownOptions.push(arg);
 
       // If the next argument looks like it might be
       // an argument for this option, we pass it on.
       // If it isn't, then it'll simply be ignored
-      if ((i + 1) < argv.length && (argv[i + 1][0] !== '-' || argv[i + 1] === '-')) {
+      if (i + 1 < argv.length && (argv[i + 1][0] !== "-" || argv[i + 1] === "-")) {
         unknownOptions.push(argv[++i]);
       }
       continue;
@@ -874,13 +879,13 @@ Command.prototype.variadicArgNotLast = function(name) {
 Command.prototype.version = function(str, flags, description) {
   if (arguments.length === 0) return this._version;
   this._version = str;
-  flags = flags || '-V, --version';
-  description = description || 'output the version number';
+  flags = flags || "-V, --version";
+  description = description || "output the version number";
   var versionOption = new Option(flags, description);
-  this._versionOptionName = versionOption.long.substr(2) || 'version';
+  this._versionOptionName = versionOption.long.substr(2) || "version";
   this.options.push(versionOption);
-  this.on('option:' + this._versionOptionName, function() {
-    process.stdout.write(str + '\n');
+  this.on("option:" + this._versionOptionName, function() {
+    process.stdout.write(str + "\n");
     process.exit(0);
   });
   return this;
@@ -918,7 +923,7 @@ Command.prototype.alias = function(alias) {
 
   if (arguments.length === 0) return command._alias;
 
-  if (alias === command._name) throw new Error('Command alias can\'t be the same as its name');
+  if (alias === command._name) throw new Error("Command alias can't be the same as its name");
 
   command._alias = alias;
   return this;
@@ -937,9 +942,8 @@ Command.prototype.usage = function(str) {
     return humanReadableArgName(arg);
   });
 
-  var usage = '[options]' +
-    (this.commands.length ? ' [command]' : '') +
-    (this._args.length ? ' ' + args.join(' ') : '');
+  var usage =
+    "[options]" + (this.commands.length ? " [command]" : "") + (this._args.length ? " " + args.join(" ") : "");
 
   if (arguments.length === 0) return this._usage || usage;
   this._usage = str;
@@ -969,21 +973,25 @@ Command.prototype.name = function(str) {
  */
 
 Command.prototype.prepareCommands = function() {
-  return this.commands.filter(function(cmd) {
-    return !cmd._noHelp;
-  }).map(function(cmd) {
-    var args = cmd._args.map(function(arg) {
-      return humanReadableArgName(arg);
-    }).join(' ');
-
-    return [
-      cmd._name +
-        (cmd._alias ? '|' + cmd._alias : '') +
-        (cmd.options.length ? ' [options]' : '') +
-        (args ? ' ' + args : ''),
-      cmd._description
-    ];
-  });
+  return this.commands
+    .filter(function(cmd) {
+      return !cmd._noHelp;
+    })
+    .map(function(cmd) {
+      var args = cmd._args
+        .map(function(arg) {
+          return humanReadableArgName(arg);
+        })
+        .join(" ");
+
+      return [
+        cmd._name +
+          (cmd._alias ? "|" + cmd._alias : "") +
+          (cmd.options.length ? " [options]" : "") +
+          (args ? " " + args : ""),
+        cmd._description,
+      ];
+    });
 };
 
 /**
@@ -1010,7 +1018,7 @@ Command.prototype.largestCommandLength = function() {
 Command.prototype.largestOptionLength = function() {
   var options = [].slice.call(this.options);
   options.push({
-    flags: this._helpFlags
+    flags: this._helpFlags,
   });
 
   return options.reduce(function(max, option) {
@@ -1066,11 +1074,19 @@ Command.prototype.optionHelp = function() {
   var width = this.padWidth();
 
   // Append the help information
-  return this.options.map(function(option) {
-    return pad(option.flags, width) + '  ' + option.description +
-      ((!option.negate && option.defaultValue !== undefined) ? ' (default: ' + JSON.stringify(option.defaultValue) + ')' : '');
-  }).concat([pad(this._helpFlags, width) + '  ' + this._helpDescription])
-    .join('\n');
+  return this.options
+    .map(function(option) {
+      return (
+        pad(option.flags, width) +
+        "  " +
+        option.description +
+        (!option.negate && option.defaultValue !== undefined
+          ? " (default: " + JSON.stringify(option.defaultValue) + ")"
+          : "")
+      );
+    })
+    .concat([pad(this._helpFlags, width) + "  " + this._helpDescription])
+    .join("\n");
 };
 
 /**
@@ -1081,19 +1097,22 @@ Command.prototype.optionHelp = function() {
  */
 
 Command.prototype.commandHelp = function() {
-  if (!this.commands.length) return '';
+  if (!this.commands.length) return "";
 
   var commands = this.prepareCommands();
   var width = this.padWidth();
 
   return [
-    'Commands:',
-    commands.map(function(cmd) {
-      var desc = cmd[1] ? '  ' + cmd[1] : '';
-      return (desc ? pad(cmd[0], width) : cmd[0]) + desc;
-    }).join('\n').replace(/^/gm, '  '),
-    ''
-  ].join('\n');
+    "Commands:",
+    commands
+      .map(function(cmd) {
+        var desc = cmd[1] ? "  " + cmd[1] : "";
+        return (desc ? pad(cmd[0], width) : cmd[0]) + desc;
+      })
+      .join("\n")
+      .replace(/^/gm, "  "),
+    "",
+  ].join("\n");
 };
 
 /**
@@ -1106,51 +1125,41 @@ Command.prototype.commandHelp = function() {
 Command.prototype.helpInformation = function() {
   var desc = [];
   if (this._description) {
-    desc = [
-      this._description,
-      ''
-    ];
+    desc = [this._description, ""];
 
     var argsDescription = this._argsDescription;
     if (argsDescription && this._args.length) {
       var width = this.padWidth();
-      desc.push('Arguments:');
-      desc.push('');
+      desc.push("Arguments:");
+      desc.push("");
       this._args.forEach(function(arg) {
-        desc.push('  ' + pad(arg.name, width) + '  ' + argsDescription[arg.name]);
+        desc.push("  " + pad(arg.name, width) + "  " + argsDescription[arg.name]);
       });
-      desc.push('');
+      desc.push("");
     }
   }
 
   var cmdName = this._name;
   if (this._alias) {
-    cmdName = cmdName + '|' + this._alias;
+    cmdName = cmdName + "|" + this._alias;
   }
-  var parentCmdNames = '';
+  var parentCmdNames = "";
   for (var parentCmd = this.parent; parentCmd; parentCmd = parentCmd.parent) {
-    parentCmdNames = parentCmd.name() + ' ' + parentCmdNames;
+    parentCmdNames = parentCmd.name() + " " + parentCmdNames;
   }
-  var usage = [
-    'Usage: ' + parentCmdNames + cmdName + ' ' + this.usage(),
-    ''
-  ];
+  var usage = ["Usage: " + parentCmdNames + cmdName + " " + this.usage(), ""];
 
   var cmds = [];
   var commandHelp = this.commandHelp();
   if (commandHelp) cmds = [commandHelp];
 
-  var options = [
-    'Options:',
-    '' + this.optionHelp().replace(/^/gm, '  '),
-    ''
-  ];
+  var options = ["Options:", "" + this.optionHelp().replace(/^/gm, "  "), ""];
 
   return usage
     .concat(desc)
     .concat(options)
     .concat(cmds)
-    .join('\n');
+    .join("\n");
 };
 
 /**
@@ -1169,8 +1178,8 @@ Command.prototype.outputHelp = function(cb) {
     };
   }
   const cbOutput = cb(this.helpInformation());
-  if (typeof cbOutput !== 'string' && !Buffer.isBuffer(cbOutput)) {
-    throw new Error('outputHelp callback must return a string or a Buffer');
+  if (typeof cbOutput !== "string" && !Buffer.isBuffer(cbOutput)) {
+    throw new Error("outputHelp callback must return a string or a Buffer");
   }
   process.stdout.write(cbOutput);
   this.emit(this._helpLongFlag);
@@ -1220,7 +1229,7 @@ Command.prototype.help = function(cb) {
  */
 
 function camelcase(flag) {
-  return flag.split('-').reduce(function(str, word) {
+  return flag.split("-").reduce(function(str, word) {
     return str + word[0].toUpperCase() + word.slice(1);
   });
 }
@@ -1236,7 +1245,7 @@ function camelcase(flag) {
 
 function pad(str, width) {
   var len = Math.max(0, width - str.length);
-  return str + Array(len + 1).join(' ');
+  return str + Array(len + 1).join(" ");
 }
 
 /**
@@ -1267,11 +1276,9 @@ function outputHelpIfNecessary(cmd, options) {
  */
 
 function humanReadableArgName(arg) {
-  var nameOutput = arg.name + (arg.variadic === true ? '...' : '');
+  var nameOutput = arg.name + (arg.variadic === true ? "..." : "");
 
-  return arg.required
-    ? '<' + nameOutput + '>'
-    : '[' + nameOutput + ']';
+  return arg.required ? "<" + nameOutput + ">" : "[" + nameOutput + "]";
 }
 
 // for versions before node v0.8 when there weren't `fs.existsSync`
@@ -1298,12 +1305,12 @@ function incrementNodeInspectorPort(args) {
   //  --inspect[=[host:]port]
   //  --inspect-brk[=[host:]port]
   //  --inspect-port=[host:]port
-  return args.map((arg) => {
+  return args.map(arg => {
     var result = arg;
-    if (arg.indexOf('--inspect') === 0) {
+    if (arg.indexOf("--inspect") === 0) {
       var debugOption;
-      var debugHost = '127.0.0.1';
-      var debugPort = '9229';
+      var debugHost = "127.0.0.1";
+      var debugPort = "9229";
       var match;
       if ((match = arg.match(/^(--inspect(-brk)?)$/)) !== null) {
         // e.g. --inspect
@@ -1324,7 +1331,7 @@ function incrementNodeInspectorPort(args) {
         debugPort = match[4];
       }
 
-      if (debugOption && debugPort !== '0') {
+      if (debugOption && debugPort !== "0") {
         result = `${debugOption}=${debugHost}:${parseInt(debugPort) + 1}`;
       }
     }
